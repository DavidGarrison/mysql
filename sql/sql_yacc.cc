/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse MYSQLparse
#define yylex   MYSQLlex
#define yyerror MYSQLerror
#define yylval  MYSQLlval
#define yychar  MYSQLchar
#define yydebug MYSQLdebug
#define yynerrs MYSQLnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CHAIN_SYM = 309,
     CHANGE = 310,
     CHANGED = 311,
     CHARSET = 312,
     CHAR_SYM = 313,
     CHECKSUM_SYM = 314,
     CHECK_SYM = 315,
     CIPHER_SYM = 316,
     CLIENT_SYM = 317,
     CLOSE_SYM = 318,
     COALESCE = 319,
     CODE_SYM = 320,
     COLLATE_SYM = 321,
     COLLATION_SYM = 322,
     COLUMNS = 323,
     COLUMN_SYM = 324,
     COMMENT_SYM = 325,
     COMMITTED_SYM = 326,
     COMMIT_SYM = 327,
     COMPACT_SYM = 328,
     COMPLETION_SYM = 329,
     COMPRESSED_SYM = 330,
     CONCURRENT = 331,
     CONDITION_SYM = 332,
     CONNECTION_SYM = 333,
     CONSISTENT_SYM = 334,
     CONSTRAINT = 335,
     CONTAINS_SYM = 336,
     CONTEXT_SYM = 337,
     CONTINUE_SYM = 338,
     CONTRIBUTORS_SYM = 339,
     CONVERT_SYM = 340,
     COUNT_SYM = 341,
     CPU_SYM = 342,
     CREATE = 343,
     CROSS = 344,
     CUBE_SYM = 345,
     CURDATE = 346,
     CURRENT_SYM = 347,
     CURRENT_USER = 348,
     CURSOR_SYM = 349,
     CURTIME = 350,
     DATABASE = 351,
     DATABASES = 352,
     DATAFILE_SYM = 353,
     DATA_SYM = 354,
     DATETIME = 355,
     DATE_ADD_INTERVAL = 356,
     DATE_SUB_INTERVAL = 357,
     DATE_SYM = 358,
     DAY_HOUR_SYM = 359,
     DAY_MICROSECOND_SYM = 360,
     DAY_MINUTE_SYM = 361,
     DAY_SECOND_SYM = 362,
     DAY_SYM = 363,
     DEALLOCATE_SYM = 364,
     DECIMAL_NUM = 365,
     DECIMAL_SYM = 366,
     DECLARE_SYM = 367,
     DEFAULT = 368,
     DEFINER_SYM = 369,
     DELAYED_SYM = 370,
     DELAY_KEY_WRITE_SYM = 371,
     DELETE_SYM = 372,
     DESC = 373,
     DESCRIBE = 374,
     DES_KEY_FILE = 375,
     DETERMINISTIC_SYM = 376,
     DIRECTORY_SYM = 377,
     DISABLE_SYM = 378,
     DISCARD = 379,
     DISK_SYM = 380,
     DISTINCT = 381,
     DIV_SYM = 382,
     DOUBLE_SYM = 383,
     DO_SYM = 384,
     DROP = 385,
     DUAL_SYM = 386,
     DUMPFILE = 387,
     DUPLICATE_SYM = 388,
     DYNAMIC_SYM = 389,
     EACH_SYM = 390,
     ELSE = 391,
     ELSEIF_SYM = 392,
     ENABLE_SYM = 393,
     ENCLOSED = 394,
     END = 395,
     ENDS_SYM = 396,
     END_OF_INPUT = 397,
     ENGINES_SYM = 398,
     ENGINE_SYM = 399,
     ENUM = 400,
     EQ = 401,
     EQUAL_SYM = 402,
     ERRORS = 403,
     ESCAPED = 404,
     ESCAPE_SYM = 405,
     EVENTS_SYM = 406,
     EVENT_SYM = 407,
     EVERY_SYM = 408,
     EXECUTE_SYM = 409,
     EXISTS = 410,
     EXIT_SYM = 411,
     EXPANSION_SYM = 412,
     EXTENDED_SYM = 413,
     EXTENT_SIZE_SYM = 414,
     EXTRACT_SYM = 415,
     FALSE_SYM = 416,
     FAST_SYM = 417,
     FAULTS_SYM = 418,
     FETCH_SYM = 419,
     FILE_SYM = 420,
     FIRST_SYM = 421,
     FIXED_SYM = 422,
     FLOAT_NUM = 423,
     FLOAT_SYM = 424,
     FLUSH_SYM = 425,
     FOLLOWING_SYM = 426,
     FORCE_SYM = 427,
     FOREIGN = 428,
     FOR_SYM = 429,
     FOUND_SYM = 430,
     FRAC_SECOND_SYM = 431,
     FROM = 432,
     FULL = 433,
     FULLTEXT_SYM = 434,
     FUNCTION_SYM = 435,
     GE = 436,
     GEOMETRYCOLLECTION = 437,
     GEOMETRY_SYM = 438,
     GET_FORMAT = 439,
     GLOBAL_SYM = 440,
     GRANT = 441,
     GRANTS = 442,
     GROUP_SYM = 443,
     GROUP_CONCAT_SYM = 444,
     GT_SYM = 445,
     HANDLER_SYM = 446,
     HASH_SYM = 447,
     HAVING = 448,
     HELP_SYM = 449,
     HEX_NUM = 450,
     HIGH_PRIORITY = 451,
     HOST_SYM = 452,
     HOSTS_SYM = 453,
     HOUR_MICROSECOND_SYM = 454,
     HOUR_MINUTE_SYM = 455,
     HOUR_SECOND_SYM = 456,
     HOUR_SYM = 457,
     IDENT = 458,
     IDENTIFIED_SYM = 459,
     IDENT_QUOTED = 460,
     IF = 461,
     IGNORE_SYM = 462,
     IMPORT = 463,
     INDEXES = 464,
     INDEX_SYM = 465,
     INFILE = 466,
     INITIAL_SIZE_SYM = 467,
     INNER_SYM = 468,
     INNOBASE_SYM = 469,
     INOUT_SYM = 470,
     INSENSITIVE_SYM = 471,
     INSERT = 472,
     INSERT_METHOD = 473,
     INSTALL_SYM = 474,
     INTERVAL_SYM = 475,
     INTO = 476,
     INT_SYM = 477,
     INVOKER_SYM = 478,
     IN_SYM = 479,
     IO_SYM = 480,
     IPC_SYM = 481,
     IS = 482,
     ISOLATION = 483,
     ISSUER_SYM = 484,
     ITERATE_SYM = 485,
     JOIN_SYM = 486,
     KEYS = 487,
     KEY_BLOCK_SIZE = 488,
     KEY_SYM = 489,
     KILL_SYM = 490,
     LANGUAGE_SYM = 491,
     LAST_SYM = 492,
     LE = 493,
     LEADING = 494,
     LEAVES = 495,
     LEAVE_SYM = 496,
     LEFT = 497,
     LESS_SYM = 498,
     LEVEL_SYM = 499,
     LEX_HOSTNAME = 500,
     LIKE = 501,
     LIMIT = 502,
     LINEAR_SYM = 503,
     LINES = 504,
     LINESTRING = 505,
     LIST_SYM = 506,
     LOAD = 507,
     LOCAL_SYM = 508,
     LOCATOR_SYM = 509,
     LOCKS_SYM = 510,
     LOCK_SYM = 511,
     LOGFILE_SYM = 512,
     LOGS_SYM = 513,
     LONGBLOB = 514,
     LONGTEXT = 515,
     LONG_NUM = 516,
     LONG_SYM = 517,
     LOOP_SYM = 518,
     LOW_PRIORITY = 519,
     LT = 520,
     MASTER_CONNECT_RETRY_SYM = 521,
     MASTER_HOST_SYM = 522,
     MASTER_LOG_FILE_SYM = 523,
     MASTER_LOG_POS_SYM = 524,
     MASTER_PASSWORD_SYM = 525,
     MASTER_PORT_SYM = 526,
     MASTER_SERVER_ID_SYM = 527,
     MASTER_SSL_CAPATH_SYM = 528,
     MASTER_SSL_CA_SYM = 529,
     MASTER_SSL_CERT_SYM = 530,
     MASTER_SSL_CIPHER_SYM = 531,
     MASTER_SSL_KEY_SYM = 532,
     MASTER_SSL_SYM = 533,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 534,
     MASTER_SYM = 535,
     MASTER_USER_SYM = 536,
     MATCH = 537,
     MAX_CONNECTIONS_PER_HOUR = 538,
     MAX_QUERIES_PER_HOUR = 539,
     MAX_ROWS = 540,
     MAX_SIZE_SYM = 541,
     MAX_SYM = 542,
     MAX_UPDATES_PER_HOUR = 543,
     MAX_USER_CONNECTIONS_SYM = 544,
     MAX_VALUE_SYM = 545,
     MEDIUMBLOB = 546,
     MEDIUMINT = 547,
     MEDIUMTEXT = 548,
     MEDIUM_SYM = 549,
     MEMORY_SYM = 550,
     MERGE_SYM = 551,
     MICROSECOND_SYM = 552,
     MIGRATE_SYM = 553,
     MINUTE_MICROSECOND_SYM = 554,
     MINUTE_SECOND_SYM = 555,
     MINUTE_SYM = 556,
     MIN_ROWS = 557,
     MIN_SYM = 558,
     MODE_SYM = 559,
     MODIFIES_SYM = 560,
     MODIFY_SYM = 561,
     MOD_SYM = 562,
     MONTH_SYM = 563,
     MULTILINESTRING = 564,
     MULTIPOINT = 565,
     MULTIPOLYGON = 566,
     MUTEX_SYM = 567,
     NAMES_SYM = 568,
     NAME_SYM = 569,
     NATIONAL_SYM = 570,
     NATURAL = 571,
     NCHAR_STRING = 572,
     NCHAR_SYM = 573,
     NDBCLUSTER_SYM = 574,
     NE = 575,
     NEG = 576,
     NEW_SYM = 577,
     NEXT_SYM = 578,
     NODEGROUP_SYM = 579,
     NONE_SYM = 580,
     NOT2_SYM = 581,
     NOT_SYM = 582,
     NOW_SYM = 583,
     NO_SYM = 584,
     NO_WAIT_SYM = 585,
     NO_WRITE_TO_BINLOG = 586,
     NTH_VALUE_SYM = 587,
     NULL_SYM = 588,
     NULLS_SYM = 589,
     NUM = 590,
     NUMERIC_SYM = 591,
     NVARCHAR_SYM = 592,
     OFFSET_SYM = 593,
     OLD_PASSWORD = 594,
     ON = 595,
     ONE_SHOT_SYM = 596,
     ONE_SYM = 597,
     OPEN_SYM = 598,
     OPTIMIZE = 599,
     OPTIONS_SYM = 600,
     OPTION = 601,
     OPTIONALLY = 602,
     OR2_SYM = 603,
     ORDER_SYM = 604,
     OR_OR_SYM = 605,
     OR_SYM = 606,
     OUTER = 607,
     OUTFILE = 608,
     OUT_SYM = 609,
     OVER_SYM = 610,
     OWNER_SYM = 611,
     PACK_KEYS_SYM = 612,
     PAGE_SYM = 613,
     PARAM_MARKER = 614,
     PARSER_SYM = 615,
     PARTIAL = 616,
     PARTITIONING_SYM = 617,
     PARTITIONS_SYM = 618,
     PARTITION_SYM = 619,
     PASSWORD = 620,
     PERCENTILE_CONT_SYM = 621,
     PERCENTILE_DISC_SYM = 622,
     PHASE_SYM = 623,
     PLUGINS_SYM = 624,
     PLUGIN_SYM = 625,
     POINT_SYM = 626,
     POLYGON = 627,
     PORT_SYM = 628,
     POSITION_SYM = 629,
     PRECEDING_SYM = 630,
     PRECISION = 631,
     PREPARE_SYM = 632,
     PRESERVE_SYM = 633,
     PREV_SYM = 634,
     PRIMARY_SYM = 635,
     PRIVILEGES = 636,
     PROCEDURE = 637,
     PROCESS = 638,
     PROCESSLIST_SYM = 639,
     PROFILE_SYM = 640,
     PROFILES_SYM = 641,
     PURGE = 642,
     QUARTER_SYM = 643,
     QUERY_SYM = 644,
     QUICK = 645,
     RANGE_SYM = 646,
     READS_SYM = 647,
     READ_ONLY_SYM = 648,
     READ_SYM = 649,
     READ_WRITE_SYM = 650,
     REAL = 651,
     REBUILD_SYM = 652,
     RECOVER_SYM = 653,
     REDOFILE_SYM = 654,
     REDO_BUFFER_SIZE_SYM = 655,
     REDUNDANT_SYM = 656,
     REFERENCES = 657,
     REGEXP = 658,
     RELAY_LOG_FILE_SYM = 659,
     RELAY_LOG_POS_SYM = 660,
     RELAY_THREAD = 661,
     RELEASE_SYM = 662,
     RELOAD = 663,
     REMOVE_SYM = 664,
     RENAME = 665,
     REORGANIZE_SYM = 666,
     REPAIR = 667,
     REPEATABLE_SYM = 668,
     REPEAT_SYM = 669,
     REPLACE = 670,
     REPLICATION = 671,
     REQUIRE_SYM = 672,
     RESET_SYM = 673,
     RESOURCES = 674,
     RESPECT_SYM = 675,
     RESTORE_SYM = 676,
     RESTRICT = 677,
     RESUME_SYM = 678,
     RETURNS_SYM = 679,
     RETURN_SYM = 680,
     REVOKE = 681,
     RIGHT = 682,
     ROLLBACK_SYM = 683,
     ROLLUP_SYM = 684,
     ROUTINE_SYM = 685,
     ROWS_SYM = 686,
     ROW_FORMAT_SYM = 687,
     ROW_SYM = 688,
     RTREE_SYM = 689,
     SAVEPOINT_SYM = 690,
     SCHEDULE_SYM = 691,
     SECOND_MICROSECOND_SYM = 692,
     SECOND_SYM = 693,
     SECURITY_SYM = 694,
     SELECT_SYM = 695,
     SENSITIVE_SYM = 696,
     SEPARATOR_SYM = 697,
     SERIALIZABLE_SYM = 698,
     SERIAL_SYM = 699,
     SESSION_SYM = 700,
     SERVER_SYM = 701,
     SERVER_OPTIONS = 702,
     SET = 703,
     SET_VAR = 704,
     SHARE_SYM = 705,
     SHIFT_LEFT = 706,
     SHIFT_RIGHT = 707,
     SHOW = 708,
     SHUTDOWN = 709,
     SIGNED_SYM = 710,
     SIMPLE_SYM = 711,
     SLAVE = 712,
     SMALLINT = 713,
     SNAPSHOT_SYM = 714,
     SOCKET_SYM = 715,
     SONAME_SYM = 716,
     SOUNDS_SYM = 717,
     SOURCE_SYM = 718,
     SPATIAL_SYM = 719,
     SPECIFIC_SYM = 720,
     SQLEXCEPTION_SYM = 721,
     SQLSTATE_SYM = 722,
     SQLWARNING_SYM = 723,
     SQL_BIG_RESULT = 724,
     SQL_BUFFER_RESULT = 725,
     SQL_CACHE_SYM = 726,
     SQL_CALC_FOUND_ROWS = 727,
     SQL_NO_CACHE_SYM = 728,
     INFINIDB_ORDERED_SYM = 729,
     SQL_SMALL_RESULT = 730,
     SQL_SYM = 731,
     SQL_THREAD = 732,
     SSL_SYM = 733,
     STARTING = 734,
     STARTS_SYM = 735,
     START_SYM = 736,
     STATUS_SYM = 737,
     STDDEV_SAMP_SYM = 738,
     STD_SYM = 739,
     STOP_SYM = 740,
     STORAGE_SYM = 741,
     STRAIGHT_JOIN = 742,
     STRING_SYM = 743,
     SUBDATE_SYM = 744,
     SUBJECT_SYM = 745,
     SUBPARTITIONS_SYM = 746,
     SUBPARTITION_SYM = 747,
     SUBSTRING = 748,
     SUM_SYM = 749,
     SUPER_SYM = 750,
     SUSPEND_SYM = 751,
     SWAPS_SYM = 752,
     SWITCHES_SYM = 753,
     SYSDATE = 754,
     TABLES = 755,
     TABLESPACE = 756,
     TABLE_REF_PRIORITY = 757,
     TABLE_SYM = 758,
     TABLE_CHECKSUM_SYM = 759,
     TEMPORARY = 760,
     TEMPTABLE_SYM = 761,
     TERMINATED = 762,
     TEXT_STRING = 763,
     TEXT_SYM = 764,
     THAN_SYM = 765,
     THEN_SYM = 766,
     TIMESTAMP = 767,
     TIMESTAMP_ADD = 768,
     TIMESTAMP_DIFF = 769,
     TIME_SYM = 770,
     TINYBLOB = 771,
     TINYINT = 772,
     TINYTEXT = 773,
     TO_SYM = 774,
     TRAILING = 775,
     TRANSACTION_SYM = 776,
     TRIGGERS_SYM = 777,
     TRIGGER_SYM = 778,
     TRIM = 779,
     TRUE_SYM = 780,
     TRUNCATE_SYM = 781,
     TYPES_SYM = 782,
     TYPE_SYM = 783,
     UDF_RETURNS_SYM = 784,
     ULONGLONG_NUM = 785,
     UNBOUNDED_SYM = 786,
     UNCOMMITTED_SYM = 787,
     UNDEFINED_SYM = 788,
     UNDERSCORE_CHARSET = 789,
     UNDOFILE_SYM = 790,
     UNDO_BUFFER_SIZE_SYM = 791,
     UNDO_SYM = 792,
     UNICODE_SYM = 793,
     UNINSTALL_SYM = 794,
     UNION_SYM = 795,
     UNIQUE_SYM = 796,
     UNKNOWN_SYM = 797,
     UNLOCK_SYM = 798,
     UNSIGNED = 799,
     UNTIL_SYM = 800,
     UPDATE_SYM = 801,
     UPGRADE_SYM = 802,
     USAGE = 803,
     USER = 804,
     USE_FRM = 805,
     USE_SYM = 806,
     USING = 807,
     UTC_DATE_SYM = 808,
     UTC_TIMESTAMP_SYM = 809,
     UTC_TIME_SYM = 810,
     VALUES = 811,
     VALUE_SYM = 812,
     VARBINARY = 813,
     VARCHAR = 814,
     VARIABLES = 815,
     VARIANCE_SYM = 816,
     VARYING = 817,
     VAR_SAMP_SYM = 818,
     VIEW_SYM = 819,
     WAIT_SYM = 820,
     WARNINGS = 821,
     WEEK_SYM = 822,
     WHEN_SYM = 823,
     WHERE = 824,
     WHILE_SYM = 825,
     WITH = 826,
     WITHIN = 827,
     WORK_SYM = 828,
     WRAPPER_SYM = 829,
     WRITE_SYM = 830,
     X509_SYM = 831,
     XA_SYM = 832,
     XOR = 833,
     YEAR_MONTH_SYM = 834,
     YEAR_SYM = 835,
     ZEROFILL = 836
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CHAIN_SYM 309
#define CHANGE 310
#define CHANGED 311
#define CHARSET 312
#define CHAR_SYM 313
#define CHECKSUM_SYM 314
#define CHECK_SYM 315
#define CIPHER_SYM 316
#define CLIENT_SYM 317
#define CLOSE_SYM 318
#define COALESCE 319
#define CODE_SYM 320
#define COLLATE_SYM 321
#define COLLATION_SYM 322
#define COLUMNS 323
#define COLUMN_SYM 324
#define COMMENT_SYM 325
#define COMMITTED_SYM 326
#define COMMIT_SYM 327
#define COMPACT_SYM 328
#define COMPLETION_SYM 329
#define COMPRESSED_SYM 330
#define CONCURRENT 331
#define CONDITION_SYM 332
#define CONNECTION_SYM 333
#define CONSISTENT_SYM 334
#define CONSTRAINT 335
#define CONTAINS_SYM 336
#define CONTEXT_SYM 337
#define CONTINUE_SYM 338
#define CONTRIBUTORS_SYM 339
#define CONVERT_SYM 340
#define COUNT_SYM 341
#define CPU_SYM 342
#define CREATE 343
#define CROSS 344
#define CUBE_SYM 345
#define CURDATE 346
#define CURRENT_SYM 347
#define CURRENT_USER 348
#define CURSOR_SYM 349
#define CURTIME 350
#define DATABASE 351
#define DATABASES 352
#define DATAFILE_SYM 353
#define DATA_SYM 354
#define DATETIME 355
#define DATE_ADD_INTERVAL 356
#define DATE_SUB_INTERVAL 357
#define DATE_SYM 358
#define DAY_HOUR_SYM 359
#define DAY_MICROSECOND_SYM 360
#define DAY_MINUTE_SYM 361
#define DAY_SECOND_SYM 362
#define DAY_SYM 363
#define DEALLOCATE_SYM 364
#define DECIMAL_NUM 365
#define DECIMAL_SYM 366
#define DECLARE_SYM 367
#define DEFAULT 368
#define DEFINER_SYM 369
#define DELAYED_SYM 370
#define DELAY_KEY_WRITE_SYM 371
#define DELETE_SYM 372
#define DESC 373
#define DESCRIBE 374
#define DES_KEY_FILE 375
#define DETERMINISTIC_SYM 376
#define DIRECTORY_SYM 377
#define DISABLE_SYM 378
#define DISCARD 379
#define DISK_SYM 380
#define DISTINCT 381
#define DIV_SYM 382
#define DOUBLE_SYM 383
#define DO_SYM 384
#define DROP 385
#define DUAL_SYM 386
#define DUMPFILE 387
#define DUPLICATE_SYM 388
#define DYNAMIC_SYM 389
#define EACH_SYM 390
#define ELSE 391
#define ELSEIF_SYM 392
#define ENABLE_SYM 393
#define ENCLOSED 394
#define END 395
#define ENDS_SYM 396
#define END_OF_INPUT 397
#define ENGINES_SYM 398
#define ENGINE_SYM 399
#define ENUM 400
#define EQ 401
#define EQUAL_SYM 402
#define ERRORS 403
#define ESCAPED 404
#define ESCAPE_SYM 405
#define EVENTS_SYM 406
#define EVENT_SYM 407
#define EVERY_SYM 408
#define EXECUTE_SYM 409
#define EXISTS 410
#define EXIT_SYM 411
#define EXPANSION_SYM 412
#define EXTENDED_SYM 413
#define EXTENT_SIZE_SYM 414
#define EXTRACT_SYM 415
#define FALSE_SYM 416
#define FAST_SYM 417
#define FAULTS_SYM 418
#define FETCH_SYM 419
#define FILE_SYM 420
#define FIRST_SYM 421
#define FIXED_SYM 422
#define FLOAT_NUM 423
#define FLOAT_SYM 424
#define FLUSH_SYM 425
#define FOLLOWING_SYM 426
#define FORCE_SYM 427
#define FOREIGN 428
#define FOR_SYM 429
#define FOUND_SYM 430
#define FRAC_SECOND_SYM 431
#define FROM 432
#define FULL 433
#define FULLTEXT_SYM 434
#define FUNCTION_SYM 435
#define GE 436
#define GEOMETRYCOLLECTION 437
#define GEOMETRY_SYM 438
#define GET_FORMAT 439
#define GLOBAL_SYM 440
#define GRANT 441
#define GRANTS 442
#define GROUP_SYM 443
#define GROUP_CONCAT_SYM 444
#define GT_SYM 445
#define HANDLER_SYM 446
#define HASH_SYM 447
#define HAVING 448
#define HELP_SYM 449
#define HEX_NUM 450
#define HIGH_PRIORITY 451
#define HOST_SYM 452
#define HOSTS_SYM 453
#define HOUR_MICROSECOND_SYM 454
#define HOUR_MINUTE_SYM 455
#define HOUR_SECOND_SYM 456
#define HOUR_SYM 457
#define IDENT 458
#define IDENTIFIED_SYM 459
#define IDENT_QUOTED 460
#define IF 461
#define IGNORE_SYM 462
#define IMPORT 463
#define INDEXES 464
#define INDEX_SYM 465
#define INFILE 466
#define INITIAL_SIZE_SYM 467
#define INNER_SYM 468
#define INNOBASE_SYM 469
#define INOUT_SYM 470
#define INSENSITIVE_SYM 471
#define INSERT 472
#define INSERT_METHOD 473
#define INSTALL_SYM 474
#define INTERVAL_SYM 475
#define INTO 476
#define INT_SYM 477
#define INVOKER_SYM 478
#define IN_SYM 479
#define IO_SYM 480
#define IPC_SYM 481
#define IS 482
#define ISOLATION 483
#define ISSUER_SYM 484
#define ITERATE_SYM 485
#define JOIN_SYM 486
#define KEYS 487
#define KEY_BLOCK_SIZE 488
#define KEY_SYM 489
#define KILL_SYM 490
#define LANGUAGE_SYM 491
#define LAST_SYM 492
#define LE 493
#define LEADING 494
#define LEAVES 495
#define LEAVE_SYM 496
#define LEFT 497
#define LESS_SYM 498
#define LEVEL_SYM 499
#define LEX_HOSTNAME 500
#define LIKE 501
#define LIMIT 502
#define LINEAR_SYM 503
#define LINES 504
#define LINESTRING 505
#define LIST_SYM 506
#define LOAD 507
#define LOCAL_SYM 508
#define LOCATOR_SYM 509
#define LOCKS_SYM 510
#define LOCK_SYM 511
#define LOGFILE_SYM 512
#define LOGS_SYM 513
#define LONGBLOB 514
#define LONGTEXT 515
#define LONG_NUM 516
#define LONG_SYM 517
#define LOOP_SYM 518
#define LOW_PRIORITY 519
#define LT 520
#define MASTER_CONNECT_RETRY_SYM 521
#define MASTER_HOST_SYM 522
#define MASTER_LOG_FILE_SYM 523
#define MASTER_LOG_POS_SYM 524
#define MASTER_PASSWORD_SYM 525
#define MASTER_PORT_SYM 526
#define MASTER_SERVER_ID_SYM 527
#define MASTER_SSL_CAPATH_SYM 528
#define MASTER_SSL_CA_SYM 529
#define MASTER_SSL_CERT_SYM 530
#define MASTER_SSL_CIPHER_SYM 531
#define MASTER_SSL_KEY_SYM 532
#define MASTER_SSL_SYM 533
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 534
#define MASTER_SYM 535
#define MASTER_USER_SYM 536
#define MATCH 537
#define MAX_CONNECTIONS_PER_HOUR 538
#define MAX_QUERIES_PER_HOUR 539
#define MAX_ROWS 540
#define MAX_SIZE_SYM 541
#define MAX_SYM 542
#define MAX_UPDATES_PER_HOUR 543
#define MAX_USER_CONNECTIONS_SYM 544
#define MAX_VALUE_SYM 545
#define MEDIUMBLOB 546
#define MEDIUMINT 547
#define MEDIUMTEXT 548
#define MEDIUM_SYM 549
#define MEMORY_SYM 550
#define MERGE_SYM 551
#define MICROSECOND_SYM 552
#define MIGRATE_SYM 553
#define MINUTE_MICROSECOND_SYM 554
#define MINUTE_SECOND_SYM 555
#define MINUTE_SYM 556
#define MIN_ROWS 557
#define MIN_SYM 558
#define MODE_SYM 559
#define MODIFIES_SYM 560
#define MODIFY_SYM 561
#define MOD_SYM 562
#define MONTH_SYM 563
#define MULTILINESTRING 564
#define MULTIPOINT 565
#define MULTIPOLYGON 566
#define MUTEX_SYM 567
#define NAMES_SYM 568
#define NAME_SYM 569
#define NATIONAL_SYM 570
#define NATURAL 571
#define NCHAR_STRING 572
#define NCHAR_SYM 573
#define NDBCLUSTER_SYM 574
#define NE 575
#define NEG 576
#define NEW_SYM 577
#define NEXT_SYM 578
#define NODEGROUP_SYM 579
#define NONE_SYM 580
#define NOT2_SYM 581
#define NOT_SYM 582
#define NOW_SYM 583
#define NO_SYM 584
#define NO_WAIT_SYM 585
#define NO_WRITE_TO_BINLOG 586
#define NTH_VALUE_SYM 587
#define NULL_SYM 588
#define NULLS_SYM 589
#define NUM 590
#define NUMERIC_SYM 591
#define NVARCHAR_SYM 592
#define OFFSET_SYM 593
#define OLD_PASSWORD 594
#define ON 595
#define ONE_SHOT_SYM 596
#define ONE_SYM 597
#define OPEN_SYM 598
#define OPTIMIZE 599
#define OPTIONS_SYM 600
#define OPTION 601
#define OPTIONALLY 602
#define OR2_SYM 603
#define ORDER_SYM 604
#define OR_OR_SYM 605
#define OR_SYM 606
#define OUTER 607
#define OUTFILE 608
#define OUT_SYM 609
#define OVER_SYM 610
#define OWNER_SYM 611
#define PACK_KEYS_SYM 612
#define PAGE_SYM 613
#define PARAM_MARKER 614
#define PARSER_SYM 615
#define PARTIAL 616
#define PARTITIONING_SYM 617
#define PARTITIONS_SYM 618
#define PARTITION_SYM 619
#define PASSWORD 620
#define PERCENTILE_CONT_SYM 621
#define PERCENTILE_DISC_SYM 622
#define PHASE_SYM 623
#define PLUGINS_SYM 624
#define PLUGIN_SYM 625
#define POINT_SYM 626
#define POLYGON 627
#define PORT_SYM 628
#define POSITION_SYM 629
#define PRECEDING_SYM 630
#define PRECISION 631
#define PREPARE_SYM 632
#define PRESERVE_SYM 633
#define PREV_SYM 634
#define PRIMARY_SYM 635
#define PRIVILEGES 636
#define PROCEDURE 637
#define PROCESS 638
#define PROCESSLIST_SYM 639
#define PROFILE_SYM 640
#define PROFILES_SYM 641
#define PURGE 642
#define QUARTER_SYM 643
#define QUERY_SYM 644
#define QUICK 645
#define RANGE_SYM 646
#define READS_SYM 647
#define READ_ONLY_SYM 648
#define READ_SYM 649
#define READ_WRITE_SYM 650
#define REAL 651
#define REBUILD_SYM 652
#define RECOVER_SYM 653
#define REDOFILE_SYM 654
#define REDO_BUFFER_SIZE_SYM 655
#define REDUNDANT_SYM 656
#define REFERENCES 657
#define REGEXP 658
#define RELAY_LOG_FILE_SYM 659
#define RELAY_LOG_POS_SYM 660
#define RELAY_THREAD 661
#define RELEASE_SYM 662
#define RELOAD 663
#define REMOVE_SYM 664
#define RENAME 665
#define REORGANIZE_SYM 666
#define REPAIR 667
#define REPEATABLE_SYM 668
#define REPEAT_SYM 669
#define REPLACE 670
#define REPLICATION 671
#define REQUIRE_SYM 672
#define RESET_SYM 673
#define RESOURCES 674
#define RESPECT_SYM 675
#define RESTORE_SYM 676
#define RESTRICT 677
#define RESUME_SYM 678
#define RETURNS_SYM 679
#define RETURN_SYM 680
#define REVOKE 681
#define RIGHT 682
#define ROLLBACK_SYM 683
#define ROLLUP_SYM 684
#define ROUTINE_SYM 685
#define ROWS_SYM 686
#define ROW_FORMAT_SYM 687
#define ROW_SYM 688
#define RTREE_SYM 689
#define SAVEPOINT_SYM 690
#define SCHEDULE_SYM 691
#define SECOND_MICROSECOND_SYM 692
#define SECOND_SYM 693
#define SECURITY_SYM 694
#define SELECT_SYM 695
#define SENSITIVE_SYM 696
#define SEPARATOR_SYM 697
#define SERIALIZABLE_SYM 698
#define SERIAL_SYM 699
#define SESSION_SYM 700
#define SERVER_SYM 701
#define SERVER_OPTIONS 702
#define SET 703
#define SET_VAR 704
#define SHARE_SYM 705
#define SHIFT_LEFT 706
#define SHIFT_RIGHT 707
#define SHOW 708
#define SHUTDOWN 709
#define SIGNED_SYM 710
#define SIMPLE_SYM 711
#define SLAVE 712
#define SMALLINT 713
#define SNAPSHOT_SYM 714
#define SOCKET_SYM 715
#define SONAME_SYM 716
#define SOUNDS_SYM 717
#define SOURCE_SYM 718
#define SPATIAL_SYM 719
#define SPECIFIC_SYM 720
#define SQLEXCEPTION_SYM 721
#define SQLSTATE_SYM 722
#define SQLWARNING_SYM 723
#define SQL_BIG_RESULT 724
#define SQL_BUFFER_RESULT 725
#define SQL_CACHE_SYM 726
#define SQL_CALC_FOUND_ROWS 727
#define SQL_NO_CACHE_SYM 728
#define INFINIDB_ORDERED_SYM 729
#define SQL_SMALL_RESULT 730
#define SQL_SYM 731
#define SQL_THREAD 732
#define SSL_SYM 733
#define STARTING 734
#define STARTS_SYM 735
#define START_SYM 736
#define STATUS_SYM 737
#define STDDEV_SAMP_SYM 738
#define STD_SYM 739
#define STOP_SYM 740
#define STORAGE_SYM 741
#define STRAIGHT_JOIN 742
#define STRING_SYM 743
#define SUBDATE_SYM 744
#define SUBJECT_SYM 745
#define SUBPARTITIONS_SYM 746
#define SUBPARTITION_SYM 747
#define SUBSTRING 748
#define SUM_SYM 749
#define SUPER_SYM 750
#define SUSPEND_SYM 751
#define SWAPS_SYM 752
#define SWITCHES_SYM 753
#define SYSDATE 754
#define TABLES 755
#define TABLESPACE 756
#define TABLE_REF_PRIORITY 757
#define TABLE_SYM 758
#define TABLE_CHECKSUM_SYM 759
#define TEMPORARY 760
#define TEMPTABLE_SYM 761
#define TERMINATED 762
#define TEXT_STRING 763
#define TEXT_SYM 764
#define THAN_SYM 765
#define THEN_SYM 766
#define TIMESTAMP 767
#define TIMESTAMP_ADD 768
#define TIMESTAMP_DIFF 769
#define TIME_SYM 770
#define TINYBLOB 771
#define TINYINT 772
#define TINYTEXT 773
#define TO_SYM 774
#define TRAILING 775
#define TRANSACTION_SYM 776
#define TRIGGERS_SYM 777
#define TRIGGER_SYM 778
#define TRIM 779
#define TRUE_SYM 780
#define TRUNCATE_SYM 781
#define TYPES_SYM 782
#define TYPE_SYM 783
#define UDF_RETURNS_SYM 784
#define ULONGLONG_NUM 785
#define UNBOUNDED_SYM 786
#define UNCOMMITTED_SYM 787
#define UNDEFINED_SYM 788
#define UNDERSCORE_CHARSET 789
#define UNDOFILE_SYM 790
#define UNDO_BUFFER_SIZE_SYM 791
#define UNDO_SYM 792
#define UNICODE_SYM 793
#define UNINSTALL_SYM 794
#define UNION_SYM 795
#define UNIQUE_SYM 796
#define UNKNOWN_SYM 797
#define UNLOCK_SYM 798
#define UNSIGNED 799
#define UNTIL_SYM 800
#define UPDATE_SYM 801
#define UPGRADE_SYM 802
#define USAGE 803
#define USER 804
#define USE_FRM 805
#define USE_SYM 806
#define USING 807
#define UTC_DATE_SYM 808
#define UTC_TIMESTAMP_SYM 809
#define UTC_TIME_SYM 810
#define VALUES 811
#define VALUE_SYM 812
#define VARBINARY 813
#define VARCHAR 814
#define VARIABLES 815
#define VARIANCE_SYM 816
#define VARYING 817
#define VAR_SAMP_SYM 818
#define VIEW_SYM 819
#define WAIT_SYM 820
#define WARNINGS 821
#define WEEK_SYM 822
#define WHEN_SYM 823
#define WHERE 824
#define WHILE_SYM 825
#define WITH 826
#define WITHIN 827
#define WORK_SYM 828
#define WRAPPER_SYM 829
#define WRITE_SYM 830
#define X509_SYM 831
#define XA_SYM 832
#define XOR 833
#define YEAR_MONTH_SYM 834
#define YEAR_SYM 835
#define ZEROFILL 836




/* Copy the first part of user declarations.  */
#line 31 "sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().

** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "mysql_priv.h"
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "item_create_window_function.h"
#include "item_window_function.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

const LEX_STRING null_lex_str= {0,0};

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  /* Push an error into the error stack */
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  (yytext ? yytext : ""),
                  lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 479 "sql_yacc.yy"
{
  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  struct st_lex *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  struct Window_context *Window_context;
  struct Ordering *ordering;
  struct Frame *frame;
  struct Boundary *boundary;
  enum BOUND bound;
  SQL_LIST *list;
}
/* Line 193 of yacc.c.  */
#line 1765 "sql_yacc.cc"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 529 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 216 of yacc.c.  */
#line 1781 "sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  549
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   48979

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  601
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  839
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2415
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4138

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   836

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   594,     2,     2,     2,   588,   583,     2,
     591,   592,   586,   585,   593,   584,   599,   587,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   600,   597,
       2,     2,     2,     2,   598,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   589,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   595,   582,   596,   590,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   228,   232,   236,   240,   244,   245,   253,
     254,   267,   268,   275,   276,   280,   285,   290,   294,   297,
     308,   310,   314,   317,   320,   323,   326,   329,   332,   335,
     336,   350,   351,   358,   361,   362,   364,   368,   370,   371,
     374,   375,   378,   379,   381,   385,   390,   391,   394,   395,
     398,   400,   402,   404,   406,   408,   410,   412,   414,   416,
     418,   420,   422,   424,   425,   429,   431,   432,   435,   436,
     439,   442,   445,   448,   451,   455,   459,   461,   463,   465,
     468,   472,   476,   477,   482,   483,   487,   488,   490,   494,
     496,   497,   499,   503,   505,   506,   510,   511,   513,   517,
     519,   524,   525,   527,   529,   531,   532,   536,   539,   543,
     544,   548,   549,   555,   561,   562,   570,   576,   577,   580,
     582,   584,   586,   590,   592,   594,   598,   599,   601,   603,
     605,   607,   610,   612,   614,   618,   619,   622,   624,   626,
     628,   630,   632,   634,   636,   638,   640,   642,   644,   646,
     648,   649,   655,   656,   659,   660,   664,   665,   668,   671,
     674,   677,   678,   685,   688,   689,   692,   694,   696,   700,
     701,   702,   703,   711,   712,   715,   718,   720,   722,   723,
     724,   733,   734,   741,   743,   746,   748,   751,   752,   753,
     760,   761,   762,   769,   770,   773,   774,   780,   781,   783,
     784,   790,   791,   794,   795,   801,   806,   807,   808,   817,
     818,   826,   828,   830,   832,   834,   836,   839,   844,   850,
     851,   856,   861,   866,   870,   874,   877,   880,   881,   884,
     886,   889,   893,   895,   897,   899,   901,   903,   906,   910,
     912,   914,   916,   918,   920,   922,   924,   926,   928,   930,
     933,   937,   939,   941,   943,   945,   947,   949,   951,   954,
     958,   960,   962,   964,   966,   968,   970,   972,   974,   976,
     979,   983,   985,   987,   989,   992,   995,   998,  1000,  1002,
    1004,  1006,  1009,  1013,  1017,  1021,  1025,  1029,  1033,  1037,
    1041,  1046,  1047,  1049,  1051,  1053,  1055,  1057,  1060,  1064,
    1067,  1072,  1078,  1079,  1085,  1086,  1087,  1093,  1094,  1102,
    1103,  1105,  1106,  1110,  1111,  1115,  1121,  1127,  1128,  1133,
    1134,  1138,  1139,  1143,  1144,  1146,  1147,  1149,  1151,  1155,
    1157,  1163,  1169,  1170,  1173,  1174,  1175,  1183,  1184,  1194,
    1196,  1200,  1202,  1204,  1205,  1208,  1209,  1213,  1215,  1219,
    1220,  1227,  1229,  1230,  1235,  1241,  1243,  1245,  1247,  1251,
    1255,  1257,  1261,  1263,  1265,  1266,  1270,  1272,  1276,  1277,
    1282,  1284,  1285,  1287,  1290,  1292,  1296,  1301,  1305,  1309,
    1313,  1318,  1323,  1327,  1328,  1329,  1336,  1337,  1339,  1340,
    1342,  1344,  1347,  1349,  1351,  1352,  1354,  1356,  1359,  1361,
    1362,  1366,  1367,  1369,  1371,  1374,  1376,  1379,  1383,  1387,
    1391,  1395,  1399,  1403,  1407,  1411,  1415,  1419,  1423,  1427,
    1431,  1435,  1439,  1445,  1447,  1449,  1453,  1458,  1463,  1466,
    1469,  1472,  1476,  1480,  1485,  1490,  1492,  1494,  1496,  1498,
    1500,  1502,  1504,  1506,  1508,  1510,  1512,  1514,  1517,  1519,
    1521,  1523,  1525,  1527,  1531,  1533,  1535,  1538,  1541,  1549,
    1558,  1567,  1570,  1573,  1574,  1576,  1579,  1580,  1582,  1585,
    1586,  1591,  1595,  1599,  1603,  1605,  1608,  1610,  1612,  1616,
    1619,  1623,  1626,  1629,  1631,  1635,  1639,  1642,  1646,  1648,
    1650,  1653,  1655,  1657,  1660,  1662,  1664,  1666,  1669,  1673,
    1676,  1680,  1683,  1686,  1690,  1694,  1698,  1699,  1706,  1707,
    1714,  1717,  1719,  1721,  1723,  1725,  1727,  1729,  1731,  1733,
    1735,  1737,  1739,  1742,  1745,  1747,  1750,  1752,  1755,  1759,
    1762,  1764,  1766,  1768,  1770,  1772,  1774,  1776,  1779,  1780,
    1782,  1784,  1790,  1791,  1793,  1796,  1798,  1800,  1802,  1804,
    1808,  1812,  1816,  1820,  1821,  1823,  1824,  1826,  1827,  1829,
    1832,  1834,  1836,  1839,  1842,  1847,  1849,  1853,  1856,  1858,
    1861,  1864,  1867,  1870,  1872,  1875,  1877,  1879,  1881,  1883,
    1885,  1886,  1889,  1891,  1893,  1895,  1897,  1899,  1900,  1903,
    1905,  1907,  1908,  1910,  1911,  1914,  1916,  1919,  1923,  1926,
    1927,  1929,  1930,  1932,  1934,  1937,  1938,  1940,  1941,  1946,
    1948,  1953,  1957,  1959,  1960,  1962,  1965,  1967,  1971,  1975,
    1978,  1981,  1984,  1986,  1988,  1991,  1994,  1997,  1999,  2002,
    2005,  2008,  2011,  2013,  2015,  2016,  2018,  2020,  2022,  2024,
    2025,  2027,  2029,  2031,  2032,  2034,  2037,  2038,  2040,  2042,
    2045,  2048,  2051,  2053,  2057,  2061,  2063,  2065,  2067,  2072,
    2075,  2077,  2082,  2083,  2085,  2086,  2089,  2091,  2095,  2096,
    2103,  2104,  2110,  2118,  2119,  2125,  2126,  2132,  2133,  2139,
    2140,  2145,  2146,  2157,  2161,  2166,  2170,  2174,  2182,  2183,
    2187,  2189,  2194,  2195,  2199,  2200,  2203,  2204,  2206,  2207,
    2210,  2213,  2216,  2219,  2221,  2223,  2225,  2229,  2234,  2235,
    2242,  2247,  2248,  2254,  2255,  2262,  2267,  2269,  2272,  2274,
    2276,  2277,  2283,  2284,  2288,  2291,  2292,  2298,  2299,  2300,
    2307,  2309,  2313,  2315,  2317,  2321,  2324,  2328,  2331,  2336,
    2337,  2344,  2345,  2346,  2355,  2360,  2365,  2369,  2373,  2376,
    2379,  2386,  2392,  2396,  2402,  2404,  2406,  2408,  2409,  2411,
    2412,  2414,  2415,  2417,  2419,  2420,  2423,  2425,  2426,  2428,
    2430,  2432,  2433,  2439,  2443,  2444,  2450,  2454,  2458,  2459,
    2463,  2464,  2467,  2469,  2473,  2474,  2476,  2478,  2479,  2482,
    2484,  2488,  2489,  2496,  2497,  2504,  2505,  2511,  2512,  2514,
    2516,  2517,  2524,  2525,  2527,  2529,  2532,  2534,  2536,  2538,
    2539,  2545,  2548,  2549,  2555,  2556,  2558,  2560,  2563,  2565,
    2567,  2569,  2571,  2573,  2576,  2577,  2583,  2584,  2586,  2588,
    2589,  2594,  2599,  2603,  2609,  2611,  2615,  2619,  2625,  2627,
    2631,  2634,  2636,  2638,  2639,  2646,  2648,  2652,  2656,  2657,
    2660,  2661,  2666,  2667,  2670,  2672,  2675,  2680,  2683,  2687,
    2688,  2692,  2693,  2694,  2701,  2704,  2706,  2708,  2711,  2714,
    2723,  2728,  2729,  2731,  2734,  2736,  2738,  2740,  2742,  2744,
    2746,  2748,  2750,  2752,  2754,  2756,  2758,  2759,  2762,  2767,
    2771,  2773,  2775,  2780,  2781,  2782,  2784,  2786,  2787,  2790,
    2793,  2795,  2797,  2798,  2801,  2805,  2809,  2813,  2816,  2820,
    2825,  2829,  2834,  2838,  2843,  2845,  2849,  2854,  2858,  2862,
    2869,  2871,  2877,  2884,  2890,  2898,  2905,  2914,  2920,  2927,
    2932,  2937,  2943,  2947,  2952,  2954,  2958,  2962,  2966,  2970,
    2974,  2978,  2984,  2990,  2994,  2998,  3002,  3006,  3010,  3014,
    3016,  3018,  3020,  3022,  3024,  3026,  3028,  3030,  3032,  3034,
    3036,  3038,  3040,  3042,  3044,  3046,  3048,  3050,  3052,  3054,
    3056,  3058,  3060,  3064,  3066,  3068,  3070,  3072,  3076,  3079,
    3082,  3085,  3088,  3092,  3096,  3102,  3109,  3114,  3119,  3127,
    3130,  3137,  3143,  3150,  3157,  3162,  3167,  3173,  3178,  3185,
    3188,  3193,  3198,  3203,  3214,  3221,  3230,  3237,  3242,  3247,
    3254,  3259,  3264,  3269,  3276,  3281,  3289,  3297,  3305,  3312,
    3319,  3326,  3333,  3337,  3342,  3349,  3358,  3361,  3364,  3369,
    3378,  3387,  3394,  3401,  3404,  3409,  3416,  3423,  3432,  3441,
    3448,  3457,  3464,  3467,  3472,  3481,  3490,  3493,  3496,  3499,
    3504,  3509,  3514,  3519,  3523,  3532,  3537,  3544,  3549,  3554,
    3559,  3566,  3575,  3582,  3587,  3594,  3596,  3603,  3608,  3613,
    3618,  3623,  3628,  3635,  3640,  3646,  3653,  3659,  3666,  3672,
    3679,  3686,  3692,  3699,  3705,  3712,  3718,  3725,  3731,  3737,
    3743,  3749,  3757,  3770,  3783,  3784,  3787,  3790,  3791,  3793,
    3796,  3799,  3805,  3806,  3810,  3811,  3813,  3818,  3824,  3828,
    3829,  3832,  3835,  3836,  3838,  3844,  3847,  3849,  3851,  3854,
    3857,  3860,  3865,  3867,  3869,  3874,  3881,  3884,  3888,  3889,
    3894,  3895,  3899,  3900,  3902,  3904,  3908,  3913,  3918,  3924,
    3929,  3934,  3939,  3945,  3950,  3956,  3961,  3967,  3972,  3978,
    3983,  3988,  3993,  3998,  4003,  4009,  4010,  4019,  4020,  4024,
    4028,  4030,  4035,  4036,  4038,  4039,  4042,  4043,  4045,  4046,
    4050,  4053,  4057,  4060,  4062,  4065,  4067,  4070,  4072,  4074,
    4076,  4079,  4080,  4082,  4084,  4088,  4090,  4094,  4096,  4100,
    4101,  4103,  4104,  4107,  4112,  4118,  4120,  4122,  4124,  4126,
    4131,  4133,  4137,  4141,  4145,  4146,  4153,  4154,  4161,  4162,
    4171,  4176,  4177,  4186,  4187,  4198,  4205,  4206,  4215,  4216,
    4227,  4234,  4236,  4239,  4242,  4243,  4248,  4252,  4259,  4260,
    4264,  4265,  4266,  4272,  4273,  4275,  4276,  4278,  4279,  4282,
    4286,  4290,  4292,  4294,  4295,  4303,  4304,  4312,  4314,  4317,
    4318,  4319,  4322,  4323,  4326,  4327,  4329,  4331,  4333,  4335,
    4339,  4341,  4345,  4347,  4349,  4351,  4353,  4355,  4357,  4359,
    4361,  4363,  4365,  4367,  4369,  4371,  4373,  4375,  4377,  4379,
    4381,  4383,  4385,  4387,  4389,  4391,  4393,  4395,  4397,  4399,
    4400,  4402,  4404,  4405,  4408,  4409,  4411,  4412,  4413,  4417,
    4418,  4419,  4423,  4426,  4427,  4428,  4429,  4435,  4440,  4443,
    4444,  4447,  4450,  4454,  4458,  4460,  4463,  4464,  4466,  4467,
    4472,  4477,  4480,  4481,  4483,  4485,  4486,  4488,  4489,  4491,
    4494,  4496,  4500,  4504,  4506,  4508,  4510,  4512,  4513,  4516,
    4518,  4520,  4522,  4524,  4526,  4528,  4530,  4532,  4534,  4536,
    4538,  4540,  4542,  4544,  4546,  4548,  4550,  4552,  4554,  4556,
    4558,  4560,  4562,  4563,  4564,  4571,  4572,  4574,  4578,  4580,
    4584,  4585,  4588,  4592,  4594,  4597,  4599,  4600,  4604,  4605,
    4606,  4614,  4617,  4619,  4620,  4624,  4631,  4632,  4639,  4644,
    4651,  4656,  4661,  4666,  4672,  4677,  4682,  4688,  4695,  4700,
    4702,  4706,  4708,  4710,  4714,  4716,  4717,  4720,  4721,  4723,
    4724,  4725,  4734,  4735,  4736,  4743,  4744,  4746,  4748,  4750,
    4752,  4754,  4757,  4759,  4761,  4763,  4767,  4772,  4773,  4777,
    4781,  4783,  4786,  4789,  4790,  4794,  4795,  4801,  4805,  4807,
    4811,  4813,  4817,  4819,  4821,  4822,  4824,  4825,  4830,  4831,
    4833,  4837,  4839,  4841,  4843,  4844,  4845,  4852,  4853,  4854,
    4866,  4870,  4872,  4876,  4880,  4882,  4886,  4887,  4889,  4890,
    4895,  4896,  4903,  4904,  4910,  4911,  4918,  4920,  4924,  4928,
    4934,  4935,  4938,  4939,  4942,  4944,  4946,  4948,  4952,  4953,
    4955,  4956,  4958,  4960,  4964,  4966,  4968,  4971,  4974,  4977,
    4979,  4981,  4983,  4985,  4986,  4990,  4991,  4995,  4998,  5003,
    5008,  5012,  5017,  5022,  5025,  5027,  5031,  5035,  5042,  5059,
    5062,  5065,  5066,  5073,  5079,  5082,  5085,  5088,  5090,  5092,
    5094,  5100,  5106,  5109,  5112,  5114,  5119,  5123,  5126,  5129,
    5132,  5136,  5139,  5142,  5144,  5148,  5153,  5157,  5161,  5164,
    5167,  5171,  5175,  5179,  5183,  5187,  5191,  5195,  5199,  5201,
    5203,  5205,  5207,  5209,  5210,  5212,  5213,  5216,  5217,  5219,
    5221,  5223,  5224,  5227,  5228,  5231,  5232,  5235,  5238,  5239,
    5244,  5245,  5250,  5252,  5254,  5255,  5257,  5259,  5260,  5262,
    5264,  5265,  5270,  5274,  5276,  5277,  5281,  5286,  5289,  5291,
    5293,  5295,  5297,  5299,  5301,  5303,  5305,  5306,  5308,  5309,
    5313,  5317,  5319,  5321,  5323,  5326,  5327,  5331,  5335,  5338,
    5341,  5345,  5346,  5348,  5350,  5353,  5354,  5359,  5365,  5366,
    5367,  5368,  5369,  5388,  5391,  5392,  5394,  5395,  5397,  5399,
    5400,  5402,  5404,  5405,  5408,  5411,  5413,  5417,  5422,  5426,
    5430,  5431,  5434,  5437,  5439,  5443,  5447,  5448,  5452,  5453,
    5457,  5460,  5464,  5466,  5468,  5471,  5472,  5475,  5477,  5479,
    5482,  5485,  5487,  5489,  5491,  5493,  5495,  5498,  5501,  5503,
    5505,  5507,  5509,  5511,  5513,  5515,  5518,  5521,  5524,  5527,
    5530,  5532,  5534,  5536,  5538,  5540,  5542,  5544,  5548,  5554,
    5556,  5558,  5560,  5562,  5564,  5568,  5573,  5579,  5581,  5587,
    5591,  5594,  5596,  5600,  5603,  5605,  5607,  5609,  5611,  5613,
    5615,  5617,  5619,  5621,  5623,  5625,  5627,  5629,  5631,  5635,
    5638,  5640,  5642,  5644,  5646,  5648,  5650,  5652,  5654,  5656,
    5658,  5660,  5662,  5664,  5666,  5668,  5670,  5672,  5674,  5676,
    5678,  5680,  5682,  5684,  5686,  5688,  5690,  5692,  5694,  5696,
    5698,  5700,  5702,  5704,  5706,  5708,  5710,  5712,  5714,  5716,
    5718,  5720,  5722,  5724,  5726,  5728,  5730,  5732,  5734,  5736,
    5738,  5740,  5742,  5744,  5746,  5748,  5750,  5752,  5754,  5756,
    5758,  5760,  5762,  5764,  5766,  5768,  5770,  5772,  5774,  5776,
    5778,  5780,  5782,  5784,  5786,  5788,  5790,  5792,  5794,  5796,
    5798,  5800,  5802,  5804,  5806,  5808,  5810,  5812,  5814,  5816,
    5818,  5820,  5822,  5824,  5826,  5828,  5830,  5832,  5834,  5836,
    5838,  5840,  5842,  5844,  5846,  5848,  5850,  5852,  5854,  5856,
    5858,  5860,  5862,  5864,  5866,  5868,  5870,  5872,  5874,  5876,
    5878,  5880,  5882,  5884,  5886,  5888,  5890,  5892,  5894,  5896,
    5898,  5900,  5902,  5904,  5906,  5908,  5910,  5912,  5914,  5916,
    5918,  5920,  5922,  5924,  5926,  5928,  5930,  5932,  5934,  5936,
    5938,  5940,  5942,  5944,  5946,  5948,  5950,  5952,  5954,  5956,
    5958,  5960,  5962,  5964,  5966,  5968,  5970,  5972,  5974,  5976,
    5978,  5980,  5982,  5984,  5986,  5988,  5990,  5992,  5994,  5996,
    5998,  6000,  6002,  6004,  6006,  6008,  6010,  6012,  6014,  6016,
    6018,  6020,  6022,  6024,  6026,  6028,  6030,  6032,  6034,  6036,
    6038,  6040,  6042,  6044,  6046,  6048,  6050,  6052,  6054,  6056,
    6058,  6060,  6062,  6064,  6066,  6068,  6070,  6072,  6074,  6076,
    6078,  6080,  6082,  6084,  6086,  6088,  6090,  6092,  6094,  6096,
    6098,  6100,  6102,  6104,  6106,  6108,  6110,  6112,  6114,  6116,
    6118,  6120,  6122,  6124,  6126,  6128,  6130,  6132,  6134,  6136,
    6138,  6140,  6142,  6144,  6146,  6148,  6150,  6152,  6154,  6156,
    6158,  6160,  6162,  6164,  6166,  6168,  6170,  6172,  6174,  6176,
    6178,  6180,  6182,  6184,  6186,  6188,  6190,  6192,  6194,  6196,
    6198,  6200,  6202,  6204,  6206,  6208,  6210,  6212,  6214,  6216,
    6218,  6220,  6222,  6224,  6226,  6228,  6230,  6232,  6234,  6236,
    6238,  6240,  6242,  6244,  6246,  6248,  6250,  6252,  6254,  6256,
    6258,  6260,  6261,  6266,  6267,  6269,  6271,  6275,  6276,  6279,
    6281,  6283,  6285,  6287,  6288,  6290,  6291,  6293,  6295,  6297,
    6298,  6301,  6304,  6307,  6309,  6312,  6317,  6323,  6328,  6335,
    6338,  6342,  6346,  6350,  6356,  6358,  6362,  6366,  6369,  6372,
    6375,  6377,  6379,  6384,  6389,  6391,  6393,  6395,  6397,  6399,
    6400,  6405,  6407,  6409,  6411,  6415,  6419,  6421,  6423,  6426,
    6429,  6430,  6434,  6439,  6443,  6444,  6452,  6454,  6457,  6459,
    6461,  6463,  6465,  6467,  6469,  6470,  6476,  6478,  6480,  6482,
    6484,  6486,  6490,  6497,  6504,  6511,  6519,  6523,  6532,  6541,
    6550,  6551,  6553,  6555,  6558,  6559,  6561,  6563,  6567,  6568,
    6572,  6573,  6577,  6578,  6582,  6583,  6587,  6589,  6591,  6593,
    6595,  6597,  6599,  6601,  6603,  6605,  6607,  6609,  6612,  6615,
    6617,  6621,  6624,  6627,  6630,  6633,  6636,  6639,  6642,  6645,
    6647,  6649,  6650,  6652,  6656,  6658,  6661,  6664,  6667,  6669,
    6673,  6677,  6679,  6681,  6685,  6687,  6691,  6696,  6702,  6704,
    6705,  6709,  6713,  6715,  6717,  6718,  6721,  6724,  6727,  6730,
    6731,  6734,  6737,  6739,  6742,  6745,  6748,  6751,  6754,  6755,
    6759,  6760,  6762,  6763,  6767,  6770,  6771,  6773,  6776,  6777,
    6779,  6784,  6789,  6795,  6798,  6802,  6803,  6805,  6806,  6811,
    6812,  6814,  6816,  6817,  6820,  6823,  6825,  6826,  6828,  6830,
    6831,  6837,  6844,  6845,  6846,  6849,  6852,  6856,  6858,  6860,
    6862,  6864,  6866,  6868,  6870,  6872,  6874,  6876,  6878,  6880,
    6882,  6883,  6887,  6889,  6892,  6894,  6897,  6901,  6905,  6909,
    6910,  6914,  6918,  6919,  6927,  6928,  6932,  6934,  6938,  6939,
    6943,  6946,  6951,  6952,  6956,  6961,  6966,  6967,  6968,  6969,
    6986,  6995,  7003,  7004,  7005,  7006,  7007,  7008,  7024,  7025,
    7026,  7027,  7028,  7041,  7046,  7051,  7055,  7060,  7064,  7067,
    7069,  7073,  7079,  7081,  7083,  7084,  7086,  7088,  7089,  7092,
    7093,  7094,  7098,  7099,  7102,  7108
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     602,     0,    -1,   142,    -1,    -1,   605,   603,   597,   604,
      -1,   605,   142,    -1,    -1,   142,    -1,   606,    -1,  1374,
      -1,   919,    -1,   980,    -1,   970,    -1,   982,    -1,   651,
      -1,   618,    -1,   983,    -1,   972,    -1,  1380,    -1,   623,
      -1,   607,    -1,  1216,    -1,  1246,    -1,  1170,    -1,  1172,
      -1,   611,    -1,  1252,    -1,  1349,    -1,  1340,    -1,   616,
      -1,  1180,    -1,  1438,    -1,  1266,    -1,  1269,    -1,  1332,
      -1,   988,    -1,   996,    -1,   783,    -1,  1000,    -1,   609,
      -1,  1262,    -1,  1383,    -1,   991,    -1,   975,    -1,  1183,
      -1,  1258,    -1,   968,    -1,  1347,    -1,  1381,    -1,  1382,
      -1,  1008,    -1,  1315,    -1,  1233,    -1,   957,    -1,   960,
      -1,  1227,    -1,  1439,    -1,  1338,    -1,  1208,    -1,  1268,
      -1,  1430,    -1,   608,   377,  1309,    -1,   109,    -1,   130,
      -1,   377,  1309,   177,   610,    -1,  1306,    -1,   598,  1311,
      -1,    -1,   154,  1309,   612,   613,    -1,    -1,   552,   614,
      -1,   614,   593,   615,    -1,   615,    -1,   598,  1311,    -1,
      -1,   194,   617,  1311,    -1,    -1,    55,   280,   519,   619,
     620,    -1,   621,    -1,   620,   593,   621,    -1,   267,   146,
    1306,    -1,   281,   146,  1306,    -1,   270,   146,  1306,    -1,
     271,   146,  1150,    -1,   266,   146,  1150,    -1,   278,   146,
    1150,    -1,   274,   146,  1306,    -1,   273,   146,  1306,    -1,
     275,   146,  1306,    -1,   276,   146,  1306,    -1,   277,   146,
    1306,    -1,   279,   146,  1150,    -1,   622,    -1,   268,   146,
    1306,    -1,   269,   146,  1152,    -1,   404,   146,  1306,    -1,
     405,   146,  1150,    -1,    -1,    88,   831,   503,   834,  1303,
     624,   774,    -1,    -1,    88,   906,   210,  1309,   908,   340,
    1303,   625,   591,   914,   592,   909,    -1,    -1,    88,    96,
     834,  1309,   626,   828,    -1,    -1,    88,   627,  1396,    -1,
      88,   549,   644,  1365,    -1,    88,   257,   188,   737,    -1,
      88,   501,   734,    -1,    88,   628,    -1,   446,  1311,   173,
      99,   574,  1311,   345,   591,   629,   592,    -1,   630,    -1,
     629,   593,   630,    -1,   549,  1306,    -1,   197,  1306,    -1,
      96,  1306,    -1,   356,  1306,    -1,   365,  1306,    -1,   460,
    1306,    -1,   373,  1150,    -1,    -1,  1024,   152,   834,   645,
     632,   340,   436,   633,   638,   635,   640,   129,   641,    -1,
      -1,   153,  1029,  1120,   634,   636,   637,    -1,    22,  1029,
      -1,    -1,   138,    -1,   123,   340,   457,    -1,   123,    -1,
      -1,   480,  1029,    -1,    -1,   141,  1029,    -1,    -1,   639,
      -1,   340,    74,   378,    -1,   340,    74,   327,   378,    -1,
      -1,    70,  1306,    -1,    -1,   642,   643,    -1,   683,    -1,
     685,    -1,   681,    -1,   702,    -1,   720,    -1,   722,    -1,
     717,    -1,   687,    -1,   689,    -1,   690,    -1,   691,    -1,
     692,    -1,   694,    -1,    -1,  1309,   599,  1309,    -1,  1309,
      -1,    -1,   646,   648,    -1,    -1,   647,   649,    -1,    70,
    1306,    -1,   236,   476,    -1,   329,   476,    -1,    81,   476,
      -1,   392,   476,    99,    -1,   305,   476,    99,    -1,   650,
      -1,   648,    -1,   121,    -1,  1035,   121,    -1,   476,   439,
     114,    -1,   476,   439,   223,    -1,    -1,    49,   645,   652,
     653,    -1,    -1,   591,   654,   592,    -1,    -1,   655,    -1,
     655,   593,  1029,    -1,  1029,    -1,    -1,   657,    -1,   657,
     593,   659,    -1,   659,    -1,    -1,  1309,   658,   857,    -1,
      -1,   661,    -1,   661,   593,   662,    -1,   662,    -1,   663,
     658,  1309,   857,    -1,    -1,   224,    -1,   354,    -1,   215,
      -1,    -1,   664,   680,   597,    -1,   680,   597,    -1,   665,
     680,   597,    -1,    -1,   666,   667,   597,    -1,    -1,   112,
     678,   668,   857,   679,    -1,   112,  1309,    77,   174,   675,
      -1,    -1,   112,   672,   191,   174,   669,   673,   680,    -1,
     112,  1309,    94,   174,   670,    -1,    -1,   671,  1008,    -1,
     156,    -1,    83,    -1,   674,    -1,   673,   593,   674,    -1,
     677,    -1,  1150,    -1,   467,   676,  1307,    -1,    -1,   557,
      -1,   675,    -1,  1309,    -1,   468,    -1,  1035,   175,    -1,
     466,    -1,  1309,    -1,   678,   593,  1309,    -1,    -1,   113,
    1029,    -1,   683,    -1,   685,    -1,   681,    -1,   702,    -1,
     720,    -1,   722,    -1,   717,    -1,   687,    -1,   689,    -1,
     690,    -1,   691,    -1,   692,    -1,   694,    -1,    -1,   206,
     682,   697,   140,   206,    -1,    -1,   684,   606,    -1,    -1,
     425,   686,  1029,    -1,    -1,   688,   726,    -1,   241,  1310,
      -1,   230,  1310,    -1,   343,  1309,    -1,    -1,   164,   695,
    1309,   221,   693,   696,    -1,    63,  1309,    -1,    -1,   323,
     177,    -1,   177,    -1,  1309,    -1,   696,   593,  1309,    -1,
      -1,    -1,    -1,   698,  1029,   511,   699,   665,   700,   701,
      -1,    -1,   137,   697,    -1,   136,   665,    -1,   703,    -1,
     706,    -1,    -1,    -1,    52,   704,  1029,   705,   708,   716,
     140,    52,    -1,    -1,    52,   707,   709,   716,   140,    52,
      -1,   710,    -1,   708,   710,    -1,   713,    -1,   709,   713,
      -1,    -1,    -1,   568,   711,  1029,   712,   511,   665,    -1,
      -1,    -1,   568,   714,  1029,   715,   511,   665,    -1,    -1,
     136,   665,    -1,    -1,  1310,   600,   718,   726,   719,    -1,
      -1,  1310,    -1,    -1,  1310,   600,   721,   724,   719,    -1,
      -1,   723,   724,    -1,    -1,    30,   725,   666,   664,   140,
      -1,   263,   665,   140,   263,    -1,    -1,    -1,   570,   727,
    1029,   129,   728,   665,   140,   570,    -1,    -1,   414,   665,
     545,   729,  1029,   140,   414,    -1,    29,    -1,     8,    -1,
     217,    -1,   546,    -1,   117,    -1,   759,   761,    -1,   759,
      55,   756,   740,    -1,   759,     6,   756,   735,   744,    -1,
      -1,   551,   257,   188,  1309,    -1,   759,     6,   756,   747,
      -1,   759,   130,   756,   747,    -1,   760,   739,   750,    -1,
     760,   739,   753,    -1,     6,   757,    -1,     6,   758,    -1,
      -1,   741,   742,    -1,   743,    -1,   742,   743,    -1,   742,
     593,   743,    -1,   762,    -1,   763,    -1,   764,    -1,   745,
      -1,   746,    -1,   745,   746,    -1,   745,   593,   746,    -1,
     762,    -1,   763,    -1,   764,    -1,   765,    -1,   768,    -1,
     770,    -1,   772,    -1,   769,    -1,   748,    -1,   749,    -1,
     748,   749,    -1,   748,   593,   749,    -1,   762,    -1,   763,
      -1,   764,    -1,   770,    -1,   772,    -1,   751,    -1,   752,
      -1,   751,   752,    -1,   751,   593,   752,    -1,   762,    -1,
     766,    -1,   767,    -1,   768,    -1,   770,    -1,   772,    -1,
     769,    -1,   754,    -1,   755,    -1,   754,   755,    -1,   754,
     593,   755,    -1,   762,    -1,   770,    -1,   772,    -1,    98,
    1306,    -1,   535,  1306,    -1,   399,  1306,    -1,  1309,    -1,
    1309,    -1,   393,    -1,   395,    -1,   327,     4,    -1,   212,
    1200,   773,    -1,    24,  1200,   773,    -1,   286,  1200,   773,
      -1,   159,  1200,   773,    -1,   536,  1200,   773,    -1,   400,
    1200,   773,    -1,   324,  1200,  1151,    -1,    70,  1200,  1306,
      -1,  1239,   144,  1200,   841,    -1,    -1,   772,    -1,   565,
      -1,   330,    -1,  1151,    -1,   203,    -1,   591,   775,    -1,
     835,   780,   777,    -1,   246,  1303,    -1,   591,   246,  1303,
     592,    -1,   847,   592,   835,   780,   777,    -1,    -1,   780,
     824,   592,   776,  1387,    -1,    -1,    -1,  1278,   827,   824,
     778,  1384,    -1,    -1,  1278,   827,   591,   824,   592,   779,
    1387,    -1,    -1,   781,    -1,    -1,   364,   782,   785,    -1,
      -1,   364,   784,   785,    -1,    46,   786,   796,   797,   804,
      -1,   790,   234,   591,   791,   592,    -1,    -1,   790,   192,
     787,   794,    -1,    -1,   391,   788,   794,    -1,    -1,   251,
     789,   794,    -1,    -1,   248,    -1,    -1,   792,    -1,   793,
      -1,   792,   593,   793,    -1,  1309,    -1,   591,  1024,   802,
    1025,   592,    -1,   591,  1024,   802,  1025,   592,    -1,    -1,
     363,  1151,    -1,    -1,    -1,   492,    46,   790,   192,   795,
     798,   803,    -1,    -1,   492,    46,   790,   234,   591,   800,
     592,   799,   803,    -1,   801,    -1,   800,   593,   801,    -1,
    1309,    -1,  1032,    -1,    -1,   491,  1151,    -1,    -1,   591,
     805,   592,    -1,   806,    -1,   805,   593,   806,    -1,    -1,
     364,   807,   808,   809,   821,   816,    -1,  1309,    -1,    -1,
     556,   243,   510,   810,    -1,   556,   224,   591,   813,   592,
      -1,   811,    -1,   812,    -1,   290,    -1,   591,   290,   592,
      -1,   591,   815,   592,    -1,   814,    -1,   813,   593,   814,
      -1,   815,    -1,  1032,    -1,    -1,   591,   817,   592,    -1,
     818,    -1,   817,   593,   818,    -1,    -1,   492,   819,   820,
     821,    -1,  1311,    -1,    -1,   822,    -1,   822,   823,    -1,
     823,    -1,   501,  1200,  1311,    -1,  1239,   144,  1200,   841,
      -1,   324,  1200,  1151,    -1,   285,  1200,  1153,    -1,   302,
    1200,  1153,    -1,    99,   122,  1200,  1306,    -1,   210,   122,
    1200,  1306,    -1,    70,  1200,  1306,    -1,    -1,    -1,   440,
     825,  1018,  1022,   826,   845,    -1,    -1,    18,    -1,    -1,
     829,    -1,   830,    -1,   829,   830,    -1,   840,    -1,   839,
      -1,    -1,   832,    -1,   833,    -1,   833,   832,    -1,   505,
      -1,    -1,   206,  1035,   155,    -1,    -1,   837,    -1,   838,
      -1,   838,   836,    -1,   838,    -1,   838,   837,    -1,   838,
     593,   837,    -1,   144,  1200,   841,    -1,   528,  1200,   841,
      -1,   285,  1200,  1152,    -1,   302,  1200,  1152,    -1,    26,
    1200,  1150,    -1,   365,  1200,  1306,    -1,    70,  1200,  1306,
      -1,    25,  1200,  1152,    -1,   357,  1200,  1150,    -1,   357,
    1200,   113,    -1,    59,  1200,  1150,    -1,   504,  1200,  1150,
      -1,   116,  1200,  1150,    -1,   432,  1200,   843,    -1,   540,
    1200,   591,  1257,   592,    -1,   839,    -1,   840,    -1,   218,
    1200,   844,    -1,    99,   122,  1200,  1306,    -1,   210,   122,
    1200,  1306,    -1,   501,  1309,    -1,   486,   125,    -1,   486,
     295,    -1,    78,  1200,  1306,    -1,   233,  1200,  1150,    -1,
     888,   879,  1200,   881,    -1,   888,    66,  1200,   887,    -1,
    1311,    -1,  1311,    -1,   113,    -1,   167,    -1,   134,    -1,
      75,    -1,   401,    -1,    73,    -1,   329,    -1,   166,    -1,
     237,    -1,  1145,    -1,  1017,  1021,    -1,   488,    -1,   396,
      -1,   111,    -1,   222,    -1,   848,    -1,   847,   593,   848,
      -1,   849,    -1,   850,    -1,   855,   851,    -1,   855,   893,
      -1,   901,   916,   908,   591,   914,   592,   909,    -1,   853,
     902,   916,   908,   591,   914,   592,   909,    -1,   853,   173,
     234,   916,   591,   914,   592,   893,    -1,   854,   851,    -1,
     853,   852,    -1,    -1,   852,    -1,    60,  1029,    -1,    -1,
     854,    -1,    80,   916,    -1,    -1,  1302,   856,   857,   875,
      -1,   865,   873,   869,    -1,   866,   874,   869,    -1,   169,
     867,   869,    -1,    38,    -1,    38,   872,    -1,    43,    -1,
      42,    -1,   861,   872,   889,    -1,   861,   889,    -1,   862,
     872,   890,    -1,   862,   890,    -1,    33,   872,    -1,    33,
      -1,   863,   872,   889,    -1,   864,   872,   890,    -1,   558,
     872,    -1,   580,   873,   869,    -1,   103,    -1,   515,    -1,
     512,   873,    -1,   100,    -1,   516,    -1,    40,   873,    -1,
     860,    -1,   291,    -1,   259,    -1,   262,   558,    -1,   262,
     863,   889,    -1,   518,   889,    -1,   509,   873,   889,    -1,
     293,   889,    -1,   260,   889,    -1,   111,   867,   869,    -1,
     336,   867,   869,    -1,   167,   867,   869,    -1,    -1,   145,
     858,   591,   918,   592,   889,    -1,    -1,   448,   859,   591,
     918,   592,   889,    -1,   262,   889,    -1,   444,    -1,   183,
      -1,   182,    -1,   371,    -1,   310,    -1,   250,    -1,   309,
      -1,   372,    -1,   311,    -1,    58,    -1,   318,    -1,   315,
      58,    -1,   861,   562,    -1,   559,    -1,   315,   559,    -1,
     337,    -1,   318,   559,    -1,   315,    58,   562,    -1,   318,
     562,    -1,   222,    -1,   517,    -1,   458,    -1,   292,    -1,
      32,    -1,   396,    -1,   128,    -1,   128,   376,    -1,    -1,
     872,    -1,   868,    -1,   591,   335,   593,   335,   592,    -1,
      -1,   870,    -1,   870,   871,    -1,   871,    -1,   455,    -1,
     544,    -1,   581,    -1,   591,   261,   592,    -1,   591,   530,
     592,    -1,   591,   110,   592,    -1,   591,   335,   592,    -1,
      -1,   872,    -1,    -1,   868,    -1,    -1,   876,    -1,   876,
     877,    -1,   877,    -1,   333,    -1,  1035,   333,    -1,   113,
     878,    -1,   340,   546,   328,  1028,    -1,    25,    -1,   444,
     113,   557,    -1,   892,   234,    -1,   541,    -1,   541,   234,
      -1,    70,  1306,    -1,    66,   885,    -1,   328,  1028,    -1,
    1293,    -1,    58,   448,    -1,    57,    -1,  1311,    -1,    33,
      -1,   880,    -1,   113,    -1,    -1,   879,   881,    -1,  1311,
      -1,    33,    -1,   883,    -1,   113,    -1,  1311,    -1,    -1,
      66,   887,    -1,   885,    -1,   113,    -1,    -1,   113,    -1,
      -1,    20,   890,    -1,    47,    -1,   538,   890,    -1,   879,
     880,   890,    -1,    33,   891,    -1,    -1,    33,    -1,    -1,
      20,    -1,   538,    -1,   879,   880,    -1,    -1,   380,    -1,
      -1,   402,  1303,   894,   895,    -1,   897,    -1,   591,   896,
     592,   897,    -1,   896,   593,  1309,    -1,  1309,    -1,    -1,
     898,    -1,   898,   899,    -1,   899,    -1,   340,   117,   900,
      -1,   340,   546,   900,    -1,   282,   178,    -1,   282,   361,
      -1,   282,   456,    -1,   422,    -1,    50,    -1,   448,   333,
      -1,   329,     5,    -1,   448,   113,    -1,   903,    -1,   179,
     904,    -1,   464,   904,    -1,   380,   234,    -1,   541,   904,
      -1,   234,    -1,   210,    -1,    -1,   903,    -1,   232,    -1,
     210,    -1,   209,    -1,    -1,   541,    -1,   179,    -1,   464,
      -1,    -1,   907,    -1,   907,   911,    -1,    -1,   910,    -1,
     912,    -1,   910,   912,    -1,   552,   913,    -1,   528,   913,
      -1,   911,    -1,   233,  1200,  1150,    -1,   571,   360,  1305,
      -1,    45,    -1,   434,    -1,   192,    -1,   914,   593,   915,
    1143,    -1,   915,  1143,    -1,  1309,    -1,  1309,   591,   335,
     592,    -1,    -1,  1302,    -1,    -1,   599,  1309,    -1,  1291,
      -1,   918,   593,  1291,    -1,    -1,    13,   953,   503,  1303,
     920,   931,    -1,    -1,    13,    96,   930,   921,   829,    -1,
      13,    96,  1309,   547,    99,   122,   314,    -1,    -1,    13,
     382,   645,   922,   646,    -1,    -1,    13,   180,   645,   923,
     646,    -1,    -1,    13,  1404,  1399,   924,  1406,    -1,    -1,
      13,  1399,   925,  1406,    -1,    -1,    13,  1399,   152,   645,
     926,   927,   928,   635,   640,   929,    -1,    13,   501,   736,
      -1,    13,   257,   188,   738,    -1,    13,   501,   733,    -1,
      13,   501,   732,    -1,    13,   446,  1311,   345,   591,   629,
     592,    -1,    -1,   340,   436,   633,    -1,   639,    -1,   340,
     436,   633,   639,    -1,    -1,   410,   519,   645,    -1,    -1,
     129,   641,    -1,    -1,  1309,    -1,    -1,   124,   501,    -1,
     208,   501,    -1,   946,   780,    -1,   946,   935,    -1,   935,
      -1,   781,    -1,   937,    -1,   130,   364,   944,    -1,   397,
     364,   990,   936,    -1,    -1,   344,   364,   990,   936,   932,
     990,    -1,    14,   364,   990,   936,    -1,    -1,    60,   364,
     936,   933,   985,    -1,    -1,   412,   364,   990,   936,   934,
     977,    -1,    64,   364,   990,  1151,    -1,   940,    -1,   409,
     362,    -1,    12,    -1,   944,    -1,    -1,     6,   364,   990,
     938,   939,    -1,    -1,   591,   805,   592,    -1,   363,  1151,
      -1,    -1,   411,   364,   990,   941,   942,    -1,    -1,    -1,
     944,   943,   221,   591,   805,   592,    -1,   945,    -1,   944,
     593,   945,    -1,  1309,    -1,   948,    -1,   946,   593,   948,
      -1,     6,   952,    -1,   947,   849,   955,    -1,     6,   850,
      -1,   947,   591,   847,   592,    -1,    -1,    55,   952,  1302,
     949,   855,   955,    -1,    -1,    -1,   306,   952,  1302,   950,
     857,   875,   951,   955,    -1,   130,   952,  1302,   954,    -1,
     130,   173,   234,   916,    -1,   130,   380,   234,    -1,   130,
     903,  1302,    -1,   123,   232,    -1,   138,   232,    -1,    13,
     952,  1302,   448,   113,  1293,    -1,    13,   952,  1302,   130,
     113,    -1,   410,   956,  1303,    -1,    85,   519,   879,   881,
     886,    -1,   836,    -1,   172,    -1,  1136,    -1,    -1,    69,
      -1,    -1,   207,    -1,    -1,   422,    -1,    50,    -1,    -1,
       8,  1309,    -1,   166,    -1,    -1,   519,    -1,   146,    -1,
      18,    -1,    -1,   481,   457,   962,   958,   966,    -1,   485,
     457,   962,    -1,    -1,   457,   481,   962,   959,   966,    -1,
     457,   485,   962,    -1,   481,   521,   961,    -1,    -1,   571,
      79,   459,    -1,    -1,   963,   964,    -1,   965,    -1,   964,
     593,   965,    -1,    -1,   477,    -1,   406,    -1,    -1,   545,
     967,    -1,   622,    -1,   967,   593,   622,    -1,    -1,   421,
    1334,   969,  1174,   177,  1306,    -1,    -1,    28,  1334,   971,
    1174,   519,  1306,    -1,    -1,    59,  1334,   973,  1174,   974,
      -1,    -1,   390,    -1,   158,    -1,    -1,   412,   990,  1334,
     976,  1174,   977,    -1,    -1,   978,    -1,   979,    -1,   979,
     978,    -1,   390,    -1,   158,    -1,   550,    -1,    -1,    14,
     990,  1334,   981,  1174,    -1,    34,  1306,    -1,    -1,    60,
    1334,   984,  1174,   985,    -1,    -1,   986,    -1,   987,    -1,
     987,   986,    -1,   390,    -1,   162,    -1,   294,    -1,   158,
      -1,    56,    -1,   174,   547,    -1,    -1,   344,   990,  1334,
     989,  1174,    -1,    -1,   331,    -1,   253,    -1,    -1,   410,
    1334,   992,   994,    -1,   410,   549,   644,   993,    -1,  1312,
     519,  1312,    -1,   993,   593,  1312,   519,  1312,    -1,   995,
      -1,   994,   593,   995,    -1,  1303,   519,  1303,    -1,    48,
     210,   997,   224,   999,    -1,   998,    -1,   997,   593,   998,
      -1,  1303,  1004,    -1,  1309,    -1,   113,    -1,    -1,   252,
     210,   221,    48,  1001,  1002,    -1,  1003,    -1,  1002,   593,
    1003,    -1,  1303,  1004,  1007,    -1,    -1,  1005,  1006,    -1,
      -1,   903,   591,  1116,   592,    -1,    -1,   207,   240,    -1,
    1009,    -1,   440,  1011,    -1,   591,  1010,   592,  1387,    -1,
     440,  1013,    -1,   591,  1010,   592,    -1,    -1,  1013,  1012,
    1384,    -1,    -1,    -1,  1014,  1018,  1022,  1015,  1016,  1021,
      -1,  1139,  1145,    -1,  1165,    -1,  1017,    -1,  1165,  1017,
      -1,  1017,  1165,    -1,   177,  1084,  1127,  1132,  1129,  1139,
    1145,  1156,    -1,   177,   131,  1127,  1145,    -1,    -1,  1019,
      -1,  1019,  1020,    -1,  1020,    -1,   487,    -1,   196,    -1,
     126,    -1,   475,    -1,   469,    -1,   470,    -1,   472,    -1,
     473,    -1,   474,    -1,   471,    -1,    12,    -1,    -1,   174,
     546,    -1,   256,   224,   450,   304,    -1,  1022,   593,  1023,
      -1,  1023,    -1,   586,    -1,  1024,  1026,  1025,  1027,    -1,
      -1,    -1,  1297,    -1,  1029,    -1,    -1,    18,  1309,    -1,
      18,  1306,    -1,  1309,    -1,  1306,    -1,    -1,   591,   592,
      -1,  1029,  1033,  1029,    -1,  1029,   578,  1029,    -1,  1029,
    1034,  1029,    -1,   327,  1029,    -1,  1030,   227,   525,    -1,
    1030,   227,  1035,   525,    -1,  1030,   227,   161,    -1,  1030,
     227,  1035,   161,    -1,  1030,   227,   542,    -1,  1030,   227,
    1035,   542,    -1,  1030,    -1,  1030,   227,   333,    -1,  1030,
     227,  1035,   333,    -1,  1030,   147,  1031,    -1,  1030,  1037,
    1031,    -1,  1030,  1037,  1038,   591,  1393,   592,    -1,  1031,
      -1,  1032,   224,   591,  1393,   592,    -1,  1032,  1035,   224,
     591,  1393,   592,    -1,  1032,   224,   591,  1029,   592,    -1,
    1032,   224,   591,  1029,   593,  1077,   592,    -1,  1032,  1035,
     224,   591,  1029,   592,    -1,  1032,  1035,   224,   591,  1029,
     593,  1077,   592,    -1,  1032,    31,  1032,    16,  1031,    -1,
    1032,  1035,    31,  1032,    16,  1031,    -1,  1032,   462,   246,
    1032,    -1,  1032,   246,  1039,  1131,    -1,  1032,  1035,   246,
    1039,  1131,    -1,  1032,   403,  1032,    -1,  1032,  1035,   403,
    1032,    -1,  1032,    -1,  1032,   582,  1032,    -1,  1032,   583,
    1032,    -1,  1032,   451,  1032,    -1,  1032,   452,  1032,    -1,
    1032,   585,  1032,    -1,  1032,   584,  1032,    -1,  1032,   585,
     220,  1029,  1120,    -1,  1032,   584,   220,  1029,  1120,    -1,
    1032,   586,  1032,    -1,  1032,   587,  1032,    -1,  1032,   588,
    1032,    -1,  1032,   127,  1032,    -1,  1032,   307,  1032,    -1,
    1032,   589,  1032,    -1,  1039,    -1,   351,    -1,   348,    -1,
      16,    -1,    15,    -1,   327,    -1,   326,    -1,   594,    -1,
     326,    -1,   146,    -1,   181,    -1,   190,    -1,   238,    -1,
     265,    -1,   320,    -1,    12,    -1,    17,    -1,  1299,    -1,
    1040,    -1,  1041,    -1,  1044,    -1,  1058,    -1,  1042,    -1,
    1039,    66,  1311,    -1,  1294,    -1,  1292,    -1,  1067,    -1,
    1065,    -1,  1039,   350,  1039,    -1,   585,  1039,    -1,   584,
    1039,    -1,   590,  1039,    -1,  1036,  1039,    -1,   591,  1393,
     592,    -1,   591,  1029,   592,    -1,   591,  1029,   593,  1077,
     592,    -1,   433,   591,  1029,   593,  1077,   592,    -1,   155,
     591,  1393,   592,    -1,   595,  1309,  1029,   596,    -1,   282,
    1078,     9,   591,  1032,  1059,   592,    -1,    33,  1039,    -1,
      53,   591,  1029,    18,  1075,   592,    -1,    52,  1080,  1082,
    1081,   140,    -1,    85,   591,  1029,   593,  1075,   592,    -1,
      85,   591,  1029,   552,   880,   592,    -1,   113,   591,  1299,
     592,    -1,   556,   591,  1300,   592,    -1,   220,  1029,  1120,
     585,  1029,    -1,    58,   591,  1077,   592,    -1,    58,   591,
    1077,   552,   880,   592,    -1,    93,  1028,    -1,   103,   591,
    1029,   592,    -1,   108,   591,  1029,   592,    -1,   202,   591,
    1029,   592,    -1,   217,   591,  1029,   593,  1029,   593,  1029,
     593,  1029,   592,    -1,   220,   591,  1029,   593,  1029,   592,
      -1,   220,   591,  1029,   593,  1029,   593,  1077,   592,    -1,
     242,   591,  1029,   593,  1029,   592,    -1,   301,   591,  1029,
     592,    -1,   308,   591,  1029,   592,    -1,   427,   591,  1029,
     593,  1029,   592,    -1,   438,   591,  1029,   592,    -1,   515,
     591,  1029,   592,    -1,   512,   591,  1029,   592,    -1,   512,
     591,  1029,   593,  1029,   592,    -1,   524,   591,  1029,   592,
      -1,   524,   591,   239,  1029,   177,  1029,   592,    -1,   524,
     591,   520,  1029,   177,  1029,   592,    -1,   524,   591,    44,
    1029,   177,  1029,   592,    -1,   524,   591,   239,   177,  1029,
     592,    -1,   524,   591,   520,   177,  1029,   592,    -1,   524,
     591,    44,   177,  1029,   592,    -1,   524,   591,  1029,   177,
    1029,   592,    -1,   549,   591,   592,    -1,   580,   591,  1029,
     592,    -1,     7,   591,  1029,   593,  1029,   592,    -1,     7,
     591,  1029,   593,   220,  1029,  1120,   592,    -1,    91,  1028,
      -1,    95,  1028,    -1,    95,   591,  1029,   592,    -1,   101,
     591,  1029,   593,   220,  1029,  1120,   592,    -1,   102,   591,
    1029,   593,   220,  1029,  1120,   592,    -1,   160,   591,  1120,
     177,  1029,   592,    -1,   184,   591,  1123,   593,  1029,   592,
      -1,   328,  1028,    -1,   328,   591,  1029,   592,    -1,   374,
     591,  1032,   224,  1029,   592,    -1,   489,   591,  1029,   593,
    1029,   592,    -1,   489,   591,  1029,   593,   220,  1029,  1120,
     592,    -1,   493,   591,  1029,   593,  1029,   593,  1029,   592,
      -1,   493,   591,  1029,   593,  1029,   592,    -1,   493,   591,
    1029,   177,  1029,   174,  1029,   592,    -1,   493,   591,  1029,
     177,  1029,   592,    -1,   499,  1028,    -1,   499,   591,  1029,
     592,    -1,   513,   591,  1121,   593,  1029,   593,  1029,   592,
      -1,   514,   591,  1121,   593,  1029,   593,  1029,   592,    -1,
     553,  1028,    -1,   555,  1028,    -1,   554,  1028,    -1,    20,
     591,  1029,   592,    -1,    57,   591,  1029,   592,    -1,    64,
     591,  1077,   592,    -1,    67,   591,  1029,   592,    -1,    96,
     591,   592,    -1,   206,   591,  1029,   593,  1029,   593,  1029,
     592,    -1,   297,   591,  1029,   592,    -1,   307,   591,  1029,
     593,  1029,   592,    -1,   339,   591,  1029,   592,    -1,   365,
     591,  1029,   592,    -1,   388,   591,  1029,   592,    -1,   414,
     591,  1029,   593,  1029,   592,    -1,   415,   591,  1029,   593,
    1029,   593,  1029,   592,    -1,   526,   591,  1029,   593,  1029,
     592,    -1,   567,   591,  1029,   592,    -1,   567,   591,  1029,
     593,  1029,   592,    -1,  1043,    -1,    81,   591,  1029,   593,
    1029,   592,    -1,   182,   591,  1077,   592,    -1,   250,   591,
    1077,   592,    -1,   309,   591,  1077,   592,    -1,   310,   591,
    1077,   592,    -1,   311,   591,  1077,   592,    -1,   371,   591,
    1029,   593,  1029,   592,    -1,   372,   591,  1077,   592,    -1,
    1305,   591,  1062,   592,  1048,    -1,  1305,   591,  1062,   592,
    1047,  1048,    -1,   494,   591,  1073,   592,  1048,    -1,   494,
     591,   126,  1073,   592,  1048,    -1,    27,   591,  1073,   592,
    1048,    -1,    27,   591,   126,  1073,   592,  1048,    -1,    86,
     591,  1126,   586,   592,  1048,    -1,    86,   591,  1073,   592,
    1048,    -1,    86,   591,   126,  1077,   592,  1048,    -1,   303,
     591,  1073,   592,  1048,    -1,   303,   591,   126,  1073,   592,
    1048,    -1,   287,   591,  1073,   592,  1048,    -1,   287,   591,
     126,  1073,   592,  1048,    -1,   561,   591,  1073,   592,  1048,
      -1,   563,   591,  1073,   592,  1048,    -1,   484,   591,  1073,
     592,  1048,    -1,   483,   591,  1073,   592,  1048,    -1,   332,
     591,  1063,   592,  1045,  1046,  1048,    -1,   366,   591,  1064,
     592,   572,   188,   591,   349,    46,  1051,   592,  1048,    -1,
     367,   591,  1064,   592,   572,   188,   591,   349,    46,  1051,
     592,  1048,    -1,    -1,   177,   166,    -1,   177,   237,    -1,
      -1,  1047,    -1,   420,   334,    -1,   207,   334,    -1,   355,
     591,  1049,  1050,   592,    -1,    -1,   364,    46,  1077,    -1,
      -1,  1054,    -1,   349,    46,  1051,  1053,    -1,  1051,   593,
    1298,  1143,  1052,    -1,  1298,  1143,  1052,    -1,    -1,   334,
     166,    -1,   334,   237,    -1,    -1,  1054,    -1,  1055,    31,
    1056,    16,  1056,    -1,  1055,  1056,    -1,   431,    -1,   391,
      -1,   531,  1057,    -1,    92,   433,    -1,  1029,  1057,    -1,
     220,  1029,  1120,  1057,    -1,   375,    -1,   171,    -1,  1305,
     591,  1062,   592,    -1,  1309,   599,  1309,   591,  1076,   592,
      -1,  1060,  1061,    -1,   224,    42,   304,    -1,    -1,   224,
     316,   236,   304,    -1,    -1,   571,   389,   157,    -1,    -1,
    1063,    -1,  1064,    -1,  1063,   593,  1064,    -1,  1024,  1029,
    1025,  1027,    -1,    27,   591,  1073,   592,    -1,    27,   591,
     126,  1073,   592,    -1,    36,   591,  1073,   592,    -1,    37,
     591,  1073,   592,    -1,    39,   591,  1073,   592,    -1,    86,
     591,  1126,   586,   592,    -1,    86,   591,  1073,   592,    -1,
      86,   591,   126,  1077,   592,    -1,   303,   591,  1073,   592,
      -1,   303,   591,   126,  1073,   592,    -1,   287,   591,  1073,
     592,    -1,   287,   591,   126,  1073,   592,    -1,   484,   591,
    1073,   592,    -1,   561,   591,  1073,   592,    -1,   483,   591,
    1073,   592,    -1,   563,   591,  1073,   592,    -1,   494,   591,
    1073,   592,    -1,   494,   591,   126,  1073,   592,    -1,    -1,
     189,   591,  1070,  1066,  1077,  1072,  1071,   592,    -1,    -1,
     598,  1068,  1069,    -1,  1311,   449,  1029,    -1,  1311,    -1,
     598,  1324,  1311,   917,    -1,    -1,   126,    -1,    -1,   442,
    1291,    -1,    -1,  1140,    -1,    -1,  1126,  1074,  1029,    -1,
      33,   873,    -1,    58,   873,   889,    -1,   318,   873,    -1,
     455,    -1,   455,   222,    -1,   544,    -1,   544,   222,    -1,
     103,    -1,   515,    -1,   100,    -1,   111,   867,    -1,    -1,
    1077,    -1,  1029,    -1,  1077,   593,  1029,    -1,  1079,    -1,
     591,  1079,   592,    -1,  1299,    -1,  1079,   593,  1299,    -1,
      -1,  1029,    -1,    -1,   136,  1029,    -1,   568,  1029,   511,
    1029,    -1,  1082,   568,  1029,   511,  1029,    -1,  1096,    -1,
    1087,    -1,  1086,    -1,  1083,    -1,   595,  1309,  1083,   596,
      -1,  1085,    -1,  1086,   593,  1085,    -1,  1083,  1095,  1083,
      -1,  1083,   487,  1096,    -1,    -1,  1083,  1095,  1083,   340,
    1088,  1029,    -1,    -1,  1083,   487,  1096,   340,  1089,  1029,
      -1,    -1,  1083,  1095,  1083,   552,  1090,   591,  1119,   592,
      -1,  1083,   316,   231,  1096,    -1,    -1,  1083,   242,  1105,
     231,  1083,   340,  1091,  1029,    -1,    -1,  1083,   242,  1105,
     231,  1096,  1092,   552,   591,  1119,   592,    -1,  1083,   316,
     242,  1105,   231,  1096,    -1,    -1,  1083,   427,  1105,   231,
    1083,   340,  1093,  1029,    -1,    -1,  1083,   427,  1105,   231,
    1096,  1094,   552,   591,  1119,   592,    -1,  1083,   316,   427,
    1105,   231,  1096,    -1,   231,    -1,   213,   231,    -1,    89,
     231,    -1,    -1,  1097,  1303,  1125,  1114,    -1,  1104,  1103,
    1100,    -1,   591,  1103,  1098,  1387,   592,  1125,    -1,    -1,
    1103,  1099,  1086,    -1,    -1,    -1,  1101,  1018,  1022,  1102,
     845,    -1,    -1,   440,    -1,    -1,   352,    -1,    -1,   174,
     231,    -1,   174,   349,    46,    -1,   174,   188,    46,    -1,
     172,    -1,   207,    -1,    -1,  1107,   903,  1106,  1109,   591,
    1118,   592,    -1,    -1,   551,   903,  1106,  1110,   591,  1116,
     592,    -1,  1108,    -1,  1111,  1108,    -1,    -1,    -1,  1113,
    1111,    -1,    -1,  1115,  1112,    -1,    -1,  1118,    -1,  1309,
      -1,   380,    -1,  1117,    -1,  1118,   593,  1117,    -1,  1309,
      -1,  1119,   593,  1309,    -1,  1122,    -1,   104,    -1,   105,
      -1,   106,    -1,   107,    -1,   199,    -1,   200,    -1,   201,
      -1,   299,    -1,   300,    -1,   437,    -1,   579,    -1,  1122,
      -1,   176,    -1,   108,    -1,   567,    -1,   202,    -1,   301,
      -1,   308,    -1,   388,    -1,   438,    -1,   297,    -1,   580,
      -1,   103,    -1,   515,    -1,   100,    -1,   512,    -1,    -1,
      18,    -1,   146,    -1,    -1,  1124,  1309,    -1,    -1,    12,
      -1,    -1,    -1,   569,  1128,  1029,    -1,    -1,    -1,   193,
    1130,  1029,    -1,   150,  1039,    -1,    -1,    -1,    -1,   188,
      46,  1133,  1134,  1135,    -1,  1134,   593,  1298,  1143,    -1,
    1298,  1143,    -1,    -1,   571,    90,    -1,   571,   429,    -1,
     349,    46,  1137,    -1,  1137,   593,  1138,    -1,  1138,    -1,
    1300,  1143,    -1,    -1,  1140,    -1,    -1,   349,    46,  1141,
    1142,    -1,  1142,   593,  1298,  1143,    -1,  1298,  1143,    -1,
      -1,    19,    -1,   118,    -1,    -1,  1146,    -1,    -1,  1146,
      -1,   247,  1147,    -1,  1148,    -1,  1148,   593,  1148,    -1,
    1148,   338,  1148,    -1,  1292,    -1,   530,    -1,   261,    -1,
     335,    -1,    -1,   247,  1148,    -1,   335,    -1,   195,    -1,
     261,    -1,   530,    -1,   110,    -1,   168,    -1,   335,    -1,
     195,    -1,   261,    -1,   530,    -1,  1154,    -1,   335,    -1,
     530,    -1,   261,    -1,   110,    -1,   168,    -1,   335,    -1,
     530,    -1,   261,    -1,  1154,    -1,  1155,    -1,   110,    -1,
     168,    -1,    -1,    -1,   382,  1309,  1157,   591,  1158,   592,
      -1,    -1,  1159,    -1,  1159,   593,  1160,    -1,  1160,    -1,
    1024,  1029,  1025,    -1,    -1,  1162,  1163,    -1,  1163,   593,
    1164,    -1,  1164,    -1,   598,  1311,    -1,  1311,    -1,    -1,
     221,  1166,  1167,    -1,    -1,    -1,   353,  1308,  1168,   882,
    1169,  1279,  1282,    -1,   132,  1308,    -1,  1161,    -1,    -1,
     129,  1171,  1077,    -1,   130,  1179,  1334,  1178,  1174,   954,
      -1,    -1,   130,   210,  1309,   340,  1303,  1173,    -1,   130,
      96,  1178,  1309,    -1,   130,   180,  1178,  1309,   599,  1309,
      -1,   130,   180,  1178,  1309,    -1,   130,   382,  1178,   645,
      -1,   130,   549,   644,  1364,    -1,   130,   564,  1178,  1174,
     954,    -1,   130,   152,  1178,   645,    -1,   130,   523,  1178,
     645,    -1,   130,   501,   759,   770,   771,    -1,   130,   257,
     188,   760,   770,   771,    -1,   130,   446,  1178,  1311,    -1,
    1175,    -1,  1174,   593,  1175,    -1,  1303,    -1,  1177,    -1,
    1176,   593,  1177,    -1,  1303,    -1,    -1,   206,   155,    -1,
      -1,   505,    -1,    -1,    -1,   217,  1181,  1186,   953,  1188,
    1182,  1190,  1206,    -1,    -1,    -1,   415,  1184,  1187,  1188,
    1185,  1190,    -1,    -1,   264,    -1,   115,    -1,   196,    -1,
    1215,    -1,   115,    -1,   221,  1189,    -1,  1189,    -1,  1175,
      -1,  1193,    -1,   591,   592,  1193,    -1,   591,  1192,   592,
    1193,    -1,    -1,   448,  1191,  1197,    -1,  1192,   593,  1296,
      -1,  1296,    -1,   556,  1196,    -1,   557,  1196,    -1,    -1,
     824,  1194,  1384,    -1,    -1,   591,   824,   592,  1195,  1387,
      -1,  1196,   593,  1201,    -1,  1201,    -1,  1197,   593,  1198,
      -1,  1198,    -1,  1300,  1199,  1205,    -1,   146,    -1,   449,
      -1,    -1,  1199,    -1,    -1,   591,  1202,  1203,   592,    -1,
      -1,  1204,    -1,  1204,   593,  1205,    -1,  1205,    -1,  1029,
      -1,   113,    -1,    -1,    -1,   340,   133,  1207,   234,   546,
    1213,    -1,    -1,    -1,   546,  1209,  1215,   953,  1084,   448,
    1211,  1210,  1127,  1139,  1149,    -1,  1211,   593,  1212,    -1,
    1212,    -1,  1300,  1199,  1205,    -1,  1213,   593,  1214,    -1,
    1214,    -1,  1300,  1199,  1205,    -1,    -1,   264,    -1,    -1,
     117,  1217,  1225,  1218,    -1,    -1,   177,  1303,  1219,  1127,
    1139,  1149,    -1,    -1,  1222,  1220,   177,  1084,  1127,    -1,
      -1,   177,  1176,  1221,   552,  1084,  1127,    -1,  1223,    -1,
    1222,   593,  1223,    -1,  1309,  1224,  1125,    -1,  1309,   599,
    1309,  1224,  1125,    -1,    -1,   599,   586,    -1,    -1,  1226,
    1225,    -1,   390,    -1,   264,    -1,   207,    -1,   526,  1228,
    1175,    -1,    -1,   503,    -1,    -1,  1230,    -1,  1231,    -1,
    1230,   593,  1231,    -1,    87,    -1,   295,    -1,    41,   225,
      -1,    82,   498,    -1,   358,   163,    -1,   226,    -1,   497,
      -1,   463,    -1,    12,    -1,    -1,   174,   389,   335,    -1,
      -1,   453,  1234,  1235,    -1,    97,  1245,    -1,  1241,   500,
    1240,  1245,    -1,  1241,   522,  1240,  1245,    -1,   151,  1240,
    1245,    -1,   503,   482,  1240,  1245,    -1,   343,   500,  1240,
    1245,    -1,  1241,   370,    -1,   369,    -1,   144,   842,  1237,
      -1,   144,    12,  1237,    -1,  1241,    68,  1242,  1303,  1240,
    1245,    -1,   322,   280,   174,   457,   571,   268,   146,  1306,
      16,   269,   146,  1152,    16,   272,   146,  1150,    -1,  1238,
     258,    -1,   457,   198,    -1,    -1,    34,   151,  1243,  1244,
    1236,  1144,    -1,   905,  1242,  1303,  1240,  1127,    -1,    69,
     527,    -1,   503,   527,    -1,  1239,   143,    -1,    23,    -1,
      84,    -1,   381,    -1,    86,   591,   586,   592,   566,    -1,
      86,   591,   586,   592,   148,    -1,   566,  1144,    -1,   148,
    1144,    -1,   386,    -1,   385,  1229,  1232,  1144,    -1,  1323,
     482,  1245,    -1,   214,   482,    -1,   312,   482,    -1,  1241,
     384,    -1,  1323,   560,  1245,    -1,   879,  1245,    -1,    67,
    1245,    -1,   187,    -1,   187,   174,  1312,    -1,    88,    96,
     834,  1309,    -1,    88,   503,  1303,    -1,    88,   564,  1303,
      -1,   280,   482,    -1,   457,   482,    -1,    88,   382,   645,
      -1,    88,   180,   645,    -1,    88,   523,   645,    -1,   382,
     482,  1245,    -1,   180,   482,  1245,    -1,   382,    65,   645,
      -1,   180,    65,   645,    -1,    88,   152,   645,    -1,   482,
      -1,   312,    -1,   258,    -1,   280,    -1,    33,    -1,    -1,
     486,    -1,    -1,  1242,  1309,    -1,    -1,   178,    -1,   177,
      -1,   224,    -1,    -1,   224,  1306,    -1,    -1,   177,  1152,
      -1,    -1,   246,  1306,    -1,   569,  1029,    -1,    -1,  1249,
    1303,  1247,  1251,    -1,    -1,  1249,  1250,  1248,  1008,    -1,
     118,    -1,   119,    -1,    -1,   158,    -1,   363,    -1,    -1,
    1291,    -1,  1309,    -1,    -1,   170,   990,  1253,  1254,    -1,
    1254,   593,  1255,    -1,  1255,    -1,    -1,  1334,  1256,  1257,
      -1,   500,   571,   394,   256,    -1,   389,    48,    -1,   198,
      -1,   381,    -1,   258,    -1,   482,    -1,   457,    -1,   280,
      -1,   120,    -1,   419,    -1,    -1,  1174,    -1,    -1,   418,
    1259,  1260,    -1,  1260,   593,  1261,    -1,  1261,    -1,   457,
      -1,   280,    -1,   389,    48,    -1,    -1,   387,  1263,  1264,
      -1,  1238,   258,  1265,    -1,   519,  1306,    -1,    29,  1029,
      -1,   235,  1267,  1029,    -1,    -1,    78,    -1,   389,    -1,
     551,  1309,    -1,    -1,   252,    99,  1270,  1271,    -1,   252,
     503,  1303,   177,   280,    -1,    -1,    -1,    -1,    -1,  1277,
    1276,   211,  1308,  1272,  1278,   221,  1273,   503,  1303,  1274,
     882,  1275,  1279,  1282,  1285,  1286,  1289,    -1,   177,   280,
      -1,    -1,   253,    -1,    -1,    76,    -1,   264,    -1,    -1,
     415,    -1,   207,    -1,    -1,    68,  1280,    -1,  1280,  1281,
      -1,  1281,    -1,   507,    46,  1291,    -1,   347,   139,    46,
    1291,    -1,   139,    46,  1291,    -1,   149,    46,  1291,    -1,
      -1,   249,  1283,    -1,  1283,  1284,    -1,  1284,    -1,   507,
      46,  1291,    -1,   479,    46,  1291,    -1,    -1,   207,   335,
     249,    -1,    -1,   591,  1287,   592,    -1,   591,   592,    -1,
    1287,   593,  1288,    -1,  1288,    -1,  1300,    -1,   598,  1311,
      -1,    -1,   448,  1213,    -1,   508,    -1,   317,    -1,   534,
     508,    -1,  1290,  1307,    -1,  1307,    -1,   195,    -1,    35,
      -1,   359,    -1,  1294,    -1,   585,  1295,    -1,   584,  1295,
      -1,  1290,    -1,  1295,    -1,   333,    -1,   161,    -1,   525,
      -1,   195,    -1,    35,    -1,   534,   195,    -1,   534,    35,
      -1,   103,  1290,    -1,   515,  1290,    -1,   512,  1290,    -1,
     335,    -1,   261,    -1,   530,    -1,   110,    -1,   168,    -1,
    1300,    -1,  1297,    -1,  1309,   599,   586,    -1,  1309,   599,
    1309,   599,   586,    -1,  1029,    -1,  1309,    -1,  1301,    -1,
    1309,    -1,  1301,    -1,  1309,   599,  1309,    -1,   599,  1309,
     599,  1309,    -1,  1309,   599,  1309,   599,  1309,    -1,  1309,
      -1,  1309,   599,  1309,   599,  1309,    -1,  1309,   599,  1309,
      -1,   599,  1309,    -1,  1309,    -1,  1309,   599,  1309,    -1,
     599,  1309,    -1,  1309,    -1,   203,    -1,   205,    -1,   508,
      -1,   508,    -1,   508,    -1,  1305,    -1,  1313,    -1,  1305,
      -1,  1314,    -1,  1309,    -1,  1306,    -1,   245,    -1,  1311,
      -1,  1311,   598,  1311,    -1,    93,  1028,    -1,  1314,    -1,
      20,    -1,    28,    -1,    30,    -1,    47,    -1,    48,    -1,
      57,    -1,    59,    -1,    63,    -1,    70,    -1,    72,    -1,
      81,    -1,   109,    -1,   129,    -1,   140,    -1,   154,    -1,
     170,    -1,   191,    -1,   194,    -1,   197,    -1,   219,    -1,
     236,    -1,   329,    -1,   343,    -1,   345,    -1,   356,    -1,
     360,    -1,   364,    -1,   373,    -1,   377,    -1,   409,    -1,
     412,    -1,   418,    -1,   421,    -1,   428,    -1,   435,    -1,
     439,    -1,   446,    -1,   455,    -1,   460,    -1,   457,    -1,
     461,    -1,   481,    -1,   485,    -1,   526,    -1,   538,    -1,
     539,    -1,   574,    -1,   577,    -1,   547,    -1,     5,    -1,
       7,    -1,     8,    -1,     9,    -1,    10,    -1,    11,    -1,
      17,    -1,    22,    -1,    23,    -1,    25,    -1,    24,    -1,
      26,    -1,    27,    -1,    34,    -1,    38,    -1,    41,    -1,
      43,    -1,    42,    -1,    45,    -1,    51,    -1,    54,    -1,
      56,    -1,    61,    -1,    62,    -1,    64,    -1,    65,    -1,
      67,    -1,    68,    -1,    71,    -1,    73,    -1,    74,    -1,
      75,    -1,    76,    -1,    78,    -1,    79,    -1,    82,    -1,
      84,    -1,    87,    -1,    90,    -1,    99,    -1,    98,    -1,
     100,    -1,   103,    -1,   108,    -1,   114,    -1,   116,    -1,
     120,    -1,   122,    -1,   123,    -1,   124,    -1,   125,    -1,
     132,    -1,   133,    -1,   134,    -1,   141,    -1,   145,    -1,
     144,    -1,   143,    -1,   148,    -1,   150,    -1,   152,    -1,
     151,    -1,   153,    -1,   157,    -1,   158,    -1,   159,    -1,
     163,    -1,   162,    -1,   175,    -1,   138,    -1,   178,    -1,
     165,    -1,   166,    -1,   167,    -1,   176,    -1,   183,    -1,
     182,    -1,   184,    -1,   187,    -1,   185,    -1,   192,    -1,
     198,    -1,   202,    -1,   204,    -1,   223,    -1,   208,    -1,
     209,    -1,   212,    -1,   225,    -1,   226,    -1,   228,    -1,
     229,    -1,   214,    -1,   218,    -1,   233,    -1,   237,    -1,
     240,    -1,   243,    -1,   244,    -1,   250,    -1,   251,    -1,
     253,    -1,   255,    -1,   257,    -1,   258,    -1,   285,    -1,
     280,    -1,   267,    -1,   271,    -1,   268,    -1,   269,    -1,
     281,    -1,   270,    -1,   272,    -1,   266,    -1,   278,    -1,
     274,    -1,   273,    -1,   275,    -1,   276,    -1,   277,    -1,
     283,    -1,   284,    -1,   286,    -1,   288,    -1,   289,    -1,
     290,    -1,   294,    -1,   295,    -1,   296,    -1,   297,    -1,
     298,    -1,   301,    -1,   302,    -1,   306,    -1,   304,    -1,
     308,    -1,   309,    -1,   310,    -1,   311,    -1,   312,    -1,
     314,    -1,   313,    -1,   315,    -1,   318,    -1,   319,    -1,
     323,    -1,   322,    -1,   330,    -1,   324,    -1,   325,    -1,
     337,    -1,   338,    -1,   339,    -1,   341,    -1,   342,    -1,
     357,    -1,   358,    -1,   361,    -1,   362,    -1,   363,    -1,
     365,    -1,   368,    -1,   370,    -1,   369,    -1,   371,    -1,
     372,    -1,   378,    -1,   379,    -1,   381,    -1,   383,    -1,
     384,    -1,   385,    -1,   386,    -1,   388,    -1,   389,    -1,
     390,    -1,   393,    -1,   397,    -1,   398,    -1,   400,    -1,
     399,    -1,   401,    -1,   404,    -1,   405,    -1,   406,    -1,
     408,    -1,   411,    -1,   413,    -1,   416,    -1,   419,    -1,
     423,    -1,   424,    -1,   429,    -1,   430,    -1,   431,    -1,
     432,    -1,   433,    -1,   434,    -1,   436,    -1,   438,    -1,
     444,    -1,   443,    -1,   445,    -1,   456,    -1,   450,    -1,
     454,    -1,   459,    -1,   462,    -1,   463,    -1,   471,    -1,
     470,    -1,   473,    -1,   474,    -1,   477,    -1,   480,    -1,
     482,    -1,   486,    -1,   488,    -1,   489,    -1,   490,    -1,
     492,    -1,   491,    -1,   495,    -1,   496,    -1,   497,    -1,
     498,    -1,   500,    -1,   504,    -1,   501,    -1,   505,    -1,
     506,    -1,   509,    -1,   510,    -1,   521,    -1,   522,    -1,
     512,    -1,   513,    -1,   514,    -1,   515,    -1,   527,    -1,
     528,    -1,   529,    -1,   180,    -1,   532,    -1,   533,    -1,
     536,    -1,   535,    -1,   542,    -1,   545,    -1,   549,    -1,
     550,    -1,   560,    -1,   564,    -1,   557,    -1,   566,    -1,
     565,    -1,   567,    -1,   573,    -1,   576,    -1,   580,    -1,
      -1,   448,  1317,  1316,  1318,    -1,    -1,   346,    -1,  1319,
      -1,  1318,   593,  1319,    -1,    -1,  1320,  1325,    -1,  1322,
      -1,   185,    -1,   253,    -1,   445,    -1,    -1,   341,    -1,
      -1,   185,    -1,   253,    -1,   445,    -1,    -1,   185,   599,
      -1,   253,   599,    -1,   445,   599,    -1,  1326,    -1,  1322,
    1327,    -1,  1321,  1328,  1199,  1331,    -1,  1321,   521,   228,
     244,  1329,    -1,   598,  1311,  1199,  1029,    -1,   598,   598,
    1324,  1328,  1199,  1331,    -1,   879,   884,    -1,   313,  1199,
    1029,    -1,   313,   881,   886,    -1,   365,  1199,  1330,    -1,
     365,   174,  1312,  1199,  1330,    -1,  1309,    -1,  1309,   599,
    1309,    -1,   113,   599,  1309,    -1,   394,   532,    -1,   394,
      71,    -1,   413,   394,    -1,   443,    -1,   508,    -1,   365,
     591,   508,   592,    -1,   339,   591,   508,   592,    -1,  1029,
      -1,   113,    -1,   340,    -1,    12,    -1,    33,    -1,    -1,
     256,  1334,  1333,  1335,    -1,   503,    -1,   500,    -1,  1336,
      -1,  1335,   593,  1336,    -1,  1303,  1125,  1337,    -1,   394,
      -1,   575,    -1,   264,   575,    -1,   394,   253,    -1,    -1,
     543,  1339,  1334,    -1,   191,  1303,   343,  1125,    -1,   191,
    1304,    63,    -1,    -1,   191,  1304,   394,  1341,  1342,  1127,
    1145,    -1,  1343,    -1,  1309,  1344,    -1,   166,    -1,   323,
      -1,   166,    -1,   323,    -1,   379,    -1,   237,    -1,    -1,
    1346,  1345,   591,  1204,   592,    -1,   146,    -1,   181,    -1,
     238,    -1,   190,    -1,   265,    -1,   426,   644,  1348,    -1,
    1352,   340,  1351,  1363,   177,  1365,    -1,  1352,   340,   180,
    1363,   177,  1365,    -1,  1352,   340,   382,  1363,   177,  1365,
      -1,    12,  1353,   593,   186,   346,   177,  1365,    -1,   186,
     644,  1350,    -1,  1352,   340,  1351,  1363,   519,  1365,  1370,
    1371,    -1,  1352,   340,   180,  1363,   519,  1365,  1370,  1371,
      -1,  1352,   340,   382,  1363,   519,  1365,  1370,  1371,    -1,
      -1,   503,    -1,  1354,    -1,    12,  1353,    -1,    -1,   381,
      -1,  1355,    -1,  1354,   593,  1355,    -1,    -1,   440,  1356,
    1367,    -1,    -1,   217,  1357,  1367,    -1,    -1,   546,  1358,
    1367,    -1,    -1,   402,  1359,  1367,    -1,   117,    -1,   548,
      -1,   210,    -1,    13,    -1,    88,    -1,   130,    -1,   154,
      -1,   408,    -1,   454,    -1,   383,    -1,   165,    -1,   186,
     346,    -1,   453,    97,    -1,   495,    -1,    88,   505,   500,
      -1,   256,   500,    -1,   416,   457,    -1,   416,    62,    -1,
      88,   564,    -1,   453,   564,    -1,    88,   430,    -1,    13,
     430,    -1,    88,   549,    -1,   152,    -1,   523,    -1,    -1,
      16,    -1,  1362,  1360,  1361,    -1,  1362,    -1,   490,   508,
      -1,   229,   508,    -1,    61,   508,    -1,   586,    -1,  1309,
     599,   586,    -1,   586,   599,   586,    -1,  1303,    -1,  1312,
      -1,  1364,   593,  1312,    -1,  1366,    -1,  1365,   593,  1366,
      -1,  1312,   204,    46,   508,    -1,  1312,   204,    46,   365,
     508,    -1,  1312,    -1,    -1,   591,  1368,   592,    -1,  1368,
     593,  1369,    -1,  1369,    -1,  1309,    -1,    -1,   417,  1361,
      -1,   417,   478,    -1,   417,   576,    -1,   417,   325,    -1,
      -1,   571,  1372,    -1,  1372,  1373,    -1,  1373,    -1,   186,
     346,    -1,   284,  1150,    -1,   288,  1150,    -1,   283,  1150,
      -1,   289,  1150,    -1,    -1,    30,  1375,  1376,    -1,    -1,
     573,    -1,    -1,    16,   329,    54,    -1,    16,    54,    -1,
      -1,   407,    -1,   329,   407,    -1,    -1,   435,    -1,    72,
    1376,  1377,  1378,    -1,   428,  1376,  1377,  1378,    -1,   428,
    1376,   519,  1379,  1309,    -1,   435,  1309,    -1,   407,   435,
    1309,    -1,    -1,  1385,    -1,    -1,   540,  1391,  1386,  1009,
      -1,    -1,  1385,    -1,  1388,    -1,    -1,  1389,  1390,    -1,
    1140,  1144,    -1,  1146,    -1,    -1,   126,    -1,    12,    -1,
      -1,   440,  1394,  1011,  1392,  1395,    -1,   591,  1394,  1010,
    1392,  1395,   592,    -1,    -1,    -1,  1401,  1397,    -1,  1400,
    1398,    -1,  1402,  1399,  1406,    -1,  1406,    -1,  1414,    -1,
    1425,    -1,  1419,    -1,   631,    -1,  1406,    -1,  1414,    -1,
    1425,    -1,  1419,    -1,  1418,    -1,   631,    -1,  1400,    -1,
    1401,    -1,    -1,   114,   146,  1312,    -1,  1403,    -1,  1403,
    1404,    -1,  1404,    -1,   351,   415,    -1,    11,   146,   533,
      -1,    11,   146,   296,    -1,    11,   146,   506,    -1,    -1,
     476,   439,   114,    -1,   476,   439,   223,    -1,    -1,  1405,
     564,  1303,  1407,  1408,    18,  1410,    -1,    -1,   591,  1409,
     592,    -1,  1309,    -1,  1409,   593,  1309,    -1,    -1,  1411,
    1412,  1413,    -1,   440,  1011,    -1,   591,  1010,   592,  1387,
      -1,    -1,   571,    60,   346,    -1,   571,    51,    60,   346,
      -1,   571,   253,    60,   346,    -1,    -1,    -1,    -1,   523,
    1024,   645,   730,   731,   340,  1024,  1415,  1303,   174,  1024,
    1416,   135,   433,  1417,   680,    -1,    10,  1024,   180,  1309,
     424,   846,   461,  1306,    -1,  1024,   180,  1309,   424,   846,
     461,  1306,    -1,    -1,    -1,    -1,    -1,    -1,  1024,   180,
     645,   591,  1420,   656,   592,  1421,   424,  1422,   857,  1423,
     647,  1424,   680,    -1,    -1,    -1,    -1,    -1,   382,  1024,
     645,  1426,   591,  1427,   660,   592,  1428,   647,  1429,   680,
      -1,   577,  1432,  1431,  1433,    -1,   577,   140,  1431,  1435,
      -1,   577,   377,  1431,    -1,   577,    72,  1431,  1434,    -1,
     577,   428,  1431,    -1,   577,   398,    -1,  1291,    -1,  1291,
     593,  1291,    -1,  1291,   593,  1291,   593,  1150,    -1,    30,
      -1,   481,    -1,    -1,   231,    -1,   423,    -1,    -1,   342,
     368,    -1,    -1,    -1,   496,  1436,  1437,    -1,    -1,   174,
     298,    -1,   219,   370,  1309,   461,  1306,    -1,   539,   370,
    1309,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1388,  1388,  1401,  1400,  1425,  1432,  1434,  1438,  1439,
    1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,  1452,  1453,
    1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,  1463,
    1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,  1472,  1473,
    1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,
    1484,  1485,  1486,  1487,  1488,  1489,  1490,  1491,  1492,  1493,
    1494,  1498,  1508,  1509,  1513,  1523,  1530,  1541,  1540,  1551,
    1553,  1557,  1558,  1562,  1575,  1574,  1594,  1593,  1604,  1605,
    1609,  1613,  1617,  1621,  1625,  1629,  1634,  1638,  1642,  1646,
    1650,  1654,  1659,  1663,  1667,  1683,  1687,  1699,  1698,  1733,
    1731,  1762,  1761,  1774,  1773,  1781,  1785,  1789,  1793,  1800,
    1813,  1814,  1818,  1822,  1826,  1830,  1834,  1838,  1842,  1850,
    1849,  1881,  1880,  1887,  1894,  1895,  1900,  1905,  1914,  1920,
    1926,  1928,  1935,  1936,  1940,  1946,  1955,  1956,  1964,  1964,
    2022,  2023,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,
    2032,  2033,  2034,  2039,  2053,  2069,  2088,  2089,  2093,  2094,
    2099,  2101,  2103,  2105,  2107,  2109,  2111,  2117,  2118,  2119,
    2123,  2127,  2135,  2134,  2147,  2149,  2152,  2154,  2158,  2162,
    2169,  2171,  2175,  2176,  2181,  2200,  2226,  2228,  2232,  2233,
    2237,  2263,  2264,  2265,  2266,  2270,  2271,  2275,  2276,  2281,
    2284,  2311,  2310,  2375,  2391,  2390,  2438,  2464,  2464,  2486,
    2487,  2492,  2494,  2499,  2522,  2530,  2547,  2548,  2552,  2556,
    2565,  2572,  2579,  2589,  2604,  2622,  2623,  2627,  2628,  2629,
    2630,  2631,  2632,  2633,  2634,  2635,  2636,  2637,  2638,  2639,
    2644,  2643,  2650,  2650,  2706,  2705,  2733,  2733,  2747,  2800,
    2843,  2864,  2863,  2885,  2904,  2906,  2907,  2911,  2931,  2954,
    2956,  2971,  2954,  2990,  2992,  2993,  2997,  2998,  3003,  3009,
    3002,  3028,  3027,  3043,  3044,  3048,  3049,  3054,  3058,  3053,
    3077,  3081,  3076,  3098,  3108,  3113,  3112,  3148,  3149,  3154,
    3153,  3186,  3186,  3201,  3200,  3236,  3248,  3250,  3247,  3276,
    3275,  3295,  3297,  3302,  3304,  3306,  3323,  3328,  3334,  3341,
    3342,  3350,  3356,  3365,  3371,  3377,  3378,  3382,  3382,  3387,
    3388,  3389,  3393,  3394,  3395,  3399,  3403,  3404,  3405,  3409,
    3410,  3411,  3412,  3413,  3414,  3415,  3416,  3420,  3424,  3425,
    3426,  3430,  3431,  3432,  3433,  3434,  3438,  3442,  3443,  3444,
    3448,  3449,  3450,  3451,  3452,  3453,  3454,  3458,  3462,  3463,
    3464,  3468,  3469,  3470,  3475,  3483,  3491,  3499,  3511,  3523,
    3528,  3533,  3541,  3549,  3557,  3565,  3573,  3581,  3589,  3602,
    3615,  3628,  3630,  3634,  3639,  3652,  3653,  3704,  3705,  3708,
    3722,  3739,  3744,  3742,  3749,  3751,  3750,  3754,  3753,  3783,
    3784,  3789,  3788,  3821,  3820,  3837,  3841,  3848,  3847,  3851,
    3850,  3854,  3853,  3859,  3860,  3865,  3866,  3870,  3871,  3875,
    3886,  3901,  3917,  3918,  3934,  3936,  3935,  3940,  3938,  3949,
    3950,  3954,  3965,  3981,  3982,  3998,  3999,  4022,  4023,  4028,
    4027,  4052,  4063,  4083,  4098,  4116,  4128,  4144,  4145,  4149,
    4159,  4160,  4164,  4181,  4240,  4252,  4279,  4280,  4285,  4284,
    4322,  4327,  4328,  4332,  4333,  4337,  4339,  4345,  4347,  4349,
    4351,  4353,  4355,  4365,  4381,  4364,  4395,  4396,  4400,  4401,
    4405,  4406,  4410,  4411,  4415,  4416,  4420,  4421,  4425,  4429,
    4430,  4433,  4435,  4439,  4440,  4444,  4445,  4446,  4450,  4455,
    4462,  4467,  4472,  4477,  4482,  4487,  4492,  4507,  4513,  4518,
    4523,  4528,  4533,  4548,  4549,  4550,  4555,  4560,  4565,  4567,
    4569,  4571,  4577,  4585,  4603,  4620,  4643,  4657,  4658,  4659,
    4660,  4661,  4662,  4666,  4667,  4668,  4672,  4673,  4677,  4678,
    4679,  4680,  4684,  4685,  4689,  4690,  4694,  4695,  4702,  4717,
    4729,  4753,  4757,  4763,  4765,  4769,  4773,  4774,  4778,  4783,
    4782,  4805,  4806,  4807,  4808,  4813,  4817,  4822,  4827,  4831,
    4836,  4841,  4847,  4852,  4858,  4862,  4867,  4872,  4874,  4876,
    4878,  4891,  4893,  4898,  4903,  4915,  4920,  4925,  4930,  4932,
    4934,  4936,  4938,  4940,  4942,  4944,  4947,  4946,  4951,  4950,
    4954,  4956,  4965,  4966,  4967,  4972,  4973,  4974,  4975,  4976,
    4980,  4984,  4985,  4989,  4990,  4994,  4995,  4996,  4997,  4998,
    5002,  5003,  5004,  5005,  5006,  5010,  5015,  5017,  5023,  5024,
    5026,  5031,  5040,  5041,  5045,  5046,  5050,  5051,  5052,  5056,
    5057,  5058,  5059,  5062,  5063,  5066,  5067,  5071,  5072,  5076,
    5077,  5081,  5082,  5083,  5084,  5091,  5092,  5098,  5104,  5110,
    5116,  5117,  5133,  5139,  5144,  5145,  5149,  5157,  5161,  5162,
    5166,  5167,  5171,  5180,  5184,  5185,  5189,  5200,  5201,  5205,
    5206,  5210,  5211,  5215,  5216,  5217,  5218,  5227,  5228,  5232,
    5233,  5237,  5238,  5239,  5248,  5251,  5253,  5258,  5257,  5270,
    5271,  5275,  5282,  5292,  5293,  5297,  5298,  5302,  5303,  5304,
    5305,  5306,  5310,  5311,  5312,  5313,  5314,  5318,  5319,  5320,
    5333,  5334,  5338,  5339,  5343,  5344,  5348,  5349,  5350,  5354,
    5355,  5356,  5357,  5370,  5382,  5383,  5387,  5388,  5392,  5393,
    5397,  5398,  5402,  5403,  5405,  5418,  5419,  5420,  5424,  5425,
    5429,  5435,  5449,  5450,  5454,  5455,  5459,  5460,  5468,  5467,
    5494,  5493,  5507,  5519,  5518,  5537,  5536,  5555,  5554,  5573,
    5567,  5587,  5586,  5619,  5624,  5629,  5634,  5639,  5649,  5650,
    5651,  5652,  5656,  5657,  5669,  5670,  5674,  5675,  5678,  5680,
    5681,  5682,  5684,  5686,  5687,  5696,  5697,  5701,  5710,  5708,
    5718,  5728,  5727,  5737,  5735,  5745,  5752,  5756,  5763,  5767,
    5772,  5771,  5787,  5789,  5794,  5803,  5802,  5818,  5822,  5821,
    5833,  5834,  5838,  5853,  5854,  5858,  5867,  5868,  5872,  5877,
    5876,  5884,  5893,  5883,  5905,  5914,  5918,  5927,  5936,  5942,
    5948,  5957,  5966,  5985,  6006,  6011,  6015,  6023,  6024,  6028,
    6029,  6033,  6034,  6035,  6039,  6040,  6041,  6045,  6046,  6047,
    6048,  6057,  6056,  6067,  6075,  6074,  6084,  6093,  6102,  6103,
    6110,  6110,  6116,  6117,  6121,  6122,  6123,  6127,  6128,  6144,
    6145,  6150,  6149,  6161,  6160,  6172,  6171,  6181,  6182,  6183,
    6188,  6187,  6200,  6201,  6205,  6206,  6210,  6211,  6212,  6217,
    6216,  6229,  6238,  6237,  6255,  6256,  6260,  6261,  6265,  6266,
    6267,  6268,  6269,  6270,  6275,  6274,  6287,  6288,  6289,  6294,
    6293,  6299,  6306,  6311,  6319,  6320,  6324,  6337,  6346,  6347,
    6351,  6360,  6361,  6366,  6365,  6375,  6376,  6380,  6389,  6389,
    6400,  6401,  6406,  6407,  6416,  6425,  6426,  6430,  6460,  6465,
    6464,  6484,  6492,  6484,  6499,  6500,  6501,  6502,  6503,  6507,
    6514,  6521,  6523,  6534,  6535,  6539,  6540,  6547,  6548,  6549,
    6550,  6556,  6562,  6568,  6572,  6586,  6589,  6591,  6599,  6610,
    6611,  6612,  6627,  6653,  6659,  6665,  6666,  6670,  6671,  6672,
    6673,  6674,  6678,  6679,  6684,  6735,  6742,  6785,  6791,  6797,
    6803,  6809,  6815,  6821,  6827,  6831,  6837,  6843,  6849,  6855,
    6861,  6865,  6871,  6881,  6887,  6895,  6901,  6911,  6917,  6926,
    6936,  6942,  6952,  6958,  6967,  6971,  6977,  6983,  6989,  6995,
    7001,  7007,  7013,  7019,  7025,  7031,  7037,  7043,  7049,  7055,
    7059,  7060,  7064,  7065,  7069,  7070,  7074,  7075,  7079,  7080,
    7081,  7082,  7083,  7084,  7088,  7089,  7093,  7094,  7095,  7096,
    7097,  7098,  7099,  7111,  7112,  7113,  7114,  7115,  7121,  7125,
    7131,  7137,  7143,  7149,  7151,  7158,  7165,  7171,  7173,  7182,
    7189,  7197,  7203,  7210,  7216,  7230,  7237,  7253,  7259,  7265,
    7273,  7279,  7285,  7291,  7297,  7312,  7324,  7330,  7336,  7342,
    7348,  7354,  7360,  7366,  7372,  7378,  7384,  7390,  7396,  7402,
    7408,  7414,  7420,  7428,  7449,  7456,  7462,  7469,  7476,  7483,
    7490,  7497,  7503,  7509,  7516,  7523,  7529,  7536,  7542,  7548,
    7554,  7560,  7566,  7576,  7586,  7592,  7598,  7605,  7612,  7627,
    7633,  7639,  7645,  7651,  7658,  7664,  7670,  7676,  7682,  7694,
    7700,  7706,  7712,  7718,  7730,  7736,  7752,  7758,  7765,  7772,
    7779,  7786,  7793,  7797,  7810,  7835,  7871,  7879,  7893,  7901,
    7915,  7923,  7931,  7959,  7967,  7981,  7989,  8003,  8011,  8019,
    8027,  8036,  8048,  8056,  8067,  8068,  8069,  8072,  8073,  8076,
    8077,  8080,  8108,  8109,  8113,  8114,  8119,  8140,  8146,  8160,
    8161,  8162,  8166,  8167,  8171,  8186,  8199,  8200,  8204,  8209,
    8214,  8220,  8230,  8231,  8248,  8319,  8351,  8353,  8358,  8359,
    8363,  8364,  8368,  8369,  8373,  8380,  8388,  8408,  8414,  8420,
    8426,  8432,  8438,  8447,  8468,  8474,  8485,  8491,  8497,  8503,
    8509,  8515,  8521,  8527,  8533,  8540,  8539,  8558,  8557,  8572,
    8582,  8590,  8606,  8607,  8612,  8617,  8622,  8625,  8639,  8638,
    8655,  8657,  8659,  8661,  8663,  8665,  8667,  8669,  8671,  8673,
    8675,  8680,  8681,  8685,  8692,  8700,  8701,  8705,  8712,  8720,
    8721,  8725,  8726,  8730,  8738,  8748,  8749,  8758,  8769,  8770,
    8775,  8776,  8796,  8798,  8802,  8800,  8817,  8815,  8833,  8831,
    8838,  8847,  8845,  8863,  8862,  8872,  8883,  8881,  8900,  8899,
    8910,  8921,  8922,  8923,  8928,  8928,  8941,  8963,  9016,  9015,
    9038,  9055,  9038,  9062,  9066,  9092,  9093,  9098,  9102,  9103,
    9104,  9108,  9109,  9114,  9113,  9119,  9118,  9126,  9127,  9130,
    9132,  9132,  9136,  9136,  9141,  9142,  9146,  9148,  9153,  9154,
    9158,  9169,  9182,  9183,  9184,  9185,  9186,  9187,  9188,  9189,
    9190,  9191,  9192,  9193,  9197,  9198,  9217,  9218,  9219,  9220,
    9221,  9222,  9223,  9224,  9225,  9229,  9230,  9231,  9232,  9235,
    9237,  9238,  9242,  9243,  9251,  9253,  9257,  9259,  9258,  9272,
    9275,  9274,  9289,  9295,  9310,  9313,  9312,  9320,  9322,  9327,
    9328,  9341,  9359,  9363,  9364,  9368,  9381,  9383,  9388,  9387,
    9422,  9424,  9429,  9430,  9431,  9436,  9442,  9446,  9447,  9451,
    9455,  9462,  9469,  9479,  9483,  9489,  9495,  9505,  9509,  9518,
    9519,  9520,  9521,  9522,  9523,  9527,  9528,  9529,  9530,  9531,
    9535,  9536,  9537,  9538,  9539,  9543,  9544,  9545,  9546,  9550,
    9555,  9556,  9559,  9562,  9561,  9593,  9594,  9598,  9599,  9603,
    9615,  9615,  9626,  9627,  9631,  9650,  9683,  9682,  9695,  9703,
    9694,  9705,  9717,  9729,  9728,  9745,  9752,  9752,  9766,  9773,
    9796,  9817,  9829,  9833,  9839,  9845,  9852,  9857,  9862,  9872,
    9873,  9877,  9885,  9886,  9890,  9900,  9901,  9905,  9906,  9914,
    9924,  9913,  9934,  9941,  9933,  9951,  9963,  9964,  9965,  9969,
    9970,  9974,  9975,  9979,  9988,  9989,  9990,  9992,  9991, 10002,
   10003, 10007, 10008, 10010, 10009, 10013, 10012, 10018, 10019, 10023,
   10024, 10028, 10038, 10039, 10043, 10044, 10049, 10048, 10062, 10063,
   10067, 10072, 10080, 10081, 10089, 10091, 10091, 10099, 10108, 10098,
   10130, 10131, 10135, 10143, 10144, 10148, 10158, 10159, 10166, 10165,
   10179, 10178, 10187, 10186, 10194, 10193, 10203, 10204, 10208, 10220,
   10235, 10236, 10240, 10241, 10245, 10246, 10247, 10251, 10261, 10263,
   10266, 10268, 10271, 10272, 10275, 10279, 10283, 10287, 10291, 10295,
   10299, 10303, 10307, 10315, 10318, 10328, 10327, 10341, 10348, 10356,
   10364, 10372, 10380, 10388, 10396, 10403, 10405, 10407, 10416, 10429,
   10433, 10438, 10437, 10442, 10451, 10456, 10464, 10471, 10476, 10481,
   10486, 10488, 10490, 10492, 10494, 10496, 10503, 10511, 10523, 10535,
   10537, 10545, 10552, 10559, 10569, 10576, 10582, 10591, 10599, 10603,
   10607, 10614, 10621, 10627, 10634, 10641, 10651, 10661, 10669, 10671,
   10673, 10678, 10679, 10682, 10684, 10688, 10689, 10693, 10694, 10698,
   10699, 10703, 10704, 10708, 10709, 10712, 10714, 10721, 10732, 10731,
   10745, 10744, 10754, 10755, 10759, 10760, 10761, 10765, 10766, 10767,
   10782, 10781, 10793, 10794, 10799, 10798, 10801, 10803, 10805, 10807,
   10809, 10811, 10813, 10815, 10817, 10819, 10824, 10825, 10830, 10829,
   10839, 10840, 10844, 10845, 10846, 10851, 10850, 10861, 10865, 10869,
   10881, 10891, 10892, 10893, 10899, 10911, 10910, 10925, 10943, 10954,
   10958, 10968, 10942, 10972, 10982, 10983, 10987, 10988, 11000, 11004,
   11005, 11006, 11009, 11011, 11015, 11016, 11020, 11025, 11032, 11037,
   11044, 11046, 11050, 11051, 11055, 11060, 11067, 11069, 11077, 11078,
   11079, 11083, 11085, 11090, 11091, 11100, 11101, 11107, 11131, 11143,
   11154, 11173, 11181, 11193, 11208, 11229, 11230, 11231, 11239, 11240,
   11241, 11248, 11254, 11260, 11266, 11272, 11301, 11329, 11330, 11331,
   11335, 11345, 11355, 11361, 11370, 11385, 11386, 11390, 11399, 11415,
   11419, 11466, 11470, 11488, 11492, 11571, 11596, 11627, 11628, 11644,
   11654, 11658, 11664, 11670, 11680, 11690, 11691, 11720, 11736, 11752,
   11769, 11770, 11781, 11782, 11793, 11794, 11795, 11799, 11813, 11826,
   11841, 11842, 11843, 11844, 11845, 11846, 11847, 11848, 11849, 11850,
   11851, 11852, 11853, 11854, 11855, 11856, 11857, 11858, 11859, 11860,
   11861, 11862, 11863, 11864, 11865, 11866, 11867, 11868, 11869, 11870,
   11871, 11872, 11873, 11874, 11875, 11876, 11877, 11878, 11879, 11880,
   11881, 11882, 11883, 11884, 11885, 11886, 11887, 11888, 11889, 11890,
   11900, 11901, 11902, 11903, 11904, 11905, 11906, 11907, 11908, 11909,
   11910, 11911, 11912, 11913, 11914, 11915, 11916, 11917, 11918, 11919,
   11920, 11921, 11922, 11923, 11924, 11925, 11926, 11927, 11928, 11929,
   11930, 11931, 11932, 11933, 11934, 11935, 11936, 11937, 11938, 11939,
   11940, 11941, 11942, 11943, 11944, 11945, 11946, 11947, 11948, 11949,
   11950, 11951, 11952, 11953, 11954, 11955, 11956, 11957, 11958, 11959,
   11960, 11961, 11962, 11963, 11964, 11965, 11966, 11967, 11968, 11969,
   11970, 11971, 11972, 11973, 11974, 11975, 11976, 11977, 11978, 11979,
   11980, 11981, 11982, 11983, 11984, 11985, 11986, 11987, 11988, 11989,
   11990, 11991, 11992, 11993, 11994, 11995, 11996, 11997, 11998, 11999,
   12000, 12001, 12002, 12003, 12004, 12005, 12006, 12007, 12008, 12009,
   12010, 12011, 12012, 12013, 12014, 12015, 12016, 12017, 12018, 12019,
   12020, 12021, 12022, 12023, 12024, 12025, 12026, 12027, 12028, 12029,
   12030, 12031, 12032, 12033, 12034, 12035, 12036, 12037, 12038, 12039,
   12040, 12041, 12042, 12043, 12044, 12045, 12046, 12047, 12048, 12049,
   12050, 12051, 12052, 12053, 12054, 12055, 12056, 12057, 12058, 12059,
   12060, 12061, 12062, 12063, 12064, 12065, 12066, 12067, 12068, 12069,
   12070, 12071, 12072, 12073, 12074, 12075, 12076, 12077, 12078, 12079,
   12080, 12081, 12082, 12083, 12084, 12085, 12086, 12087, 12088, 12089,
   12090, 12091, 12092, 12093, 12094, 12095, 12096, 12097, 12098, 12099,
   12100, 12101, 12102, 12103, 12104, 12105, 12106, 12107, 12108, 12109,
   12110, 12111, 12112, 12113, 12114, 12115, 12116, 12117, 12118, 12119,
   12120, 12121, 12122, 12123, 12124, 12125, 12126, 12127, 12128, 12129,
   12130, 12131, 12132, 12133, 12134, 12135, 12136, 12137, 12138, 12139,
   12140, 12141, 12142, 12143, 12144, 12145, 12146, 12147, 12148, 12149,
   12150, 12151, 12152, 12153, 12154, 12155, 12156, 12157, 12158, 12159,
   12160, 12167, 12166, 12181, 12182, 12186, 12187, 12191, 12191, 12272,
   12273, 12274, 12275, 12279, 12280, 12284, 12285, 12286, 12287, 12291,
   12292, 12293, 12294, 12298, 12299, 12303, 12401, 12420, 12431, 12439,
   12453, 12468, 12487, 12514, 12527, 12559, 12602, 12616, 12617, 12618,
   12619, 12623, 12624, 12633, 12645, 12646, 12647, 12653, 12659, 12671,
   12670, 12686, 12687, 12691, 12692, 12696, 12708, 12709, 12710, 12711,
   12716, 12715, 12735, 12747, 12760, 12759, 12785, 12786, 12790, 12791,
   12795, 12796, 12797, 12798, 12800, 12799, 12812, 12813, 12814, 12815,
   12816, 12822, 12827, 12833, 12844, 12855, 12862, 12867, 12874, 12886,
   12900, 12902, 12906, 12907, 12914, 12916, 12920, 12921, 12926, 12925,
   12929, 12928, 12932, 12931, 12935, 12934, 12937, 12938, 12939, 12940,
   12941, 12942, 12943, 12944, 12945, 12946, 12947, 12948, 12949, 12950,
   12951, 12952, 12953, 12954, 12955, 12956, 12957, 12958, 12959, 12960,
   12961, 12965, 12966, 12970, 12971, 12975, 12985, 12995, 13008, 13023,
   13036, 13049, 13061, 13066, 13074, 13079, 13087, 13114, 13116, 13122,
   13126, 13130, 13131, 13135, 13162, 13164, 13168, 13172, 13176, 13183,
   13184, 13188, 13189, 13193, 13194, 13200, 13206, 13212, 13222, 13221,
   13231, 13232, 13237, 13238, 13239, 13244, 13245, 13246, 13250, 13251,
   13255, 13265, 13272, 13282, 13291, 13305, 13306, 13311, 13310, 13351,
   13352, 13353, 13357, 13357, 13381, 13382, 13386, 13387, 13388, 13392,
   13397, 13402, 13409, 13430, 13465, 13467, 13469, 13474, 13475, 13476,
   13477, 13478, 13482, 13483, 13484, 13485, 13486, 13487, 13497, 13498,
   13503, 13516, 13529, 13531, 13533, 13538, 13543, 13545, 13547, 13553,
   13554, 13556, 13562, 13561, 13575, 13576, 13580, 13585, 13593, 13593,
   13618, 13619, 13624, 13625, 13627, 13629, 13647, 13653, 13658, 13640,
   13719, 13737, 13762, 13794, 13798, 13806, 13829, 13758, 13894, 13918,
   13927, 13935, 13893, 13956, 13960, 13964, 13968, 13972, 13976, 13983,
   13990, 13997, 14007, 14008, 14012, 14013, 14014, 14018, 14019, 14024,
   14026, 14025, 14031, 14032, 14036, 14046
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CHAIN_SYM", "CHANGE",
  "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM",
  "CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM",
  "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM",
  "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_SYM",
  "CURRENT_USER", "CURSOR_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE",
  "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM",
  "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM",
  "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM",
  "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END",
  "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ",
  "EQUAL_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM",
  "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM",
  "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FOLLOWING_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM",
  "FRAC_SECOND_SYM", "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM",
  "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM",
  "HANDLER_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM", "IMPORT",
  "INDEXES", "INDEX_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INNOBASE_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT",
  "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM",
  "INVOKER_SYM", "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION",
  "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE",
  "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM", "MICROSECOND_SYM",
  "MIGRATE_SYM", "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM",
  "MINUTE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM", "MODIFIES_SYM",
  "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT",
  "MULTIPOLYGON", "MUTEX_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NTH_VALUE_SYM", "NULL_SYM", "NULLS_SYM", "NUM", "NUMERIC_SYM",
  "NVARCHAR_SYM", "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM",
  "ONE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY",
  "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE",
  "OUT_SYM", "OVER_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARTIAL", "PARTITIONING_SYM",
  "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD", "PERCENTILE_CONT_SYM",
  "PERCENTILE_DISC_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECEDING_SYM",
  "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM",
  "PRIVILEGES", "PROCEDURE", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK",
  "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM",
  "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP",
  "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM",
  "RELOAD", "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR",
  "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM",
  "RESET_SYM", "RESOURCES", "RESPECT_SYM", "RESTORE_SYM", "RESTRICT",
  "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM",
  "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM",
  "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET",
  "SET_VAR", "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SMALLINT", "SNAPSHOT_SYM",
  "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "INFINIDB_ORDERED_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIMESTAMP",
  "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB", "TINYINT",
  "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TRIGGERS_SYM",
  "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM",
  "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNBOUNDED_SYM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH",
  "WITHIN", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'",
  "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'",
  "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "@3",
  "change", "@4", "master_defs", "master_def", "master_file_def", "create",
  "@5", "@6", "@7", "@8", "server_def", "server_options_list",
  "server_option", "event_tail", "@9", "ev_schedule_time", "@10",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "@11",
  "ev_sql_stmt_inner", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "@12",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "@13", "@14", "sp_cursor_stmt",
  "@15", "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "opt_value", "sp_hcond", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "@16", "sp_proc_stmt_statement",
  "@17", "sp_proc_stmt_return", "@18", "sp_proc_stmt_unlabeled", "@19",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "@20", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "@21", "@22", "@23", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "@24", "@25",
  "searched_case_stmt", "@26", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "@27", "@28",
  "searched_when_clause", "@29", "@30", "else_clause_opt",
  "sp_labeled_control", "@31", "sp_opt_label", "sp_labeled_block", "@32",
  "sp_unlabeled_block", "@33", "sp_block_content", "@34",
  "sp_unlabeled_control", "@35", "@36", "@37", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "@38", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "@39", "create3", "@40", "@41", "opt_partitioning",
  "partitioning", "@42", "partition_entry", "@43", "partition",
  "part_type_def", "@44", "@45", "@46", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_func", "sub_part_func",
  "opt_no_parts", "opt_sub_part", "@47", "@48", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_no_subparts", "part_defs",
  "part_def_list", "part_definition", "@49", "part_name",
  "opt_part_values", "part_func_max", "max_value_sym", "part_range_func",
  "part_list_func", "part_list_item", "part_bit_expr", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "@50", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "@51", "@52", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "field_list", "field_list_item", "column_def", "key_def",
  "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "@53", "type", "@54", "@55", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "float_options", "precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "opt_binary", "opt_bin_mod", "opt_bin_charset",
  "opt_primary", "references", "@56", "opt_ref_list", "ref_list",
  "opt_on_delete", "opt_on_delete_list", "opt_on_delete_item",
  "delete_option", "key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique_or_fulltext",
  "init_key_options", "key_alg", "key_options", "key_opts",
  "key_using_alg", "key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "@57", "@58",
  "@59", "@60", "@61", "@62", "@63", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "@64", "@65", "@66", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "@67",
  "add_part_extra", "reorg_partition_rule", "@68", "reorg_parts_rule",
  "@69", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "@70", "@71", "@72", "opt_column",
  "opt_ignore", "opt_restrict", "opt_place", "opt_to", "slave", "@73",
  "@74", "start", "start_transaction_opts", "slave_thread_opts", "@75",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "restore", "@76", "backup", "@77", "checksum", "@78",
  "opt_checksum_type", "repair", "@79", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "@80",
  "binlog_base64_event", "check", "@81", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "@82",
  "opt_no_write_to_binlog", "rename", "@83", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "keycache_list",
  "assign_to_keycache", "key_cache_name", "preload", "@84", "preload_list",
  "preload_keys", "cache_keys_spec", "@85", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "select_paren",
  "select_init2", "@86", "select_part2", "@87", "@88", "select_into",
  "select_from", "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_item2", "select_alias", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_window", "opt_from", "opt_respect",
  "respect", "window_clause", "opt_window_partition_by_clause",
  "opt_window_order_by_clause", "window_order_list", "opt_nulls",
  "opt_frame", "frame", "boundary_unit", "bounding", "preceding_following",
  "function_call_generic", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "@89", "variable", "@90", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "in_sum_expr", "@91",
  "cast_type", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "@92", "@93", "@94", "@95", "@96", "@97", "@98", "normal_join",
  "table_factor", "@99", "select_derived", "@100", "select_derived2",
  "@101", "@102", "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "@103",
  "@104", "index_hints_list", "opt_index_hints_list", "@105",
  "opt_key_definition", "@106", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "interval_time_st", "date_time_type", "table_alias", "opt_table_alias",
  "opt_all", "where_clause", "@107", "having_clause", "@108", "opt_escape",
  "group_clause", "@109", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "@110", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "@111", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "@112",
  "select_var_list", "select_var_ident", "into", "@113",
  "into_destination", "@114", "@115", "do", "@116", "drop", "@117",
  "table_list", "table_name", "table_alias_ref_list", "table_alias_ref",
  "if_exists", "opt_temporary", "insert", "@118", "@119", "replace",
  "@120", "@121", "insert_lock_option", "replace_lock_option", "insert2",
  "insert_table", "insert_field_spec", "@122", "fields", "insert_values",
  "@123", "@124", "values_list", "ident_eq_list", "ident_eq_value",
  "equal", "opt_equal", "no_braces", "@125", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "@126", "update", "@127", "@128",
  "update_list", "update_elem", "insert_update_list", "insert_update_elem",
  "opt_low_priority", "delete", "@129", "single_multi", "@130", "@131",
  "@132", "table_wild_list", "table_wild_one", "opt_wild",
  "opt_delete_options", "opt_delete_option", "truncate", "opt_table_sym",
  "opt_profile_defs", "profile_defs", "profile_def", "opt_profile_args",
  "show", "@133", "show_param", "@134", "show_engine_param",
  "master_or_binary", "opt_storage", "opt_db", "opt_full", "from_or_in",
  "binlog_in", "binlog_from", "wild_and_where", "describe", "@135", "@136",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "@137", "flush_options", "flush_option", "@138",
  "opt_table_list", "reset", "@139", "reset_options", "reset_option",
  "purge", "@140", "purge_options", "purge_option", "kill", "kill_option",
  "use", "load", "@141", "load_data", "@142", "@143", "@144", "@145",
  "opt_local", "load_data_lock", "opt_duplicate", "opt_field_term",
  "field_term_list", "field_term", "opt_line_term", "line_term_list",
  "line_term", "opt_ignore_lines", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user", "keyword", "keyword_sp", "set", "@146",
  "opt_option", "option_value_list", "option_type_value", "@147",
  "option_type", "option_type2", "opt_var_type", "opt_var_ident_type",
  "ext_option_value", "sys_option_value", "option_value",
  "internal_variable_name", "isolation_types", "text_or_password",
  "set_expr_or_default", "lock", "@148", "table_or_tables",
  "table_lock_list", "table_lock", "lock_option", "unlock", "@149",
  "handler", "@150", "handler_read_or_scan", "handler_scan_function",
  "handler_rkey_function", "@151", "handler_rkey_mode", "revoke",
  "revoke_command", "grant", "grant_command", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "@152", "@153", "@154", "@155", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "grant_user", "opt_column_list", "column_list",
  "column_list_id", "require_clause", "grant_options", "grant_option_list",
  "grant_option", "begin", "@156", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "@157", "union_opt",
  "union_order_or_limit", "@158", "order_or_limit", "union_option",
  "take_first_select", "subselect", "subselect_start", "subselect_end",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "@159",
  "view_list_opt", "view_list", "view_select", "@160", "view_select_aux",
  "view_check_option", "trigger_tail", "@161", "@162", "@163", "udf_tail",
  "sf_tail", "@164", "@165", "@166", "@167", "@168", "sp_tail", "@169",
  "@170", "@171", "@172", "xa", "xid", "begin_or_start",
  "opt_join_or_resume", "opt_one_phase", "opt_suspend", "@173",
  "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    64,    46,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   601,   602,   603,   602,   602,   604,   604,   605,   605,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   607,   608,   608,   609,   610,   610,   612,   611,   613,
     613,   614,   614,   615,   617,   616,   619,   618,   620,   620,
     621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
     621,   621,   621,   622,   622,   622,   622,   624,   623,   625,
     623,   626,   623,   627,   623,   623,   623,   623,   623,   628,
     629,   629,   630,   630,   630,   630,   630,   630,   630,   632,
     631,   634,   633,   633,   635,   635,   635,   635,   636,   636,
     637,   637,   638,   638,   639,   639,   640,   640,   642,   641,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   644,   645,   645,   646,   646,   647,   647,
     648,   648,   648,   648,   648,   648,   648,   649,   649,   649,
     650,   650,   652,   651,   653,   653,   654,   654,   655,   655,
     656,   656,   657,   657,   658,   659,   660,   660,   661,   661,
     662,   663,   663,   663,   663,   664,   664,   665,   665,   666,
     666,   668,   667,   667,   669,   667,   667,   671,   670,   672,
     672,   673,   673,   674,   675,   675,   676,   676,   677,   677,
     677,   677,   677,   678,   678,   679,   679,   680,   680,   680,
     680,   680,   680,   680,   680,   680,   680,   680,   680,   680,
     682,   681,   684,   683,   686,   685,   688,   687,   689,   690,
     691,   693,   692,   694,   695,   695,   695,   696,   696,   698,
     699,   700,   697,   701,   701,   701,   702,   702,   704,   705,
     703,   707,   706,   708,   708,   709,   709,   711,   712,   710,
     714,   715,   713,   716,   716,   718,   717,   719,   719,   721,
     720,   723,   722,   725,   724,   726,   727,   728,   726,   729,
     726,   730,   730,   731,   731,   731,   732,   733,   734,   735,
     735,   736,   736,   737,   738,   739,   739,   741,   740,   742,
     742,   742,   743,   743,   743,   744,   745,   745,   745,   746,
     746,   746,   746,   746,   746,   746,   746,   747,   748,   748,
     748,   749,   749,   749,   749,   749,   750,   751,   751,   751,
     752,   752,   752,   752,   752,   752,   752,   753,   754,   754,
     754,   755,   755,   755,   756,   757,   758,   759,   760,   761,
     761,   761,   762,   763,   764,   765,   766,   767,   768,   769,
     770,   771,   771,   772,   772,   773,   773,   774,   774,   774,
     774,   775,   776,   775,   777,   778,   777,   779,   777,   780,
     780,   782,   781,   784,   783,   785,   786,   787,   786,   788,
     786,   789,   786,   790,   790,   791,   791,   792,   792,   793,
     794,   795,   796,   796,   797,   798,   797,   799,   797,   800,
     800,   801,   802,   803,   803,   804,   804,   805,   805,   807,
     806,   808,   809,   809,   809,   810,   810,   811,   811,   812,
     813,   813,   814,   815,   816,   816,   817,   817,   819,   818,
     820,   821,   821,   822,   822,   823,   823,   823,   823,   823,
     823,   823,   823,   825,   826,   824,   827,   827,   828,   828,
     829,   829,   830,   830,   831,   831,   832,   832,   833,   834,
     834,   835,   835,   836,   836,   837,   837,   837,   838,   838,
     838,   838,   838,   838,   838,   838,   838,   838,   838,   838,
     838,   838,   838,   838,   838,   838,   838,   838,   838,   838,
     838,   838,   838,   839,   840,   841,   842,   843,   843,   843,
     843,   843,   843,   844,   844,   844,   845,   845,   846,   846,
     846,   846,   847,   847,   848,   848,   849,   849,   850,   850,
     850,   850,   850,   851,   851,   852,   853,   853,   854,   856,
     855,   857,   857,   857,   857,   857,   857,   857,   857,   857,
     857,   857,   857,   857,   857,   857,   857,   857,   857,   857,
     857,   857,   857,   857,   857,   857,   857,   857,   857,   857,
     857,   857,   857,   857,   857,   857,   858,   857,   859,   857,
     857,   857,   860,   860,   860,   860,   860,   860,   860,   860,
     861,   862,   862,   863,   863,   864,   864,   864,   864,   864,
     865,   865,   865,   865,   865,   866,   866,   866,   867,   867,
     867,   868,   869,   869,   870,   870,   871,   871,   871,   872,
     872,   872,   872,   873,   873,   874,   874,   875,   875,   876,
     876,   877,   877,   877,   877,   877,   877,   877,   877,   877,
     877,   877,   878,   878,   879,   879,   880,   880,   881,   881,
     882,   882,   883,   883,   884,   884,   885,   886,   886,   887,
     887,   888,   888,   889,   889,   889,   889,   889,   889,   890,
     890,   891,   891,   891,   891,   892,   892,   894,   893,   895,
     895,   896,   896,   897,   897,   898,   898,   899,   899,   899,
     899,   899,   900,   900,   900,   900,   900,   901,   901,   901,
     902,   902,   903,   903,   904,   904,   905,   905,   905,   906,
     906,   906,   906,   907,   908,   908,   909,   909,   910,   910,
     911,   911,   912,   912,   912,   913,   913,   913,   914,   914,
     915,   915,   916,   916,   917,   917,   918,   918,   920,   919,
     921,   919,   919,   922,   919,   923,   919,   924,   919,   925,
     919,   926,   919,   919,   919,   919,   919,   919,   927,   927,
     927,   927,   928,   928,   929,   929,   930,   930,   931,   931,
     931,   931,   931,   931,   931,   931,   931,   931,   932,   931,
     931,   933,   931,   934,   931,   931,   931,   935,   936,   936,
     938,   937,   939,   939,   939,   941,   940,   942,   943,   942,
     944,   944,   945,   946,   946,   947,   948,   948,   948,   949,
     948,   950,   951,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   952,   952,   953,
     953,   954,   954,   954,   955,   955,   955,   956,   956,   956,
     956,   958,   957,   957,   959,   957,   957,   960,   961,   961,
     963,   962,   964,   964,   965,   965,   965,   966,   966,   967,
     967,   969,   968,   971,   970,   973,   972,   974,   974,   974,
     976,   975,   977,   977,   978,   978,   979,   979,   979,   981,
     980,   982,   984,   983,   985,   985,   986,   986,   987,   987,
     987,   987,   987,   987,   989,   988,   990,   990,   990,   992,
     991,   991,   993,   993,   994,   994,   995,   996,   997,   997,
     998,   999,   999,  1001,  1000,  1002,  1002,  1003,  1005,  1004,
    1006,  1006,  1007,  1007,  1008,  1009,  1009,  1010,  1010,  1012,
    1011,  1014,  1015,  1013,  1016,  1016,  1016,  1016,  1016,  1017,
    1017,  1018,  1018,  1019,  1019,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1021,  1021,  1021,  1022,
    1022,  1022,  1023,  1024,  1025,  1026,  1026,  1027,  1027,  1027,
    1027,  1027,  1028,  1028,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1030,  1030,  1030,  1030,  1030,
    1030,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1031,  1031,  1031,  1032,  1032,  1032,  1032,  1032,
    1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,
    1033,  1033,  1034,  1034,  1035,  1035,  1036,  1036,  1037,  1037,
    1037,  1037,  1037,  1037,  1038,  1038,  1039,  1039,  1039,  1039,
    1039,  1039,  1039,  1039,  1039,  1039,  1039,  1039,  1039,  1039,
    1039,  1039,  1039,  1039,  1039,  1039,  1039,  1039,  1039,  1039,
    1039,  1039,  1039,  1039,  1039,  1039,  1039,  1040,  1040,  1040,
    1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,
    1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,
    1040,  1040,  1040,  1040,  1041,  1041,  1041,  1041,  1041,  1041,
    1041,  1041,  1041,  1041,  1041,  1041,  1041,  1041,  1041,  1041,
    1041,  1041,  1041,  1041,  1041,  1041,  1041,  1041,  1041,  1042,
    1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,
    1042,  1042,  1042,  1042,  1042,  1042,  1043,  1043,  1043,  1043,
    1043,  1043,  1043,  1043,  1044,  1044,  1044,  1044,  1044,  1044,
    1044,  1044,  1044,  1044,  1044,  1044,  1044,  1044,  1044,  1044,
    1044,  1044,  1044,  1044,  1045,  1045,  1045,  1046,  1046,  1047,
    1047,  1048,  1049,  1049,  1050,  1050,  1050,  1051,  1051,  1052,
    1052,  1052,  1053,  1053,  1054,  1054,  1055,  1055,  1056,  1056,
    1056,  1056,  1057,  1057,  1058,  1058,  1059,  1059,  1060,  1060,
    1061,  1061,  1062,  1062,  1063,  1063,  1064,  1065,  1065,  1065,
    1065,  1065,  1065,  1065,  1065,  1065,  1065,  1065,  1065,  1065,
    1065,  1065,  1065,  1065,  1065,  1066,  1065,  1068,  1067,  1069,
    1069,  1069,  1070,  1070,  1071,  1071,  1072,  1072,  1074,  1073,
    1075,  1075,  1075,  1075,  1075,  1075,  1075,  1075,  1075,  1075,
    1075,  1076,  1076,  1077,  1077,  1078,  1078,  1079,  1079,  1080,
    1080,  1081,  1081,  1082,  1082,  1083,  1083,  1084,  1085,  1085,
    1086,  1086,  1087,  1087,  1088,  1087,  1089,  1087,  1090,  1087,
    1087,  1091,  1087,  1092,  1087,  1087,  1093,  1087,  1094,  1087,
    1087,  1095,  1095,  1095,  1097,  1096,  1096,  1096,  1099,  1098,
    1101,  1102,  1100,  1103,  1104,  1105,  1105,  1106,  1106,  1106,
    1106,  1107,  1107,  1109,  1108,  1110,  1108,  1111,  1111,  1112,
    1113,  1112,  1115,  1114,  1116,  1116,  1117,  1117,  1118,  1118,
    1119,  1119,  1120,  1120,  1120,  1120,  1120,  1120,  1120,  1120,
    1120,  1120,  1120,  1120,  1121,  1121,  1122,  1122,  1122,  1122,
    1122,  1122,  1122,  1122,  1122,  1123,  1123,  1123,  1123,  1124,
    1124,  1124,  1125,  1125,  1126,  1126,  1127,  1128,  1127,  1129,
    1130,  1129,  1131,  1131,  1132,  1133,  1132,  1134,  1134,  1135,
    1135,  1135,  1136,  1137,  1137,  1138,  1139,  1139,  1141,  1140,
    1142,  1142,  1143,  1143,  1143,  1144,  1144,  1145,  1145,  1146,
    1147,  1147,  1147,  1148,  1148,  1148,  1148,  1149,  1149,  1150,
    1150,  1150,  1150,  1150,  1150,  1151,  1151,  1151,  1151,  1151,
    1152,  1152,  1152,  1152,  1152,  1153,  1153,  1153,  1153,  1154,
    1155,  1155,  1156,  1157,  1156,  1158,  1158,  1159,  1159,  1160,
    1162,  1161,  1163,  1163,  1164,  1164,  1166,  1165,  1168,  1169,
    1167,  1167,  1167,  1171,  1170,  1172,  1173,  1172,  1172,  1172,
    1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1174,
    1174,  1175,  1176,  1176,  1177,  1178,  1178,  1179,  1179,  1181,
    1182,  1180,  1184,  1185,  1183,  1186,  1186,  1186,  1186,  1187,
    1187,  1188,  1188,  1189,  1190,  1190,  1190,  1191,  1190,  1192,
    1192,  1193,  1193,  1194,  1193,  1195,  1193,  1196,  1196,  1197,
    1197,  1198,  1199,  1199,  1200,  1200,  1202,  1201,  1203,  1203,
    1204,  1204,  1205,  1205,  1206,  1207,  1206,  1209,  1210,  1208,
    1211,  1211,  1212,  1213,  1213,  1214,  1215,  1215,  1217,  1216,
    1219,  1218,  1220,  1218,  1221,  1218,  1222,  1222,  1223,  1223,
    1224,  1224,  1225,  1225,  1226,  1226,  1226,  1227,  1228,  1228,
    1229,  1229,  1230,  1230,  1231,  1231,  1231,  1231,  1231,  1231,
    1231,  1231,  1231,  1232,  1232,  1234,  1233,  1235,  1235,  1235,
    1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,
    1235,  1236,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,
    1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,
    1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,
    1235,  1235,  1235,  1235,  1235,  1235,  1235,  1235,  1237,  1237,
    1237,  1238,  1238,  1239,  1239,  1240,  1240,  1241,  1241,  1242,
    1242,  1243,  1243,  1244,  1244,  1245,  1245,  1245,  1247,  1246,
    1248,  1246,  1249,  1249,  1250,  1250,  1250,  1251,  1251,  1251,
    1253,  1252,  1254,  1254,  1256,  1255,  1255,  1255,  1255,  1255,
    1255,  1255,  1255,  1255,  1255,  1255,  1257,  1257,  1259,  1258,
    1260,  1260,  1261,  1261,  1261,  1263,  1262,  1264,  1265,  1265,
    1266,  1267,  1267,  1267,  1268,  1270,  1269,  1269,  1272,  1273,
    1274,  1275,  1271,  1271,  1276,  1276,  1277,  1277,  1277,  1278,
    1278,  1278,  1279,  1279,  1280,  1280,  1281,  1281,  1281,  1281,
    1282,  1282,  1283,  1283,  1284,  1284,  1285,  1285,  1286,  1286,
    1286,  1287,  1287,  1288,  1288,  1289,  1289,  1290,  1290,  1290,
    1290,  1291,  1291,  1291,  1292,  1293,  1293,  1293,  1294,  1294,
    1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,
    1295,  1295,  1295,  1295,  1295,  1296,  1296,  1297,  1297,  1298,
    1299,  1299,  1300,  1300,  1301,  1301,  1301,  1302,  1302,  1302,
    1302,  1303,  1303,  1303,  1304,  1305,  1305,  1306,  1307,  1308,
    1309,  1309,  1310,  1310,  1311,  1311,  1311,  1312,  1312,  1312,
    1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,
    1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,
    1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,
    1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,
    1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,  1313,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,  1314,
    1314,  1316,  1315,  1317,  1317,  1318,  1318,  1320,  1319,  1321,
    1321,  1321,  1321,  1322,  1322,  1323,  1323,  1323,  1323,  1324,
    1324,  1324,  1324,  1325,  1325,  1326,  1326,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1328,  1328,  1328,  1329,  1329,  1329,
    1329,  1330,  1330,  1330,  1331,  1331,  1331,  1331,  1331,  1333,
    1332,  1334,  1334,  1335,  1335,  1336,  1337,  1337,  1337,  1337,
    1339,  1338,  1340,  1340,  1341,  1340,  1342,  1342,  1343,  1343,
    1344,  1344,  1344,  1344,  1345,  1344,  1346,  1346,  1346,  1346,
    1346,  1347,  1348,  1348,  1348,  1348,  1349,  1350,  1350,  1350,
    1351,  1351,  1352,  1352,  1353,  1353,  1354,  1354,  1356,  1355,
    1357,  1355,  1358,  1355,  1359,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,
    1355,  1360,  1360,  1361,  1361,  1362,  1362,  1362,  1363,  1363,
    1363,  1363,  1364,  1364,  1365,  1365,  1366,  1366,  1366,  1367,
    1367,  1368,  1368,  1369,  1370,  1370,  1370,  1370,  1370,  1371,
    1371,  1372,  1372,  1373,  1373,  1373,  1373,  1373,  1375,  1374,
    1376,  1376,  1377,  1377,  1377,  1378,  1378,  1378,  1379,  1379,
    1380,  1381,  1381,  1382,  1383,  1384,  1384,  1386,  1385,  1387,
    1387,  1387,  1389,  1388,  1390,  1390,  1391,  1391,  1391,  1392,
    1393,  1393,  1394,  1395,  1396,  1396,  1396,  1397,  1397,  1397,
    1397,  1397,  1398,  1398,  1398,  1398,  1398,  1398,  1399,  1399,
    1400,  1401,  1402,  1402,  1402,  1403,  1404,  1404,  1404,  1405,
    1405,  1405,  1407,  1406,  1408,  1408,  1409,  1409,  1411,  1410,
    1412,  1412,  1413,  1413,  1413,  1413,  1415,  1416,  1417,  1414,
    1418,  1418,  1420,  1421,  1422,  1423,  1424,  1419,  1426,  1427,
    1428,  1429,  1425,  1430,  1430,  1430,  1430,  1430,  1430,  1431,
    1431,  1431,  1432,  1432,  1433,  1433,  1433,  1434,  1434,  1435,
    1436,  1435,  1437,  1437,  1438,  1439
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     0,     7,     0,
      12,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     5,     0,     2,     1,
       1,     1,     3,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     1,     3,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     5,     0,     2,     0,     3,     0,     2,     2,     2,
       2,     0,     6,     2,     0,     2,     1,     1,     3,     0,
       0,     0,     7,     0,     2,     2,     1,     1,     0,     0,
       8,     0,     6,     1,     2,     1,     2,     0,     0,     6,
       0,     0,     6,     0,     2,     0,     5,     0,     1,     0,
       5,     0,     2,     0,     5,     4,     0,     0,     8,     0,
       7,     1,     1,     1,     1,     1,     2,     4,     5,     0,
       4,     4,     4,     3,     3,     2,     2,     0,     2,     1,
       2,     3,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     0,     1,     1,     1,     1,     1,     2,     3,     2,
       4,     5,     0,     5,     0,     0,     5,     0,     7,     0,
       1,     0,     3,     0,     3,     5,     5,     0,     4,     0,
       3,     0,     3,     0,     1,     0,     1,     1,     3,     1,
       5,     5,     0,     2,     0,     0,     7,     0,     9,     1,
       3,     1,     1,     0,     2,     0,     3,     1,     3,     0,
       6,     1,     0,     4,     5,     1,     1,     1,     3,     3,
       1,     3,     1,     1,     0,     3,     1,     3,     0,     4,
       1,     0,     1,     2,     1,     3,     4,     3,     3,     3,
       4,     4,     3,     0,     0,     6,     0,     1,     0,     1,
       1,     2,     1,     1,     0,     1,     1,     2,     1,     0,
       3,     0,     1,     1,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     1,     1,     3,     4,     4,     2,     2,
       2,     3,     3,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     3,     1,     1,     2,     2,     7,     8,
       8,     2,     2,     0,     1,     2,     0,     1,     2,     0,
       4,     3,     3,     3,     1,     2,     1,     1,     3,     2,
       3,     2,     2,     1,     3,     3,     2,     3,     1,     1,
       2,     1,     1,     2,     1,     1,     1,     2,     3,     2,
       3,     2,     2,     3,     3,     3,     0,     6,     0,     6,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     2,     1,     2,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     0,     1,
       1,     5,     0,     1,     2,     1,     1,     1,     1,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     2,
       1,     1,     2,     2,     4,     1,     3,     2,     1,     2,
       2,     2,     2,     1,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     0,     1,     0,     2,     1,     2,     3,     2,     0,
       1,     0,     1,     1,     2,     0,     1,     0,     4,     1,
       4,     3,     1,     0,     1,     2,     1,     3,     3,     2,
       2,     2,     1,     1,     2,     2,     2,     1,     2,     2,
       2,     2,     1,     1,     0,     1,     1,     1,     1,     0,
       1,     1,     1,     0,     1,     2,     0,     1,     1,     2,
       2,     2,     1,     3,     3,     1,     1,     1,     4,     2,
       1,     4,     0,     1,     0,     2,     1,     3,     0,     6,
       0,     5,     7,     0,     5,     0,     5,     0,     5,     0,
       4,     0,    10,     3,     4,     3,     3,     7,     0,     3,
       1,     4,     0,     3,     0,     2,     0,     1,     0,     2,
       2,     2,     2,     1,     1,     1,     3,     4,     0,     6,
       4,     0,     5,     0,     6,     4,     1,     2,     1,     1,
       0,     5,     0,     3,     2,     0,     5,     0,     0,     6,
       1,     3,     1,     1,     3,     2,     3,     2,     4,     0,
       6,     0,     0,     8,     4,     4,     3,     3,     2,     2,
       6,     5,     3,     5,     1,     1,     1,     0,     1,     0,
       1,     0,     1,     1,     0,     2,     1,     0,     1,     1,
       1,     0,     5,     3,     0,     5,     3,     3,     0,     3,
       0,     2,     1,     3,     0,     1,     1,     0,     2,     1,
       3,     0,     6,     0,     6,     0,     5,     0,     1,     1,
       0,     6,     0,     1,     1,     2,     1,     1,     1,     0,
       5,     2,     0,     5,     0,     1,     1,     2,     1,     1,
       1,     1,     1,     2,     0,     5,     0,     1,     1,     0,
       4,     4,     3,     5,     1,     3,     3,     5,     1,     3,
       2,     1,     1,     0,     6,     1,     3,     3,     0,     2,
       0,     4,     0,     2,     1,     2,     4,     2,     3,     0,
       3,     0,     0,     6,     2,     1,     1,     2,     2,     8,
       4,     0,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     2,     4,     3,
       1,     1,     4,     0,     0,     1,     1,     0,     2,     2,
       1,     1,     0,     2,     3,     3,     3,     2,     3,     4,
       3,     4,     3,     4,     1,     3,     4,     3,     3,     6,
       1,     5,     6,     5,     7,     6,     8,     5,     6,     4,
       4,     5,     3,     4,     1,     3,     3,     3,     3,     3,
       3,     5,     5,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     3,     2,     2,
       2,     2,     3,     3,     5,     6,     4,     4,     7,     2,
       6,     5,     6,     6,     4,     4,     5,     4,     6,     2,
       4,     4,     4,    10,     6,     8,     6,     4,     4,     6,
       4,     4,     4,     6,     4,     7,     7,     7,     6,     6,
       6,     6,     3,     4,     6,     8,     2,     2,     4,     8,
       8,     6,     6,     2,     4,     6,     6,     8,     8,     6,
       8,     6,     2,     4,     8,     8,     2,     2,     2,     4,
       4,     4,     4,     3,     8,     4,     6,     4,     4,     4,
       6,     8,     6,     4,     6,     1,     6,     4,     4,     4,
       4,     4,     6,     4,     5,     6,     5,     6,     5,     6,
       6,     5,     6,     5,     6,     5,     6,     5,     5,     5,
       5,     7,    12,    12,     0,     2,     2,     0,     1,     2,
       2,     5,     0,     3,     0,     1,     4,     5,     3,     0,
       2,     2,     0,     1,     5,     2,     1,     1,     2,     2,
       2,     4,     1,     1,     4,     6,     2,     3,     0,     4,
       0,     3,     0,     1,     1,     3,     4,     4,     5,     4,
       4,     4,     5,     4,     5,     4,     5,     4,     5,     4,
       4,     4,     4,     4,     5,     0,     8,     0,     3,     3,
       1,     4,     0,     1,     0,     2,     0,     1,     0,     3,
       2,     3,     2,     1,     2,     1,     2,     1,     1,     1,
       2,     0,     1,     1,     3,     1,     3,     1,     3,     0,
       1,     0,     2,     4,     5,     1,     1,     1,     1,     4,
       1,     3,     3,     3,     0,     6,     0,     6,     0,     8,
       4,     0,     8,     0,    10,     6,     0,     8,     0,    10,
       6,     1,     2,     2,     0,     4,     3,     6,     0,     3,
       0,     0,     5,     0,     1,     0,     1,     0,     2,     3,
       3,     1,     1,     0,     7,     0,     7,     1,     2,     0,
       0,     2,     0,     2,     0,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     1,     0,     2,     0,     1,     0,     0,     3,     0,
       0,     3,     2,     0,     0,     0,     5,     4,     2,     0,
       2,     2,     3,     3,     1,     2,     0,     1,     0,     4,
       4,     2,     0,     1,     1,     0,     1,     0,     1,     2,
       1,     3,     3,     1,     1,     1,     1,     0,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     0,     6,     0,     1,     3,     1,     3,
       0,     2,     3,     1,     2,     1,     0,     3,     0,     0,
       7,     2,     1,     0,     3,     6,     0,     6,     4,     6,
       4,     4,     4,     5,     4,     4,     5,     6,     4,     1,
       3,     1,     1,     3,     1,     0,     2,     0,     1,     0,
       0,     8,     0,     0,     6,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     4,     0,     3,     3,
       1,     2,     2,     0,     3,     0,     5,     3,     1,     3,
       1,     3,     1,     1,     0,     1,     0,     4,     0,     1,
       3,     1,     1,     1,     0,     0,     6,     0,     0,    11,
       3,     1,     3,     3,     1,     3,     0,     1,     0,     4,
       0,     6,     0,     5,     0,     6,     1,     3,     3,     5,
       0,     2,     0,     2,     1,     1,     1,     3,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     2,     1,     3,     3,     6,    16,     2,
       2,     0,     6,     5,     2,     2,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     2,     2,
       3,     2,     2,     1,     3,     4,     3,     3,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     0,     1,     0,     2,     0,     1,     1,
       1,     0,     2,     0,     2,     0,     2,     2,     0,     4,
       0,     4,     1,     1,     0,     1,     1,     0,     1,     1,
       0,     4,     3,     1,     0,     3,     4,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     0,     3,
       3,     1,     1,     1,     2,     0,     3,     3,     2,     2,
       3,     0,     1,     1,     2,     0,     4,     5,     0,     0,
       0,     0,    18,     2,     0,     1,     0,     1,     1,     0,
       1,     1,     0,     2,     2,     1,     3,     4,     3,     3,
       0,     2,     2,     1,     3,     3,     0,     3,     0,     3,
       2,     3,     1,     1,     2,     0,     2,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     3,     5,     1,
       1,     1,     1,     1,     3,     4,     5,     1,     5,     3,
       2,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     4,     0,     1,     1,     3,     0,     2,     1,
       1,     1,     1,     0,     1,     0,     1,     1,     1,     0,
       2,     2,     2,     1,     2,     4,     5,     4,     6,     2,
       3,     3,     3,     5,     1,     3,     3,     2,     2,     2,
       1,     1,     4,     4,     1,     1,     1,     1,     1,     0,
       4,     1,     1,     1,     3,     3,     1,     1,     2,     2,
       0,     3,     4,     3,     0,     7,     1,     2,     1,     1,
       1,     1,     1,     1,     0,     5,     1,     1,     1,     1,
       1,     3,     6,     6,     6,     7,     3,     8,     8,     8,
       0,     1,     1,     2,     0,     1,     1,     3,     0,     3,
       0,     3,     0,     3,     0,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       3,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       1,     0,     1,     3,     1,     2,     2,     2,     1,     3,
       3,     1,     1,     3,     1,     3,     4,     5,     1,     0,
       3,     3,     1,     1,     0,     2,     2,     2,     2,     0,
       2,     2,     1,     2,     2,     2,     2,     2,     0,     3,
       0,     1,     0,     3,     2,     0,     1,     2,     0,     1,
       4,     4,     5,     2,     3,     0,     1,     0,     4,     0,
       1,     1,     0,     2,     2,     1,     0,     1,     1,     0,
       5,     6,     0,     0,     2,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     3,     1,     2,     1,     2,     3,     3,     3,     0,
       3,     3,     0,     7,     0,     3,     1,     3,     0,     3,
       2,     4,     0,     3,     4,     4,     0,     0,     0,    16,
       8,     7,     0,     0,     0,     0,     0,    15,     0,     0,
       0,     0,    12,     4,     4,     3,     4,     3,     2,     1,
       3,     5,     1,     1,     0,     1,     1,     0,     2,     0,
       0,     3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2350,   916,     0,  2298,     0,     0,     0,     0,     0,
       0,  2300,   103,    62,  1558,  1672,  1673,  1473,  1497,     2,
       0,   916,   153,     0,    74,  1499,     0,  1711,     0,     0,
     916,   403,     0,  1705,     0,     0,   916,  1502,  1698,     0,
     153,  2300,     0,   951,  2133,  1595,     0,     0,     0,  1578,
       0,  2190,  1547,     0,     0,     0,     0,     3,     8,    20,
       0,    39,    25,    29,    15,    19,    14,    37,    10,    53,
      54,    46,    12,    17,    43,    11,    13,    16,    35,    42,
      36,    38,    50,   944,    23,    24,    30,    44,    58,    21,
      55,    52,    22,  1674,    26,    45,    40,    32,    59,    33,
      51,    34,    57,    28,    47,    27,     9,    18,    48,    49,
      41,    60,    31,    56,     0,   786,     0,     0,   850,     0,
       0,     0,     0,     0,   769,  2348,  2349,  2350,   918,   917,
       0,  2182,  2181,   883,  2300,  1807,   901,     0,  1870,  1871,
    1872,  1873,  1874,  1875,  1876,  1821,  1877,  1878,  1880,  1879,
    1881,  1882,  1822,  1823,  1883,  1884,  1885,  1887,  1886,  1888,
    1824,  1825,  1889,  1890,  1891,  1826,  1827,  1892,  1893,  1828,
    1894,  1895,  1896,  1897,  1829,  1898,  1830,  1899,  1900,  1901,
    1902,  1903,  1904,  1831,  1905,  1906,  1907,  1908,  1910,  1909,
    1911,  1912,  1913,  1832,  1914,  1915,  1916,  1917,  1918,  1919,
    1920,  1833,  1921,  1922,  1923,  1939,  1834,  1924,  1927,  1926,
    1925,  1928,  1929,  1931,  1930,  1932,  1835,  1933,  1934,  1935,
    1937,  1936,  1941,  1942,  1943,  1836,  1938,  1944,  1940,  2113,
    1946,  1945,  1947,  1949,  1948,  1837,  1950,  1838,  1839,  1951,
    1952,  1805,  1953,  1806,  1955,  1956,  1957,  1962,  1963,  1840,
    1954,  1958,  1959,  1960,  1961,  1964,  1841,  1965,  1966,  1967,
    1968,  1969,  1970,  1971,  1972,  1973,  1974,  1984,  1977,  1979,
    1980,  1982,  1978,  1983,  1987,  1986,  1988,  1989,  1990,  1985,
    1976,  1981,  1991,  1992,  1975,  1993,  1994,  1995,  1996,  1997,
    1998,  1999,  2000,  2001,  2002,  2003,  2005,  2004,  2006,  2007,
    2008,  2009,  2010,  2012,  2011,  2013,  2014,  2015,  2017,  2016,
    2019,  2020,  1842,  2018,  2021,  2022,  2023,  2024,  2025,  1843,
    1844,  1845,  2026,  2027,  1846,  2028,  2029,  2030,  1847,  2031,
    2032,  2034,  2033,  2035,  2036,  1848,  1849,  2037,  2038,  2039,
    2040,  2041,  2042,  2043,  2044,  2045,  2046,  2047,  2048,  2049,
    2051,  2050,  2052,  2053,  2054,  2055,  2056,  1850,  2057,  1851,
    2058,  2059,  1852,  2060,  1853,  2061,  2062,  1854,  2063,  2064,
    2065,  2066,  2067,  2068,  1855,  2069,  2070,  1856,  2072,  2071,
    2073,  1857,  2075,  2076,  1858,  2074,  1860,  2077,  1859,  1861,
    2078,  2079,  2081,  2080,  2082,  2083,  2084,  2085,  1862,  2086,
    1863,  2087,  2088,  2089,  2090,  2092,  2091,  2093,  2094,  2095,
    2096,  2097,  2099,  2098,  2100,  2101,  2102,  2103,  2106,  2107,
    2108,  2109,  2104,  2105,  1864,  2110,  2111,  2112,  2114,  2115,
    2117,  2116,  1865,  1866,  2118,  2119,  1869,  2120,  2121,  2124,
    2122,  2123,  2126,  2125,  2127,  2128,  1867,  2129,  1868,  2130,
     172,  1810,   155,  1811,  1820,     0,   885,   902,  2301,  2302,
     489,   731,     0,     0,   732,     0,   488,   730,   153,  2350,
     108,     0,   485,   486,     0,  1572,     0,  1495,  1495,  1495,
       0,     0,  1495,  1495,     0,  1498,  1495,   153,  1495,     0,
      67,  1680,     0,     0,     0,     0,  1804,     0,  1505,     0,
    1712,  1713,     0,  1715,     0,     0,  2179,     0,     0,     0,
       0,     0,   153,   919,     0,  1556,     0,   881,     0,  2302,
    2313,   945,   949,   961,  2134,  2131,  1657,   870,   870,   870,
     868,   870,  1579,     0,     0,     0,  1556,  1714,  2402,     0,
       0,     0,  2398,     0,  2403,     0,   951,     0,     0,     1,
       5,     0,     0,  1934,  2030,  1670,  1668,  1801,     0,   760,
     787,     0,   765,     0,   763,  1816,  1815,  1814,     0,   776,
     775,   773,     0,   367,     0,     0,  2359,   767,   899,     0,
    2299,     0,   928,   938,   174,     0,    76,     0,     0,     0,
    2305,     0,     0,     0,     0,   107,     0,     0,     0,   104,
     983,   983,  2350,  2352,  2354,   489,   487,     0,  1576,  1575,
    1574,     0,  1572,  1871,  1821,  1882,     0,  1774,     0,     0,
       0,  1279,     0,  1826,     0,  1894,  1896,  1831,     0,     0,
     992,   992,   992,     0,     0,     0,  1912,  1913,  1783,     0,
       0,     0,  1771,  1784,  1946,  1947,     0,  1773,  1952,     0,
       0,     0,     0,  1969,  1781,     0,     0,  2000,  2002,     0,
       0,  2006,  2007,  2008,  2009,  1758,  1047,     0,   992,     0,
    1770,  1780,  2023,  1764,  2031,     0,     0,  2035,  2036,     0,
    2044,     0,     0,     0,  2067,  2070,     0,     0,  2089,     0,
       0,   992,  1757,  2106,  2107,  2108,  2109,     0,  1772,  1864,
    1782,     0,  2120,   992,   992,   992,     0,     0,     0,  2127,
    2130,     0,     0,     0,     0,  1046,     0,  1247,     0,  1273,
    1004,  1010,  1024,     0,  1039,  1057,  1058,  1061,  1155,  1059,
    1060,  1066,  1065,  1474,  1768,  1064,  1063,  1769,  1056,  1791,
    1810,  1790,     0,     0,     0,     0,     0,     0,     0,     0,
    1653,     0,     0,     0,  1495,    69,     0,  2224,  2239,  2240,
    2236,  2241,  2259,  2242,  2246,     0,  2238,  2230,     0,  2245,
    2234,  2243,     0,  2228,     0,  2244,  2249,  2260,  2232,  2237,
    2216,     0,  2222,  2226,  1803,  1379,  2193,  2194,     0,    75,
    1507,  1508,  1506,   849,     0,  1710,  1726,     0,     0,     0,
     914,   413,   404,     0,  1652,  1651,     0,  1706,  2314,     0,
       0,   890,  1510,  1557,     0,  1509,  1703,     0,  1702,  1699,
    1701,     0,  2224,  2211,     0,  2308,  2305,  2315,   975,   967,
     966,   969,   970,   974,   971,   972,   973,   968,   965,   983,
     962,   964,  2137,  1617,     0,   665,     0,  1665,     0,  1618,
       0,     0,  1665,     0,  1415,  1655,  1658,     0,  2146,  1633,
     728,   727,     0,   726,  2147,  1651,     0,     0,     0,  1604,
    1619,     0,  1580,  1624,  2148,     0,  1654,     0,  1415,  1665,
       0,  1596,     0,     0,     0,     0,   864,   874,   866,   861,
       0,   867,   863,  1577,  1491,  2415,  2191,   849,  1763,  1762,
    1808,  2399,  1761,  2407,  2409,  2395,  2397,  2404,   947,     0,
    2319,     6,    61,     0,  1677,  2357,  2358,  2356,   681,     0,
     992,  1817,  2351,   156,   774,     0,   368,   156,     0,     0,
       0,     0,     0,   369,   370,   306,   758,   771,     0,     0,
     770,  2359,     0,     0,  1489,     0,     0,   930,   940,   176,
     173,   154,     0,   887,   904,  2304,     0,     0,  2306,  2310,
    1045,  1044,     0,   101,   106,     0,     0,     0,  2278,   105,
    2274,  2355,   983,   983,   983,  2347,     0,  2335,  2342,  2343,
    2346,  2345,  2344,  2341,     0,  2334,  2337,  2338,  2340,  2339,
    2359,  2353,     0,   733,     0,  1559,  1562,  1566,  1570,  1573,
       0,     0,  1384,  1079,  1384,  1384,  1384,  1280,     0,     0,
       0,     0,     0,     0,     0,     0,  1384,     0,  1116,  1089,
       0,  1117,     0,     0,     0,     0,     0,  1777,     0,     0,
       0,     0,     0,     0,  1252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1275,  1277,  1790,  1384,     0,     0,
    1384,     0,     0,     0,     0,     0,   997,     0,  1123,   983,
       0,     0,   983,   983,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1384,  1384,     0,     0,  1384,     0,  1132,
       0,  1779,     0,     0,     0,  1778,     0,     0,  1776,  1775,
    1759,     0,  1136,  1138,  1137,     0,  1384,  1384,     0,     0,
    1069,  1068,  1070,  2332,     0,     0,     0,     0,     0,     0,
    1043,  1042,  1041,  1040,     0,     0,     0,  1048,     0,  1049,
    1050,     0,  1051,  1052,  1053,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1071,     0,     0,     0,  1760,   983,
       0,  1496,  1478,  1484,  1480,     0,  1653,  1481,  1488,   381,
       0,  1485,  2272,  1482,   851,     0,     0,    68,  1694,  1688,
    1690,  1693,  1689,     0,  1695,  1692,  1691,  2182,  1681,  1683,
    1684,  2225,  2223,  2257,  2256,     0,  2258,  2254,  2247,  2279,
    2251,  2279,  2253,  2252,  2279,  2248,  2255,  2279,  2220,     0,
    1380,  1381,     0,  2192,     0,  1802,     0,     0,  1727,     0,
    1728,  1716,  1724,   933,     0,  1379,  2180,  2183,     0,   414,
     411,   409,   422,     0,     0,    64,    65,     0,   921,     0,
     920,   924,     0,     0,     0,  1513,  1503,  1512,  1704,     0,
       0,  2223,  2220,  2309,     0,  2311,  2326,   950,  2316,   981,
     952,   980,     0,   963,  2132,  2135,  2143,  1661,   664,     0,
       0,  1632,  1614,     0,   489,     0,     0,     0,     0,     0,
       0,  1597,     0,     0,   526,     0,  1623,  1416,  1659,  1660,
    1665,     0,     0,  1665,     0,  1627,  1638,  1628,     0,  1655,
       0,  1665,  1592,     0,     0,  1584,  1589,  1585,     0,  1591,
    1590,  1593,  1581,  1582,  1610,  1639,  1655,  1615,  1622,  1631,
       0,  1609,  1616,     0,  1603,  1629,  1655,  1655,  1665,  1665,
     877,   876,   875,   871,   872,   877,     0,  1314,     0,     0,
    2396,  2410,  2394,  2405,  2406,  2393,   948,  2320,   946,  2321,
       0,     7,     4,  1671,  1669,  1678,  1679,   682,   681,   480,
     483,   482,     0,     0,  1819,     0,   766,     0,  1653,   764,
       0,     0,  1653,   317,  1653,   371,   681,   778,     0,     0,
     768,   900,     0,     0,   932,   927,   931,   929,   723,   722,
       0,   939,     0,   177,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    77,    78,    92,   889,   888,   886,   912,   911,   909,
       0,   910,   908,   903,   905,   906,  2303,  2307,   490,   681,
    1653,     0,   309,     0,     0,     0,     0,     0,   489,     0,
       0,  2336,    97,   734,     0,  1564,  1492,  1560,     0,     0,
       0,  1379,     0,     0,  1385,  1384,     0,  1258,     0,     0,
       0,     0,  1281,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1258,   993,     0,  1143,     0,     0,     0,     0,
       0,  2332,     0,  1353,  1354,  1355,  1356,  1366,  1357,  1358,
    1359,  1368,  1373,  1360,  1361,  1369,  1370,  1371,  1362,  1372,
    1367,  1363,  1374,     0,  1352,     0,  1377,  1375,  1378,  1376,
       0,  1253,  1245,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1384,     0,     0,     0,  1384,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1224,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1384,     0,     0,     0,
    1365,     0,  1364,     0,     0,     0,     0,     0,     0,     0,
    1112,     0,  1793,  1792,     0,     0,     0,     0,   951,     0,
    1073,     0,  1072,     0,  2149,  1248,  1250,     0,   995,   994,
     996,  1007,  1000,  1005,   998,  1002,     0,  1054,  1876,  1008,
       0,     0,  1036,     0,  1393,  1037,  1022,  1027,  1028,     0,
    1025,  1026,     0,  1030,     0,  1029,  1033,  1034,  1035,  1038,
       0,     0,     0,     0,  1062,  1067,  1274,     0,  1223,  1794,
       0,  1476,   381,   384,   383,  1486,   382,  1534,     0,   853,
     852,  1483,   851,     0,    70,    72,  1687,     0,     0,  1696,
    2250,     0,  2231,  2235,  2229,  2233,     0,     0,  2221,     0,
    2227,  1383,  1942,  2016,     0,  1386,  2196,  1500,  2414,  1723,
    1725,     0,     0,  1717,     0,     0,   915,     0,     0,     0,
     424,   407,     0,    66,     0,     0,  1707,     0,     0,     0,
       0,   892,  1511,     0,  1700,     0,     0,     0,     0,     0,
    2312,  2328,  2327,  2317,   983,  1406,   984,   986,   985,  1790,
    2137,  2140,  2141,  2144,  2142,     0,  2139,  2138,  2153,     0,
    1663,  1666,  1667,     0,     0,  1647,  1641,  1640,  1636,  1642,
    1637,  1650,  1649,  1648,  1606,  1605,  1425,  1426,  1424,  1419,
    1420,  1423,  1600,  1656,  1646,  1644,  1634,     0,  1665,  1645,
    1643,  1586,  1587,  1588,     0,  1415,     0,  1665,  1655,     0,
    1665,  1665,  1626,  1630,     0,   865,   874,   862,   869,  1324,
    1323,     0,  1288,     0,  1290,  1287,  1286,  1285,     0,  1323,
    2400,  2408,  2412,     0,  1415,  2325,  2323,   481,  1534,  1534,
       0,  1818,     0,     0,     0,     0,     0,     0,     0,   157,
     166,     0,     0,   315,   316,  1534,   314,   357,   358,   361,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     110,   364,  1534,  1534,   311,   337,   338,   341,   342,   343,
     344,   345,   307,     0,   312,   847,   847,     0,  1534,  1534,
     847,  1534,     0,     0,  1534,  1534,     0,     0,  1534,     0,
       0,   847,     0,  1534,   845,     0,     0,  1534,  1534,  1534,
    1534,   847,     0,     0,  1534,   401,  1534,     0,     0,   857,
       0,     0,  1534,     0,     0,  1534,  1534,  1534,   794,   844,
     493,   513,   514,   759,   793,   795,   806,   399,     0,   823,
     846,     0,   780,   782,  2360,  2361,  2362,   884,  1490,  1344,
     175,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   913,
     907,   102,   681,  1534,  1534,  1534,  1534,   313,   346,   347,
     350,   351,   352,   353,   356,   354,   355,     0,     0,  1653,
       0,  2275,     0,  2388,     0,     0,     0,   155,   491,     0,
       0,   735,     0,     0,     0,  1386,  1567,  1314,  1571,  1570,
    1568,     0,  1139,     0,  1227,     0,  1229,  1230,  1231,     0,
       0,     0,     0,     0,  1140,     0,  1087,  1141,  1142,     0,
       0,     0,     0,  1233,     0,  1118,     0,     0,  1090,  1091,
    1084,  1076,     0,  1157,     0,     0,  1092,     0,     0,     0,
       0,     0,  1158,  1276,     0,  1278,  1794,     0,  1237,  1145,
    1097,     0,  1235,     0,  1098,  1159,  1160,  1161,  1124,   984,
    1184,   983,  1147,  1148,     0,     0,     0,  1163,     0,  1149,
       0,     0,     0,     0,  1100,  1241,  1239,     0,     0,     0,
       0,  1243,  1133,  1102,     0,     0,     0,  1101,     0,     0,
       0,     0,     0,     0,     0,  1104,     0,  1085,  1240,  1242,
    1153,     0,  1113,  2329,  2329,     0,  1077,     0,     0,     0,
       0,     0,  1795,  1001,  1006,   999,  1003,     0,     0,     0,
       0,     0,  1020,  1019,     0,     0,     0,     0,  1393,  1023,
    1214,  1271,     0,  1479,  1477,  1487,  1532,  1533,  1535,     0,
    2273,  1475,    73,     0,     0,  1682,  1697,  1685,  2283,     0,
    2282,  2268,  2271,  1801,     0,     0,     0,  2206,  2200,  2207,
    2209,  2203,  2208,  2210,  2201,  2202,  2197,  2204,  1387,  1417,
       0,     0,   934,   935,   938,     0,  2186,  2187,  2185,  2184,
     983,   412,   410,  1450,  1451,  1436,  1437,  1435,  1438,   423,
    1439,  1449,     0,   435,     0,   415,  1709,  1708,     0,   922,
     925,   926,   897,   896,   898,   891,   893,   894,   473,  1517,
       0,     0,     0,  1523,  1504,  1514,   882,     0,     0,     0,
       0,     0,   979,  1314,  1466,   976,   956,  1417,  1407,   955,
     987,     0,  2136,     0,  2104,  2164,     0,     0,     0,     0,
       0,  2154,  1662,     0,  1611,     0,  1635,     0,     0,     0,
    1602,     0,  1625,  1583,  1601,  1386,  1655,  1598,  1599,   879,
     878,   873,  1323,  1314,     0,     0,  1311,  1325,     0,  1325,
    1314,  1314,     0,  1314,  1379,  1320,     0,     0,  2411,  1408,
    2324,     0,     0,   762,   160,   163,   161,     0,   162,     0,
       0,   366,   365,     0,  1653,   359,   114,   113,   115,   116,
    1433,  1434,  1430,  1431,  1429,  1432,   118,   117,   112,   777,
       0,     0,     0,  1653,   339,   318,   319,   322,   323,   324,
     848,   752,   724,   916,   724,   827,     0,   553,   752,   717,
     825,     0,   916,     0,     0,     0,     0,     0,   916,     0,
       0,     0,  1534,     0,   838,   789,     0,     0,     0,     0,
       0,   839,     0,   790,  1534,     0,     0,     0,     0,     0,
     916,     0,     0,     0,     0,   916,   807,   860,   859,   858,
       0,   916,   916,     0,   519,   520,   518,     0,     0,     0,
     494,   681,   791,   400,   792,   556,     0,   854,   553,   559,
    1797,     0,     0,     0,   124,  2364,  1347,     0,  1348,  1345,
    1346,   178,    84,    80,    93,  1443,  1444,  1442,  1440,  1441,
      94,    82,    83,    87,    86,    88,    89,    90,    85,    91,
      81,    95,    96,    79,     0,     0,     0,     0,  1653,   348,
       0,     0,  1534,   308,   325,   326,   329,   330,   331,   332,
     333,   336,   334,   335,     0,  2276,     0,     0,   302,   301,
       0,   119,  2382,     0,     0,   556,    98,   399,   492,   495,
     745,   747,   746,   741,   740,    99,  1493,  1494,  1314,  1406,
    1386,     0,  1379,     0,     0,  1228,     0,  1168,  1259,     0,
    1282,     0,  1081,   643,   643,  1269,  1267,   628,   643,  1263,
    1268,  1265,     0,   667,     0,   666,     0,     0,     0,  1234,
    1171,  1232,     0,     0,     0,     0,  1256,     0,     0,     0,
    1086,     0,  1218,  1238,  1175,  1236,  1173,     0,   987,     0,
    1187,  1225,     0,     0,     0,     0,     0,     0,     0,     0,
    1180,  1179,     0,     0,     0,     0,  1244,  1166,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1177,
    1178,     0,  2333,  2333,  1074,  2150,  2151,  2152,   754,  1249,
       0,  1017,  1013,     0,  1011,  1392,  1032,  1031,     0,     0,
       0,  1021,     0,     0,     0,  1164,     0,  1272,  1796,   380,
     525,    71,  1686,  2280,     0,     0,     0,     0,     0,     0,
       0,     0,  2195,  1418,  1544,  1809,  1718,     0,   942,  2188,
    2189,     0,   413,     0,   405,   408,     0,   416,   417,   419,
       0,   895,   961,     0,  1536,  1521,  1528,  1522,     0,     0,
       0,  1520,  1786,  1785,  1792,  2315,     0,     0,     0,     0,
    2318,  1386,  1386,  1460,     0,     0,   953,   958,   954,   957,
       0,   982,   991,   990,  1787,  1794,     0,     0,     0,     0,
     669,   668,   677,     0,     0,     0,  2149,     0,   673,   675,
     674,  2159,   672,  1664,  1415,  1621,  1620,  1422,  1421,     0,
    1594,  1613,  1665,     0,  2322,  1318,     0,  1313,  1312,  1326,
       0,  1314,  1325,  1325,     0,  1293,  1292,  1548,  1551,     0,
    1291,  1342,  1316,   961,  2401,  2413,     0,   680,   679,   524,
     676,   523,   165,   164,   170,   171,   386,   372,   385,   360,
     111,   373,   374,   340,     0,   320,   558,   753,   725,   718,
     810,   719,     0,     0,     0,   724,   552,   752,   551,   554,
     733,     0,     0,   505,   502,   829,   508,   808,   801,   809,
     820,   822,     0,   504,   521,     0,     0,   510,   752,   796,
     836,   837,   851,   498,     0,   534,   535,   533,   515,   522,
     500,   501,   831,     0,  1402,  1404,  1412,   507,   506,   402,
     503,     0,   842,   815,     0,   532,   530,   527,   529,   528,
     531,   511,   509,   499,  1696,   847,   847,   824,     0,   542,
     544,   545,  1800,     0,   856,   826,     0,   546,   547,     0,
       0,     0,   134,     0,     0,   779,     0,   127,   125,   136,
       0,     0,   941,     0,   379,   378,   377,   376,   349,     0,
       0,     0,  1653,   327,  2277,     0,  2389,   305,   303,   304,
       0,     0,   180,   540,   541,   539,   538,     0,   389,     0,
    1847,   387,     0,     0,  1729,   681,   496,     0,  1386,  1427,
    1563,  1569,     0,  1114,  1169,  1192,  1283,     0,     0,   644,
    1260,   683,     0,  1270,   630,   629,  1262,  1264,  1266,  1080,
    1088,  1156,  1083,  1082,  1172,  1170,     0,     0,  1121,  1122,
    1254,  1257,     0,     0,  1094,     0,  1096,     0,     0,  1220,
    1176,  1174,  1146,  1226,  1185,  1186,     0,  1188,     0,     0,
    1162,  1125,  1150,     0,  1099,  1075,     0,  1126,     0,  1131,
    1129,     0,  1167,  1103,     0,     0,  1110,     0,  1108,     0,
    1109,     0,  1111,  1152,  1154,  2330,     0,     0,  1251,  1009,
       0,  1018,  1015,     0,  1012,  1190,  1189,  1165,  1215,  2281,
    2270,  2269,  2284,  2284,  2284,     0,  1388,     0,  1501,  1729,
     936,     0,   937,   984,   432,     0,   439,     0,   437,   406,
       0,   923,   983,  1518,  1530,     0,  1538,     0,     0,  1515,
    1525,     0,     0,     0,  1524,     0,  2213,  2214,  2212,  1417,
    1394,     0,     0,  1472,     0,  1467,   977,     0,   989,   988,
       0,  2166,     0,  2165,  2177,  2178,  2175,  2176,  2174,  2155,
       0,  2161,  2160,     0,     0,     0,  2171,  2162,     0,     0,
    1612,     0,  1607,   880,     0,  1314,  1289,  1314,  1300,     0,
       0,  1314,  1296,  1294,  1298,     0,  1386,     0,  1315,  1339,
     983,  1789,  1409,  1412,   321,   812,   555,   752,   720,   721,
     733,     0,     0,     0,   800,     0,   904,     0,   805,   677,
     516,   835,   834,   517,     0,   798,     0,  1413,  1414,  1405,
     797,   817,   803,     0,   828,   556,   855,   697,   624,   573,
     564,   643,   567,   566,   610,   581,   578,   628,   626,   596,
     628,   628,   603,   602,   620,   606,   586,   683,   683,   585,
     623,   683,   607,   605,   609,     0,   611,   628,   616,   604,
     608,   625,   601,   598,   622,   643,   643,   579,   582,   621,
     683,     0,   614,   643,   647,   584,   683,   689,     0,     0,
     643,   645,  1799,   135,   123,     0,     0,   781,   783,     0,
       0,   784,  2366,     0,  2368,  1349,     0,   310,   375,   328,
       0,   191,   983,     0,     0,   181,   183,   184,     0,     0,
       0,   491,  1731,  1730,   388,   476,   497,     0,  1565,     0,
    1561,     0,     0,  1194,  1284,     0,     0,     0,     0,   689,
     691,   685,   689,     0,  1261,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1078,     0,  1216,  1181,     0,
       0,     0,     0,     0,     0,     0,     0,  1107,  1105,  1106,
    2331,   755,  1014,     0,     0,  2289,  2289,  2289,  1543,  1542,
       0,  1541,  1545,     0,   943,     0,     0,     0,     0,   436,
       0,   418,   474,     0,     0,     0,  1539,  1527,  2319,  1516,
    1519,  1794,  2215,   960,     0,  1389,  1471,  1468,     0,  1461,
    1463,  1465,     0,  1788,     0,     0,  2170,  2156,   678,     0,
       0,     0,     0,  2157,     0,  1379,  1319,     0,  1285,  1314,
    1314,     0,  1285,     0,     0,     0,  1550,  1406,  1552,  1343,
       0,  1321,     0,  1411,     0,     0,   811,     0,     0,     0,
     841,     0,   854,   802,   821,   843,   647,   916,  1403,   816,
     818,   892,   512,   543,   703,   572,   565,   583,   632,   627,
       0,   632,   632,   592,   610,   587,     0,   683,   600,   591,
     612,   615,   617,   619,   632,     0,   683,   580,   589,   576,
     632,   655,     0,     0,     0,   651,     0,   696,     0,   658,
     560,   648,   650,     0,     0,   613,   683,   569,   690,   689,
     571,   683,   689,   632,     0,   646,   632,     0,   121,   126,
     137,   138,   772,  2365,     0,  2363,     0,     0,     0,   194,
     192,   193,     0,   187,   189,   184,  2376,     0,  2383,     0,
       0,  2381,   390,   392,   399,   477,     0,     0,  1412,   750,
    1428,  1115,     0,     0,  1207,  1206,     0,  1195,     0,   641,
     639,   642,   640,   684,   692,   693,     0,   688,   686,   689,
       0,  1119,  1120,  1255,  1246,  1144,     0,  1095,  1217,     0,
       0,     0,     0,  1151,  1127,  1130,  1128,  1134,  1135,  1016,
       0,     0,  2288,  2286,     0,  2287,  2285,  2261,     0,  2218,
    2219,  2217,  2205,     0,     0,  1719,   420,   983,   425,     0,
     442,   441,   438,  1417,  1529,  1531,  1537,  1526,  1395,  1390,
    1406,   670,  1464,     0,   978,  2168,  2167,  2169,  2163,     0,
       0,     0,     0,  1317,  1301,     0,  1305,  1310,  1306,     0,
    1297,  1295,     0,  1427,  1331,  1332,     0,     0,  1337,  1341,
    1417,  1412,   814,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   840,  1765,   830,   832,   799,     0,   804,     0,
       0,     0,   698,   699,   704,   706,   636,   637,   638,   593,
     633,   635,     0,   595,   563,   588,   618,   594,     0,   590,
     577,   661,   660,   992,   653,   663,     0,     0,   659,   649,
     657,   652,   568,   570,   574,   575,   561,     0,   562,  1798,
     128,   785,   242,  2367,   951,     0,  2372,   109,  2380,  2390,
     191,     0,     0,   132,     0,   182,   185,  2319,  1729,     0,
     395,   736,     0,   749,     0,  1193,     0,  1191,     0,     0,
       0,     0,     0,  1205,   694,   687,     0,     0,  1219,  1221,
       0,     0,  2267,  2266,  2265,  2262,     0,     0,     0,     0,
       0,     0,  2290,  2292,  1540,     0,     0,     0,   433,     0,
     429,   431,     0,   461,   475,   976,   536,     0,     0,  1417,
       0,  1469,  1462,  2173,  2172,  2158,     0,     0,     0,     0,
       0,     0,  1350,  1549,  1327,  1327,  1338,  1322,  1410,   813,
       0,     0,   736,  1767,  1766,   854,     0,   709,   710,   711,
       0,     0,     0,   702,   705,   634,     0,   756,     0,   662,
     992,   656,     0,   130,   268,     0,   254,   240,     0,     0,
       0,   244,   139,   142,   140,     0,   141,   147,     0,   148,
     149,   150,   151,   152,   143,   266,   267,   146,   144,   145,
       0,  1812,     0,  1813,  2370,     0,     0,  2369,   158,   188,
       0,     0,   124,   133,  2384,   393,   391,     0,  2315,  1534,
       0,   100,   737,   742,   738,  1412,     0,  1202,  1412,     0,
    1209,     0,  1213,  1212,  1208,  1210,   631,  1093,     0,     0,
    2263,  2293,  2296,  2294,  2295,  2297,  2291,     0,     0,   984,
       0,   426,   427,     0,     0,     0,  1534,     0,     0,  1534,
    1534,  1534,  1534,   454,   462,   464,     0,   537,  1399,  1412,
    1391,  1452,   671,  1732,     0,  1302,     0,  1307,     0,  1299,
       0,     0,  1335,  1333,     0,   736,   548,   833,     0,   713,
       0,   712,     0,   707,   708,   703,     0,   683,     0,   683,
     654,   129,     0,   122,     0,     0,   253,   256,     0,     0,
     259,   249,   248,   250,     0,   243,   242,   242,   296,   247,
     293,   292,   285,  2319,     0,     0,     0,  2391,   190,   983,
     136,     0,   397,   396,     0,     0,   739,   748,   751,     0,
    1196,  1203,  1199,     0,     0,     0,     0,  1546,  1554,     0,
    1720,     0,   434,   433,   430,     0,     0,     0,  1534,  1534,
       0,     0,     0,     0,     0,   440,   463,  1534,     0,     0,
    1396,  1398,     0,   959,     0,  1740,     0,     0,     0,  1351,
       0,  1328,     0,     0,     0,   550,   549,     0,   715,   716,
     714,   700,   701,   597,   757,   599,   131,   269,   280,   283,
     275,   255,     0,     0,     0,   245,   242,     0,   229,   227,
     228,   234,   235,   236,   237,   238,   239,   230,   233,   231,
     232,   242,     0,   199,     0,     0,  2371,     0,  2373,     0,
     168,   167,   159,     0,   242,  2377,     0,  2385,  2319,   743,
     744,  1412,     0,  1198,  1204,  1211,  1182,  1183,     0,     0,
     670,   421,   428,     0,   450,   452,   453,   447,     0,   443,
     445,   446,   472,     0,     0,  1447,  1445,  1446,   468,  1448,
     469,   467,   465,   458,     0,   456,     0,  1400,  1401,  1412,
    1453,     0,     0,     0,     0,  1733,  1735,     0,  1470,     0,
    1304,  1309,  1330,  1329,  1344,     0,   819,     0,     0,   242,
     276,     0,   251,     0,     0,     0,     0,   197,   299,     0,
     195,   287,   287,  2374,  2375,   169,  2392,     0,   138,   158,
     398,  1199,  1200,  1201,  1553,  1555,  1721,   444,     0,  1996,
       0,   470,   471,     0,   455,     0,   466,  1397,     0,     0,
       0,     0,     0,  1734,     0,     0,  1741,  1743,     0,     0,
       0,   277,   283,   273,   281,   242,     0,     0,   241,   260,
     295,   198,     0,   297,     0,   242,     0,   286,   288,   290,
       0,   120,  2386,  1197,  1732,   451,   448,   449,   461,   460,
     457,   983,  1738,  1739,     0,  1736,     0,     0,  1742,     0,
    1336,  1334,     0,   274,     0,     0,   272,   252,   257,   242,
       0,   242,   210,   209,     0,   201,   223,   294,     0,   200,
    2378,   242,  1740,   459,     0,     0,  1456,  1458,  1737,  1745,
    1744,     0,   278,     0,   242,     0,   242,     0,   242,     0,
       0,     0,     0,     0,   196,   242,  2387,  1746,   984,  1454,
     983,  1608,     0,   270,   242,   258,   263,   300,     0,   204,
     224,   225,     0,   207,  2379,     0,  1748,  1459,  1457,   242,
     242,   259,   262,   298,     0,     0,   202,   216,   203,   214,
     206,     0,     0,     0,  1755,   242,   242,   264,   222,   220,
     242,   211,   218,   213,     0,   219,   226,   217,     0,   208,
    1747,  1750,     0,     0,  1752,  1753,     0,  1722,     0,   205,
     221,   215,  1754,  1749,     0,  1756,   212,  1751
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   551,  1342,    57,    58,    59,    60,    61,  1225,
      62,   755,  1167,  1634,  1635,    63,   497,    64,   952,  1401,
    1402,  1403,    65,  1938,  2797,  1419,   469,   470,  1809,  1810,
     975,  2781,  2755,  3490,  2759,  3603,  3733,  3642,  1882,  3081,
    3491,  3492,  3612,   492,  1936,  1356,  3757,  1789,  3862,  1790,
      66,   584,   950,  1382,  1383,  3094,  3095,  3320,  3096,  3312,
    3313,  3314,  3315,  3995,  3836,  3940,  3996,  4061,  4094,  4100,
    4101,  4034,  4110,  4111,  4112,  4118,  4113,  4035,  4096,  3837,
    3838,  3740,  3839,  3615,  3840,  3744,  3841,  3618,  3842,  3843,
    3844,  3845,  3987,  3846,  3739,  4027,  3833,  3834,  4029,  4076,
    4092,  3847,  3625,  3734,  3927,  3626,  3735,  3982,  3829,  3983,
    4022,  4072,  3830,  3928,  4025,  3931,  3848,  3854,  3997,  3849,
    3855,  3850,  3630,  3751,  3853,  3749,  3852,  4031,  3992,  2400,
    2780,   569,   570,   595,  1929,   571,   964,   924,  1358,  1822,
    1823,  2265,  2266,  2383,  2384,  2385,  1814,  1815,  1816,  1917,
    1918,  1919,  1796,  1797,  1798,  1362,  1793,  1794,   572,   925,
     935,  1817,  1818,  1819,  2389,  1921,  1922,  1923,  1924,  1820,
    1625,  1821,  2657,  2406,  2791,  3507,  3104,  3648,  3868,  2332,
    2333,  2313,    67,   508,   802,  1222,  2144,  1668,  1667,  1223,
    2556,  2557,  2558,  2131,  3388,  1670,  2143,  3548,  3783,  3549,
    3550,  2903,  3681,  2554,  2907,  2908,  3168,  3390,  3553,  3889,
    3890,  3891,  3883,  3884,  3885,  3795,  3904,  3905,  3963,  4008,
    3693,  3694,  3695,  2163,  2562,  3393,  3326,  1911,  1348,  1349,
     471,   472,   473,   592,  2407,  1869,  2408,  2409,  1871,  1872,
    2529,  1273,  2731,  2708,  3554,  2787,  2738,  2739,  2740,  2741,
    2678,  2679,  2276,  2277,  2338,  2749,  3064,  3250,  3265,  3065,
    3066,  3067,  3068,  3069,  3070,  3071,  2813,  2814,  3459,  3460,
    3461,  2809,  2810,  3296,  3280,  3281,  3282,  3474,  3123,  2601,
    2602,  3561,  2610,  2611,  2648,  2951,  2649,  1352,  3124,  3290,
    3347,  3283,  2748,  3244,  3452,  3592,  3453,  3454,  3455,  3723,
    2278,  2677,  2279,  2669,   880,   474,  1433,  1434,  3651,  3652,
    3653,  3654,  2413,  3327,  3328,  2666,  2878,  3596,    68,  1366,
     918,   927,   923,   941,   576,  1367,  1883,  2344,  3302,   559,
    1873,  3237,  2996,  3241,  1874,  2688,  1875,  2985,  3226,  1876,
    3011,  3239,  3447,  2689,  2690,  1877,  1878,  1879,  2995,  3004,
    3585,  2280,   123,  1631,  2745,  2320,    69,  1325,  1320,    70,
     891,   886,   887,  1323,  1324,  1755,  2210,    71,   821,    72,
     579,    73,   587,  1406,    74,  1233,  2155,  2156,  2157,    75,
     942,    76,    77,   588,  1413,  1414,  1415,    78,  1218,   130,
      79,   810,  1228,  1230,  1231,    80,   581,   582,  1375,    81,
    1662,  2122,  2123,   947,   948,  1381,  2902,    82,    83,   548,
     521,   827,   522,   523,  1695,  2175,  3555,   839,   840,   841,
    2586,  1250,  1251,  1526,  2180,  1696,  2591,  1018,   719,   720,
     721,   722,  1115,  1116,  3284,   723,  1125,  1590,   724,   725,
     726,   727,   728,   729,  2470,  2846,  2524,  2427,  3113,  3336,
    3657,  3873,  3770,  3337,  3338,  3523,  3664,   730,  2838,  2839,
    3137,  1617,  1527,  1528,   731,  1985,   732,  1108,  1575,  1502,
    3129,  2830,  1446,  1955,  2442,  2526,  2055,  1043,  1044,  1008,
    1962,  1452,  1762,  1763,  1764,  1765,  1766,  3214,  3213,  3215,
    3567,  3415,  3569,  3419,  2221,  1767,  1768,  2624,  2965,  2642,
    2643,  3430,  2212,  1769,  2630,  3712,  3427,  3428,  3814,  3813,
    3429,  3219,  3220,  2978,  2979,  2347,  2348,  2349,  3571,  1493,
    1551,  1494,  1500,  1202,  1203,  1447,  2119,  2541,  3400,  3558,
    2072,  3185,  3557,  3698,  3800,  1880,  2714,  2715,  2177,  2178,
    2646,  2982,  3009,  1276,  3556,  2543,  1729,  1730,  3110,  4099,
    2658,  2360,  3898,  2140,  2141,  3803,  3968,  4045,  4046,  4047,
    2933,  2934,  3189,  3190,  2179,  2583,  2935,  3401,  3703,    84,
     476,    85,  2084,  2096,   944,  1435,  1436,   743,   489,    86,
     498,  2120,    87,   515,  1683,   793,   814,  1236,  1237,  2164,
    2563,  2570,  2165,  2575,  3178,  2565,  2913,  2914,  2088,  2089,
    2566,  2916,  3175,  3160,  3161,  2898,  3384,    88,   536,  2976,
    2637,  2638,  3777,  3778,   815,    89,   475,   995,  1945,  1439,
    1944,   996,   997,  1441,   611,   612,    90,   533,  1301,  1302,
    1303,  1745,    91,   526,   881,  2614,  1724,   806,  1160,  1280,
     884,  1281,  1710,  2194,  1261,    92,   914,   913,    93,   555,
    1344,    94,   756,  1178,  1179,  1639,  2097,    95,   516,   819,
     820,    96,   510,   807,  1676,    97,   502,    98,    99,   796,
    1211,  2899,  3546,  3880,  4004,  1661,  1212,  3105,  3805,  3915,
    3916,  3918,  3976,  3977,  4086,  4104,  4123,  4124,  4127,   734,
     901,   735,  3442,   736,   737,  2571,  2572,  3658,   738,  3779,
     739,  2339,   894,   495,   451,   566,   902,  2546,   741,  3632,
     921,   968,   453,   454,   100,   842,   525,  1254,  1255,  1256,
    1705,  1706,   885,  2060,  1707,  1708,  2191,  2186,  3197,  2957,
    2949,   101,   799,  1180,  1216,  1217,  2128,   102,   535,   103,
    1204,  1655,  1656,  2116,  2540,  2117,   104,   823,   105,   780,
    1649,   781,  1182,   782,   783,  1194,  1189,  1197,  1191,  3536,
    3376,  3377,  2104,  1163,   969,   970,  1642,  2099,  2100,  3155,
    3379,  3542,  3543,   106,   134,   459,   590,   959,  1244,   107,
     108,   109,   110,  1247,  1337,  2171,  1338,  1339,  1340,  1776,
    1693,  2502,  1106,  1569,  2875,   599,   985,   977,   124,   125,
     126,   602,   603,   127,   939,   940,  2345,  2761,  3083,  3305,
    3306,  3496,  3637,   979,  3502,  3947,  4065,   980,   981,  2782,
    3504,  3761,  3949,  4041,   982,  2397,  3091,  3638,  3864,   111,
     903,   545,  1335,  1330,  1332,  1772,  2228,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3498
static const int yypact[] =
{
    4325,  2571,   103,  1369, -3498,   354,   679, 41511,   635,  1369,
    1369,   385,  2752, -3498, -3498, -3498, -3498, -3498,  2709, -3498,
   41511,   103, -3498, 23692, -3498, -3498,   576,   481,   127,  1369,
     103, -3498, 41511, -3498,   584,  1525,   103, -3498, -3498,  1369,
   -3498,   385, 41511, -3498,   730, -3498,  1299,   -55,   661,   777,
     924, -3498, -3498, 41511,  2037,   585,  1306,  1210, -3498, -3498,
     964, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, 24270, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,  1232, 41511,  1261, 41511, -3498,  1132,
   41511, 35771, 41511,   995,  1269, -3498, -3498,  1353, -3498, -3498,
    1369, -3498, -3498, -3498,   385, -3498, -3498, 23692, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498,   873, -3498, -3498,  1004, -3498, -3498, -3498,  1536,
    1514, -3498,  1572, 35771, -3498, 41511, -3498, -3498, -3498,   992,
   -3498,  1276, -3498,  1313,  1610,   112, 12534,  1622,  1622,  1622,
   41511,  1687,  1622,  1622, 41511, -3498,  1622, -3498,  1622,  1369,
   -3498, -3498,  3183, 41511,  1498,   169,   -26, 35771,   911, 41511,
   -3498, -3498, 12534, -3498,  1641, 23692, -3498,  1369,  1843,  1718,
     250, 41511, -3498, -3498,  1369,   210,   969, -3498,  3854,   144,
   -3498, -3498, -3498,  2561, -3498, -3498,  5621, -3498, -3498, -3498,
    1335, -3498, -3498, 23692, 41511,  1369,  1660, -3498, -3498,   244,
     244,   244, -3498,   244, -3498,   244, -3498,   585,  1325, -3498,
   -3498,  1336, 41511,   808,   858, -3498, -3498,  1340,   538, -3498,
    1402, 32901, -3498, 41511, -3498, -3498, -3498, -3498,  1609, -3498,
   -3498, -3498,  1351, -3498, 23692, 41511,  1503, -3498, -3498, 23692,
   -3498,     0, -3498, -3498,  1365, 41511, -3498, 23692, 23692,   266,
     701,  1520, 41511, 41511,  1808, -3498,  1977, 32901,  1575, -3498,
     465,  1083,  1353,  1998, -3498,  1514, -3498, 41511, -3498, -3498,
   -3498, 37493,   112,  1427,  1433,  1435, 16104, -3498,  1449,  1453,
    1461, 12534,  1463,  1467,  1472,  1475,  1481,  1487,  1489,  1494,
    1504,  1504,  1517,  1530,  1539,  1551,  1047,  1553, -3498,  1563,
    1578,  1581, -3498, -3498,  1585,  1590,  1595, -3498,  1597,  1603,
    1618, 13129,  1620,  1625, -3498, 20798,  1628,  1631,  1635,  1682,
    1690,  1693,  1697,  1706,  1710, -3498, -3498, 12534,  1716,  1721,
   -3498, -3498,  1725, -3498,  1728,  1733,  1735,  1739,  1741,  1749,
    1751,  1753,  1757,  1759,  1764,  1776,  1781,  1796,  1801,  1805,
    1811,  1820, -3498,  1120,  1830,  1838,  1404,  1841, -3498,  1855,
   -3498,   258,  1865,  1504,  1504,  1504,  1871,  1881,  1891,  1895,
    1897, 16104, 16104, 16104,  9559, -3498, 41511, -3498, 41511,  1935,
    2482, -3498,  2836, 16104,   229, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498,  1468,  1522, -3498, -3498, -3498, -3498, -3498,
    1906,  1506,  1948, 41511, 41511, 41511,  1799, 41511, 41511, 35771,
    1698, 41511, 32901, 23692,  1622,  1824,  2454,  1861,  1771,  1317,
   -3498, -3498, -3498, -3498, -3498,  1905, -3498, -3498,  1809, -3498,
   -3498, -3498,   179, -3498,    59, -3498, -3498, -3498, -3498, -3498,
   -3498,  2094,  1846, -3498, -3498,   102, -3498, -3498, 41511, -3498,
   -3498, -3498, -3498,  2236,  1992,  1935,   215,  2451,  2325, 23692,
   -3498,  1451, -3498,  -153, -3498, -3498,  2281, -3498, -3498, 32901,
   23692, -3498, -3498, -3498, 21376, -3498, -3498,  2495, -3498,  1953,
   -3498, 23692,  1861, -3498,  2209,  2116,   701,  2022, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  1974,
    2561, -3498, -3498, -3498,  2429, -3498,  2144,     7,  2067, -3498,
    2009,  1048,     7, 33475,  2357,   194, -3498,   170, -3498,  2434,
   -3498, -3498,  2128, -3498, -3498,  2134,  2143,  2353,  2149, -3498,
   -3498,   288,  1479, -3498, -3498,    92, -3498,   -65,  2357,     7,
     194, -3498,  2385,  2517,   509,  1058, -3498,   -46, -3498, -3498,
    2583, -3498, -3498, -3498, -3498, -3498, -3498,  2236, -3498, -3498,
   -3498,  2073, -3498,  2326,  2178, -3498, -3498,   659, -3498,  2079,
     857,  2536, -3498,   896, 34049, -3498, -3498, -3498,  2568,  2590,
    1504,  2096, -3498, -3498, -3498,  2698, -3498, -3498,  2117,  2625,
    2625,  2625,  2721, -3498, -3498, -3498, -3498, -3498,  2289,  2166,
   -3498,  1503, 23692,  -126, -3498, 38067, 23692, -3498,  1390, 12534,
   -3498, -3498,  3492,    71,   252, -3498,  2683,  2333, -3498, -3498,
   -3498, -3498,  2587, -3498, -3498,  2698,  2645,  2625,  2542,  2176,
   -3498, -3498, -3498, -3498, -3498, -3498,   225, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,   943, -3498, -3498, -3498, -3498, -3498,
    1503, -3498, 23692, -3498, 23692, -3498,  2179, -3498,  2180, -3498,
   12534, 12534,   333,  2715,  2771,  2771,  2771,  1935,  2238, 12534,
   12534, 12534, 12534, 12534, 12534, 12534,   334,  2220, -3498, -3498,
   10154, -3498,  2225, 12534, 12534,  2296, 12534,  1522, 12534, 24848,
     899,  3246, 12534,   883,  2695, 12534, 12534, 12534,  9559,  3028,
   12534, 12534, 24848,  2815,  2234, -3498,  2233,  1278, 12534, 12534,
    1423, 12534, 12534, 12534, 12534, 12534, -3498, 10154, -3498, -3498,
   12534, 12534, -3498, -3498, 12534, 12534, 16104, 12534, 12534, 12534,
   12534, 12534, 12534,  2771,  2771, 12534, 12534,  1515, 10154, -3498,
   12534,  1522,  2584,  2584, 12534,  1522,  7179, 12534, -3498, -3498,
   -3498,  2250, -3498, -3498, -3498, 24848,  2771,  2771, 12534, 12534,
    2715,  2715,  2715, -3498,  9559,   251,  2257, 12534, 26004,  2247,
   -3498, -3498, -3498, -3498, 12534, 12534, 12534, -3498, 16104, -3498,
   -3498,  1826, -3498, -3498, -3498, 13724, 16104, 16104,  2271, 16104,
   16104, 16104, 16104, 16104,  2618, 16104, 16104, 16699, 17294, 16104,
   16104, 16104, 16104,  1055,  2715, 35771, 16104, 12534, -3498,  2274,
   41511, -3498, -3498, -3498,  2269, 23692,  1698, -3498, -3498,   623,
    2727, -3498, -3498,  2283,   126, 23692,  2279, -3498, -3498, -3498,
   -3498, -3498, -3498,  2830, -3498, -3498, -3498,  2309,  2290, -3498,
   -3498, -3498, -3498, -3498, -3498,  2384, -3498, -3498, -3498,  2297,
   -3498,  2297, -3498, -3498,  2297, -3498, -3498,  2297,   870,  4172,
   -3498, -3498, 41511, -3498, 42085, -3498, 21376,   354, -3498,  2616,
   -3498, -3498,  2646, -3498,  2621,   123,  2311, -3498, 23692, -3498,
   -3498, -3498,  2544,  1152, 35771, -3498, -3498,   107,  2315,  2390,
    2327, -3498,  2395, 23692, 23692, -3498, -3498, -3498, -3498,   969,
      61,  2328,   907, -3498, 41511, -3498,  1571, -3498, -3498, -3498,
    2329, -3498, 12534, -3498,  2332, -3498,   738,  2693, -3498,   354,
   12534, -3498, -3498,  2340,  1514, 41511, 41511, 41511, 23692, 41511,
   23692, -3498,   921,   921, -3498,  2110, -3498, -3498, -3498, -3498,
       7, 41511, 41511,     7, 32901, -3498, -3498, -3498,  2756,   194,
   41511,     7, -3498,  2710,  2436, -3498, -3498, -3498,  2775, -3498,
   -3498,  2765,  2347, -3498, -3498, -3498,   194, -3498, -3498, -3498,
   23692, -3498, -3498,   194, -3498, -3498,   194,   194,     7,     7,
    2397, -3498, -3498,  2355, -3498,  2397,  2490,  1000,   244,  2582,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
     100, -3498, -3498, -3498, -3498, -3498, -3498, -3498,   146, -3498,
   -3498, -3498,  1835,  2837, -3498, 35771,  2480,   984,   965,  2480,
     776,   354,   372, -3498,   372, -3498,  3124,  2612,   245, 23692,
   -3498,  2365,   354, 23692, -3498, -3498, -3498, -3498, -3498, -3498,
    2370, -3498,  2375,  2376,  1935,  2824,  2828,  2831,  2832,  2835,
    2838,  2840,  2841,  2843,  2846,  2847,  2850,  2851,  2852,  2854,
    2856,  2410, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
    2458, -3498, -3498, -3498, -3498,  2254, -3498, -3498, -3498,   150,
    2411,  2433,  2459,  2965, 32901,  2833, 41511, 41511,  1514, 41511,
   41511, -3498, -3498,  1173,  2674,  2425, -3498,  -169, 41511,  2842,
   28309,   108,   317,   491, -3498,  2771,  2446, -3498,  2448,  2461,
    2462, 12534,   167,  1021,   982,  1666,  1382,  1037,   366,   196,
   12534,  2463,  2435, -3498,  1045, -3498,   373,   383,  1057,  1096,
    2466, -3498,  2467, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498,  2873, -3498,  1401, -3498, -3498, -3498, -3498,
    2468, -3498, -3498,  1118,   406,   412,   262,  2443,   417,  1428,
    1450,  2460, 24848, 41511,  2771,  2476,  1131,  1144,  2771,  2477,
     428,  1146,  1476,  1531,  1557,  1153, 12534,  1644, -3498,  1170,
    1178,  2483,  2484,   435,  1655,  2868,  1194,   500,   527,   535,
     645,  1205,  2485,  2486,   778,   218,  2771,  2487,  1231,   289,
   -3498,  2492, -3498,  2494,  1256, 10749, 11344, 11939,   954,   789,
   -3498,  2488, -3498,  2233,  2491,  2501,   295,  1266, -3498,   585,
   -3498, 12534, -3498,   173,   864, -3498,  2650, 41511,  2098,   135,
   -3498, -3498, -3498, -3498, -3498, -3498,   817, -3498,  2504, -3498,
    2510,  1907,  2513,  9559,   786,  2513,  2914,  1383,  1383, 16104,
    3031,  2113, 13129,   653, 13129,   653,  2513,  2513,  2513, -3498,
   16104,  2514, 16104, 16104, -3498,  2715,  1935,  2518,  2522,  -188,
   41511, -3498,   623, -3498, -3498, -3498, -3498,   140, 32901, -3498,
   -3498, -3498,   126, 35771,  2526, -3498, -3498,  2712,  2454, 23692,
   -3498, 41511, -3498, -3498, -3498, -3498, 21954, 21954, -3498, 21954,
   -3498, -3498,   821,  1023,  2825,  2534, -3498, -3498, -3498, -3498,
   -3498,  2893, 23692, -3498,   725, 23692,  2365,  2531,  2531,  1816,
    2632, -3498,  2537, -3498, 12534,   354, -3498, 32901, 32901, 23692,
   23692,   381, -3498,  1758, -3498,   354,  2939, 21954, 21954, 21954,
   -3498, -3498, -3498, -3498, -3498,  1035, -3498,  1935, -3498,  2530,
   -3498, -3498, -3498, -3498, -3498, 38641,   134, -3498, -3498,   354,
    2954, -3498,  1935,  2547, 41511, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
     -56, -3498, -3498, -3498, -3498, -3498, -3498,  2684,     7, -3498,
   -3498, -3498, -3498, -3498,  2751,  2357,  1479,     7,   194, 23692,
       7,     7, -3498, -3498,  1848, -3498,   -46, -3498, -3498, -3498,
   -3498, 41511,  2242,  2694, -3498,  2551, -3498, -3498, 23692, -3498,
    2552, -3498,  2972,  3101,  2357, -3498, -3498, -3498,   140,   140,
    2845, -3498,   354,  2676,  2680,  2681,  2700,  2701,  2739, -3498,
   -3498,   354,   354, -3498, -3498,   140, -3498,   767, -3498, -3498,
   -3498, -3498,   354,   354,   354,   354,  2360,   354,   354,  1675,
   -3498, -3498,   140,   140, -3498,   311, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498,   223, -3498,  2077,  3111,  2818,   140,   140,
    3111,   140,  2821,  2822,   140,   140,  2668,  3067,   140,  2958,
    2691,  1204,  2959,   140, -3498,  2696,  3077,   140,   140,   140,
     140,  3111,  2839,  3154,   140, -3498,   140,  2844,  2849,   155,
    2848,  2853,   140,   206, 41511,   140,   140,   140, -3498, -3498,
    4391, -3498, -3498, -3498, -3498, -3498, -3498,   841, 22534, -3498,
   -3498,   364, -3498,  2791, -3498, -3498, -3498, -3498, -3498, 39215,
   -3498, 12534,  2360,   354,   354,  1630,   354,  2360,   354,   354,
     354,   354,   354,  2360,  2360,   354,   354,  2360,  3492, -3498,
   -3498, -3498,   158,   140,   140,   140,   140, -3498,  2408, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, 35771,  2948,  2321,
     658, -3498, 41511, -3498,  1677, 41511,  2615,   614,  2580,   291,
     291, -3498, 23692, 23692,  2655,  2534, -3498,  1000, -3498,  2619,
   -3498, 14319, -3498,  2623,  2864, 12534, -3498, -3498, -3498,  1165,
   12534, 12534,  3084,  2146, -3498, 34623, -3498, -3498, -3498, 12534,
   34623,  2146,  1683,  2864,  2633, -3498,  3006,  3013, -3498, -3498,
   -3498, -3498, 12534, -3498, 12534, 12534, -3498, 12534, 12534, 12534,
   12534, 12534, -3498, -3498, 16104, -3498,  2636,  2649,  2864, -3498,
   -3498,  2651,  2864, 12534, -3498, -3498, -3498, -3498, -3498,  1935,
    3061, -3498, -3498, -3498,  2670,  2672, 12534, -3498, 12534, -3498,
   12534, 12534, 12534, 12534, -3498,  2864,  2864, 14914, 12534, 12534,
    2653,  2864, -3498, -3498, 12534, 12534, 12534, -3498, 12534,  1174,
   12534,  1199, 12534,  1439, 12534, -3498, 12534, -3498,  2864,  2864,
   -3498, 12534, -3498, -3498, -3498,  1713, -3498,  2652,  2657,  2661,
   35771, 12534, -3498, -3498, -3498, -3498, -3498,   899, 16104,   299,
    2658, 16104, -3498,  2914,  3028,  3028,  1937,  9559,   786,  2914,
    1108, 12534, 41511, -3498, -3498, -3498, -3498, -3498, -3498, 35771,
   -3498, -3498, -3498,  2279,  3005, -3498,  2365, -3498, -3498,  1746,
   -3498,  2664, -3498,  2665,  2748,  2750,  2753, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  2357,
    1758,  2762,  2682, -3498, -3498,  2699,  3023, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498,  3231,  2687,  2531, 41511,  1935, -3498,  2760, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498,   575, -3498, -3498,
    2692,  2692, 19640, -3498, -3498, -3498, -3498,  2935,  3107,  3108,
    3109,   896, -3498,   507, -3498,  1237,  3068,  2357, -3498,  3114,
   36345, 28883, -3498,  2703,  3064,  2706,   140, 31179,   722, 26581,
   31753, -3498, -3498,  1630, -3498,   128, -3498,  2110,  2110,  2723,
   -3498,  2960, -3498, -3498, -3498,  2534,   194, -3498, -3498, -3498,
    2713, -3498, -3498,   909,  3076,  3078, -3498,  2947,  1160,  2947,
     909,   909, 24848,  1000,  1785, -3498,  2360,  3010, -3498, -3498,
   -3498, 35197, 32327, -3498, -3498, -3498, -3498,  3212, -3498,  3215,
    1371, -3498, -3498,  1480,   965, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
     776,  1480,  1480,   372, -3498,   104, -3498, -3498, -3498, -3498,
   -3498, 25426,  1390,   103,  1390, -3498,   221,   234, 25426, -3498,
   -3498, 25426,   103,  1630,  2360, 25426,  2360, 39789,   103,   354,
     354,  2212,   140,  2360, -3498, -3498,  3082, 41511,  3087, 25426,
   25426, -3498, 35771, -3498,   140,  1298,  2360,  1630,  1630, 25426,
     103, 24848,  2152,  1843,   354,   103, -3498, -3498, -3498, -3498,
   23692,   103,   103,  2726, -3498, -3498, -3498,  2360, 35771,  2731,
   -3498,  5857, -3498, -3498, -3498, 19062, 41511,   304,   168, -3498,
    2719,    37,  1197,  2804,   281,  2735, -3498,  2732, -3498,  2737,
   -3498,  1935, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,   354,  1816,  1480,  1480,  2411, -3498,
    2986,  3145,   140, -3498,  2049, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,  2855, -3498,  2916,  2754, -3498, -3498,
     231, -3498, -3498,  1316, 23692, 18484, -3498,  2977, -3498,  2401,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  1000,  2994,
    2534,  2758,   108, 13129,  1271,  2864,  2755, -3498,  1935, 12534,
    1935,  1688, -3498,  2768,  2768, -3498, -3498,  2769,  2768,  3125,
   -3498,  3127,  2764, -3498,  2770, -3498,  1295,  2772,  2776,  2864,
   -3498,  2864, 12534, 12534,  1302,  1308,   549,   816,   822,   325,
   -3498,  1312,  2929,  2864, -3498,  2864, -3498,  1338, 36345,   247,
     735, -3498,  3173,  3179,  1430,  1437,  1441,   850,  1445,  1760,
   -3498, -3498, 13129,  1473,   700,   327,  2864, -3498,  1492,   884,
     906,  1528, 12534,  1548, 12534,  1570, 12534,  1586,  1593, -3498,
   -3498,  1629, -3498, -3498, -3498, -3498, -3498, -3498,  2773,  1935,
    2778, -3498, -3498, 12534, -3498,   229, -3498, -3498, 16104,   336,
    2779, -3498,  3039,  3040,  2864, -3498,  2783,  1468, -3498, -3498,
   -3498, -3498, -3498, -3498, 41511,  2792, 29457, 32901, 32901, 32901,
    2786, 12534, -3498, -3498,  3043, -3498, -3498, 23692,  3177, -3498,
   -3498, 16104,  3137,  3022, -3498, -3498,  2796,  2797, -3498, -3498,
   32901, -3498,  2561, 24848, -3498,  2798, -3498,  2798,  1040,  2800,
    1768, -3498, -3498, -3498,  2795,  2022,  3218, 32901, 32901, 32901,
   -3498,  2534,  2534,   136,  2857,  3174, -3498, -3498, -3498, -3498,
   40363, -3498, -3498, -3498, -3498,  1176, 41511,  3153, 41511,  8369,
   -3498, -3498,  3333, 12534, 32901,   791,   864,   140, -3498, -3498,
   -3498, -3498, -3498, -3498,  2357, -3498, -3498, -3498, -3498,  3133,
   -3498, -3498,     7,  1848,  1147, -3498,  1916, -3498, -3498, -3498,
    3171,   909,  2947,  2947,  3175,  3065,   823,  2811, -3498,   140,
   -3498, -3498, -3498,  2561, -3498, -3498, 12534, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,   223, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, 12534,  3176,  3180,  1390, -3498, 25426, -3498, -3498,
   -3498,   365, 39789, -3498, -3498, -3498, -3498, -3498, -3498,  2814,
   -3498, -3498,  1816, -3498, -3498, 32327,   354, -3498, 25426,  2814,
   -3498, -3498,   413, -3498,   354, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, 39789,  2820, -3498,  1512, -3498, -3498, -3498,
   -3498, 39789, -3498, -3498, 39789, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, 23692,  2690,  1182, -3498,  1777, -3498,
   -3498, -3498, -3498, 41511, -3498, -3498, 23692, -3498, -3498,  4914,
   41511,  3030, -3498, 12534, 12534,  3071, 41511,  3091, -3498,  3362,
   41511,  3415, -3498, 39215, -3498, -3498, -3498, -3498, -3498,  2858,
   41511,  1480,  2321, -3498, -3498,  1316, -3498, -3498, -3498, -3498,
    3094,  3095, 41511, -3498, -3498, -3498, -3498,  2975, -3498, 23692,
    3391, -3498,  2998,  1782,    54,  5210, -3498,  2870,  2534,  3193,
   -3498, -3498,  3028, -3498, -3498,  3098,  1935, 12534,   746, -3498,
   -3498,  1288,   754, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498,  3028,  3028, -3498, -3498,
    2999, -3498, 12534, 12534, -3498, 12534, -3498,   740,  2871,  2896,
   -3498, -3498, -3498, -3498, -3498, -3498,  2864, -3498,  2878,  2881,
   -3498, -3498, -3498, 12534, -3498, -3498,  3028, -3498, 12534, -3498,
   -3498, 12534, -3498, -3498, 12534, 12534, -3498,  1649, -3498,  1651,
   -3498,  1653, -3498, -3498, -3498, -3498,  2872, 41511, -3498, -3498,
    1792, -3498, -3498, 12534, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498,  -111,  -111,  -111, 15509,  1935,  3309, -3498,    73,
   -3498,  3237, -3498, -3498,  2914,  1521, -3498,  1807, -3498, -3498,
   41511, -3498,  1974,  2886, -3498,   140, 15509,  2692,  2998, -3498,
   -3498,  1040, 24848, 28883, -3498, 32901,  2176,  2176,  2176,  2357,
    3286,  2762,  2762, -3498, 27158, -3498, -3498,  3035, -3498, -3498,
   30031, -3498,  1470, -3498, -3498, 16104,  1563, -3498,  1935, -3498,
   35197, -3498,  1935,   140,  2887,  2889, -3498, -3498, 40937, 12534,
   -3498,  3340, -3498, -3498,  2895,  1000, -3498,   909, -3498,  3259,
    3260,   909, -3498, -3498, -3498, 24848,  2534, 15509, -3498,   269,
    1974,  1935,  2899,  1512, -3498,   631,  1935, 25426, -3498, -3498,
   -3498,  2902,  3393,  3394, -3498, 25426,  2254, 41511, -3498,  3333,
   -3498, -3498, -3498, -3498,  4914, -3498, 24848, -3498, -3498, -3498,
   -3498, 41511, -3498,  2917, -3498, 19062, -3498, -3498, -3498,  2768,
    2768,  2768, -3498, -3498, -3498, -3498, -3498,  2769,  3132, -3498,
    2769,  2769, -3498, -3498, -3498, -3498, -3498,  1288,   649, -3498,
   -3498,  1288, -3498, -3498, -3498,    94,  1381,  2769, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498,  2768,  2768, -3498, -3498, -3498,
    1288,  2768, -3498,  2768,  2511, -3498,   148,    76,  2768,  2768,
    2768,  2919,  2920, -3498,  1935,  3028,  3446, -3498, -3498,  3066,
     354,  3395, -3498,  1832, -3498, -3498,   776, -3498, -3498, -3498,
    3069,    16, -3498,  3089,  2934,  2936, -3498, -3498,   354,  2940,
    2945,  4391, -3498, -3498, -3498,  3509, -3498, 41511, -3498,  2110,
   -3498,  -184,  3482,  1342,  1935,  2949,  2950,  2952,  2956,  3498,
     141, -3498,  3498, 34623, -3498,  1845,  2957,  2963,   244,  2966,
    1699,   918,  1859,  3236,  3314, -3498,  3162, -3498, -3498,  3203,
    3208,  1711,  1013,  1815,  1817,  1839,  1844, -3498, -3498, -3498,
   -3498, -3498, -3498,  1883,   129,  2988,  2988,  2988,  1563,  1935,
    1912, -3498, -3498,  3341, -3498,  2973,  2976,  2978, 41511, -3498,
    3022, -3498,  2329, 24848, 15509,  2979,  2980, -3498,   857, -3498,
   -3498,  2969,  2176, -3498,  3524,  3381, -3498, -3498, 35771,  2982,
   -3498, -3498,  3272, -3498,   139,  3184, -3498, -3498, -3498,   791,
    3072,  3073,   140,  1935,   354,  1914,  2551,  2558,  3025,   909,
     909,  2733,  3027, 12534, 12534,  2991, -3498,  2994, -3498, -3498,
     350,  2329, 12534, -3498,  1816,  3022, -3498,  2992,  2993, 41511,
   -3498,  2512,   304, -3498, -3498, -3498,  2511,   103, -3498, -3498,
    2814,   575, -3498, -3498,   674, -3498, -3498, -3498,  1156, -3498,
    2995,  1156,  1156, -3498,  2144, -3498,  3026,  1288, -3498, -3498,
    3032, -3498, -3498, -3498,  1156,  2996,  1288, -3498, -3498, -3498,
    1156, -3498, 35771,   354,  2398, -3498,  3047, -3498,  3476,  3363,
   -3498,  2511, -3498,  3366,  3263, -3498,  1288, -3498, -3498,  3498,
   -3498,  1288,  3498,  1156,  3266, -3498,  1156, 41511, -3498, -3498,
   -3498, -3498, -3498, -3498, 41511, -3498,   989,  1945,   354, -3498,
   -3498, -3498,  3012,  3016, -3498, -3498, -3498,  1197, -3498, 41511,
    4914, -3498, -3498, -3498,  2977, -3498,  1019,  1976,  1512,  3014,
   -3498, -3498, 12534,  3565, -3498, -3498,  3020, -3498,  7774, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, 34623, -3498, -3498,  3498,
    3278, -3498, -3498, -3498, -3498, -3498, 12534, -3498, -3498,  3317,
    3465,  3578,  3581, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
    3121,  3122, -3498, -3498,  3123, -3498, -3498,    88,  2885, -3498,
   -3498, -3498, -3498, 15509,  3398, -3498, -3498, -3498, -3498, 41511,
    3079, -3498, -3498,   189, -3498, -3498, -3498, -3498, -3498, -3498,
    2994,  2212, -3498, 27158, -3498, -3498, -3498, -3498, -3498,  3041,
    3046,  8369,  3623, -3498, -3498,  3090, -3498, -3498, -3498,  3092,
    1935,  1935, 41511,  3193, -3498, -3498,  1390,  1390, -3498,   350,
     189,  1512, -3498,  1983, 41511, 41511,  1986,   533,   533,   533,
    1787,  1787, -3498, -3498, -3498, -3498, -3498,  3419, -3498,   716,
      41, 41511, -3498, -3498,    90, -3498, -3498, -3498, -3498, -3498,
    1156, -3498,   244, -3498, -3498, -3498, -3498, -3498,   244, -3498,
   -3498, -3498, -3498,  1504, -3498, -3498,  3313,  3086, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498,  3052, -3498, -3498,
    3166, -3498, 47251, -3498, -3498,   585,  3080, -3498, -3498, -3498,
    1354, 41511, 23692,  3071,  3223, -3498, -3498,   857,    54,  2998,
   -3498,   861, 41511, -3498,  3315,  1468, 12534, -3498,  8964,  3216,
   13129,   892,   956, -3498, -3498, -3498,  3062,  1852, -3498, -3498,
   12534, 12534, -3498, -3498, -3498, -3498,   228,  3307,  2360,  2360,
    2360,  2360,  2885, -3498, -3498,  3110,  3152, 16104,  3167,  1995,
   -3498, -3498,  1510,  2324, -3498,  1237, -3498, 12534, 12534,  2357,
   32327, -3498, -3498, -3498, -3498, -3498,  3388, 12534,  3070, 12534,
    3075,  2020, -3498, -3498,  3485,  3485, -3498, -3498, -3498, -3498,
    2039,  2043,   861, -3498, -3498,   304,  3083, -3498, -3498, -3498,
     874,   874,  2063, -3498, -3498, -3498,  2072, -3498,  2091, -3498,
    1504, -3498, 12534,  3519,  3099, 41511,   162, -3498, 48399, 48399,
   41511, -3498, -3498, -3498, -3498,  5138, -3498, -3498,   -45, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
    3632, -3498,  3085, -3498, -3498,  3081,  1314, -3498, -3498, -3498,
    4914,  3494,   281, -3498, -3498, -3498, -3498,  3096,  2022,   140,
    3319, -3498,   861, -3498, -3498,  1512,  3097,  1084,  1512,  3653,
   -3498,  3028, -3498, -3498, -3498, -3498, -3498, -3498,  2118,  2126,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, 24848, 23692, -3498,
    1816, -3498, -3498, 41511,  3100,  3165,   140,  3555,  3558,   140,
     140,   140,   140,  3103,  2324, -3498,  3538, -3498,   503,  1512,
    1935,  3304, -3498,  3619,  3544,  1935, 41511,  1935, 41511, -3498,
   41511,   142, -3498, -3498,  3290,   861, -3498, -3498,  3022, -3498,
    3690, -3498,   185, -3498, -3498,    90, 41511,  1288,   244,  1288,
   -3498,  1935, 12534, -3498, 12534,  3128, -3498, -3498,  3520, 41511,
   -3498, -3498, -3498, -3498, 12534, -3498, 47251, 47251, -3498, -3498,
   -3498, -3498,  3668,   857,  3640,  3356,  3645,  3234, -3498, -3498,
    3362,  4914, -3498, -3498,  2360,  1490, -3498, -3498, -3498, 12534,
   -3498, -3498,  3373,  8964,    31,  2864,  2864,  3115, -3498,   140,
   -3498,  3119, -3498,  3167, -3498, 16104,   224,   354,   140,   140,
    1973,  1973,  1816, 35771,  3222, -3498, -3498,   140,   159, 12534,
   -3498, -3498, 41511, -3498,   941,  3466,  1630,  2129,  2169, -3498,
    3670, -3498,  3672,  3129,  3131, -3498, -3498,  2172, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498,  1935,  1935, -3498,   182,
   -3498, -3498,  3502,  3584, 12534,  1935, 44381,  3130, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, 47825, 12534, -3498,   -45,  3632, -3498,  3379, -3498,  3380,
   -3498, -3498, -3498,  3607, 47251, -3498,  3601, -3498,   857, -3498,
   -3498,  1512,  1388, -3498, -3498, -3498, -3498, -3498, 24848, 15509,
    2212, -3498, -3498,  2175, -3498, -3498,  2914, -3498, 17889, -3498,
   -3498, -3498, -3498,   354,   354, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,  2184, -3498, 35771, -3498, -3498,  1512,
   -3498,  3687,  3688,  3596,  3691,   941, -3498,   963, -3498,  3720,
   -3498, -3498, -3498, -3498, 39215, 39215, -3498,  3170, 12534, 47251,
   -3498,  3600, -3498,  3535,  1869,  3479,  3146, -3498,  3144,  1862,
    3633, 48399, 48399, -3498, -3498, -3498, -3498,  3611, -3498, -3498,
   -3498,  3373, -3498, -3498, -3498, -3498, -3498, -3498, 16104,  3155,
    3157, -3498, -3498, 35771, -3498,  3222, -3498, -3498,  3159,   244,
     244,  3705,   244, -3498,  3706,  3707,   963, -3498,  3484,  3172,
    2195, -3498,   190, -3498,  1935, 44955,  3702, 41511, -3498, -3498,
   -3498, -3498, 12534, -3498, 36919, 45529,  3178, -3498, -3498, -3498,
    3339, -3498,  3234, -3498,  3619, -3498, -3498, -3498,  2324, -3498,
   -3498,  3182, -3498, -3498,   244, -3498,   244,   244, -3498,  3630,
   -3498, -3498, 12534, -3498,  3637,  3267, -3498,  3186, -3498, 47251,
    1931, 47251, -3498, -3498,  3589,  3188,  1674, -3498,  3185, -3498,
   -3498, 47251,  3466, -3498, 12534,  3191,  3192, -3498, -3498, -3498,
   -3498,  2360,  1935,  3732, 47251, 41511, 42659,  3374, 46103,  3613,
   41511,  4914,  3615,  3616, -3498, 47251, -3498,  3585,  1935, -3498,
   -3498, -3498,  3280, -3498, 43233, -3498,  2282, -3498,  3224, -3498,
   -3498,  3680,  1661, -3498, -3498,  3462,  3207, -3498, -3498, 47251,
   47251, -3498, -3498, -3498, 30605, 12534, -3498,  3247, -3498, -3498,
   -3498,   896,  3554, 20218,  3357, 43807, 46677, -3498, -3498, -3498,
   27735, -3498, -3498, -3498,  3635, -3498,  1935, -3498,  1522, -3498,
   -3498, -3498, 35771,  2202, -3498, -3498, 24848, -3498, 30605, -3498,
   -3498, -3498, -3498, -3498, 23112,  3115, -3498, -3498
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3498, -3498, -3498, -3498, -3498,   192, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,  1719, -3498, -3498, -3498, -3498, -3498,
    1908, -1666, -3498, -3498, -3498, -3498, -3498, -3498,   728,  1555,
    3219, -3498,   502, -3498,   187, -3498, -3498, -3498, -2654,    64,
    -121, -3498, -3498,   440,    47,  2903,  -116, -3497, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498,   520,   518, -3498,
   -3498,   338, -3498, -3498, -1487, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498,  -289,  -242, -3498, -3498, -3498, -3498,  -393,
     349, -3498,   355, -3498,   357, -3498,   358, -3498,   359,   360,
     361,   362, -3498,   363, -3498, -3498,  -249, -3498, -3498, -3498,
   -3498,   369, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  -124,
   -3498, -3498,    33, -3498, -3498,  -118,   378, -3498,   -69,   382,
   -3498,   389, -3498,    27, -3498,    35, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,  2922, -3498,
   -3498, -3498, -1891, -3498, -3498, -2161,  2521, -3498, -1593, -3498,
   -3498, -1701, -3498, -3498, -1572,   798, -3498, -3498,  1311,   517,
   -3498, -1263, -1755, -1752, -3498, -3498, -3498, -1832, -1829,  -727,
    2268, -1093, -2048, -3498, -3498, -3498,   390, -3498, -3498, -2320,
    2525, -3498, -3498, -3498,  1587, -3498, -3498, -3498, -3498,  1341,
   -3498, -3498,   991, -1488, -3498, -3498, -3498, -3498, -3498, -3498,
     222,   367,   121, -3498, -3109,   739, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498,   -50,    22, -3498, -3498,   -54, -3498, -3498,
     -95, -3498,   226, -2130, -3498, -3498, -3498, -3498,  2497, -1229,
   -3498,  3448, -3498,  -515,   818,  2055, -2201, -1299,  -855,  -854,
   -2273, -3498, -3498, -3498,   496,  1154,  1523,   912,  2052, -1753,
    1594,  1657, -3498, -3498,   936, -3498, -2945, -3498, -3498, -3498,
     897, -3498,   898, -3498, -3498, -3498,  -792,   863, -1160, -3498,
     477, -2339, -2237, -3498,   702, -3498,   660, -3498,  -522, -1905,
   -2192,    60, -3498, -3498,   667,   944,   994, -3498, -2866, -1174,
   -3498, -3498,   232, -3498, -3498, -3498,   220, -3498,   493,   368,
   -3498, -3498,  -911, -1972, -3498, -3498, -3498, -2428, -3275, -3498,
    2515,   297,  2010, -1932,   439, -2166, -3498,   484, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,  2076,  -675, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -2194,   957, -3498, -3498,  1626, -3498, -3498,
   -3498, -1724,  -425, -1580, -3073, -3498, -3498, -3498, -3498, -3498,
   -3498,  1457, -3498, -3498,  2204,  2637, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498,   717,  1804, -3498, -3498,
   -3498, -3498, -3498, -3498,   967,  2549, -3498, -3498, -3498,    12,
   -3498, -3498, -3498, -3498,  2286, -3498, -3498,  3021, -3498, -3498,
   -3498, -3498,  1419,  1849, -3498, -3498, -3498,  -908,  1797,  -535,
   -1542, -3498,  3423, -3498, -3498, -3498, -1564, -2197, -3498,  3134,
     415, -1250,  2278,  -594, -1987, -3498,  1507,  -621,  2808, -3498,
   -1068,  -993, -3498, -3498,  -590, -3498, -3498, -3498,  -588, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498,  1508, -1664, -3498, -3498,
    -734,    25, -3498,   320, -3498, -2616, -3225, -3498, -3498, -3498,
   -3498, -3498,  2834,  -984, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498,  1580, -3498,  2008, -3498,  -420, -3498,  2943, -3498,
   -3498, -3498, -2114, -1590,  1763,  1016, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -2144, -3498, -3498, -3498, -3498,
   -3498, -3498, -1584, -3498, -1748,   407, -3498,   559, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498,    65,  1227,    66, -1898, -1020,
    2909,  1732, -3498, -3498, -1191,  2981, -1892, -3498, -3498, -3498,
    1915, -3498, -3498, -3498, -3498, -3498, -3498,   988, -2358, -1302,
   -3498, -3498, -2891,  -848, -2088,  -820, -3498, -2117,   572, -1688,
   -1649, -2154,   205,  -960, -3498, -3498, -3498, -3498, -3498,   -72,
   -3498, -3498, -3498,   596,  1825, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498,  -409,  -428, -3498,  2057,  2635, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498,  2799,  2777,  1882,
   -3498, -3498, -2402, -3498, -3498,  1842, -3498,   831, -2143, -1592,
    1090, -3498, -3498,  1093, -2902, -3498, -3498, -3498, -3498, -3498,
   -3498,  1038,  -114,   132,  3478, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498,  2577,  2068,  3404, -3498, -3498, -3498, -3498, -3498,
    2272, -3498, -3498, -3498, -3498, -3498,  2747,  3495,  -524, -1195,
   -3498,  -593, -3498, -3498,  -783, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498,  2386, -3498,  1289, -3498, -3498, -3498,
    2787, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498,  1126,    23, -3498,
     113,   -13, -3498,    56, -3498, -3498, -3498,  -104, -3498,  -619,
    -905, -1248,   757, -2822,  -600,  1111,  2782, -2595,  -564, -1077,
   -1087, -2116,    70, -3498,  3088,     9,  -731,   -78,    -7, -2365,
    -100,  -525, -3498, -2517, -3498, -3498, -3498, -3498,  2335, -3498,
   -3498, -3498, -3498,  1432, -3498, -3498, -3498,  1078, -3498,   840,
     630, -3498, -3498,  2745, -3498,  2377, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498,
    2801,  3526,  3225, -3498,  2859, -3498, -3498, -3498, -3498, -3498,
     510, -3498,   761, -3498,  -173,  2626,   608, -3498,  1511,   -38,
    -299, -3498,   512, -3498, -3498,   308,  3530,  3226, -3498, -3498,
   -3498, -3498, -3498, -2534,  -812, -3498, -2575, -3498, -3498, -3498,
   -3498,  1997,  -968,  2953,  1552, -3498, -3498, -3498,    55,  3588,
    3590, -3498, -3498,   723, -3498,   446, -3498, -3498, -3498, -3498,
   -3498, -3498, -3498,  3460, -3498, -3498, -3498, -3498,  3461, -3498,
   -3498, -3498, -3498, -3498,  3464, -3498, -3498, -3498, -3498, -3498,
    1421, -3498, -3498, -3498, -3498, -3498, -3498, -3498, -3498
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2360
static const yytype_int16 yytable[] =
{
     452,   962,   883,  1148,   879,  1343,   976,   984,  1562,  1345,
    1019,  1021,   909,   490,   136,  1248,   496,  1027,  1561,  1507,
    2139,   568,  2468,  1159,  1664,   509,  2053,  1731,  1003,  2703,
    1308,  2542,  2569,   491,  1277,   520,   922,  1380,  1774,  2613,
    2651,  2924,   507,  2599,  2603,  2605,   537,  1058,   514,  2964,
    1581,  2983,  2091,  2419,   450,  2733,   733,  1589,  1277,  3236,
    2444,  2799,  1472,  1350,  1351,  2447,  1626,  1870,  2268,  1271,
    1079,  2269,  2275,  1535,  1081,  3218,  2635,  1085,  1531,  1532,
    2617,  2618,  1092,  1093,  1094,  2792,   557,  2794,  2209,  2588,
     992,  1045,  3223,   494,  1738,  1799,  1309,  2390,  2815,  2626,
    2391,  3077,  2281,  2699,  3535,   893,  2285,  2636,   560,  3288,
     452,  1747,  2680,   452,   567,   573,  3433,  2300,  2256,  1777,
    1200,  1750,  1751,  1100,  1101,  1102,  1200,  2309,  1812,  2683,
     557,  2176,  1143,  1591,  1592,  1144,  1674,  1595,  1596,  1597,
    1598,  1200,  1600,  1601,  1603,  1605,  1606,  1607,  1608,  1609,
    1110,  1111,  3260,  2710,  2711,  2667,  1195,  1920,  3590,  3444,
     589,  3344,  2667,   556,   562,  2681,  2919,   564,  3119,  2685,
     943,  3253,  3258,  2317,  2387,  3259,  1629,  2388,   953,   954,
    2132,  3120,   577,  2701,  2702,  2225,  2231,  2232,  1110,  1111,
    3370,   845,   846,  2712,  3268,  3121,  -394,  2811,   845,   846,
    3287,  2816,  3662,  2243,  2352,   845,   846,   583,  2796,  2362,
    3405,  1110,  1111,  2661,  2662,  2368,  2369,  2379,  3746,  2372,
    2261,  2262,  2264,  2773,   945,  2245,   503,  1162,  2672,  1404,
   -2264,  3309,   786,  1110,  1111,  1282,  2283,  2284,  1685,  2286,
    3310,  1192,  2289,  2290, -1382,  1252,  2293,  1812,  1201,  3907,
    1950,  2302,  2991,  1259,  1201,  2305,  2306,  2307,  2308,  1347,
    3861,  3102,  2312,  1347,  2314,  1801,  1110,  1111,  2931,  1201,
    2323,  1347,  3395,  2327,  2328,  2329,  2615,  1110,  1111,   898,
    3102,  2672,  2197,   804,  1229, -1382,  2086,  1310,  -761,  3370,
    1304,  1208,  -478,  1088,  2672,  1145,  1148,  3665,  3819,  1354,
    -479,  2318,  2671,  1960,  1110,  1111,  3154,  3716,  1407,  2450,
    1110,  1111,  2743,  2621,  1110,  1111,  1795, -1801,  3929,   608,
     955,  2374,  2375,  2376,  2377,   812,  3929,  1926,  2766,  2767,
    3810,  2324,  1110,  1111,  2464,  1812,  2410,   504,  2466,  3737,
    1110,  1111,  1110,  1111,  1164,  1444,  1444,  1275,  2777,   519,
    1148,  1110,  1111,  1290,  1148,   135,   128,  2420,  3371,  1884,
    1321,  2480,  2481,   594,  2751,  2912,  2173,  2487,  1206,  3747,
    3311,  1278,  3449,  3811,  2665,  3506,   609,  1428,  1425,  1426,
    1427,  1110,  1111, -1494,  2499,  2500,  1235, -1382,  1110,  1111,
    1813,  3465,  1209,  1372,  2673,  2028,  1812,   789,  1110,  1111,
    3469,  1990,   529,  2081,  2757,  1429,  3663,  -557,  3331,  3443,
    1408,  2082,  1240,  2844,  1409,  2752,  2525,  1306,  1279,  2758,
    3482,  1110,  1111,  1770, -1494,  3484,  1410,  1110,  1111,  1622,
    3450,  1322,  1110,  1111,   129,  1795,  1275,  3513,  2341,   899,
    3816, -1340,   580,  1110,  1111,  1224,  2980,  2187,  2778,  1773,
    1110,  1111,  3443,  1089,  3372, -1653,   567,  3371,   573,  1445,
    1460,  1405,  1307,  1629,  2959,  1470,   530,  1373,  1885,  3103,
    2744,  2634,  1327,   746,   813,   972, -1340,   573,  1045,  1210,
     518,  3544,  1424,  2411,  2845,  3738,   784,  2968,  3103,  2932,
     567,  3812,   794,  1350,  1351,  2992,  2977,  1732,   557,  2188,
    1735,  2325,   610,  2999,   808,  3861,  1110,  1111,  1740,  1813,
    2268,  2990,  3717,  2269,  3887,  1110,  1111, -1382,  3820,  3179,
    1775,  1112,  3424,  1795,  1113,  3748,   557,   895,  2800,  1626,
     805,  1586,  3001,  1371,  1799,  1752,  1753,  2198,  2644,  2152,
    3578,  1594,  1110,  1111,  1112,   912,  1411,  1113,  1630,  3875,
    1110,  1111,  2390,  2205,   567,  2391,   926,  3425,  1615,   500,
    2267,  2667,  3228,   787,  1350,  1351,  1112,   557,   452,  1113,
    2746,  1870,   557,   788,  1305,   798,  1260,  1313,   951,  1146,
     557,   557,  2667,  2582,  1795,   963,   926,  3591,  3908,  2087,
     567,  1455,  1456,   946,  3106,   956,  2684,  1813,  2686,  1112,
     993,  2674,  1113,  3397,   998,  2697,  2073,  3373,  -186,  3817,
    1112,  3089,  1495,  1113,  -557,  2589,  1990,  2076,  2709,  3374,
    2079,  1509,   937,  1196,  2718,  2070,  1675,  3431,  2625,  2387,
     505,  1800,  2388,  1522,  1523,  1524,  1193,  1112,  2581,  2732,
    1113,  1623,  1412,  1112,   936,  1534,  1113,  1112,  1046,  1158,
    1113,  -394,  1283,  3261,  1373,  1920,  2555,   990,  1813, -2264,
    1110,  1111,  3100,   825,  1373,  1112,  2386,  2808,  1113,  3119,
    2663,  3406,  2659,  1112,  2319,  1112,  1113,  2768,  1113,  3345,
    3245,  3246,  3120,  1777,  1112, -2264,  3122,  1113,  2815,  2929,
    2930,  2815,  2815,  1925,  2616,  3758,  3121,  2664, -1382, -1382,
    2696, -1382,  1623,  2989,  1801,  3375,   845,  3254,  2815,  1107,
    3285,  1109,  2704,  1114,  1112,  1110,  1111,  1113,  3374,  1373,
    1749,  1112,  3269,  3088,  1113,  2412,  2765,  3286,  3289,  3291,
    3292,  1112,  2189,  2152,  1113,  1961,  1152,   452,  1154,  2808,
     926,   452,   567,  -761,   452,   567,   557,  -478,  1970,  1714,
    3828,  1114,   900,  1274,  1112,  -479,  1632,  1113,  3981,  1736,
    1112,  2804,  2675,  1113,  3767,  1112,  1090,  3772,  1113,  2056,
    1291,  2153,  3174,  2984,  1114,  -557,  1112,  2779,  1235,  1113,
    1127,  1205,  3133,  1112,  3247,  2824,  1113,  2825,  2569,  1971,
    2771,  1153,   557,  1110,  1111,  1157,  1114,   876,  1161,  2840,
    2342,  2841,   567,   557,  1110,  1111,  1235,   557,  3801,  1666,
    3199,  2029,  1226,  2993,   557,  3888,  3867,  3240,  3266,  3267,
   -1340,  3227,  2862,  3208,  1681,  1926,  3270,  3212,  2798,  1114,
    1779,  1110,  1111,  3293,   915,  1630,  2393,  1110,  1111,  1112,
    1114,  3183,  1113,  1570,  1571,  1373,   567,   973,  1112,  3643,
     665,  1113,  1145,  3207,  1570,  1989,  3115,  3211,   876,  3423,
    2887,  3823,   135,  3825,  3115,  1110,  1111,  1114,  2086,  1215,
     501,  2667,  1802,  1114,  2858,  1112,  1624,  1114,  1113,  1314,
    1232,  2033,  2034,  1112,  2969,  2970,  1113,  2050,  2051,   137,
    1333,  2512,  2513,  1315,  3587,  1114,  2604,  2202,  1773,  1110,
    1111,  3426,  3659,  1114,  2263,  1114,  3108,  1346,   597,  2268,
    1951, -1653,  2269,  1935,  1114,   455,  3165,  2834,  2835,  2860,
    2861,  1110,  1111,  1701,  3719,  1277,  2230,   752,  2882,  2883,
    2299,  2154,  3645,  1110,  1111,   557,  2071,  1624,  1376,   557,
    2390,   938,  2522,  2391,  1114,  1888,   499,  1759,  1995,  1731,
    1731,  1114,   809,  1623,  1277,  2200,  3449,  2963,   458,  1969,
    1130,  1114,  3699, -2198,  2204,  2153,  1976,  2207,  2208,  1110,
    1111,  1110,  1111,  1803,  1373,  3633,  1977,  3955,  2063,  1795,
    3951,  1799,  2275,  1496,  1114,   557,  1497,   557,   974,  2125,
    1114,  1702,  3330,  1112,  3224,  1114,  1113,  1110,  1111,  1987,
    2511,  2462,  2267,   114,  3508,  1988,  1114,  3116,  1576,  1316,
    1991,  2622,  2300,  1114,  3450,  3116,   583,  2387,  3967,   511,
    2388,  2003,  1046,  2394,  2078,   546,   790,  2471,  2016, -2359,
     957,  1317,  1870,  2641,  2054,  1046,  1110,  1111,  2403,  1963,
    1972,   692,  3559,  2998,   916,  1614,   978,   986,  1112,  2057,
    1646,  1113,  1110,  1111,  2516,  2517,  3134,  1350,  1351,  3411,
    1110,  1111,  1432,  3662,  1437,  3416,  3417,  1025, -2198,  1114,
    1800,   917,  1110,  1111,  3798,  1562,   524,  3588,  1114,  1703,
    3911,  3117,  1334,  1952,  3217,  2573,  1610,  1687,  1563,  3125,
    3912,  3633,  3633,  2020,  3649,  1428,  3799,  1623,  1760,  2510,
    1252,   567,  1761,  2090, -2322,  1114,   116,   791,   958,  2520,
     965,  1110,  1111,  1114,  3763,  1920,  4081,  2058,   531,  2126,
    2021,  2386,  3002,  1430,  1673,  2154,  1112,  3662,  2022,  1113,
    2954,  2044,  1804,  1110,  1111,  1562,  1146,  1112,   567,  2218,
    1113,  1805,  1147,  1619,  1264,  2639,  1110,  1111,   557,  1806,
    2064,  1801,  2148,  2149,  2831,  2523,  2955,  3874,   557,  1110,
    1111,  1110,  1111,  2973,  1112, -2199,  2395,  1113,  1110,  1111,
    1112,  2087,  3589,  1113,  3871,   792,   547,  1795,  3856,  1721,
    1110,  1111,  3138,  1704,  2190,  1110,  1111,  3122,  1624,  1110,
    1111,  1925,   604,  1110,  1111,  1651,  3510,  1654,  1112,   557,
    1265,  1113,  2392,  3720,  3909,  1855, -2322,  3255,  3062,  1110,
    1111,   557,  2173,   585,  1110,  1111,  1658,   567,  3349,  2753,
    1110,  1111,  3225,  1114,  1562,  1621,   557,   557,  1266,  3633,
    3633,  2801,  1112,  1722,  2716,  1113,  1807,  1690,  2023,  1139,
    1140,  1141,  1142,  3741,  3742,  1699,  1110,  1111, -1675,   816,
    1858,  2270,  1647,   876,  1112,  1781,  2174,  1113,   452,   452,
     452,   557,   452,   557,  1156,  3451,  1112,  3663,  1711,  1113,
   -2199,  1110,  1111,  2270,  1733,   452,  3118,   567,  1114,  1611,
     532,  1110,  1111,   452,  3118,  1926,  1110,  1111,  3913,  1688,
    1444,  2393,  2859,  3950,   534,  1623,  3721,  3436, -1676,  2956,
    2127,  1612,  1112,   557,  1112,  1113,   549,  1113,  3119,  2059,
    1110,  1111,  1715,  1716,  1717,  2522,  1719,  1110,  1111,  3633,
     563,  3120,  3722,  1110,  1111,  1808,   991,  1110,  1111,  1734,
    1112,  3663,  1624,  1113,  3633,  3121,    43,  1739,  1718,  1103,
    1720,   552,  2065,   598,  1671,   845,   846,  3633,   567,  1759,
    2754,  2492,   550,  1110,  1111,  2296,  1114,   929,   817,  2066,
    2244,  2668,   557,  2668,   665,  3754,   557,  1114,  3702,  1112,
    1811,  2027,  1113,  1648,  3755,  2974,  2494,  2296,   558,  3647,
    1748,  1887,  2046,  1791,  1773,  1112,  1672,  1370,  1113,  1939,
   -2198,  2631,  1378,  1112,  1114,  1498,  1113,  1246,  1499, -1675,
    1114,  2267,  2632,  1723,  1514,  1112,   930,   561,  1113,  2832,
    1648,  2584,  3633,  1940,  1378,  2833,  1379,   567, -2198,   452,
     452,   575,  1937,   452,  3633,  3633,   818,  2783,  1114,  3494,
    1267,   998,  3650,  1949,  2331,  1444,  1431,   665,  1379,  1886,
    1759,  3524,  3974,  2853,  1112,  1110,  1111,  1113,  3914, -1676,
    2881,   876,  1110,  1111,  1110,  1111,  1110,  1111,  1613,  2158,
    1110,  1111,  1114,  2426,  2705,   973,  1112,   116,  3633,  1113,
    3975,  3701,   585,  1933,  1934,  3334,  1562,  2864,  3633,  1112,
    2158,   931,  1113,  2515,  1114,  2654,  2915,    55,  1110,  1111,
    1471,  1292,  1112,  2585,  1112,  1113,  1114,  1113,   574,  2865,
    1760,  1112,  3580,  3581,  1113,  1046,  1996,  1110,  1111,  2386,
    1127,  3356,  3633,  1112,  3633,  3335,  1113,  1800,  1112,  1792,
    1293,  1113,  1112,   586,  3633,  1113,  1112,  1444,  2523,  1113,
    1624,  3007,  1114,  2092,  1114,  2706,  2551,  3633,  2784,  3633,
    1318,  3633,  1112,  1110,  1111,  1113,  2045,  1112,  3633,  1518,
    1113,  1268,   589,  1112,  3952,   692,  1113,  3633,  2904,   938,
    1114,  1294,  2298,  1110,  1111,  2456,  1295,  3756,  2297,  3309,
    2062,  1269,  3633,  3633,  1964,  3432,  3998,  3998,  3310,  1112,
    3495,  1025,  1113,  1691,  2298,  1110,  1111,  2633,  3633,  3633,
    2133,  1760, -2199,  3633,  2655,  1761,  2160,  2161,  1990,  1114,
    1378,  1110,  1111,  2479,  1112,  3364,   974,  1113,  1110,  1111,
    3509,  3456,  1270,  2083,  1112,  1114,  2496,  1113,  1319,  1112,
   -2199,   567,  1113,  1114,  1379,  3953,   567,  2707,   692,  1968,
    3008,  2918,   557,  3966,  2098,  1114,  3879,  1975,  1026,  2103,
    2103,  1546,  2103,  1112,  1110,  1111,  1113, -2359,  2134,  1978,
    1112,  1925,  3919,  1113,  1025,   557,  1112,  2392,   557,  1113,
    1112,  2527,  3172,  1113,  1110,  1111,  1110,  1111,  1110,  1111,
     567,   567,   557,   557,  1114,  2135,  2429,  3769,   932,  2393,
    2103,  2103,  2103,  2656,  2147,  2398,  1112,  1246,  1979,  1113,
    1130,  3333,  3781,   241,  2166,   243,  1114,  1692,  2185,  1219,
    3457,  1939,  1220,  1110,  1111,  1296,  2399,  2196,  3311,  1114,
    1986,  1080,  2785,  3166,  1110,  1111,  2102,  2102,  2192,  2102,
     591,   665,  1114,  1999,  1114,  1940,  1110,  1111,  1363,  1364,
    3221,  1114,  2124,  3334,  3684,  1215,  2000,  3458,  2004, -2319,
    2355,  2136,   557,  1114,   933,  2008,   934,  1184,  1114,  1232,
    2151,  4062,  1114,  3685,  2213,  3167,  1114,  2102,  2102,  2102,
     593,   557,  2012,  1248,  2668,  1422,  2960,  2081,  4063,  2695,
    2013,  2250,  1114,  3335,  1297,  2940,   596,  1114,  1112,   605,
     527,  1113,  3111,  1114,   528,  1112,  2019,  1112,  1113,  1112,
    1113,  2234,  1113,  1112,  1277,   750,  1113,  2024,  2356,  1643,
    2241,  2242,  1644,  1200,  2786,  1645,  3126,  3127,  3807,  1114,
    3808,  2246,  2247,  2248,  2249,  2137,  2257,  2258,   466,  2206,
     607,  1112,  1185,  2032,  1113,  2299,  3122,  2380,   742,  2251,
    1110,  1111,  1110,  1111,  1114,  1562,  3142,  1298,  2224,  2962,
    1112,   785,  1221,  1113,  1114,  2573,   960,   961,  2037,  1114,
    3672,  3673,  3674,  3675,  1110,  1111,  2252,  2326,  2052,  1110,
    1111,  1731,   797,  2803,  3194,  2445,  1186,  1110,  1111,   131,
    2445,  2340,   132,  1114, -1382,   747,  1112,  1110,  1111,  1113,
    1114,  1187,  2350,  3195,  1110,  1111,  1114,  2821,  1562,   801,
    1114,  2357,   845,   846,  2828,   803,  1112,   638,  2639,  1113,
    2829,  1778,  2353,  2354,  2836,  2361,   890,  2363,  2364,  2365,
    2366,  2367,   692,  3196,  2370,  2371,  1114,   910,  1112,  1562,
     567,  1113,  2253,  2068,   813,  2396,  2133, -1382,   452,  2716,
    2842,  1201,  1200,   911,  1112,   557,   557,  1113,  1025,   788,
    3262,  1112,  1299,  3263,  1113,  3343,  1110,  1111,  3348,   919,
    1110,  1111,  3634,  2518,   928,   643,   949, -1382,   567, -1382,
    2508,   904,   905,   567,   906,  2358,   907,  1137,  1138,  1139,
    1140,  1141,  1142, -1382,  1967,  1147,  1300,  1112, -1382,   938,
    1113,   966,  2401,   967,  2134,   888,   889,  1582,   892,  2530,
     971,  3993, -1382,  1983,  1147,  1084,  2254,  1112, -1382,  1112,
    1113,  1112,  1113, -1382,  1113,  2214, -1382,  2994,  1114,   114,
    2138,  2135,  2415,  2417,  3413,  1114, -1382,  1114,  1000,  1114,
    1992,  1147,  2850,  1114,  1001,   131,  1002, -1382,   132,  2851,
     900,  3782, -1382,  2852,  1127,  2911,  1112,  2854,  3005,  1113,
    1004, -1382,  1993,  1512,  1005,  2392,  3010,  1112,   654,  3012,
    1113,  1114,  1006,   567,  1009,  3298, -1382,  3764,  1010,  1112,
    1201,  1147,  1113,  1011,  1127,  2857,  1012,   538,  2005,  1147,
    1114,  4057,  1013,  1812,   512,  2528,  3869,  2136,  1014,  2953,
    1015,  4087,   567,  2133,  2863,  1016,  1562,  2445, -1382,  2607,
    2612,  3463,  3464,  2880,  3787,  1017,  2915,  3790,  3791,  3792,
    3793, -1382, -1382,  1151,  3467,  1150,  1114, -1382,  1020,   539,
    3470,  3876,  3877,  1110,  1111,  3483,  1387,  1388,  3485,  1913,
    2866,  1022,   671,  2006,  1147, -1382,  1114, -1382,  4097,  2215,
    1023,  2650,  2445,  3486, -1382, -1382,  3488,  -556,  2559,  1155,
    2868,  2134,  1024,  3901,  1028, -1382,  2270,  2216,  1114,  2007,
    1147,  2137,   960,   961,  1029,  2574, -1382,  2271,  2217,  1583,
    2359, -1382,  2870,  1112,  1114,  1112,  1113, -1382,  1113,  1030,
   -1382,  1114,  1031,  2593,  2595,  3525,  1032,   540,  2872,  2433,
     567,  1033,   567,   567,   876,  2873,  1034,  1112,  1035,  2592,
    1113,  2255,  1112, -1653,  1036,  1113,  3893,  3894,  2158,  2807,
    1112,  1183,  2530,  1113,  2434,  3906,  2159,  1114,  2382,  1037,
    1112,  1040, -1382,  1113,  1130,  1563,  1041,  1112,  1965,  1047,
    1113,  2874,  1048,  3353,   567,   567,  1049,  1114,  2530,  1114,
   -1382,  1114,  2218, -1382,  3895,  3248,  2010,  2011,  3251,  3252,
    1127,  3147,  1181,  3148,  1130,  3149,  2435,  2017,  1147,  2436,
    -556,  1188,  1399,  1400, -1382,  3264,  2272,  2437,  1966,  1147,
    3851,  1795,  2250, -1382,  2340,  2717,  1114,  2259,  2260,   845,
     846,  2340, -1382,  1050,  2340,  2449,  1147,  1114,  2340,  1112,
    2691,  1051,  1113,  1112,  1052,  2670,  1113,  1378,  1053,  1114,
    2691,  3355,  2340,  2340,  2682,   567, -1382,  1054,  2693,  2694,
    2692,  1055,  2340,  3363,  1563,  2504,  1147,  1057,  3896,  1190,
    1407,  1379,  1059,   557,  2160,  2161,  1060,   700,  1252,  1061,
    2251,   567,  2713,  2720,  1062, -1382,  1063,  2721,  2340,  2742,
    1064,  2214,  1065,  2723,  2724,  1813, -1382, -1382,  2533,  2534,
    1066, -1382,  1067,  2219,  1068,  1812,  2138,  2252,  1069,  2162,
    1070,  1584,  2855,  1147, -1382,  1071, -1382,  1003,  1132,  1133,
    2921,  2922, -1382,  4071,  2892,  2893,  2894,  1072,  1585,  3014,
    3015,  1726,  1073,  1914,  3101,  3015,  1166, -1382, -1382,  1623,
    3989, -1382, -1382,  2764,  3152,  1147,  1252,  1074,  1132,  1133,
    2722,  1913,  1075,  1114,  3686,  1114,  1076,   557,  2340,  3169,
    3170, -1382,  1077,  2220,  2926,  2927,  2928,  3365,  2105,  3366,
    2106,  1078,  1408,  2253,   541,  3132,  1409,  1114,  4090,  4091,
    1130,  1082,  1114,  3687,  3303,  3304,  1828,  1829,  1410,  1083,
    1114,  3367,  1086,   617,  1198,   542,  3368,  3341,  3350,  1199,
    1114,  2273,  3985,   118,  3667,  1727,  1087,  1114,  2168,  2169,
    2170,  3357,  1147,  1207, -1382,  2215,  1091,  -556,  -681,  -681,
    1831,  2593,  1095,  3153,  2438,   543, -1382,  -681, -1653,   673,
    2250,  1834,  1096,  2216,  2788,  3369,  1147,  2592,  1913,  1835,
    2382,  1913,  1097, -1382,  2217, -1382,  1098,  2254,  1099,  1135,
    1136,  1137,  1138,  1139,  1140,  1141,  1142,  1149,  3316,  1213,
    1837,  3437,  1214,  3897,  3382,  3383, -1382, -1382,   638,  1114,
   -1382, -1382,  2966,  1114,  1347,  3574,  3575,  1838,   544,  1135,
    1136,  1137,  1138,  1139,  1140,  1141,  1142,  2098,  2251,  1205,
     567,   567,   567,  1795,  3688,   876,  3271,  3497,  2260,  1227,
     557,  2274,  4056,  1238,  4058,  1843,  1239,   617,  1411,  1242,
    1782,  1243, -1653,   567,  2904,  2252,  1563,  3597,  2218,   642,
    1249,  1783,  1246,  3597,  1132,  1133,   643,  4074,  3511,  3512,
     567,   567,   567,   828,  1168,  3579,  3170,  3272,  3582,  3512,
    1257,  3273,   114,  2939,  1448,  1449,  1450,  3682,  3683,  2941,
    1562,  2943,  1258,   647,  1262,  2445,  1461,   567,  3346,  2938,
    1263,  2439,  4105,  4106,  1275,  1828,  1829,  1813,  1284,  3689,
    1285,  1846,  3709,  3710,  1624,  3437,  1286,  2124,  -556,  1847,
    1795,  2253,   638,  1795,  3274,  1287,  3690,  1515,  1117,  1118,
    1519,  3714,  3512,  1288,  1848,  3715,  3512,  -681,  -681,  1831,
    1728,  3774,  2772,  1311,  1412,  1914,  -681,  2214,  3691,  1289,
    1834,  1623,  1169,  1542,  1543,  3725,  3726,  1547,  1835,   654,
    1312,  2440,  1326,  1119,  3727,  3728,  1328,   115,  1329,  2219,
    2340,  1336,  1120,   642,  1331,  2691,  1564,  1565,  1341,  1837,
     643,  1347,  2255,  3729,  3728,   116,  1849,   829,   567,  1353,
    2441,  2340,  1477,  1347,  1355,  2254,  1838,  1137,  1138,  1139,
    1140,  1141,  1142,  1850,  1357,  3000,  2691,   647,  1360,  1121,
    3775,  3769,  1170,  3003,  2691,   665,  1784,  2691,  3776,  3769,
    1122,  3920,  3710,  1361,  1843,  1365,  3473,   557,  1368,  2220,
    1369,   670,  1914,   671,  1171,  1914,  3016,  1416,  1623,   557,
    1417,  1623,  1418,  3072,  1421,  -695,  1423,  1123,   133,   452,
    -556,   117,  3182,  3082,   456,   457,  2350,   830,  1854,  2270,
    1550,  3921,  3710,  3087,  3926,  3170,  1856,  3957,  3958,  1424,
    2271,  2215,  1438,   654,   506,  3097,  3964,  3965,   118,  1440,
     513,  1145,   557,  1444,   517,  1785,  1481,  4021,  2763,  2216,
    1846,  1562,  3886,  3547,  4133,  4134,  3668,  3669,  1847,  2725,
    2217,  2726,  1124,  3078,  1090,   477,  1451,   876,  1915,  1786,
     876,  1915,  1463,  1848,  1552,  1552,  3017,  1465,  1027,  1081,
    1085,  1501,  2214,  3824,  1511,  3692,  2404,  1512,   119,   665,
    3899,  3899,  1513,  1862,  3191,  1172,  1248,   960,   961,  2727,
    3583,  3584,  1560,  1173,  3275,   670,  1577,   671,   460,  1572,
    2650,  3276,  3599,  3186,  3187,  3156,  3157,  3380,  3381,  3099,
    2728,   478,  1593,  -556,  1599,  1849, -1222,  1126,  1620,  2272,
    3151,  1627,  1787,  1174,  2218,   578,  1628,  1633,  1636,  3560,
    1637,  1482,  1850,  1638,  1640,  1485,  1624,  1863,  1641,   479,
    2255,  3277,  1486,  2729,   876,  3886,  1659,   876,  3414,  1660,
    1378,  1663,  1864,  2559,  1665,  1865,   692,  1669,  1677,  1678,
    3438,  1175,  3515,  3439,  1680,  2574,  3181,  1709,   567,   480,
    1679,  1686,  1694,   698,  1379,  1700,  1713,   567,   700,  1866,
    1737,   461,   701,  2528,  1742,  1741,  1176,  1854,  1743,  1744,
    1746,  1867,  1754,   567,  1916,  1856,  2215,  1916,  1756,  1758,
    1771,  2185,  1881,   120,  1177,  3278,  1788,   132,  1373,  1780,
    3635,  1889,  -729,  1127,  2216,  3886,   481,  1890,  1563,  1891,
    1892,  2107,  1487,  1624,  1893,  2217,  1624,  1894,  1895,  3730,
    2340,  1896,  3440,  3441,  1897,  2219,  1898,  1899,  2340,  1900,
    2691,  2108,  1901,  1902,  2795,  1127,  1903,  1904,  1905,  1563,
    1906,  2378,  1907,  1908,  2691,  1909,  2109,  1927,  2340,   462,
    1928,  1930,  1862,  1932,  1942,  2110,  1562,   121,  1943,  1947,
     692,  1974,  1489,  2445,  3438,  1953,  4125,  3439,  1990,  3696,
     831,   832,   833,   834,   835,   836,   837,   698,  1954,  1562,
    1956,  1127,   700,  1110,  1111,  2220,   701,  1562,   838,  2218,
    1982,  1994,  3279,  1957,  1958,  1973,  1127,  4125,  1980,  1981,
    1128,  1984,  2111,  2112,  4012,  4013,  1863,  4015,  1998,  2002,
    -556,  3537,   122,  3418,  -849,  2014,  2015,  2025,  2026,  2031,
    2047,  1864,  1129,  2048,  1865,  2035,   -63,  2036,  3402,  3300,
    2113,   482,  2018,  2049,  1997, -1055,  3440,  3441,  2001,  2061,
    3329,  2067,  1142,  2118,  2121,  2077,  2094,  3321,  1866,  4048,
    2080,  4049,  4050,   744,   745,  2011,   567,   748,   749,  2093,
    1867,   751,  2130,   753,  2142,  2167,  2030,  2730,  2145,  2181,
    1825,  2193,  1473,  1474,  1475,  1476,  1477,  1826,  1827,  2195,
    2201,  2199,  2222,  1130,  2223,  2226,  2227,  2229,  2114,  1828,
    1829,  1490,  2235,  2837,  2274,   483,  2236,  2237,  1127,  2233,
    2219,  3391,   960,   961,  1492,  3865,  1563,  3863,  3538,  3539,
    3696,  2405,  2650,  3540,  3541,  1130,  2238,  2239,  2240,  1830,
    2270,   567,  2282,  1831,  1832,  2287,  2288,  2291,  1833,  2292,
    2294,  2301,  2295,  4119,  1834,   757,   758,  2303,   463,  2304,
    2311,  2343,  1835,  2310,  2115,  2381,  2402,  2418,  2315,  1836,
     484,  2316,  2321,  3412,   485,  2425,   464,  2322,  2421,  2426,
    2220,  1130,  3329,  1837,  2432,  2451,  2452,  1478,  1479,  1480,
    1481,  -556,   486,  2453,   754,  2082,  1130,  1347,  2469,  1131,
    1838,  2463,  2472,  2465,  2473,  2486,  2445,  1839,  1840,  3446,
    2514,  2505,   800,   465,  1841,  -484,  2506,   466,   487,   811,
    2507,  2532,  1842,  2535,  2536,   567,  -788,  2537,  1843,  2538,
    2545,   759,  2539,   488,  2549,  2547,  2550,  2552,  2553,  2560,
     896,  2576,  3472,  2564,  2577,  2578,  2579,  1132,  1133,  2174,
    3489,  2173,  2597,   467,  2619,  2620,  1844,  3493,  1134,  2629,
     760,   468,  2596,  3191,  1782,  2598,  2623,  2627,  2645,  2628,
     795,  2652,  3097,   761,  2653,  1783,  2698,  3498,  2750,  1132,
    1133,  2700,  2734,  2756,  2762,  1482,  2760,  1483,  1484,  1485,
    2763,  2769,  1845,  2770,  1846,   762,  1486,   763,  1130,   567,
    2775,  1855,  1847,  1773,  1948,  2776,  2805,  2817,   764,  2818,
    1473,  1474,  1475,  1476,  1477,  3860,  2819,  1848,  3560,  2808,
    2812,  2848,  2820,  2774,  2822,  1132,  1133,  2849,  2823,   765,
    2879,  2884,  2877,  2885,  2886,  2888,  1112,  2895,  2890,  1113,
    1132,  1133,  3551,  2897,  2901,  1219,  2906,  4131,  2909,  1165,
    2910,  2917,  2920,   766,  2923,  2925,   567,  2942,  2937,  2950,
     767,  2961,  2967,  2936,  2975,  2972,  2971,  2997,  3073,  1849,
    2987,  3076,  3863,  3006,  2988,  3572,  1487,  4044,  1135,  1136,
    1137,  1138,  1139,  1140,  1141,  1142,  1850,  3329,  3329,  1007,
    1851,  3079,  3080,  3084,  3092,  3093,  3098,  -401,  2158,   768,
    3109,  3128,  3162,  3936,  3593,  1478,  1479,  1480,  1481,  3086,
    1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,  3936,  1039,
    2445,  3107,  3112,  3135,  3150,  1488,  1489,  3136,  1852,  3139,
    1784,  3946,  3140,  1853,  3184,  1056,  4044,  3164,  3200,  3173,
    3201,  1854,  1132,  1133,  3696,  3192,  3204,  3205,  1855,  1856,
    3209,  3210,  3222,  3229,  3640,   557,  1135,  1136,  1137,  1138,
    1139,  1140,  1141,  1142,  4114,  3329,  3230,  3231,  3249,  3242,
    3294,  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,  3297,
    2341,  1857,  1105,  3299,  3301,  3317,  3318,  3325,  3332,  3319,
    3308,  3288,  3322,  1858,  1859,  1860,  1861,  3323,  4114,  1785,
    3358,  3339,  3340,  1482,  3341,  1483,  1484,  1485,  3342,  3351,
    3359,  3360,  3361,   567,  1486,  3352,  1862,  3362,  3354,  3378,
     960,   961,  3385,  1786,   740,  3386,   769,  3387,  2940,  3389,
    3398,  3396,  3641,  3383,  3399,  3403,  3404, -1303,  3407, -1308,
    3409,  3410,  3422,  3434,  3435,   770,  3462,  3468,  3285,  3477,
     740,   771,  3936,  3476,  3466,  1490,  3481,  3478,  3736,   772,
    3480,  3487,  4038,  3743,  3499,  3514,  1114,  1491,  1492,  3500,
    1863,  3516,  3517,  3526,  1136,  1137,  1138,  1139,  1140,  1141,
    1142,  3528,  3529,   773,  3530,  1864,  1787,  3531,  1865,  3532,
    3533,  3534,  3545,  3563,  1487,  3552,   774,   775,  3564,  3566,
    3586,  3600,  3568,  3601,  3570,  3350,  3602,  3644,  4066,  3660,
    3656,  3636,  1866,  3671,  3666,  3678,  3677,  3704,  3680,  3711,
    3732,  3706,  3750,  3936,  1867,  3936,  3708,  -271,  3759,  3773,
    1563,   557,  4084,  3753,  3718,  3786,  3551,  3788,   776,  3765,
    3789,  3936,  3797,  1488,  1489,  3752,  3802,  3804,  3762,  3768,
    3806,  3785,  2746,  3902,  3794,  3818,  3828,  3831,  -289,  3572,
    3857,  3572,  3858,  3809,   740,  3859,   777,  3872,  3878,   740,
    1788,  3881,  3936,  3936,  3903,  3917,  3922,  4129,  3923,  3822,
    3924,  -788,  3925,  3932,  3933,  3943,  3944,  3937,  3945,   778,
    3948,   779,  3832,  3969,  3970,  3971,  3978,  3972,  3981,   740,
    3986,  3988,  3990,  3991, -2119,  3994,  4000,  4006,  3780,  4007,
    4011,  4014,  4016,  4017,  4026,   740,  4019,  1384,  1385,  1386,
    1387,  1388,  1389,  1390,  4020,  1391,  1392,  1393,  1394,  1395,
    1396,  1397,  4040,  1398, -1455,  4039,  4051,  4053,  4054,  4055,
    4059,  4060,  4064,  4069,  4073,  4070,   567,  4079,  4077,  4082,
    4083,  4089,  4085,  4095,  4093,  3910,  3892,  4102,  4103,   740,
     740,   740,   740,  4120,  4117,  4126,  2530,  3745,  1442,  1443,
    4130,   740,  2531,  1490,  3307,  2660,  2373,  1453,  1454,  3503,
     983,  1457,  1458,  1459,  3866,  1491,  1492,  4001,  1464,  3760,
    1359,  1466,  1467,  4002,  1468,  3501,  1469,  3505,  3639,  4136,
    4098,  3613,  4107,  1503,  1504,  1505,  1506,  3614,  1508,  3616,
    3617,  3619,  3620,  3621,  3622,  3623,  1516,  1517,  4023,  1520,
    1521,  3624,  3930,  4009,  4024,  1525,   822,   758,  1529,  1530,
    3627,  1563,  1533,  3999,  3628,  1536,  1537,  1538,  1539,  1540,
    1541,  3629,  3942,  1544,  1545,  1824,  1548,  1420,  1549,  3941,
    2085,  1868,  1554,  2905,  1558,  1559,  1399,  1400,  3646,   567,
    2719,  3171,  3961,  3962,  3882,  3784,  1566,  1567,  4005,  3392,
    3960,  4010,  1105,  4043,  3679,  1573,  1912,  2350,  2350,  3324,
    3796,   606,  1578,  1579,  1580,  2330,  3577,  3243,  2793,  3090,
    2337,  3232,  2747,  2676,  3295,  3256,  3257,  3595,  3445,  3471,
    3956,  3479,   759,  3235,  3198,  3821,  3815,  3594,  1941,  3766,
    2414,  3655,  3598,  2334,  3234,  1616,   567,  2737,  3448,  3724,
    2211,  2561,  1757,  3233,  1910,  2150,  2900,  1377,  2580,   908,
    3697,   760,  2172,  2548,  1253,  2843,  4003,  3771,  2847,  2448,
    4028,  3206,  3713,  1618,   761,  1510,  2640,  4036,  3576,  3979,
    3085,  3980,  1553,  2521,  3238,  3573,  3900,  1462,  4088,  3562,
    2416,  2587,  2544,  2567,  3394,  1657,   762,  3177,   763,  3176,
    3954,  1682,  4135,  3216,   897,  1946,   999,  2422,  2203,   764,
    1725,   882,  4132,  3013,  2095,  3163,  1684,  4042,  3973,  4067,
    4137,  3475,  4018,  3180,  1698,  2182,  3202,   740,  2958,  3408,
     765,  3565,  2129,  1689,   824,  2889,  3670,  1241,  4075,   826,
    1931,  2503,  1245,  4080,  3676,  2876,  1568,   600,  1650,   601,
    1697,   987,   988,     0,   766,   989,     0,     0,  1712,     0,
       0,   767,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4115,   740,   740,
       0,     0,     0,     0,     0,     0,  1563,   740,   740,   740,
     740,   740,   740,   740,     0,     0,     0,     0,   740,     0,
     768,   740,   740,     0,   740,   567,   740,     0,     0,  1563,
     740,  4115,     0,   740,   740,   740,   740,  1563,   740,   740,
       0,     0,     0,     0,     0,     0,   740,   740,     0,   740,
     740,   740,   740,   740,     0,   740,     0,     0,   740,   740,
       0,     0,   740,   740,   740,   740,   740,   740,   740,   740,
     740,     0,     0,   740,   740,     0,   740,     0,   740,     0,
       0,     0,   740,     0,   740,   740,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   758,   740,   740,     0,     0,
       0,     0,   740,     0,     0,   740,     0,     0,     0,     0,
       0,     0,   740,   740,   740,     0,   740,     0,     0,     0,
       0,     0,     0,   740,   740,   740,     0,   740,   740,   740,
     740,   740,     0,   740,   740,   740,   740,   740,   740,   740,
     740,     0,     0,     0,   740,   740,     0,   769,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   770,     0,     0,  1959,
     759,     0,   771,     0,     0,     0,     0,     0,     0,     0,
     772,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   760,
       0,     0,     0,     0,   773,     0,     0,     0,     0,     0,
       0,     0,   761,     0,     0,     0,     0,   774,   775,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   762,     0,   763,     0,     0,     0,
       0,     0,     0,     0,  2009,     0,     0,   764,     1,     2,
     740,     0,     0,     0,     0,     0,     0,     0,   740,   776,
       0,     0,     0,     3,     0,     4,     0,     0,   765,     5,
       0,     0,     0,  2039,  2041,  2043,     0,     0,     0,     0,
       0,     0,     0,     6,     7,     0,     0,   777,     0,     0,
       8,     0,   766,     0,     9,    10,     0,     0,     0,   767,
       0,     0,     0,     0,     0,     0,     0,    11,     0,     0,
     778,  2069,   779,     0,     0,     0,     0,     0,     0,     0,
    2074,     0,  2075,    12,     0,     0,  1828,  1829,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   768,     0,
       0,     0,     0,     0,    13,     0,     0,     0,     0,     0,
       0,     0,    14,    15,    16,     0,     0,     0,  -681,  -681,
    1831,     0,     0,     0,    17,    18,     0,  -681,     0,     0,
       0,  1834,     0,     0,     0,     0,     0,    19,     0,  1835,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
       0,     0,  2146,     0,     0,     0,     0,     0,     0,     0,
    1837,     0,     0,     0,     0,    21,     0,     0,     0,     0,
       0,     0,     0,     0,  1347,     0,     0,  1838,     0,     0,
       0,    22,     0,     0,     0,     0,    23,     0,     0,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1843,     0,     0,     0,   740,
       0,     0,    25,     0,    26,     0,     0,     0,   740,     0,
       0,     0,     0,     0,     0,   769,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   770,     0,     0,    28,     0,     0,
     771,    29,     0,     0,     0,     0,     0,     0,   772,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1846,     0,     0,     0,     0,     0,     0,     0,  1847,
       0,     0,   773,     0,   740,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1848,   774,   775,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   740,   740,   740,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   740,
       0,     0,     0,     0,     0,     0,     0,   776,     0,    30,
       0,     0,     0,     0,     0,     0,  1849,     0,     0,     0,
       0,   740,     0,     0,     0,     0,     0,   740,     0,    31,
     740,     0,   740,  1850,     0,   777,     0,     0,   740,  2351,
     740,   740,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,     0,   778,     0,
     779,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    34,     0,     0,    35,     0,    36,     0,     0,
      37,     0,     0,    38,     0,     0,    39,     0,  1854,     0,
       0,    40,     0,    41,     0,     0,  1856,     0,     0,  2424,
      42,     0,   740,  2428,     0,    43,     0,     0,  2430,  2431,
       0,     0,     0,    44,     0,     0,     0,  2446,    45,     0,
       0,     0,    46,     0,     0,     0,     0,     0,     0,     0,
    2454,     0,  2455,     0,     0,  2457,  2458,  2459,  2460,  2461,
       0,     0,     0,     0,     0,     0,    47,     0,     0,     0,
      48,  2467,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1862,  2474,     0,  2475,     0,  2476,  2477,
    2478,     0,     0,     0,     0,  2483,  2484,  2485,     0,     0,
       0,     0,  2488,  2489,  2490,     0,  2491,     0,  2493,     0,
    2495,    49,  2497,     0,  2498,     0,     0,     0,     0,  2501,
       0,     0,     0,     0,    50,     0,     0,     0,    51,  2509,
       0,    52,     0,     0,     0,     0,    53,  1863,     0,     0,
       0,     0,     0,     0,     0,  2519,     0,     0,     0,     0,
       0,     0,  1864,     0,     0,  1865,     0,     0,     0,     0,
       0,     0,    54,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    55,     0,     0,  1866,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1867,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3018,  3019,     0,     0,
       0,     0,  3020,     0,  3021,     0,  3022,  3023,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3024,     0,     0,     0,     0,     0,     0,   740,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3025,     0,     0,  3026,     0,     0,
       0,     0,     0,     0,     0,  3027,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   740,
       0,     0,  3028,   740,     0,     0,     0,     0,   740,   740,
       0,     0,     0,     0,     0,     0,     0,   740,     0,  3029,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     740,     0,   740,   740,     0,   740,   740,   740,   740,   740,
       0,  3030,   740,  3031,     0,     0,     0,     0,     0,     0,
       0,   740,     0,     0,     0,     0,  3032,  3033,     0,     0,
       0,     0,     0,     0,   740,     0,   740,     0,   740,   740,
     740,   740,     0,     0,     0,   740,   740,   740,     0,     0,
       0,     0,   740,   740,   740,     0,   740,     0,   740,     0,
     740,     0,   740,     0,   740,     0,  3034,     0,     0,   740,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   740,
       0,     1,     2,     0,     0,     0,   740,     0,     0,   740,
       0,     0,     0,     0,  3035,   740,     3,     0,     0,   740,
       0,     0,     5,  3036,  3037,     0,  3038,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     6,     7,     0,     0,
       0,     0,     0,     8,     0,     0,     0,     9,    10,     0,
       0,     0,     0,     0,     0,  3039,  3040,  3041,     0,     0,
      11,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3042,  3043,  3044,    12,     0,     0,  3045,
       0,  2802,  3046,     0,     0,  1828,  1829,  2806,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,     0,     0,
    3047,  3048,     0,     0,     0,    14,    15,    16,     0,     0,
    2826,  2827,     0,     0,     0,     0,     0,    17,    18,  1831,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1834,     0,     0,     0,     0,  3049,  3050,     0,  1835,     0,
    2856,     0,    20,     0,     0,     0,     0,     0,     0,     0,
    2867,     0,  2869,     0,  2871,     0,     0,     0,    21,  1837,
    3051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1347,    22,     0,  1838,     0,     0,    23,
       0,     0,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2896,
       0,     0,     0,     0,  1843,    25,     0,    26,  3052,     0,
       0,     0,  3053,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3054,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2948,     0,     0,
       0,  2952,     0,     0,     0,     0,     0,     0,     0,     0,
    1846,     0,     0,  3055,     0,     0,  3056,     0,  1847,  3057,
    3058,  3059,  3060,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1848,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2981,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3061,  3062,     0,     0,     0,     0,     0,     0,
    2986,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3063,  1849,     0,     0,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,   740,  1850,     0,     0,    32,     0,   740,     0,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     740,   740,     0,     0,     0,    34,     0,     0,    35,     0,
      36,     0,     0,    37,     0,     0,    38,     0,     0,    39,
       0,  3074,  3075,     0,    40,     0,    41,  1854,     0,     0,
     740,     0,     0,    42,     0,  1856,     0,     0,    43,     0,
     740,     0,   740,     0,   740,     0,    44,     0,     0,     0,
       0,    45,     0,     0,     0,    46,     0,     0,     0,     0,
       0,   740,     0,     0,     0,     0,   740,     0,     0,     0,
       0,     0,     0,     0,     0,  3114,     0,     0,     0,    47,
       0,     0,     0,    48,     0,     0,     0,     0,     0,   740,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   740,
    3130,  3131,  1862,     0,   843,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   804,   844,     0,     0,     0,     0,
       0,  3141,     0,     0,    49,     0,  3143,     0,     0,  3144,
       0,     0,  3145,  3146,     0,     0,     0,    50,   845,   846,
       0,    51,     0,     0,    52,     0,     0,   740,   847,    53,
     848,   740,     0,     0,     0,     0,  1863,     0,     0,     0,
       0,     0,     0,  3159,     0,   849,     0,   850,     0,   851,
       0,  1864,     0,     0,  1865,    54,     0,     0,   852,     0,
       0,     0,     0,     0,  3159,     0,     0,     0,     0,    55,
       0,     0,     0,     0,   740,     0,     0,     0,  1866,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1867,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     740,     0,     0,     0, -1653,   853,     0,  3203,     0,   854,
       0,     0,   855,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3159,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   856,
       0,   857,     0,     0,     0,     0,   858,     0,   859,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     860,   861,     0,     0,     0,   862,     0,     0,     0,     0,
       0,   740,   740,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   863,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2735,     0,     0,     0,     0,     0,     0,
    1826,     0,     0,     0,   864,     0,     0,     0,     0,     0,
       0,     0,  1828,  1829,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   740,     0,     0,     0,     0,
       0,   865,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1830,     0,     0,     0,  1831,     0,     0,     0,
     740,   740,     0,   740,     0,     0,     0,  1834,     0,     0,
       0,     0,     0,   866,     0,  1835,     0,     0,     0,     0,
       0,   740,  1836,   867,     0,     0,   740,     0,     0,   740,
       0,     0,   740,   740,     0,     0,  1837,     0,     0,     0,
       0,     0,     0,     0,   868,     0,     0,     0,     0,     0,
    1347,   740,     0,  1838,     0,     0,     0,     0,     0,     0,
    1839,     0,  3159,   740,     0,     0,     0,  2736,     0,     0,
     869,     0,     0,     0,     0,  1842,     0,     0,     0,     0,
       0,  1843,   870,   871,   740,     0,   872,   873,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3420,  3421,     0,     0,     0,     0,     0,     0,  1844,
    2981,     0,     0,   740,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   740,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   740,   874,  1846,     0,     0,
       0,     0,     0,     0,     0,  1847,     0,     0,   875,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1848,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2145,     0,     0,     0,   876,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   877,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1849,     0,     0,     0,  3522,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1850,
       0,     0,     0,  1851,  3527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2145,     0,     0,     0,     0,     0,   878,     0,     0,
       0,  3159,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1853,     0,     0,     0,
       0,     0,     0,     0,  1854,     0,     0,     0,     0,  2948,
       0,     0,  1856,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   740,     0,     0,     0,     0,  1859,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1862,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   740,   740,     0,     0,     0,     0,     0,     0,     0,
     740,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2981,     0,  3522,     0,  3661,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2981,  2981,
       0,     0,     0,  1863,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1864,     0,
       0,  1865,     0,     0,     0,  2981,  3700,     0,     0,     0,
       0,     0,     0,     0,     0,  3705,     0,  3707,     0,     0,
       0,     0,     0,     0,     0,  1866,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1867,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3731,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     740,     0,     0,     0,     0,     0,   740,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   740,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   740,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   740,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3826,     0,  3827,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3835,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2981,     0,     0,
    3631,  3522,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   740,     0,   740,  2981,   740,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   740,   740,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   740,     0,     0,     0,     0,
       0,     0,  3934,     0,     0,   740,   740,     0,     0,     0,
       0,     0,     0,     0,     0,   740,     0,   740,     0,     0,
    3939,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3159,     0,     0,
     740,     0,     0,     0,     0,     0,  3631,  3631,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3984,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4030,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     740,     0,   740,     0,     0,     0,     0,     0,     0,     0,
    4052,     0,   740,     0,  3631,  3631,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4068,  3870,     0,     0,     0,   740,     0,     0,
       0,   740,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   740,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   740,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4116,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   740,     0,  3631,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3631,
     740,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3631,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   740,     0,     0,
       0,     0,     0,     0,     0,     0,   740,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   740,  3631,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3631,
    3631,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   740,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3631,     0,     0,     0,     0,     0,     0,
     740,     0,     0,  3631,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     740,     0,     0,     0,     0,     0,     0,  3631,     0,  3631,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3631,
       0,     0,   740,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3631,     0,  3631,     0,  3631,     0,     0,     0,
       0,     0,     0,  3631,     0,     0,     0,     0,     0,     0,
       0,     0,  3631,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3631,  3631,     0,
       0,     0,     0,   740,   138,     0,   613,   140,   141,   142,
     143,     0,     0,  3631,  3631,     0,   144,     0,  3631,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,   616,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,  1555,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,   639,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,   651,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,  1556,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,   667,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,  1557,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
     714,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   613,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   614,     0,   146,   147,   148,   149,
     150,   615,   152,     0,   153,  3518,     0,   616,   154,   617,
     618,   619,   155,   620,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   621,   622,   163,     0,
     164,   623,   624,   166,     0,   167,   168,   169,   625,   171,
       0,   626,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   627,   184,     0,   185,   628,
     629,   186,     0,     0,   187,   630,  3519,   631,     0,   632,
     633,     0,   188,   189,   190,   634,   635,   636,     0,     0,
       0,     0,   637,   193,   638,     0,     0,   639,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   640,
       0,   217,   218,   219,   641,   642,   220,   221,     0,   222,
     223,   224,   643,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   644,   231,   645,   233,
       0,   234,     0,   646,     0,   235,   236,     0,   237,   647,
       0,   238,   239,     0,     0,     0,   648,   241,   242,   243,
     649,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   650,   248,   249,  3520,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   652,   259,   260,     0,
       0,     0,     0,     0,   653,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   654,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   655,   282,   283,   284,
     285,   656,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   657,   293,     0,     0,   658,   295,   659,   296,     0,
     297,   660,   661,   662,   663,   664,   302,   303,   304,   305,
       0,   665,   306,   307,     0,     0,   308,   309,   310,   311,
     666,   667,   668,   312,   313,     0,   669,   670,     0,   671,
       0,   314,   315,   672,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   673,   324,   325,   326,   327,   328,   674,
     675,   676,   330,   331,   332,   677,   678,   335,   679,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   680,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   681,   682,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,   683,   367,   368,   369,   370,   371,   684,   373,   374,
     375,     0,   685,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,   686,   687,   400,
     401,     0,   402,   688,   404,   405,   406,   689,   690,   407,
     408,   409,   410,   691,   411,   412,     0,     0,   413,   414,
     415,     0,   692,   416,   417,     0,   693,   694,   695,   696,
       0,     0,     0,     0,     0,   422,   423,     0,   697,   698,
     699,   425,   426,   427,   700,  3521,   428,   429,   701,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   702,   438,     0,     0,   703,   704,   705,
     706,   439,     0,     0,   440,   707,     0,   708,   441,   442,
     443,   709,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   710,     0,     0,     0,   711,   712,
       0,     0,     0,     0,   713,   714,     0,     0,   715,   716,
       0,     0,   717,   718,   138,     0,   613,   140,   141,   142,
     143,  2944,     0,     0,     0,     0,   144,     0,     0,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,  2945,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,  2946,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,   651,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,   667,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,  2947,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,     0,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
     714,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   613,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   614,     0,   146,   147,   148,   149,
     150,   615,   152,     0,   153,     0,     0,   616,   154,   617,
     618,   619,   155,   620,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   621,   622,   163,     0,
     164,   623,   624,   166,     0,   167,   168,   169,   625,   171,
       0,   626,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   627,   184,     0,   185,   628,
     629,   186,     0,     0,   187,   630,  3519,   631,     0,   632,
     633,     0,   188,   189,   190,   634,   635,   636,     0,     0,
       0,     0,   637,   193,   638,     0,     0,   639,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   640,
       0,   217,   218,   219,   641,   642,   220,   221,     0,   222,
     223,   224,   643,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   644,   231,   645,   233,
       0,   234,     0,   646,     0,   235,   236,     0,   237,   647,
       0,   238,   239,     0,     0,     0,   648,   241,   242,   243,
     649,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   650,   248,   249,  3520,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   652,   259,   260,     0,
       0,     0,     0,     0,   653,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   654,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   655,   282,   283,   284,
     285,   656,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   657,   293,     0,     0,   658,   295,   659,   296,     0,
     297,   660,   661,   662,   663,   664,   302,   303,   304,   305,
       0,   665,   306,   307,     0,     0,   308,   309,   310,   311,
     666,   667,   668,   312,   313,     0,   669,   670,     0,   671,
       0,   314,   315,   672,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   673,   324,   325,   326,   327,   328,   674,
     675,   676,   330,   331,   332,   677,   678,   335,   679,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   680,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   681,   682,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,   683,   367,   368,   369,   370,   371,   684,   373,   374,
     375,     0,   685,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,   686,   687,   400,
     401,     0,   402,   688,   404,   405,   406,   689,   690,   407,
     408,   409,   410,   691,   411,   412,     0,     0,   413,   414,
     415,     0,   692,   416,   417,     0,   693,   694,   695,   696,
       0,     0,     0,     0,     0,   422,   423,     0,   697,   698,
     699,   425,   426,   427,   700,  3521,   428,   429,   701,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   702,   438,     0,     0,   703,   704,   705,
     706,   439,     0,     0,   440,   707,     0,   708,   441,   442,
     443,   709,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   710,     0,     0,     0,   711,   712,
       0,     0,     0,     0,   713,   714,     0,     0,   715,   716,
       0,     0,   717,   718,   138,     0,   613,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,   616,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,   639,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,   651,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,   667,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,  1103,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,     0,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
    1104,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   613,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   614,     0,   146,   147,   148,   149,
     150,   615,   152,     0,   153,     0,     0,   616,   154,   617,
     618,   619,   155,   620,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   621,   622,   163,     0,
     164,   623,   624,   166,     0,   167,   168,   169,   625,   171,
       0,   626,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   627,   184,     0,   185,   628,
     629,   186,     0,     0,   187,   630,     0,   631,     0,   632,
     633,     0,   188,   189,   190,   634,   635,   636,     0,     0,
       0,     0,   637,   193,   638,     0,     0,   639,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   640,
       0,   217,   218,   219,   641,   642,   220,   221,     0,   222,
     223,   224,   643,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   644,   231,   645,   233,
       0,   234,     0,   646,     0,   235,   236,     0,   237,   647,
       0,   238,   239,     0,     0,     0,   648,   241,   242,   243,
     649,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   650,   248,   249,   651,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   652,   259,   260,     0,
       0,     0,     0,     0,   653,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   654,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   655,   282,   283,   284,
     285,   656,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   657,   293,     0,     0,   658,   295,   659,   296,     0,
     297,   660,   661,   662,   663,   664,   302,   303,   304,   305,
       0,   665,   306,   307,     0,     0,   308,   309,   310,   311,
     666,   667,   668,   312,   313,     0,   669,   670,     0,   671,
       0,   314,   315,   672,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   673,   324,   325,   326,   327,   328,   674,
     675,   676,   330,   331,   332,   677,   678,   335,   679,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   680,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   681,   682,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,   683,   367,   368,   369,   370,   371,   684,   373,   374,
     375,     0,   685,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,   686,   687,   400,
     401,     0,   402,   688,   404,   405,   406,   689,   690,   407,
     408,   409,   410,   691,   411,   412,     0,     0,   413,   414,
     415,     0,   692,   416,   417,     0,   693,   694,   695,   696,
       0,     0,     0,     0,     0,   422,   423,     0,   697,   698,
     699,   425,   426,   427,   700,     0,   428,   429,   701,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   702,   438,     0,     0,   703,   704,   705,
     706,   439,     0,     0,   440,   707,     0,   708,   441,   442,
     443,   709,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   710,     0,     0,     0,   711,   712,
       0,     0,     0,     0,   713,   714,  1463,     0,   715,   716,
       0,     0,   717,   718,   138,     0,   613,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,   616,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,   639,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,  2038,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,   651,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,   667,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,     0,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
     714,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   613,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   614,     0,   146,   147,   148,   149,
     150,   615,   152,     0,   153,     0,     0,   616,   154,   617,
     618,   619,   155,   620,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   621,   622,   163,     0,
     164,   623,   624,   166,     0,   167,   168,   169,   625,   171,
       0,   626,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   627,   184,     0,   185,   628,
     629,   186,     0,     0,   187,   630,     0,   631,     0,   632,
     633,     0,   188,   189,   190,   634,   635,   636,     0,     0,
       0,     0,   637,   193,   638,     0,     0,   639,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   640,
       0,   217,   218,   219,   641,   642,   220,   221,     0,   222,
     223,   224,   643,     0,   225,     0,     0,     0,     0,   226,
     227,  2040,   228,     0,   229,     0,   644,   231,   645,   233,
       0,   234,     0,   646,     0,   235,   236,     0,   237,   647,
       0,   238,   239,     0,     0,     0,   648,   241,   242,   243,
     649,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   650,   248,   249,   651,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   652,   259,   260,     0,
       0,     0,     0,     0,   653,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   654,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   655,   282,   283,   284,
     285,   656,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   657,   293,     0,     0,   658,   295,   659,   296,     0,
     297,   660,   661,   662,   663,   664,   302,   303,   304,   305,
       0,   665,   306,   307,     0,     0,   308,   309,   310,   311,
     666,   667,   668,   312,   313,     0,   669,   670,     0,   671,
       0,   314,   315,   672,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   673,   324,   325,   326,   327,   328,   674,
     675,   676,   330,   331,   332,   677,   678,   335,   679,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   680,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   681,   682,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,   683,   367,   368,   369,   370,   371,   684,   373,   374,
     375,     0,   685,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,   686,   687,   400,
     401,     0,   402,   688,   404,   405,   406,   689,   690,   407,
     408,   409,   410,   691,   411,   412,     0,     0,   413,   414,
     415,     0,   692,   416,   417,     0,   693,   694,   695,   696,
       0,     0,     0,     0,     0,   422,   423,     0,   697,   698,
     699,   425,   426,   427,   700,     0,   428,   429,   701,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   702,   438,     0,     0,   703,   704,   705,
     706,   439,     0,     0,   440,   707,     0,   708,   441,   442,
     443,   709,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   710,     0,     0,     0,   711,   712,
       0,     0,     0,     0,   713,   714,     0,     0,   715,   716,
       0,     0,   717,   718,   138,     0,   613,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,   616,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,   639,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,  2042,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,   651,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,   667,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,     0,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
     714,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   613,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   614,     0,   146,   147,   148,   149,
     150,   615,   152,     0,   153,     0,     0,   616,   154,   617,
     618,   619,   155,   620,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   621,   622,   163,     0,
     164,   623,   624,   166,     0,   167,   168,   169,   625,   171,
       0,   626,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   627,   184,     0,   185,   628,
     629,   186,     0,     0,   187,   630,     0,   631,     0,   632,
     633,     0,   188,   189,   190,   634,   635,   636,     0,     0,
       0,     0,   637,   193,   638,     0,     0,   639,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   640,
       0,   217,   218,   219,   641,   642,   220,   221,     0,   222,
     223,   224,   643,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   644,   231,   645,   233,
       0,   234,     0,   646,     0,   235,   236,     0,   237,   647,
       0,   238,   239,     0,     0,     0,   648,   241,   242,   243,
     649,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   650,   248,   249,   651,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   652,   259,   260,     0,
       0,     0,     0,     0,   653,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   654,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   655,   282,   283,   284,
     285,   656,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   657,   293,     0,     0,   658,   295,   659,   296,     0,
     297,   660,   661,   662,   663,   664,   302,   303,   304,   305,
       0,   665,   306,   307,     0,     0,   308,   309,   310,   311,
     666,   667,   668,   312,   313,     0,   669,   670,     0,   671,
       0,   314,   315,   672,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   673,   324,   325,   326,   327,   328,   674,
     675,   676,   330,   331,   332,   677,   678,   335,   679,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   680,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   681,   682,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,   683,   367,   368,   369,   370,   371,   684,   373,   374,
     375,     0,   685,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,   686,   687,   400,
     401,     0,   402,   688,   404,   405,   406,   689,   690,   407,
     408,   409,   410,   691,   411,   412,     0,     0,   413,   414,
     415,     0,   692,   416,   417,     0,   693,   694,   695,   696,
       0,     0,     0,     0,     0,   422,   423,     0,   697,   698,
     699,   425,   426,   427,   700,     0,   428,   429,   701,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   702,   438,     0,     0,   703,   704,   705,
     706,   439,     0,     0,   440,   707,     0,   708,   441,   442,
     443,   709,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   710,     0,     0,     0,   711,   712,
       0,     0,     0,     0,   713,   714,     0,     0,   715,   716,
       0,     0,   717,   718,   138,     0,   613,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,   616,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,   639,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,   651,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,   667,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,     0,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
    1038,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   613,   140,   141,   142,   143,  1587,     0,     0,     0,
       0,  1588,     0,     0,   614,     0,   146,   147,   148,   149,
     150,   615,   152,     0,   153,     0,     0,   616,   154,   617,
     618,   619,   155,   620,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   621,   622,   163,     0,
     164,   623,   624,   166,     0,   167,   168,   169,   625,   171,
       0,   626,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   627,   184,     0,   185,   628,
     629,   186,     0,     0,   187,   630,     0,   631,     0,   632,
     633,     0,   188,   189,   190,   634,   635,   636,     0,     0,
       0,     0,   637,   193,   638,     0,     0,   639,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   640,
       0,   217,   218,   219,   641,   642,   220,   221,     0,   222,
     223,   224,   643,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   644,   231,   645,   233,
       0,   234,     0,   646,     0,   235,   236,     0,   237,   647,
       0,   238,   239,     0,     0,     0,   648,   241,   242,   243,
     649,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   650,   248,   249,   651,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   652,   259,   260,     0,
       0,     0,     0,     0,   653,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   654,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   655,   282,   283,   284,
     285,   656,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   657,   293,     0,     0,   658,   295,   659,   296,     0,
     297,   660,   661,   662,   663,   664,   302,   303,   304,   305,
       0,   665,   306,   307,     0,     0,   308,   309,   310,   311,
     666,     0,   668,   312,   313,     0,   669,   670,     0,   671,
       0,   314,   315,   672,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   673,   324,   325,   326,   327,   328,   674,
     675,   676,   330,   331,   332,   677,   678,   335,   679,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   680,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   681,   682,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,   683,   367,   368,   369,   370,   371,   684,   373,   374,
     375,     0,   685,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,   686,   687,   400,
     401,     0,   402,   688,   404,   405,   406,   689,   690,   407,
     408,   409,   410,   691,   411,   412,     0,     0,   413,   414,
     415,     0,   692,   416,   417,     0,   693,   694,   695,   696,
       0,     0,     0,     0,     0,   422,   423,     0,   697,   698,
     699,   425,   426,   427,   700,     0,   428,   429,   701,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   702,   438,     0,     0,   703,   704,   705,
     706,   439,     0,     0,   440,   707,     0,   708,   441,   442,
     443,   709,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   710,     0,     0,     0,   711,   712,
       0,     0,     0,     0,   713,   714,     0,     0,   715,   716,
       0,     0,   717,   718,   138,     0,   613,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,   616,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,   639,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,  2423,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,   667,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,     0,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
     714,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   613,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   614,     0,   146,   147,   148,   149,
     150,   615,   152,     0,   153,     0,     0,   616,   154,   617,
     618,   619,   155,   620,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   621,   622,   163,     0,
     164,   623,   624,   166,     0,   167,   168,   169,   625,   171,
       0,   626,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   627,   184,     0,   185,   628,
     629,   186,     0,     0,   187,   630,     0,   631,     0,   632,
     633,     0,   188,   189,   190,   634,   635,   636,     0,     0,
       0,     0,   637,   193,   638,     0,     0,   639,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   640,
       0,   217,   218,   219,   641,   642,   220,   221,     0,   222,
     223,   224,   643,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   644,   231,   645,   233,
       0,   234,     0,   646,     0,   235,   236,     0,   237,   647,
       0,   238,   239,     0,     0,     0,   648,   241,   242,   243,
     649,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   650,   248,   249,  2482,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   652,   259,   260,     0,
       0,     0,     0,     0,   653,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   654,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   655,   282,   283,   284,
     285,   656,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   657,   293,     0,     0,   658,   295,   659,   296,     0,
     297,   660,   661,   662,   663,   664,   302,   303,   304,   305,
       0,   665,   306,   307,     0,     0,   308,   309,   310,   311,
     666,   667,   668,   312,   313,     0,   669,   670,     0,   671,
       0,   314,   315,   672,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   673,   324,   325,   326,   327,   328,   674,
     675,   676,   330,   331,   332,   677,   678,   335,   679,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   680,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   681,   682,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,   683,   367,   368,   369,   370,   371,   684,   373,   374,
     375,     0,   685,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,   686,   687,   400,
     401,     0,   402,   688,   404,   405,   406,   689,   690,   407,
     408,   409,   410,   691,   411,   412,     0,     0,   413,   414,
     415,     0,   692,   416,   417,     0,   693,   694,   695,   696,
       0,     0,     0,     0,     0,   422,   423,     0,   697,   698,
     699,   425,   426,   427,   700,     0,   428,   429,   701,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   702,   438,     0,     0,   703,   704,   705,
     706,   439,     0,     0,   440,   707,     0,   708,   441,   442,
     443,   709,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   710,     0,     0,     0,   711,   712,
       0,     0,     0,     0,   713,   714,     0,     0,   715,   716,
       0,     0,   717,   718,   138,     0,   613,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,   616,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,  3158,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,   651,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,   667,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,     0,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
     714,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   613,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   614,     0,   146,   147,   148,   149,
     150,   615,   152,     0,   153,     0,     0,   616,   154,   617,
     618,   619,   155,   620,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   621,   622,   163,     0,
     164,   623,   624,   166,     0,   167,   168,   169,   625,   171,
       0,   626,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   627,   184,     0,   185,   628,
     629,   186,     0,     0,   187,   630,     0,   631,     0,   632,
     633,     0,   188,   189,   190,   634,   635,   636,     0,     0,
       0,     0,   637,   193,   638,     0,     0,   639,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   640,
       0,   217,   218,   219,   641,   642,   220,   221,     0,   222,
     223,   224,   643,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   644,   231,   645,   233,
       0,   234,     0,   646,     0,   235,   236,     0,   237,   647,
       0,   238,   239,     0,     0,     0,   648,   241,   242,   243,
     649,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   650,   248,   249,   651,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   652,   259,   260,     0,
       0,     0,     0,     0,   653,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   654,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   655,   282,   283,   284,
     285,   656,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   657,   293,     0,     0,   658,   295,   659,   296,     0,
     297,   660,   661,   662,   663,   664,   302,   303,   304,   305,
       0,   665,   306,   307,     0,     0,   308,   309,   310,   311,
     666,     0,   668,   312,   313,     0,   669,   670,     0,   671,
       0,   314,   315,   672,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   673,   324,   325,   326,   327,   328,   674,
     675,   676,   330,   331,   332,   677,   678,   335,   679,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   680,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   681,   682,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,   683,   367,   368,   369,   370,   371,   684,   373,   374,
     375,     0,   685,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,   686,   687,   400,
     401,     0,   402,   688,   404,   405,   406,   689,   690,   407,
     408,   409,   410,   691,   411,   412,     0,     0,   413,   414,
     415,     0,   692,   416,   417,     0,   693,   694,   695,   696,
       0,     0,     0,     0,     0,   422,   423,     0,   697,   698,
     699,   425,   426,   427,   700,     0,   428,   429,   701,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   702,   438,     0,     0,   703,   704,   705,
     706,   439,     0,     0,   440,   707,     0,   708,   441,   442,
     443,   709,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   710,     0,     0,     0,   711,   712,
       0,     0,     0,     0,   713,   714,     0,     0,   715,   716,
       0,     0,   717,   718,   138,     0,   613,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,   616,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,   639,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,  1602,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,     0,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,     0,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
     714,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   613,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   614,     0,   146,   147,   148,   149,
     150,   615,   152,     0,   153,     0,     0,   616,   154,   617,
     618,   619,   155,   620,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   621,   622,   163,     0,
     164,   623,   624,   166,     0,   167,   168,   169,   625,   171,
       0,   626,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   627,   184,     0,   185,   628,
     629,   186,     0,     0,   187,   630,     0,   631,     0,   632,
     633,     0,   188,   189,   190,   634,   635,   636,     0,     0,
       0,     0,   637,   193,   638,     0,     0,   639,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   640,
       0,   217,   218,   219,   641,   642,   220,   221,     0,   222,
     223,   224,   643,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   644,   231,   645,   233,
       0,   234,     0,   646,     0,   235,   236,     0,   237,   647,
       0,   238,   239,     0,     0,     0,   648,   241,   242,   243,
     649,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   650,   248,   249,  1604,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   652,   259,   260,     0,
       0,     0,     0,     0,   653,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   654,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   655,   282,   283,   284,
     285,   656,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   657,   293,     0,     0,   658,   295,   659,   296,     0,
     297,   660,   661,   662,   663,   664,   302,   303,   304,   305,
       0,   665,   306,   307,     0,     0,   308,   309,   310,   311,
     666,     0,   668,   312,   313,     0,   669,   670,     0,   671,
       0,   314,   315,   672,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   673,   324,   325,   326,   327,   328,   674,
     675,   676,   330,   331,   332,   677,   678,   335,   679,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   680,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   681,   682,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,   683,   367,   368,   369,   370,   371,   684,   373,   374,
     375,     0,   685,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,   686,   687,   400,
     401,     0,   402,   688,   404,   405,   406,   689,   690,   407,
     408,   409,   410,   691,   411,   412,     0,     0,   413,   414,
     415,     0,   692,   416,   417,     0,   693,   694,   695,   696,
       0,     0,     0,     0,     0,   422,   423,     0,   697,   698,
     699,   425,   426,   427,   700,     0,   428,   429,   701,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   702,   438,     0,     0,   703,   704,   705,
     706,   439,     0,     0,   440,   707,     0,   708,   441,   442,
     443,   709,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   710,     0,     0,     0,   711,   712,
       0,     0,     0,     0,   713,   714,     0,     0,   715,   716,
       0,     0,   717,   718,   138,     0,   613,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   614,
       0,   146,   147,   148,   149,   150,   615,   152,     0,   153,
       0,     0,   616,   154,   617,   618,   619,   155,   620,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   621,   622,   163,     0,   164,   623,   624,   166,     0,
     167,   168,   169,   625,   171,     0,   626,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     627,   184,     0,   185,   628,   629,   186,     0,     0,   187,
     630,     0,   631,     0,   632,   633,     0,   188,   189,   190,
     634,   635,   636,     0,     0,     0,     0,   637,   193,   638,
       0,     0,   639,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   640,     0,   217,   218,   219,   641,
     642,   220,   221,     0,   222,   223,   224,   643,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   644,   231,   645,   233,     0,   234,     0,   646,     0,
     235,   236,     0,   237,   647,     0,   238,   239,     0,     0,
       0,   648,   241,   242,   243,   649,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   650,   248,   249,   651,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   652,   259,   260,     0,     0,     0,     0,     0,   653,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     654,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   655,   282,   283,   284,   285,   656,   286,   287,  3959,
       0,     0,     0,   289,   290,   291,   657,   293,     0,     0,
     658,   295,   659,   296,     0,   297,   660,   661,   662,   663,
     664,   302,   303,   304,   305,     0,   665,   306,   307,     0,
       0,   308,   309,   310,   311,   666,     0,   668,   312,   313,
       0,   669,   670,     0,   671,     0,   314,   315,   672,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   673,   324,
     325,   326,   327,   328,   674,   675,   676,   330,   331,   332,
     677,   678,   335,   679,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   680,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   681,   682,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,   683,   367,   368,   369,
     370,   371,   684,   373,   374,   375,     0,   685,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,   686,   687,   400,   401,     0,   402,   688,   404,
     405,   406,   689,   690,   407,   408,   409,   410,   691,   411,
     412,     0,     0,   413,   414,   415,     0,   692,   416,   417,
       0,   693,   694,   695,   696,     0,     0,     0,     0,     0,
     422,   423,     0,   697,   698,   699,   425,   426,   427,   700,
       0,   428,   429,   701,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   702,   438,
       0,     0,   703,   704,   705,   706,   439,     0,     0,   440,
     707,     0,   708,   441,   442,   443,   709,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   710,
       0,     0,     0,   711,   712,     0,     0,     0,     0,   713,
     714,     0,     0,   715,   716,     0,     0,   717,   718,   138,
       0,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,  2271,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,  2272,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,  1378,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,  1379,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
    2789,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,  2790,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,  -399,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,  2274,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   449,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,  2336,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,  2271,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,  2272,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,  1378,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,  1379,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,  2274,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,     0,   449,     0,     0,   138,     0,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,  2336,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
    2158,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     449,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,  2568,     0,     0,   144,     0,     0,   145,   718,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,     0,   449,     0,
       0,     0,     0,   138,     0,   139,   140,   141,   142,   143,
    4121,     0,     0,     0,     0,   144,  4122,   718,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,     0,   449,     0,
       0,   138,     0,   139,   140,   141,   142,   143,     0,  1042,
       0,     0,     0,   144,     0,     0,   145,   718,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,  1234,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,   424,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   449,     0,     0,   138,
       0,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,   493,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   449,     0,     0,     0,     0,   138,
    2101,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,   493,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   449,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,  2335,     0,     0,     0,   144,
       0,     0,   145,  2336,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,     0,   449,     0,     0,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
    4122,   718,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,     0,   449,     0,     0,   138,     0,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,   493,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   553,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   554,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     449,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,   493,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,     0,   449,     0,
       0,   138,     0,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,   718,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,   424,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   449,     0,     0,   138,
       0,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,  2336,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,   565,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,   135,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   449,     0,   138,     0,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,  1574,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   565,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,   135,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   449,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,  2606,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,   565,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,   135,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,     0,   449,     0,
     138,     0,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,  3188,   146,   147,   148,
     149,   150,   151,     0,     0,  -291,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,     0,     0,     0,     0,   162,  3604,     0,   163,
       0,   164,     0,     0,     0,     0,   167,   168,  3605,   170,
     171,     0,   172,   173,     0,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,     0,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,  3606,
     222,   223,   224,     0,     0,     0,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,   239,     0,     0,     0,   240,   241,   242,
     243,  3607,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,     0,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,  3608,     0,     0,   255,     0,
       0,     0,   257,     0,     0,   258,  3609,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,  -246,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,     0,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,  3610,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,     0,     0,   330,   331,   332,   333,   334,     0,     0,
       0,     0,     0,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,     0,     0,   358,     0,   360,  -246,
       0,   361,     0,     0,   363,     0,     0,     0,   365,   366,
    3611,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,     0,   399,     0,     0,
       0,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,     0,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,     0,     0,     0,     0,   434,     0,     0,
     435,     0,     0,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,  -246,     0,     0,   445,     0,
       0,   447,     0,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,  4128,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,  1948,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,  2594,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,  2891,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,  3193,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,  2250,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,  2251,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
    2252,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,  2253,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,   960,   961,     0,   312,   313,     0,     0,     0,     0,
    2254,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,  4108,  4097,  4109,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,  2255,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,  2443,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,  2600,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,  2086,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,   565,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,  2087,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,   135,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,  2608,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  2609,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,   565,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,   135,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
    2443,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
    2600,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,   565,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,   135,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,   920,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   565,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,   135,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,  1272,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
     565,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,   135,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,   898,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,   899,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,   900,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,  2443,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,   565,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,   135,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
    2647,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,   565,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,   135,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   565,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,   135,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,  2590,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,   135,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,  4032,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,  4033,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
     994,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
    1374,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,  2183,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,  2184,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,  2346,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,  2687,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,   135,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
    2183,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,  1652,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,  1653,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,     0,  -291,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,     0,     0,     0,     0,
     162,  3604,     0,   163,     0,   164,     0,     0,     0,     0,
     167,   168,  3605,   170,   171,     0,   172,   173,     0,     0,
     175,     0,   177,   178,   179,   180,     0,   181,   182,     0,
       0,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,  -261,  -261,   205,     0,  -261,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,  3606,   222,   223,   224,     0,     0,     0,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
       0,   236,     0,     0,     0,     0,     0,   239,     0,     0,
       0,   240,   241,   242,   243,  3607,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,     0,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,  3608,
       0,     0,   255,     0,     0,     0,   257,     0,     0,   258,
    3609,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,  -246,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,     0,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,  3610,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,     0,     0,   330,   331,   332,
     333,   334,     0,     0,     0,     0,     0,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,     0,     0,
     358,     0,   360,  -246,     0,   361,     0,     0,   363,     0,
       0,     0,   365,   366,  3611,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
       0,   399,     0,     0,     0,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,     0,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,     0,     0,     0,
       0,   434,     0,     0,   435,     0,     0,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,  -246,
       0,     0,   445,     0,     0,   447,     0,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -291,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3604,     0,   163,     0,   164,
       0,     0,     0,     0,   167,   168,  3605,   170,   171,     0,
     172,   173,     0,     0,   175,     0,   177,   178,   179,   180,
       0,   181,   182,     0,     0,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,     0,     0,     0,   202,   203,   204,     0,  -282,
       0,   205,     0,  -282,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,     0,     0,     0,
     217,   218,   219,     0,     0,   220,   221,  3606,   222,   223,
     224,     0,     0,     0,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,     0,   236,     0,     0,     0,     0,
       0,   239,     0,     0,     0,   240,   241,   242,   243,  3607,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,     0,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,  3608,     0,     0,   255,     0,     0,     0,
     257,     0,     0,   258,  3609,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,  -246,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,  3610,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   325,   326,   327,     0,   329,     0,
       0,   330,   331,   332,   333,   334,     0,     0,     0,     0,
       0,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,     0,     0,   358,     0,   360,  -246,     0,   361,
       0,     0,   363,     0,     0,     0,   365,   366,  3611,     0,
       0,     0,   368,   369,   370,   371,   372,   373,     0,   375,
       0,   376,     0,     0,     0,     0,   378,   379,   380,     0,
       0,     0,     0,   382,     0,     0,     0,   383,     0,   385,
       0,     0,   387,     0,     0,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,     0,   399,     0,     0,     0,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,     0,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,     0,     0,     0,     0,   434,     0,     0,   435,     0,
       0,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,  -282,     0,  -246,     0,     0,   445,     0,     0,   447,
       0,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,     0,  -291,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,     0,     0,     0,     0,   162,  3604,
       0,   163,     0,   164,     0,     0,     0,     0,   167,   168,
    3605,   170,   171,     0,   172,   173,     0,     0,   175,     0,
     177,   178,   179,   180,     0,   181,   182,     0,     0,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,     0,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,     0,     0,     0,   202,
     203,   204,     0,  -279,     0,   205,     0,  -279,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,     0,     0,     0,   217,   218,   219,     0,     0,   220,
     221,  3606,   222,   223,   224,     0,     0,     0,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,     0,   236,
       0,     0,     0,     0,     0,   239,     0,     0,     0,   240,
     241,   242,   243,  3607,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,     0,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,  3608,     0,     0,
     255,     0,     0,     0,   257,     0,     0,   258,  3609,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
    -246,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,     0,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
    3610,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   325,   326,
     327,     0,   329,     0,     0,   330,   331,   332,   333,   334,
       0,     0,     0,     0,     0,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,     0,     0,   358,     0,
     360,  -246,     0,   361,     0,     0,   363,     0,     0,     0,
     365,   366,  3611,     0,     0,     0,   368,   369,   370,   371,
     372,   373,     0,   375,     0,   376,     0,     0,     0,     0,
     378,   379,   380,     0,     0,     0,     0,   382,     0,     0,
       0,   383,     0,   385,     0,     0,   387,     0,     0,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,     0,   399,
       0,     0,     0,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,     0,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,     0,     0,     0,     0,   434,
       0,     0,   435,     0,     0,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,  -279,     0,  -246,     0,     0,
     445,     0,     0,   447,     0,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,  -291,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,     0,     0,
       0,     0,   162,  3604,     0,   163,     0,   164,     0,     0,
       0,     0,   167,   168,  3605,   170,   171,     0,   172,   173,
       0,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,     0,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,  3935,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3606,   222,   223,   224,     0,
       0,     0,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,     0,   236,     0,     0,     0,     0,     0,   239,
       0,     0,     0,   240,   241,   242,   243,  3607,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
       0,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,  3608,     0,     0,   255,     0,     0,     0,   257,     0,
       0,   258,  3609,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,  -246,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
       0,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,  3610,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   325,   326,   327,     0,   329,     0,     0,   330,
     331,   332,   333,   334,     0,     0,     0,     0,     0,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
       0,     0,   358,     0,   360,  -246,     0,   361,     0,     0,
     363,     0,     0,     0,   365,   366,  3611,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,     0,   399,     0,     0,     0,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,     0,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,     0,
       0,     0,     0,   434,     0,     0,   435,     0,     0,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,  -246,     0,     0,   445,     0,     0,   447,     0,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,     0,  -291,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,     0,     0,     0,     0,   162,  3604,     0,   163,
       0,   164,     0,     0,     0,     0,   167,   168,  3605,   170,
     171,     0,   172,   173,     0,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,     0,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,  -284,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,  3606,
     222,   223,   224,     0,     0,     0,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,   239,     0,     0,     0,   240,   241,   242,
     243,  3607,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,     0,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,  3608,     0,     0,   255,     0,
       0,     0,   257,     0,     0,   258,  3609,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,  -246,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,     0,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,  3610,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,     0,     0,   330,   331,   332,   333,   334,     0,     0,
       0,     0,     0,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,     0,     0,   358,     0,   360,  -246,
       0,   361,     0,     0,   363,     0,     0,     0,   365,   366,
    3611,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,     0,   399,     0,     0,
       0,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,     0,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,     0,     0,     0,     0,   434,     0,     0,
     435,     0,     0,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,  -246,     0,     0,   445,     0,
       0,   447,     0,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,     0,  -291,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,     0,     0,     0,     0,
     162,  3604,     0,   163,     0,   164,     0,     0,     0,     0,
     167,   168,  3605,   170,   171,     0,   172,   173,     0,     0,
     175,     0,   177,   178,   179,   180,     0,   181,   182,     0,
       0,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,  4037,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,  3606,   222,   223,   224,     0,     0,     0,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
       0,   236,     0,     0,     0,     0,     0,   239,     0,     0,
       0,   240,   241,   242,   243,  3607,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,     0,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,  3608,
       0,     0,   255,     0,     0,     0,   257,     0,     0,   258,
    3609,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,  -246,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,     0,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,  3610,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,     0,     0,   330,   331,   332,
     333,   334,     0,     0,     0,     0,     0,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,     0,     0,
     358,     0,   360,  -246,     0,   361,     0,     0,   363,     0,
       0,     0,   365,   366,  3611,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
       0,   399,     0,     0,     0,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,     0,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,     0,     0,     0,
       0,   434,     0,     0,   435,     0,     0,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,  -246,
       0,     0,   445,     0,     0,   447,     0,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -291,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3604,     0,   163,     0,   164,
       0,     0,     0,     0,   167,   168,  3605,   170,   171,     0,
     172,   173,     0,     0,   175,     0,   177,   178,   179,   180,
       0,   181,   182,     0,     0,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,     0,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,  4078,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,     0,     0,     0,
     217,   218,   219,     0,     0,   220,   221,  3606,   222,   223,
     224,     0,     0,     0,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,     0,   236,     0,     0,     0,     0,
       0,   239,     0,     0,     0,   240,   241,   242,   243,  3607,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,     0,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,  3608,     0,     0,   255,     0,     0,     0,
     257,     0,     0,   258,  3609,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,  -246,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,  3610,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   325,   326,   327,     0,   329,     0,
       0,   330,   331,   332,   333,   334,     0,     0,     0,     0,
       0,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,     0,     0,   358,     0,   360,  -246,     0,   361,
       0,     0,   363,     0,     0,     0,   365,   366,  3611,     0,
       0,     0,   368,   369,   370,   371,   372,   373,     0,   375,
       0,   376,     0,     0,     0,     0,   378,   379,   380,     0,
       0,     0,     0,   382,     0,     0,     0,   383,     0,   385,
       0,     0,   387,     0,     0,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,     0,   399,     0,     0,     0,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,     0,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,     0,     0,     0,     0,   434,     0,     0,   435,     0,
       0,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,  -246,     0,     0,   445,     0,     0,   447,
       0,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,     0,  -291,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,     0,     0,     0,     0,   162,  3604,
       0,   163,     0,   164,     0,     0,     0,     0,   167,   168,
    3605,   170,   171,     0,   172,   173,     0,     0,   175,     0,
     177,   178,   179,   180,     0,   181,   182,     0,     0,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,     0,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,     0,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,  -265,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,     0,     0,     0,   217,   218,   219,     0,     0,   220,
     221,  3606,   222,   223,   224,     0,     0,     0,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,     0,   236,
       0,     0,     0,     0,     0,   239,     0,     0,     0,   240,
     241,   242,   243,  3607,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,     0,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,  3608,     0,     0,
     255,     0,     0,     0,   257,     0,     0,   258,  3609,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
    -246,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,     0,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
    3610,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   325,   326,
     327,     0,   329,     0,     0,   330,   331,   332,   333,   334,
       0,     0,     0,     0,     0,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,     0,     0,   358,     0,
     360,  -246,     0,   361,     0,     0,   363,     0,     0,     0,
     365,   366,  3611,     0,     0,     0,   368,   369,   370,   371,
     372,   373,     0,   375,     0,   376,     0,     0,     0,     0,
     378,   379,   380,     0,     0,     0,     0,   382,     0,     0,
       0,   383,     0,   385,     0,     0,   387,     0,     0,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,     0,   399,
       0,     0,     0,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,     0,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,     0,     0,     0,     0,   434,
       0,     0,   435,     0,     0,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,  -246,     0,     0,
     445,     0,     0,   447,     0,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,  -291,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,     0,     0,
       0,     0,   162,  3604,     0,   163,     0,   164,     0,     0,
       0,     0,   167,   168,  3605,   170,   171,     0,   172,   173,
       0,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,     0,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3606,   222,   223,   224,     0,
       0,     0,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,     0,   236,     0,     0,     0,     0,     0,   239,
       0,     0,     0,   240,   241,   242,   243,  3607,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
       0,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,  3608,     0,     0,   255,     0,     0,     0,   257,     0,
       0,   258,  3609,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,  -246,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
       0,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,  3610,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   325,   326,   327,     0,   329,     0,     0,   330,
     331,   332,   333,   334,     0,     0,     0,     0,     0,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
       0,     0,   358,     0,   360,  -246,     0,   361,     0,     0,
     363,     0,     0,     0,   365,   366,  3611,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,     0,   399,     0,     0,     0,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,     0,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,     0,
       0,     0,     0,   434,     0,     0,   435,     0,     0,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,  -246,     0,     0,   445,     0,     0,   447,     0,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,     0,  -291,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,     0,     0,     0,     0,   162,  3604,     0,   163,
       0,   164,     0,     0,     0,     0,   167,   168,  3605,   170,
     171,     0,   172,   173,     0,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,     0,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,  3606,
     222,   223,   224,     0,     0,     0,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,   239,     0,     0,     0,   240,   241,   242,
     243,  3607,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,     0,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,  3608,     0,     0,   255,     0,
       0,     0,   257,     0,     0,   258,  3609,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,  -246,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,     0,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,  3610,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,     0,     0,   330,   331,   332,   333,   334,     0,     0,
       0,     0,     0,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,     0,     0,   358,     0,   360,  -246,
       0,   361,     0,     0,   363,     0,     0,     0,   365,   366,
    3611,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,     0,   399,     0,     0,
       0,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,     0,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,     0,     0,     0,     0,   434,     0,     0,
    3938,     0,     0,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,  -246,     0,     0,   445,     0,
       0,   447,     0,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,     0,     0,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,     0,     0,     0,     0,
     162,     0,     0,   163,     0,   164,     0,     0,     0,     0,
     167,   168,     0,   170,   171,     0,   172,   173,     0,     0,
     175,     0,   177,   178,   179,   180,     0,   181,   182,     0,
       0,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,     0,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
       0,   236,     0,     0,     0,     0,     0,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,     0,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,     0,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,     0,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,     0,     0,   330,   331,   332,
     333,   334,     0,     0,     0,     0,     0,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,     0,     0,
     358,     0,   360,     0,     0,   361,     0,     0,   363,     0,
       0,     0,   365,   366,     0,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
       0,   399,     0,     0,     0,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,     0,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,     0,     0,     0,
       0,   434,     0,     0,   435,     0,     0,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,     0,     0,   447,     0,     0,     0,   449
};

static const yytype_int16 yycheck[] =
{
       7,   591,   526,   734,   526,   913,   600,   601,  1095,   914,
     631,   632,   547,    20,     5,   827,    23,   636,  1095,  1039,
    1669,   121,  2009,   750,  1215,    32,  1568,  1275,   616,  2302,
     878,  2119,  2162,    21,   854,    42,   561,   948,  1340,  2193,
    2232,  2575,    30,  2186,  2187,  2188,    53,   668,    36,  2624,
    1118,  2646,  1632,  1945,     7,  2328,   476,  1125,   878,  3004,
    1965,  2419,  1030,   918,   918,  1970,  1159,  1366,  1823,   852,
     691,  1823,  1825,  1066,   693,  2977,  2220,   696,  1062,  1063,
    2197,  2198,   703,   704,   705,  2405,    93,  2407,  1754,  2177,
     605,   655,  2983,    23,  1289,  1358,   879,  1929,  2437,  2213,
    1929,  2755,  1826,  2297,    16,   533,  1830,  2221,   115,    33,
     117,  1306,  2278,   120,   121,   122,  3225,  1841,  1806,  1348,
      18,  1316,  1317,   711,   712,   713,    18,  1851,    24,  2283,
     137,  1695,   722,  1126,  1127,   723,    29,  1130,  1131,  1132,
    1133,    18,  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,
      15,    16,    58,  2307,  2308,  2271,    97,  1420,   117,  3232,
      16,    20,  2278,    93,   117,  2281,  2568,   120,    20,  2285,
     579,  3037,  3038,    18,  1929,  3041,    50,  1929,   587,   588,
    1668,    33,   127,  2299,  2300,  1769,  1778,  1779,    15,    16,
      61,    57,    58,  2309,  3060,    47,   142,  2434,    57,    58,
    3066,  2438,   171,  1795,  1892,    57,    58,   137,  2409,  1897,
      71,    15,    16,  2261,  2262,  1903,  1904,  1918,   263,  1907,
    1812,  1813,  1815,  2384,   224,  1797,    99,   752,    60,   158,
     142,   215,    63,    15,    16,    65,  1828,  1829,   177,  1831,
     224,    62,  1834,  1835,   142,   839,  1838,    24,   146,    90,
    1441,  1843,  2680,   246,   146,  1847,  1848,  1849,  1850,   113,
    3757,   207,  1854,   113,  1856,  1358,    15,    16,   132,   146,
    1862,   113,  3174,  1865,  1866,  1867,   148,    15,    16,    35,
     207,    60,   338,    33,   809,   177,   146,   880,   142,    61,
     198,    76,   142,    35,    60,    66,  1027,  3522,   113,   920,
     142,   146,  2274,   136,    15,    16,   417,  3582,    56,  1973,
      15,    16,     8,  2205,    15,    16,   212,   343,   136,   207,
      54,  1913,  1914,  1915,  1916,   115,   136,  1420,  2376,  2377,
     188,   125,    15,    16,  1998,    24,    45,   210,  2002,   177,
      15,    16,    15,    16,   753,    12,    12,   247,   117,    41,
    1081,    15,    16,    65,  1085,   508,   253,  1947,   229,   114,
     406,  2025,  2026,   463,   327,  2562,   177,  2031,   793,   414,
     354,   177,   282,   231,  2265,  3320,   264,   152,   972,   973,
     974,    15,    16,   552,  2048,  2049,   814,   264,    15,    16,
     286,  3257,   177,   519,   173,   177,    24,   497,    15,    16,
    3266,   585,   457,   591,   123,   180,   375,   173,   592,  3231,
     158,   599,   821,   166,   162,   378,  2080,   482,   224,   138,
    3286,    15,    16,  1328,   593,  3291,   174,    15,    16,  1156,
     340,   477,    15,    16,   331,   212,   247,  3328,    74,   195,
    3715,   172,   134,    15,    16,   598,  2643,   313,   217,   349,
      15,    16,  3274,   195,   325,   144,   463,   229,   465,   126,
     126,   390,   527,    50,  2607,  1029,   521,   593,   223,   415,
     166,  2219,   897,   480,   264,    10,   207,   484,  1042,   264,
      40,  3383,   593,   192,   237,   323,   493,  2631,   415,   353,
     497,   349,   499,  1348,  1348,   130,  2639,  1280,   505,   365,
    1283,   295,   390,  2695,   511,  4002,    15,    16,  1291,   286,
    2265,  2677,  3585,  2265,   290,    15,    16,   394,   333,  2921,
    1340,   348,   172,   212,   351,   570,   533,   534,  2420,  1622,
     280,  1121,  2698,   942,  1797,  1318,  1319,   593,  2226,   158,
    3431,  1129,    15,    16,   348,   552,   294,   351,   422,  3774,
      15,    16,  2384,  1748,   561,  2384,   563,   207,  1146,    78,
    1823,  2677,  2990,   394,  1419,  1419,   348,   574,   575,   351,
     402,  1870,   579,   599,   482,   505,   569,    68,   585,   350,
     587,   588,  2698,  2173,   212,   592,   593,   546,   429,   449,
     597,  1011,  1012,   593,  2795,   329,  2284,   286,  2286,   348,
     607,   380,   351,  3178,   611,  2293,  1599,   478,   592,  3718,
     348,  2772,  1032,   351,   380,  2179,   585,  1610,  2306,   490,
    1613,  1041,   575,   564,  2312,  1593,   519,  3222,  2212,  2384,
     503,  1358,  2384,  1053,  1054,  1055,   457,   348,   131,  2327,
     351,   330,   390,   348,   574,  1065,   351,   348,   655,   749,
     351,   597,   482,   559,   593,  1918,  2144,   602,   286,   571,
      15,    16,  2792,   519,   593,   348,  1929,   591,   351,    20,
    2263,   532,  2244,   348,   519,   348,   351,  2378,   351,   538,
    3019,  3020,    33,  1912,   348,   597,   538,   351,  3027,  2581,
    2582,  3030,  3031,  1420,   566,  3640,    47,   593,   575,   597,
    2292,   593,   330,  2675,  1797,   576,    57,    58,  3047,   716,
     562,   718,  2304,   578,   348,    15,    16,   351,   490,   593,
    1313,   348,  3061,  2771,   351,   434,  2375,  3066,  3067,  3068,
    3069,   348,   598,   158,   351,   568,   743,   744,   745,   591,
     747,   748,   749,   597,   751,   752,   753,   597,   552,  1264,
     568,   578,   508,   853,   348,   597,  1165,   351,   568,  1284,
     348,  2425,   541,   351,  3655,   348,   508,  3658,   351,   596,
     482,   390,  2915,  2664,   578,   541,   348,   546,  1206,   351,
     127,   788,    42,   348,  3021,  2449,   351,  2451,  2918,   593,
    2382,   744,   799,    15,    16,   748,   578,   486,   751,  2463,
     436,  2465,   809,   810,    15,    16,  1234,   814,  3699,  1218,
    2953,   593,   803,   448,   821,   591,  3761,  3011,  3055,  3056,
     551,  2987,  2486,  2967,  1233,  1918,  3063,  2971,  2418,   578,
    1352,    15,    16,  3070,   296,   422,  1929,    15,    16,   348,
     578,  2929,   351,   592,   593,   593,   853,   382,   348,  3503,
     317,   351,    66,  2967,   592,   593,   110,  2971,   486,  3217,
    2524,  3727,   508,  3729,   110,    15,    16,   578,   146,   799,
     389,  2987,    96,   578,   174,   348,   565,   578,   351,   370,
     810,   592,   593,   348,  2632,  2633,   351,   592,   593,   210,
     231,   592,   593,   384,   178,   578,   174,  1745,   349,    15,
      16,   551,  3518,   578,   593,   578,  2798,   914,   468,  2664,
     593,   144,  2664,  1428,   578,   280,  2903,   592,   593,   592,
     593,    15,    16,   185,    50,  1745,  1774,   487,   592,   593,
    1841,   550,  3507,    15,    16,   942,   150,   565,   945,   946,
    2772,   476,   207,  2772,   578,  1373,   370,   440,  1512,  2197,
    2198,   578,   512,   330,  1774,  1738,   282,  2623,   573,   593,
     307,   578,  3557,   142,  1747,   390,   593,  1750,  1751,    15,
      16,    15,    16,   197,   593,  3492,   593,  3879,   161,   212,
    3871,  2244,  2735,   100,   578,   992,   103,   994,   523,   264,
     578,   253,  3109,   348,   363,   578,   351,    15,    16,   593,
    2068,  1994,  2265,    11,  3324,   593,   578,   261,  1108,   500,
     593,  2206,  2736,   578,   340,   261,   946,  2772,  3909,   435,
    2772,   593,  1029,   365,  1612,   440,   115,  2011,   593,   564,
     329,   522,  2331,  2224,  1569,  1042,    15,    16,   424,    18,
    1460,   508,  3400,  2692,   506,  1145,   600,   601,   348,   185,
     180,   351,    15,    16,  2074,  2075,   316,  1912,  1912,  3202,
      15,    16,   992,   171,   994,  3209,  3210,   534,   247,   578,
    1797,   533,    15,    16,   571,  2162,   346,   361,   578,   341,
     139,   335,   423,   592,  2976,  2162,    31,   180,  1095,   335,
     149,  3608,  3609,   593,   233,   152,   593,   330,   591,  2067,
    1694,  1108,   595,  1628,   247,   578,   114,   196,   407,  2077,
     593,    15,    16,   578,  3648,  2378,  4061,   253,   457,   394,
     593,  2384,  2702,   180,  1224,   550,   348,   171,   593,   351,
     339,   177,   356,    15,    16,  2222,   350,   348,  1145,   316,
     351,   365,   593,  1150,    96,  2222,    15,    16,  1155,   373,
     333,  2244,  1677,  1678,  2456,   420,   365,  3773,  1165,    15,
      16,    15,    16,   340,   348,   142,   508,   351,    15,    16,
     348,   449,   456,   351,  3769,   264,   591,   212,  3753,   258,
      15,    16,  2846,   445,  1706,    15,    16,   538,   565,    15,
      16,  1918,   469,    15,    16,  1202,  3326,  1204,   348,  1206,
     152,   351,  1929,   329,  3799,   364,   349,   558,   559,    15,
      16,  1218,   177,   599,    15,    16,  1207,  1224,  3123,    22,
      15,    16,   591,   578,  2311,  1155,  1233,  1234,   180,  3746,
    3747,  2422,   348,   312,  2311,   351,   460,  1244,   593,   586,
     587,   588,   589,  3608,  3609,  1252,    15,    16,   440,   280,
     409,    69,   382,   486,   348,  1355,   221,   351,  1265,  1266,
    1267,  1268,  1269,  1270,   747,   591,   348,   375,  1259,   351,
     247,    15,    16,    69,  1281,  1282,   530,  1284,   578,   224,
     503,    15,    16,  1290,   530,  2378,    15,    16,   347,   382,
      12,  2384,   592,  3868,   370,   330,   422,  3229,   440,   508,
     575,   246,   348,  1310,   348,   351,     0,   351,    20,   445,
      15,    16,  1265,  1266,  1267,   207,  1269,    15,    16,  3836,
     188,    33,   448,    15,    16,   549,   603,    15,    16,  1282,
     348,   375,   565,   351,  3851,    47,   440,  1290,  1268,   440,
    1270,   377,   525,   351,   192,    57,    58,  3864,  1355,   440,
     153,   177,   142,    15,    16,   173,   578,     6,   389,   542,
     593,  2272,  1369,  2274,   317,    51,  1373,   578,  3560,   348,
    1361,   593,   351,   503,    60,   552,   177,   173,   146,  3509,
    1310,  1372,   593,   399,   349,   348,   234,   941,   351,   528,
     569,   231,   210,   348,   578,   512,   351,   540,   515,   591,
     578,  2664,   242,   482,   126,   348,    55,   146,   351,   593,
     503,   174,  3929,   552,   210,   593,   234,  1424,   597,  1426,
    1427,   152,  1429,  1430,  3941,  3942,   457,   111,   578,   440,
     382,  1438,   571,  1440,   593,    12,   990,   317,   234,  1369,
     440,  3346,   479,   593,   348,    15,    16,   351,   507,   591,
    2518,   486,    15,    16,    15,    16,    15,    16,   403,   440,
      15,    16,   578,   355,   166,   382,   348,   114,  3985,   351,
     507,  3559,   599,  1426,  1427,   391,  2563,   593,  3995,   348,
     440,   130,   351,  2071,   578,   114,  2563,   591,    15,    16,
     591,    12,   348,   256,   348,   351,   578,   351,   503,   593,
     591,   348,  3434,  3435,   351,  1512,  1513,    15,    16,  2772,
     127,   593,  4029,   348,  4031,   431,   351,  2244,   348,   535,
      41,   351,   348,   519,  4041,   351,   348,    12,   420,   351,
     565,    19,   578,  1633,   578,   237,  2130,  4054,   222,  4056,
     482,  4058,   348,    15,    16,   351,   592,   348,  4065,   126,
     351,   503,    16,   348,   166,   508,   351,  4074,  2551,   476,
     578,    82,   380,    15,    16,  1985,    87,   253,   364,   215,
    1577,   523,  4089,  4090,   592,  3224,  3941,  3942,   224,   348,
     591,   534,   351,    12,   380,    15,    16,   427,  4105,  4106,
     110,   591,   569,  4110,   223,   595,   556,   557,   585,   578,
     210,    15,    16,  2023,   348,   592,   523,   351,    15,    16,
     591,   455,   564,  1620,   348,   578,   177,   351,   560,   348,
     597,  1628,   351,   578,   234,   237,  1633,   329,   508,   592,
     118,   591,  1639,  3906,  1641,   578,  3779,   592,   591,  1646,
    1647,   126,  1649,   348,    15,    16,   351,   564,   168,   592,
     348,  2378,  3806,   351,   534,  1662,   348,  2384,  1665,   351,
     348,  2081,  2912,   351,    15,    16,    15,    16,    15,    16,
    1677,  1678,  1679,  1680,   578,   195,   511,   593,   327,  2772,
    1687,  1688,  1689,   203,  1675,     8,   348,   540,   592,   351,
     307,   349,  3679,   203,  1685,   205,   578,   126,  1705,   248,
     544,   528,   251,    15,    16,   226,    29,  1714,   354,   578,
     592,   591,   396,   192,    15,    16,  1646,  1647,  1709,  1649,
     206,   317,   578,   592,   578,   552,    15,    16,   930,   931,
    2980,   578,  1662,   391,   224,  1665,   592,   581,   592,   592,
     110,   261,  1749,   578,   393,   592,   395,   430,   578,  1679,
    1680,    77,   578,   243,  1761,   234,   578,  1687,  1688,  1689,
     188,  1768,   592,  2575,  2675,   967,  2614,   591,    94,  2291,
     592,   110,   578,   431,   295,   599,   465,   578,   348,   503,
     481,   351,  2802,   578,   485,   348,   592,   348,   351,   348,
     351,  1782,   351,   348,  2614,   484,   351,   592,   168,  1191,
    1791,  1792,  1194,    18,   488,  1197,  2826,  2827,  3706,   578,
    3708,  1802,  1803,  1804,  1805,   335,  1807,  1808,   505,  1749,
     210,   348,   505,   592,   351,  2736,   538,  1927,   206,   168,
      15,    16,    15,    16,   578,  2922,  2856,   358,  1768,  2622,
     348,   343,   391,   351,   578,  2922,   326,   327,   592,   578,
    3538,  3539,  3540,  3541,    15,    16,   195,  1864,   592,    15,
      16,  3109,   221,   592,   394,  1965,   549,    15,    16,   500,
    1970,  1878,   503,   578,    89,   188,   348,    15,    16,   351,
     578,   564,  1889,   413,    15,    16,   578,   592,  2975,    46,
     578,   261,    57,    58,   592,   177,   348,   110,  2975,   351,
     592,    66,  1893,  1894,   592,  1896,   571,  1898,  1899,  1900,
    1901,  1902,   508,   443,  1905,  1906,   578,   592,   348,  3006,
    1927,   351,   261,    16,   264,  1932,   110,   142,  1935,  3006,
     592,   146,    18,   597,   348,  1942,  1943,   351,   534,   599,
     559,   348,   463,   562,   351,  3119,    15,    16,  3122,   547,
      15,    16,  3494,    16,   345,   168,   591,   172,  1965,   174,
    2060,   540,   541,  1970,   543,   335,   545,   584,   585,   586,
     587,   588,   589,   188,   592,   593,   497,   348,   193,   476,
     351,   173,  1935,     6,   168,   528,   529,   161,   531,  2089,
     415,   129,   207,   592,   593,   591,   335,   348,   213,   348,
     351,   348,   351,    89,   351,    89,   221,  2682,   578,    11,
     530,   195,  1942,  1943,  3205,   578,   231,   578,   591,   578,
     592,   593,   592,   578,   591,   500,   591,   242,   503,   592,
     508,  3680,   247,   592,   127,  2560,   348,   592,  2713,   351,
     591,   256,   592,   593,   591,  2772,  2721,   348,   261,  2724,
     351,   578,   591,  2060,   591,  3075,   142,  3649,   591,   348,
     146,   593,   351,   591,   127,   592,   591,    30,   592,   593,
     578,   140,   591,    24,   549,  2082,  3764,   261,   591,  2604,
     591,  4068,  2089,   110,   592,   591,  3173,  2187,   174,  2189,
    2190,  3251,  3252,  2513,  3686,   591,  3173,  3689,  3690,  3691,
    3692,   316,   188,   155,  3264,   599,   578,   193,   591,    72,
    3270,  3775,  3776,    15,    16,  3289,   268,   269,  3292,    70,
     592,   591,   335,   592,   593,   340,   578,   213,   467,   213,
     591,  2231,  2232,  3293,   349,   221,  3296,    60,  2145,   340,
     592,   168,   591,  3792,   591,   231,    69,   231,   578,   592,
     593,   335,   326,   327,   591,  2162,   242,    80,   242,   333,
     530,   247,   592,   348,   578,   348,   351,   382,   351,   591,
     256,   578,   591,  2180,  2181,  3349,   591,   140,   592,    33,
    2187,   591,  2189,  2190,   486,   592,   591,   348,   591,  2180,
     351,   530,   348,   144,   591,   351,  3788,  3789,   440,   511,
     348,   430,  2302,   351,    58,  3797,   448,   578,   159,   591,
     348,   591,   427,   351,   307,  2222,   591,   348,   552,   591,
     351,   592,   591,  3128,  2231,  2232,   591,   578,  2328,   578,
     316,   578,   316,   448,   261,  3027,   592,   593,  3030,  3031,
     127,   592,   381,   592,   307,   592,   100,   592,   593,   103,
     173,   346,   404,   405,   340,  3047,   179,   111,   592,   593,
    3747,   212,   110,   349,  2271,   113,   578,   592,   593,    57,
      58,  2278,   487,   591,  2281,   592,   593,   578,  2285,   348,
    2287,   591,   351,   348,   591,  2273,   351,   210,   591,   578,
    2297,   592,  2299,  2300,  2282,  2302,   382,   591,  2289,  2290,
    2288,   591,  2309,   592,  2311,   592,   593,   591,   335,   500,
      56,   234,   591,  2320,   556,   557,   591,   530,  2912,   591,
     168,  2328,  2310,  2314,   591,   540,   591,  2315,  2335,  2336,
     591,    89,   591,  2321,  2322,   286,   551,   552,   592,   593,
     591,   427,   591,   427,   591,    24,   530,   195,   591,   591,
     591,   525,   592,   593,   569,   591,   571,  2945,   451,   452,
     592,   593,   448,  4051,  2537,  2538,  2539,   591,   542,   592,
     593,   261,   591,   324,   592,   593,   552,   592,   593,   330,
     511,   596,   597,  2374,   592,   593,  2980,   591,   451,   452,
    2320,    70,   591,   578,    70,   578,   591,  2404,  2405,   592,
     593,   487,   591,   487,  2577,  2578,  2579,   592,  1647,   592,
    1649,   591,   158,   261,   377,  2835,   162,   578,   136,   137,
     307,   591,   578,    99,   592,   593,    25,    26,   174,   591,
     578,   592,   591,    35,   340,   398,   592,   592,   593,   593,
     578,   364,  3929,   207,   592,   335,   591,   578,  1687,  1688,
    1689,   592,   593,   461,   540,   213,   591,   380,    57,    58,
      59,  2468,   591,  2883,   318,   428,   552,    66,   144,   359,
     110,    70,   591,   231,  2404,   592,   593,  2468,    70,    78,
     159,    70,   591,   569,   242,   571,   591,   335,   591,   582,
     583,   584,   585,   586,   587,   588,   589,   591,  3092,    48,
      99,   103,   177,   530,   592,   593,   592,   593,   110,   578,
     596,   597,   596,   578,   113,  3426,  3427,   116,   481,   582,
     583,   584,   585,   586,   587,   588,   589,  2534,   168,  2536,
    2537,  2538,  2539,   212,   210,   486,    25,   592,   593,   258,
    2547,   464,  4029,    48,  4031,   144,   593,    35,   294,   340,
      70,   435,   144,  2560,  3547,   195,  2563,  3462,   316,   161,
     586,    81,   540,  3468,   451,   452,   168,  4054,   592,   593,
    2577,  2578,  2579,    12,   120,   592,   593,    66,   592,   593,
     151,    70,    11,  2590,  1004,  1005,  1006,   592,   593,  2596,
    3677,  2598,   448,   195,   527,  2695,  1016,  2604,  3120,  2590,
     591,   455,  4089,  4090,   247,    25,    26,   286,   174,   285,
     482,   210,   592,   593,   565,   103,   482,  2547,   541,   218,
     212,   261,   110,   212,   113,   482,   302,  1047,   146,   147,
    1050,   592,   593,   280,   233,   592,   593,    57,    58,    59,
     530,  3661,   593,   258,   390,   324,    66,    89,   324,   500,
      70,   330,   198,  1073,  1074,   592,   593,  1077,    78,   261,
     143,   515,    79,   181,   592,   593,   593,    96,   342,   427,
    2677,   592,   190,   161,   496,  2682,  1096,  1097,   142,    99,
     168,   113,   530,   592,   593,   114,   285,   126,  2695,    99,
     544,  2698,   108,   113,   598,   335,   116,   584,   585,   586,
     587,   588,   589,   302,     6,  2696,  2713,   195,   591,   227,
     592,   593,   258,  2704,  2721,   317,   236,  2724,   592,   593,
     238,   592,   593,    98,   144,     4,   328,  2734,   439,   487,
     564,   333,   324,   335,   280,   324,  2743,    54,   330,  2746,
     407,   330,   155,  2750,    99,   234,   204,   265,     3,  2756,
      60,   180,  2925,  2760,     9,    10,  2763,   196,   357,    69,
     176,   592,   593,  2770,   592,   593,   365,   592,   593,   593,
      80,   213,   593,   261,    29,  2782,   592,   593,   207,   599,
      35,    66,  2789,    12,    39,   305,   202,   592,   593,   231,
     210,  3878,  3785,  3387,   592,   593,  3530,  3531,   218,    73,
     242,    75,   320,  2756,   508,    96,   568,   486,   400,   329,
     486,   400,   592,   233,  1082,  1083,  2746,   592,  3437,  3438,
    3439,   126,    89,  3728,     9,   501,   246,   593,   257,   317,
    3790,  3791,   599,   432,  2934,   381,  3648,   326,   327,   113,
    3440,  3441,   592,   389,   333,   333,   599,   335,    96,   592,
    2950,   340,  3473,  2931,  2932,  2893,  2894,  3156,  3157,  2789,
     134,   152,   591,   173,   246,   285,   592,    31,   599,   179,
    2877,   144,   392,   419,   316,   130,   593,   598,    48,  3401,
     571,   297,   302,   593,   500,   301,   565,   486,   591,   180,
     530,   380,   308,   167,   486,  3888,   280,   486,   340,   253,
     210,   280,   501,  2910,   593,   504,   508,   363,   593,   519,
     512,   457,  3332,   515,   519,  2922,  2923,   224,  2925,   210,
     593,   593,   593,   525,   234,   593,   586,  2934,   530,   528,
     174,   179,   534,  2940,   498,   225,   482,   357,   163,   174,
     593,   540,   545,  2950,   536,   365,   213,   536,   593,   459,
     368,  2958,   340,   382,   500,   444,   476,   503,   593,   122,
    3495,   591,   210,   127,   231,  3958,   257,   592,  2975,   593,
     146,   146,   388,   565,   146,   242,   565,   146,   146,  3600,
    2987,   146,   584,   585,   146,   427,   146,   146,  2995,   146,
    2997,   166,   146,   146,   593,   127,   146,   146,   146,  3006,
     146,   593,   146,   593,  3011,   547,   181,   574,  3015,   257,
     551,    46,   432,   180,   340,   190,  4103,   446,   593,   177,
     508,   586,   438,  3123,   512,  1445,  4103,   515,   585,  3553,
     469,   470,   471,   472,   473,   474,   475,   525,   592,  4126,
     592,   127,   530,    15,    16,   487,   534,  4134,   487,   316,
     177,   591,   541,   592,   592,   592,   127,  4134,   592,   592,
     224,   593,   237,   238,  3969,  3970,   486,  3972,   592,   592,
     380,   186,   501,   340,   503,   592,   592,   592,   592,   592,
     592,   501,   246,   592,   504,   593,   377,   593,  3188,  3080,
     265,   382,   224,   592,  1514,   591,   584,   585,  1518,   449,
    3107,   591,   589,   569,   211,   591,   394,  3098,   528,  4014,
     592,  4016,  4017,   478,   479,   593,  3123,   482,   483,   593,
     540,   486,   591,   488,   492,   186,  1546,   401,   591,   599,
       6,   177,   104,   105,   106,   107,   108,    13,    14,   592,
     389,   457,   448,   307,   593,   593,   174,    46,   323,    25,
      26,   567,   476,   224,   464,   446,   476,   476,   127,   314,
     427,  3168,   326,   327,   580,  3759,  3173,  3757,   283,   284,
    3694,   591,  3272,   288,   289,   307,   476,   476,   439,    55,
      69,  3188,   364,    59,    60,   364,   364,   519,    64,   122,
     232,   232,   501,  4101,    70,    12,    13,   501,   446,   122,
      46,   410,    78,   364,   379,   257,   591,   552,   364,    85,
     501,   362,   364,  3204,   505,   592,   464,   364,   599,   355,
     487,   307,  3229,    99,   140,   592,   220,   199,   200,   201,
     202,   541,   523,   220,   489,   599,   307,   113,   177,   403,
     116,   592,   572,   592,   572,   592,  3346,   123,   124,  3237,
     592,   599,   507,   501,   130,   503,   599,   505,   549,   514,
     599,   256,   138,   599,   599,  3272,   142,   519,   144,   519,
     508,    88,   519,   564,   575,   593,   253,    46,   591,   519,
     535,   346,  3273,   591,   177,   177,   177,   451,   452,   221,
    3297,   177,   228,   541,   571,   335,   172,  3304,   462,   352,
     117,   549,   599,  3403,    70,   599,   593,   231,   298,   231,
     502,    99,  3319,   130,    99,    81,   234,  3308,   599,   451,
     452,   234,   591,   519,   592,   297,   591,   299,   300,   301,
     593,   345,   208,   188,   210,   152,   308,   154,   307,  3346,
     424,   364,   218,   349,   586,   591,   591,   222,   165,   222,
     104,   105,   106,   107,   108,   121,   592,   233,  3880,   591,
     591,   188,   592,   508,   592,   451,   452,   188,   592,   186,
     592,   592,   599,   334,   334,   592,   348,   591,   586,   351,
     451,   452,  3389,   340,   207,   248,   364,  4118,   592,   754,
     593,   593,   592,   210,   599,   177,  3403,   244,   224,    66,
     217,   268,   231,   546,   593,   340,   231,   593,   378,   285,
     234,   340,  4002,   593,   234,  3422,   388,  4011,   582,   583,
     584,   585,   586,   587,   588,   589,   302,  3434,  3435,   621,
     306,   340,    70,    18,   340,   340,   461,    46,   440,   256,
     247,   442,   133,  3836,  3451,   199,   200,   201,   202,   591,
     582,   583,   584,   585,   586,   587,   588,   589,  3851,   651,
    3560,   591,   364,   592,   592,   437,   438,   571,   344,   591,
     236,  3864,   591,   349,   188,   667,  4070,   240,   591,   593,
     591,   357,   451,   452,  4008,   450,   146,   592,   364,   365,
     231,   231,   593,   591,  3501,  3502,   582,   583,   584,   585,
     586,   587,   588,   589,  4094,  3512,   113,   113,   376,   592,
     591,   582,   583,   584,   585,   586,   587,   588,   589,   599,
      74,   397,   714,   457,   129,   436,   592,    18,    46,   593,
     461,    33,   592,   409,   410,   411,   412,   592,  4128,   305,
     304,   592,   592,   297,   592,   299,   300,   301,   592,   592,
     236,   389,   349,  3560,   308,   592,   432,   349,   592,   571,
     326,   327,   221,   329,   476,   592,   383,   591,   599,   591,
      46,   592,  3502,   593,   193,   593,   304,   552,   394,   552,
     508,   508,   591,   591,   591,   402,   591,   591,   562,   113,
     502,   408,  3985,   546,   562,   567,   333,   234,  3605,   416,
     234,   335,  3995,  3610,   592,   591,   578,   579,   580,   593,
     486,    46,   592,   335,   583,   584,   585,   586,   587,   588,
     589,   304,   157,   440,    46,   501,   392,    46,   504,   508,
     508,   508,   234,   592,   388,   556,   453,   454,   592,    16,
     221,   328,   552,   557,   552,   593,   480,   424,  4041,   433,
     335,   571,   528,   346,   592,   503,   546,   269,   491,   174,
     141,   591,    30,  4056,   540,  4058,   591,   568,   174,    16,
    3677,  3678,  4065,   592,   591,   510,  3683,   122,   495,   360,
     122,  4074,   144,   437,   438,   600,   382,    68,   592,   592,
     146,   591,   402,  3793,   591,     5,   568,   177,    30,  3706,
      60,  3708,   346,  3710,   616,    60,   523,   334,   593,   621,
     476,   592,  4105,  4106,   492,   249,    46,  4110,    46,  3726,
     591,   597,   591,   221,   140,   346,   346,   597,   121,   546,
     129,   548,  3739,    46,    46,   139,    16,    46,   568,   651,
     140,   206,   263,   597,   600,   112,   135,   592,  3678,   592,
     591,    46,    46,    46,    52,   667,   272,   949,   266,   267,
     268,   269,   270,   271,   592,   273,   274,   275,   276,   277,
     278,   279,   433,   281,   592,   597,   146,   140,   511,   593,
     191,   593,   597,   592,    52,   593,  3793,   174,   414,   174,
     174,   511,   207,   113,   570,  3802,  3787,   335,   591,   711,
     712,   713,   714,   249,   557,   448,  3906,  3615,  1000,  1001,
     175,   723,  2093,   567,  3086,  2260,  1908,  1009,  1010,  3317,
     601,  1013,  1014,  1015,  3760,   579,   580,  3948,  1020,  3642,
     927,  1023,  1024,  3949,  1026,  3315,  1028,  3319,  3500,  4128,
    4082,  3492,  4091,  1035,  1036,  1037,  1038,  3492,  1040,  3492,
    3492,  3492,  3492,  3492,  3492,  3492,  1048,  1049,  3982,  1051,
    1052,  3492,  3829,  3963,  3982,  1057,    12,    13,  1060,  1061,
    3492,  3878,  1064,  3942,  3492,  1067,  1068,  1069,  1070,  1071,
    1072,  3492,  3855,  1075,  1076,  1364,  1078,   965,  1080,  3854,
    1622,  1366,  1084,  2552,  1086,  1087,   404,   405,  3508,  3906,
    2313,  2910,  3893,  3894,  3783,  3683,  1098,  1099,  3958,  3170,
    3888,  3965,  1104,  4008,  3547,  1107,  1419,  3924,  3925,  3101,
    3694,   473,  1114,  1115,  1116,  1870,  3430,  3015,  2405,  2775,
    1878,  2995,  2338,  2276,  3071,  3038,  3038,  3460,  3236,  3272,
    3880,  3281,    88,  2999,  2950,  3725,  3714,  3454,  1433,  3652,
    1940,  3512,  3468,  1877,  2997,  1147,  3963,  2331,  3241,  3591,
    1756,  2157,  1325,  2996,  1415,  1679,  2547,   946,  2171,   546,
    3555,   117,  1694,  2124,   840,  2468,  3951,  3657,  2470,  1971,
    3987,  2965,  3575,  1149,   130,  1042,  2223,  3994,  3429,  3924,
    2763,  3925,  1083,  2078,  3006,  3423,  3791,  1016,  4070,  3403,
    1943,  2176,  2120,  2161,  3173,  1206,   152,  2917,   154,  2916,
    3878,  1234,  4126,  2975,   536,  1438,   612,  1949,  1746,   165,
    1273,   526,  4122,  2734,  1638,  2899,  1239,  4004,  3915,  4042,
    4134,  3274,  3976,  2922,  1252,  1700,  2958,   949,  2606,  3199,
     186,  3411,  1665,  1242,   518,  2534,  3536,   822,  4055,   519,
    1424,  2054,   826,  4060,  3542,  2503,  1103,   469,  1199,   469,
    1252,   601,   601,    -1,   210,   601,    -1,    -1,  1260,    -1,
      -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4094,  1000,  1001,
      -1,    -1,    -1,    -1,    -1,    -1,  4103,  1009,  1010,  1011,
    1012,  1013,  1014,  1015,    -1,    -1,    -1,    -1,  1020,    -1,
     256,  1023,  1024,    -1,  1026,  4122,  1028,    -1,    -1,  4126,
    1032,  4128,    -1,  1035,  1036,  1037,  1038,  4134,  1040,  1041,
      -1,    -1,    -1,    -1,    -1,    -1,  1048,  1049,    -1,  1051,
    1052,  1053,  1054,  1055,    -1,  1057,    -1,    -1,  1060,  1061,
      -1,    -1,  1064,  1065,  1066,  1067,  1068,  1069,  1070,  1071,
    1072,    -1,    -1,  1075,  1076,    -1,  1078,    -1,  1080,    -1,
      -1,    -1,  1084,    -1,  1086,  1087,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    13,  1098,  1099,    -1,    -1,
      -1,    -1,  1104,    -1,    -1,  1107,    -1,    -1,    -1,    -1,
      -1,    -1,  1114,  1115,  1116,    -1,  1118,    -1,    -1,    -1,
      -1,    -1,    -1,  1125,  1126,  1127,    -1,  1129,  1130,  1131,
    1132,  1133,    -1,  1135,  1136,  1137,  1138,  1139,  1140,  1141,
    1142,    -1,    -1,    -1,  1146,  1147,    -1,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   402,    -1,    -1,  1451,
      88,    -1,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1526,    -1,    -1,   165,    13,    14,
    1252,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1260,   495,
      -1,    -1,    -1,    28,    -1,    30,    -1,    -1,   186,    34,
      -1,    -1,    -1,  1555,  1556,  1557,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    49,    -1,    -1,   523,    -1,    -1,
      55,    -1,   210,    -1,    59,    60,    -1,    -1,    -1,   217,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
     546,  1593,   548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1602,    -1,  1604,    88,    -1,    -1,    25,    26,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   256,    -1,
      -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,    -1,    57,    58,
      59,    -1,    -1,    -1,   129,   130,    -1,    66,    -1,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    -1,   142,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,    -1,  1674,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   113,    -1,    -1,   116,    -1,    -1,
      -1,   186,    -1,    -1,    -1,    -1,   191,    -1,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,  1451,
      -1,    -1,   217,    -1,   219,    -1,    -1,    -1,  1460,    -1,
      -1,    -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   402,    -1,    -1,   252,    -1,    -1,
     408,   256,    -1,    -1,    -1,    -1,    -1,    -1,   416,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,
      -1,    -1,   440,    -1,  1526,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   233,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1555,  1556,  1557,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1571,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,    -1,   344,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,
      -1,  1593,    -1,    -1,    -1,    -1,    -1,  1599,    -1,   364,
    1602,    -1,  1604,   302,    -1,   523,    -1,    -1,  1610,  1891,
    1612,  1613,   377,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   387,    -1,    -1,    -1,    -1,    -1,   546,    -1,
     548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   407,    -1,    -1,   410,    -1,   412,    -1,    -1,
     415,    -1,    -1,   418,    -1,    -1,   421,    -1,   357,    -1,
      -1,   426,    -1,   428,    -1,    -1,   365,    -1,    -1,  1951,
     435,    -1,  1674,  1955,    -1,   440,    -1,    -1,  1960,  1961,
      -1,    -1,    -1,   448,    -1,    -1,    -1,  1969,   453,    -1,
      -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1982,    -1,  1984,    -1,    -1,  1987,  1988,  1989,  1990,  1991,
      -1,    -1,    -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,  2003,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   432,  2016,    -1,  2018,    -1,  2020,  2021,
    2022,    -1,    -1,    -1,    -1,  2027,  2028,  2029,    -1,    -1,
      -1,    -1,  2034,  2035,  2036,    -1,  2038,    -1,  2040,    -1,
    2042,   526,  2044,    -1,  2046,    -1,    -1,    -1,    -1,  2051,
      -1,    -1,    -1,    -1,   539,    -1,    -1,    -1,   543,  2061,
      -1,   546,    -1,    -1,    -1,    -1,   551,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2077,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    -1,    -1,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   577,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    33,    -1,    -1,
      -1,    -1,    38,    -1,    40,    -1,    42,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,  1891,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1951,
      -1,    -1,   128,  1955,    -1,    -1,    -1,    -1,  1960,  1961,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1969,    -1,   145,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1982,    -1,  1984,  1985,    -1,  1987,  1988,  1989,  1990,  1991,
      -1,   167,  1994,   169,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2003,    -1,    -1,    -1,    -1,   182,   183,    -1,    -1,
      -1,    -1,    -1,    -1,  2016,    -1,  2018,    -1,  2020,  2021,
    2022,  2023,    -1,    -1,    -1,  2027,  2028,  2029,    -1,    -1,
      -1,    -1,  2034,  2035,  2036,    -1,  2038,    -1,  2040,    -1,
    2042,    -1,  2044,    -1,  2046,    -1,   222,    -1,    -1,  2051,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2061,
      -1,    13,    14,    -1,    -1,    -1,  2068,    -1,    -1,  2071,
      -1,    -1,    -1,    -1,   250,  2077,    28,    -1,    -1,  2081,
      -1,    -1,    34,   259,   260,    -1,   262,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    59,    60,    -1,
      -1,    -1,    -1,    -1,    -1,   291,   292,   293,    -1,    -1,
      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   309,   310,   311,    88,    -1,    -1,   315,
      -1,  2423,   318,    -1,    -1,    25,    26,  2429,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,
     336,   337,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
    2452,  2453,    -1,    -1,    -1,    -1,    -1,   129,   130,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    -1,    -1,    -1,    -1,   371,   372,    -1,    78,    -1,
    2482,    -1,   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2492,    -1,  2494,    -1,  2496,    -1,    -1,    -1,   170,    99,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   113,   186,    -1,   116,    -1,    -1,   191,
      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2541,
      -1,    -1,    -1,    -1,   144,   217,    -1,   219,   444,    -1,
      -1,    -1,   448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   458,   235,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     252,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2599,    -1,    -1,
      -1,  2603,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     210,    -1,    -1,   509,    -1,    -1,   512,    -1,   218,   515,
     516,   517,   518,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2646,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   558,   559,    -1,    -1,    -1,    -1,    -1,    -1,
    2672,    -1,   344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   580,   285,    -1,    -1,    -1,    -1,
      -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2423,   302,    -1,    -1,   377,    -1,  2429,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2452,  2453,    -1,    -1,    -1,   407,    -1,    -1,   410,    -1,
     412,    -1,    -1,   415,    -1,    -1,   418,    -1,    -1,   421,
      -1,  2753,  2754,    -1,   426,    -1,   428,   357,    -1,    -1,
    2482,    -1,    -1,   435,    -1,   365,    -1,    -1,   440,    -1,
    2492,    -1,  2494,    -1,  2496,    -1,   448,    -1,    -1,    -1,
      -1,   453,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,
      -1,  2513,    -1,    -1,    -1,    -1,  2518,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2807,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,    -1,    -1,    -1,    -1,  2541,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2551,
    2832,  2833,   432,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
      -1,  2853,    -1,    -1,   526,    -1,  2858,    -1,    -1,  2861,
      -1,    -1,  2864,  2865,    -1,    -1,    -1,   539,    57,    58,
      -1,   543,    -1,    -1,   546,    -1,    -1,  2599,    67,   551,
      69,  2603,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,
      -1,    -1,    -1,  2895,    -1,    84,    -1,    86,    -1,    88,
      -1,   501,    -1,    -1,   504,   577,    -1,    -1,    97,    -1,
      -1,    -1,    -1,    -1,  2916,    -1,    -1,    -1,    -1,   591,
      -1,    -1,    -1,    -1,  2646,    -1,    -1,    -1,   528,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2672,    -1,    -1,    -1,   143,   144,    -1,  2959,    -1,   148,
      -1,    -1,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2977,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   178,
      -1,   180,    -1,    -1,    -1,    -1,   185,    -1,   187,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     209,   210,    -1,    -1,    -1,   214,    -1,    -1,    -1,    -1,
      -1,  2753,  2754,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,
      13,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2807,    -1,    -1,    -1,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,
    2832,  2833,    -1,  2835,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    -1,   312,    -1,    78,    -1,    -1,    -1,    -1,
      -1,  2853,    85,   322,    -1,    -1,  2858,    -1,    -1,  2861,
      -1,    -1,  2864,  2865,    -1,    -1,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   343,    -1,    -1,    -1,    -1,    -1,
     113,  2883,    -1,   116,    -1,    -1,    -1,    -1,    -1,    -1,
     123,    -1,  3174,  2895,    -1,    -1,    -1,   130,    -1,    -1,
     369,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
      -1,   144,   381,   382,  2916,    -1,   385,   386,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3213,  3214,    -1,    -1,    -1,    -1,    -1,    -1,   172,
    3222,    -1,    -1,  2945,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2959,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2977,   445,   210,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,   457,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   482,    -1,    -1,    -1,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   503,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,    -1,  3338,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,
      -1,    -1,    -1,   306,  3356,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,    -1,    -1,    -1,   566,    -1,    -1,
      -1,  3383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   349,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,  3411,
      -1,    -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3174,    -1,    -1,    -1,    -1,   410,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   432,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3213,  3214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3516,    -1,  3518,    -1,  3520,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3530,  3531,
      -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      -1,   504,    -1,    -1,    -1,  3557,  3558,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3567,    -1,  3569,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3602,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3332,    -1,    -1,    -1,    -1,    -1,  3338,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3356,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3411,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3732,    -1,  3734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3744,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3769,    -1,    -1,
    3492,  3773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3516,    -1,  3518,  3799,  3520,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3530,  3531,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3547,    -1,    -1,    -1,    -1,
      -1,    -1,  3834,    -1,    -1,  3557,  3558,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3567,    -1,  3569,    -1,    -1,
    3852,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3879,    -1,    -1,
    3602,    -1,    -1,    -1,    -1,    -1,  3608,  3609,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3928,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3992,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3732,    -1,  3734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4022,    -1,  3744,    -1,  3746,  3747,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4044,  3765,    -1,    -1,    -1,  3769,    -1,    -1,
      -1,  3773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3785,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3799,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4095,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3834,    -1,  3836,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3851,
    3852,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3864,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3879,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3888,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3928,  3929,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3941,
    3942,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3958,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3985,    -1,    -1,    -1,    -1,    -1,    -1,
    3992,    -1,    -1,  3995,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4022,    -1,    -1,    -1,    -1,    -1,    -1,  4029,    -1,  4031,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4041,
      -1,    -1,  4044,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4054,    -1,  4056,    -1,  4058,    -1,    -1,    -1,
      -1,    -1,    -1,  4065,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4074,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4089,  4090,    -1,
      -1,    -1,    -1,  4095,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,  4105,  4106,    -1,    17,    -1,  4110,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    44,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,   239,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,   520,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    92,    93,    -1,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,   155,
      -1,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,   195,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,   242,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,    -1,    -1,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,    -1,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,    -1,   563,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,   585,
      -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,   595,
      -1,    -1,   598,   599,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    92,    93,    -1,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,   155,
      -1,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,   195,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,   242,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,    -1,    -1,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,    -1,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,    -1,   563,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,   585,
      -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,   595,
      -1,    -1,   598,   599,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,   155,
      -1,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,   195,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,   242,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,    -1,    -1,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,    -1,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,    -1,   563,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,   585,
      -1,    -1,    -1,    -1,   590,   591,   592,    -1,   594,   595,
      -1,    -1,   598,   599,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,   155,
      -1,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,   177,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,   195,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,   242,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,    -1,    -1,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,    -1,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,    -1,   563,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,   585,
      -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,   595,
      -1,    -1,   598,   599,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,   155,
      -1,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,   195,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,   242,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,    -1,    -1,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,    -1,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,    -1,   563,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,   585,
      -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,   595,
      -1,    -1,   598,   599,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,   155,
      -1,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,   195,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,   242,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,    -1,    -1,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,    -1,   332,   333,    -1,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,    -1,   563,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,   585,
      -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,   595,
      -1,    -1,   598,   599,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,   155,
      -1,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,   195,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,   242,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,    -1,    -1,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,    -1,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,    -1,   563,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,   585,
      -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,   595,
      -1,    -1,   598,   599,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,   155,
      -1,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,   195,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,   242,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,    -1,    -1,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,    -1,   332,   333,    -1,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,    -1,   563,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,   585,
      -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,   595,
      -1,    -1,   598,   599,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,    95,
      96,    -1,    98,    99,   100,   101,   102,   103,    -1,    -1,
      -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,   155,
      -1,   157,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,   195,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,   242,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,    -1,    -1,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,    -1,   332,   333,    -1,   335,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,    -1,   563,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,   585,
      -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,   595,
      -1,    -1,   598,   599,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    99,   100,
     101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,   110,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,   189,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,    -1,
      -1,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,   332,   333,    -1,   335,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,    -1,   563,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,   590,
     591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    80,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,   234,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
     246,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,   464,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   599,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    80,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,   234,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,   464,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,   599,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,   592,    -1,    -1,    17,    -1,    -1,    20,   599,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
     592,    -1,    -1,    -1,    -1,    17,   598,   599,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,   591,
      -1,    -1,    -1,    17,    -1,    -1,    20,   599,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,   221,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,
      -1,   485,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   599,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,    -1,     5,
     586,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,   599,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,   591,    -1,    -1,    -1,    17,
      -1,    -1,    20,   599,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
     598,   599,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,   599,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   599,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   599,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,
      -1,   485,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   599,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,   245,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,   598,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,   245,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   598,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,   245,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,   598,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,
      75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,    -1,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,   164,
     165,   166,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,   230,    -1,    -1,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,    -1,
     365,    -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,
      -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,
      -1,   416,    -1,    -1,   419,    -1,    -1,    -1,   423,   424,
     425,    -1,    -1,    -1,   429,   430,   431,   432,   433,   434,
      -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,
     445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
      -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,    -1,   482,    -1,    -1,
      -1,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,    -1,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,
     545,    -1,    -1,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,   570,    -1,    -1,   573,    -1,
      -1,   576,    -1,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,   593,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,   586,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,   586,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,   586,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,   586,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,   467,   468,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,   530,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,   146,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,   245,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,   113,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,   245,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
     113,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,   245,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    93,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,   245,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,    12,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
     245,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,   195,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,   245,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
     113,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,   245,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,   245,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    18,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    83,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
     177,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
     113,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
     113,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    -1,
      71,    -1,    73,    74,    75,    76,    -1,    78,    79,    -1,
      -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
      -1,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,    -1,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,    -1,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,   230,
      -1,    -1,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,    -1,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,    -1,
     411,    -1,   413,   414,    -1,   416,    -1,    -1,   419,    -1,
      -1,    -1,   423,   424,   425,    -1,    -1,    -1,   429,   430,
     431,   432,   433,   434,    -1,   436,    -1,   438,    -1,    -1,
      -1,    -1,   443,   444,   445,    -1,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,    -1,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
      -1,   482,    -1,    -1,    -1,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,    -1,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,    -1,    -1,    -1,
      -1,   542,    -1,    -1,   545,    -1,    -1,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,   576,    -1,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,
      -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    -1,    71,    -1,    73,    74,    75,    76,
      -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,   132,   133,   134,    -1,   136,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,    -1,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,   164,   165,   166,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
      -1,   198,    -1,    -1,    -1,   202,   203,   204,   205,   206,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,    -1,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,   230,    -1,    -1,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,    -1,   365,    -1,
      -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,    -1,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,    -1,   411,    -1,   413,   414,    -1,   416,
      -1,    -1,   419,    -1,    -1,    -1,   423,   424,   425,    -1,
      -1,    -1,   429,   430,   431,   432,   433,   434,    -1,   436,
      -1,   438,    -1,    -1,    -1,    -1,   443,   444,   445,    -1,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,    -1,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,    -1,   482,    -1,    -1,    -1,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,    -1,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,   545,    -1,
      -1,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,   568,    -1,   570,    -1,    -1,   573,    -1,    -1,   576,
      -1,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,
      73,    74,    75,    76,    -1,    78,    79,    -1,    -1,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
     133,   134,    -1,   136,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,    -1,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
     203,   204,   205,   206,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,   230,    -1,    -1,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,    -1,   365,    -1,    -1,   368,   369,   370,   371,   372,
      -1,    -1,    -1,    -1,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,    -1,   411,    -1,
     413,   414,    -1,   416,    -1,    -1,   419,    -1,    -1,    -1,
     423,   424,   425,    -1,    -1,    -1,   429,   430,   431,   432,
     433,   434,    -1,   436,    -1,   438,    -1,    -1,    -1,    -1,
     443,   444,   445,    -1,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,    -1,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,    -1,   482,
      -1,    -1,    -1,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,    -1,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,    -1,    -1,    -1,    -1,   542,
      -1,    -1,   545,    -1,    -1,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,   568,    -1,   570,    -1,    -1,
     573,    -1,    -1,   576,    -1,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,    78,
      79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
      -1,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,    -1,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,   164,   165,   166,   167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
      -1,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,   230,    -1,    -1,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,    -1,   365,    -1,    -1,   368,
     369,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,    -1,
     419,    -1,    -1,    -1,   423,   424,   425,    -1,    -1,    -1,
     429,   430,   431,   432,   433,   434,    -1,   436,    -1,   438,
      -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,    -1,   482,    -1,    -1,    -1,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,    -1,
      -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,   576,    -1,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,
      75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,    -1,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,   164,
     165,   166,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,   230,    -1,    -1,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,    -1,
     365,    -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,
      -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,
      -1,   416,    -1,    -1,   419,    -1,    -1,    -1,   423,   424,
     425,    -1,    -1,    -1,   429,   430,   431,   432,   433,   434,
      -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,
     445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
      -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,    -1,   482,    -1,    -1,
      -1,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,    -1,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,
     545,    -1,    -1,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,   570,    -1,    -1,   573,    -1,
      -1,   576,    -1,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    -1,
      71,    -1,    73,    74,    75,    76,    -1,    78,    79,    -1,
      -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,    -1,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,    -1,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,   230,
      -1,    -1,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,    -1,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,    -1,
     411,    -1,   413,   414,    -1,   416,    -1,    -1,   419,    -1,
      -1,    -1,   423,   424,   425,    -1,    -1,    -1,   429,   430,
     431,   432,   433,   434,    -1,   436,    -1,   438,    -1,    -1,
      -1,    -1,   443,   444,   445,    -1,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,    -1,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
      -1,   482,    -1,    -1,    -1,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,    -1,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,    -1,    -1,    -1,
      -1,   542,    -1,    -1,   545,    -1,    -1,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,   576,    -1,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,
      -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    -1,    71,    -1,    73,    74,    75,    76,
      -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,    -1,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,   164,   165,   166,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
      -1,   198,    -1,    -1,    -1,   202,   203,   204,   205,   206,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,    -1,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,   230,    -1,    -1,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,    -1,   365,    -1,
      -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,    -1,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,    -1,   411,    -1,   413,   414,    -1,   416,
      -1,    -1,   419,    -1,    -1,    -1,   423,   424,   425,    -1,
      -1,    -1,   429,   430,   431,   432,   433,   434,    -1,   436,
      -1,   438,    -1,    -1,    -1,    -1,   443,   444,   445,    -1,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,    -1,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,    -1,   482,    -1,    -1,    -1,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,    -1,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,   545,    -1,
      -1,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,   576,
      -1,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,
      73,    74,    75,    76,    -1,    78,    79,    -1,    -1,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,    -1,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
     203,   204,   205,   206,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,   230,    -1,    -1,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,    -1,   365,    -1,    -1,   368,   369,   370,   371,   372,
      -1,    -1,    -1,    -1,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,    -1,   411,    -1,
     413,   414,    -1,   416,    -1,    -1,   419,    -1,    -1,    -1,
     423,   424,   425,    -1,    -1,    -1,   429,   430,   431,   432,
     433,   434,    -1,   436,    -1,   438,    -1,    -1,    -1,    -1,
     443,   444,   445,    -1,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,    -1,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,    -1,   482,
      -1,    -1,    -1,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,    -1,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,    -1,    -1,    -1,    -1,   542,
      -1,    -1,   545,    -1,    -1,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,   570,    -1,    -1,
     573,    -1,    -1,   576,    -1,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,    78,
      79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
      -1,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,    -1,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,   164,   165,   166,   167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
      -1,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,   230,    -1,    -1,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,    -1,   365,    -1,    -1,   368,
     369,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,    -1,
     419,    -1,    -1,    -1,   423,   424,   425,    -1,    -1,    -1,
     429,   430,   431,   432,   433,   434,    -1,   436,    -1,   438,
      -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,    -1,   482,    -1,    -1,    -1,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,    -1,
      -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,   576,    -1,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,
      75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,    -1,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,   164,
     165,   166,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,   230,    -1,    -1,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,    -1,
     365,    -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,
      -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,
      -1,   416,    -1,    -1,   419,    -1,    -1,    -1,   423,   424,
     425,    -1,    -1,    -1,   429,   430,   431,   432,   433,   434,
      -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,
     445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
      -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,    -1,   482,    -1,    -1,
      -1,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,    -1,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,
     545,    -1,    -1,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,   570,    -1,    -1,   573,    -1,
      -1,   576,    -1,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    -1,    -1,
      71,    -1,    73,    74,    75,    76,    -1,    78,    79,    -1,
      -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,    -1,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,    -1,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,    -1,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,    -1,
     411,    -1,   413,    -1,    -1,   416,    -1,    -1,   419,    -1,
      -1,    -1,   423,   424,    -1,    -1,    -1,    -1,   429,   430,
     431,   432,   433,   434,    -1,   436,    -1,   438,    -1,    -1,
      -1,    -1,   443,   444,   445,    -1,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,    -1,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
      -1,   482,    -1,    -1,    -1,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,    -1,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,    -1,    -1,    -1,
      -1,   542,    -1,    -1,   545,    -1,    -1,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,    -1,    -1,   576,    -1,    -1,    -1,   580
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    28,    30,    34,    48,    49,    55,    59,
      60,    72,    88,   109,   117,   118,   119,   129,   130,   142,
     154,   170,   186,   191,   194,   217,   219,   235,   252,   256,
     344,   364,   377,   387,   407,   410,   412,   415,   418,   421,
     426,   428,   435,   440,   448,   453,   457,   481,   485,   526,
     539,   543,   546,   551,   577,   591,   602,   605,   606,   607,
     608,   609,   611,   616,   618,   623,   651,   783,   919,   957,
     960,   968,   970,   972,   975,   980,   982,   983,   988,   991,
     996,  1000,  1008,  1009,  1170,  1172,  1180,  1183,  1208,  1216,
    1227,  1233,  1246,  1249,  1252,  1258,  1262,  1266,  1268,  1269,
    1315,  1332,  1338,  1340,  1347,  1349,  1374,  1380,  1381,  1382,
    1383,  1430,  1438,  1439,    11,    96,   114,   180,   207,   257,
     382,   446,   501,   953,  1399,  1400,  1401,  1404,   253,   331,
     990,   500,   503,  1334,  1375,   508,  1306,   210,     5,     7,
       8,     9,    10,    11,    17,    20,    22,    23,    24,    25,
      26,    27,    28,    30,    34,    38,    41,    42,    43,    45,
      47,    48,    51,    54,    56,    57,    59,    61,    62,    63,
      64,    65,    67,    68,    70,    71,    72,    73,    74,    75,
      76,    78,    79,    81,    82,    84,    87,    90,    98,    99,
     100,   103,   108,   109,   114,   116,   120,   122,   123,   124,
     125,   129,   132,   133,   134,   138,   140,   141,   143,   144,
     145,   148,   150,   151,   152,   153,   154,   157,   158,   159,
     162,   163,   165,   166,   167,   170,   175,   176,   178,   180,
     182,   183,   184,   185,   187,   191,   192,   194,   197,   198,
     202,   203,   204,   205,   208,   209,   212,   214,   218,   219,
     223,   225,   226,   228,   229,   233,   236,   237,   240,   243,
     244,   250,   251,   253,   255,   257,   258,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     280,   281,   283,   284,   285,   286,   288,   289,   290,   294,
     295,   296,   297,   298,   301,   302,   304,   306,   308,   309,
     310,   311,   312,   313,   314,   315,   318,   319,   322,   323,
     324,   325,   329,   330,   337,   338,   339,   341,   342,   343,
     345,   356,   357,   358,   360,   361,   362,   363,   364,   365,
     368,   369,   370,   371,   372,   373,   377,   378,   379,   381,
     383,   384,   385,   386,   388,   389,   390,   393,   397,   398,
     399,   400,   401,   404,   405,   406,   408,   409,   411,   412,
     413,   416,   418,   419,   421,   423,   424,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   438,   439,   443,   444,
     445,   446,   450,   454,   455,   456,   457,   459,   460,   461,
     462,   463,   470,   471,   473,   474,   477,   480,   481,   482,
     485,   486,   488,   489,   490,   491,   492,   495,   496,   497,
     498,   500,   501,   504,   505,   506,   509,   510,   512,   513,
     514,   515,   521,   522,   526,   527,   528,   529,   532,   533,
     535,   536,   538,   539,   542,   545,   547,   549,   550,   557,
     560,   564,   565,   566,   567,   573,   574,   576,   577,   580,
     645,  1305,  1309,  1313,  1314,   280,  1334,  1334,   573,  1376,
      96,   179,   257,   446,   464,   501,   505,   541,   549,   627,
     628,   831,   832,   833,   906,  1217,  1171,    96,   152,   180,
     210,   257,   382,   446,   501,   505,   523,   549,   564,  1179,
    1309,   990,   644,   599,  1303,  1304,  1309,   617,  1181,   370,
      78,   389,  1267,    99,   210,   503,  1334,   990,   784,  1309,
    1263,   435,   549,  1334,   990,  1184,  1259,  1334,   644,  1376,
    1309,  1011,  1013,  1014,   346,  1317,  1234,   481,   485,   457,
     521,   457,   503,  1228,   370,  1339,  1209,  1309,    30,    72,
     140,   377,   398,   428,   481,  1432,   440,   591,  1010,     0,
     142,   603,   377,   158,   363,  1250,  1303,  1309,   146,   930,
    1309,   146,   645,   188,   645,   245,  1306,  1309,  1311,   732,
     733,   736,   759,  1309,   503,   152,   925,  1399,  1334,   971,
    1376,   997,   998,  1303,   652,   599,   519,   973,   984,    16,
    1377,   206,   834,   188,  1311,   734,   759,   644,   351,  1396,
    1400,  1401,  1402,  1403,  1404,   503,   832,   210,   207,   264,
     390,  1225,  1226,     7,    20,    27,    33,    35,    36,    37,
      39,    52,    53,    57,    58,    64,    67,    81,    85,    86,
      91,    93,    95,    96,   101,   102,   103,   108,   110,   113,
     155,   160,   161,   168,   182,   184,   189,   195,   202,   206,
     217,   220,   242,   250,   261,   282,   287,   297,   301,   303,
     307,   308,   309,   310,   311,   317,   326,   327,   328,   332,
     333,   335,   339,   359,   365,   366,   367,   371,   372,   374,
     388,   414,   415,   427,   433,   438,   483,   484,   489,   493,
     494,   499,   508,   512,   513,   514,   515,   524,   525,   526,
     530,   534,   549,   553,   554,   555,   556,   561,   563,   567,
     580,   584,   585,   590,   591,   594,   595,   598,   599,  1029,
    1030,  1031,  1032,  1036,  1039,  1040,  1041,  1042,  1043,  1044,
    1058,  1065,  1067,  1077,  1290,  1292,  1294,  1295,  1299,  1301,
    1305,  1309,   206,  1178,  1178,  1178,  1309,   188,  1178,  1178,
     759,  1178,   644,  1178,  1334,   612,  1253,    12,    13,    88,
     117,   130,   152,   154,   165,   186,   210,   217,   256,   383,
     402,   408,   416,   440,   453,   454,   495,   523,   546,   548,
    1350,  1352,  1354,  1355,  1309,   343,    63,   394,   599,  1311,
     115,   196,   264,  1186,  1309,  1029,  1270,   221,  1303,  1333,
    1334,    46,   785,   177,    33,   280,  1238,  1264,  1309,   644,
     992,  1334,   115,   264,  1187,  1215,   280,   389,   457,  1260,
    1261,   969,    12,  1348,  1352,   519,  1377,  1012,    12,   126,
     196,   469,   470,   471,   472,   473,   474,   475,   487,  1018,
    1019,  1020,  1316,    23,    34,    57,    58,    67,    69,    84,
      86,    88,    97,   144,   148,   151,   178,   180,   185,   187,
     209,   210,   214,   232,   253,   280,   312,   322,   343,   369,
     381,   382,   385,   386,   445,   457,   486,   503,   566,   879,
     905,  1235,  1238,  1239,  1241,  1323,   962,   963,   962,   962,
     571,   961,   962,  1175,  1303,  1309,  1334,  1215,    35,   195,
     508,  1291,  1307,  1431,  1431,  1431,  1431,  1431,  1013,  1010,
     592,   597,  1309,  1248,  1247,   296,   506,   533,   921,   547,
      93,  1311,  1312,   923,   738,   760,  1309,   922,   345,     6,
      55,   130,   327,   393,   395,   761,  1303,   645,   476,  1405,
    1406,   924,   981,  1174,  1175,   224,   593,  1004,  1005,   591,
     653,  1309,   619,  1174,  1174,    54,   329,   329,   407,  1378,
     326,   327,  1035,  1309,   737,   760,   173,     6,  1312,  1365,
    1366,   415,    10,   382,   523,   631,  1024,  1398,  1406,  1414,
    1418,  1419,  1425,   631,  1024,  1397,  1406,  1414,  1419,  1425,
    1399,  1404,   834,  1309,   177,  1218,  1222,  1223,  1309,  1225,
     591,   591,   591,  1039,   591,   591,   591,  1029,  1080,   591,
     591,   591,   591,   591,   591,   591,   591,   591,  1028,  1028,
     591,  1028,   591,   591,   591,   534,   591,  1290,   591,   591,
     591,   591,   591,   591,   591,   591,   591,   591,   591,  1029,
     591,   591,   591,  1078,  1079,  1299,  1309,   591,   591,   591,
     591,   591,   591,   591,   591,   591,  1029,   591,  1028,   591,
     591,   591,   591,   591,   591,   591,   591,   591,   591,   591,
     591,   591,   591,   591,   591,   591,   591,   591,   591,  1028,
     591,  1290,   591,   591,   591,  1290,   591,   591,    35,   195,
     508,   591,  1028,  1028,  1028,   591,   591,   591,   591,   591,
    1039,  1039,  1039,   440,   591,  1029,  1393,  1309,  1068,  1309,
      15,    16,   348,   351,   578,  1033,  1034,   146,   147,   181,
     190,   227,   238,   265,   320,  1037,    31,   127,   224,   246,
     307,   403,   451,   452,   462,   582,   583,   584,   585,   586,
     587,   588,   589,  1035,  1039,    66,   350,   593,  1307,   591,
     599,   155,  1309,   645,  1309,   340,   760,   645,  1311,   770,
    1239,   645,  1312,  1364,  1174,  1178,   552,   613,   120,   198,
     258,   280,   381,   389,   419,   457,   482,   500,  1254,  1255,
    1334,   381,  1353,   430,   430,   505,   549,   564,   346,  1357,
     500,  1359,    62,   457,  1356,    97,   564,  1358,   340,   593,
      18,   146,  1124,  1125,  1341,  1309,   953,   461,    76,   177,
     264,  1271,  1277,    48,   177,  1303,  1335,  1336,   989,   248,
     251,   391,   786,   790,   598,   610,  1306,   258,   993,  1312,
     994,   995,  1303,   976,   221,  1175,  1188,  1189,    48,   593,
    1174,  1353,   340,   435,  1379,  1378,   540,  1384,  1385,   586,
    1022,  1023,  1024,  1020,  1318,  1319,  1320,   151,   448,   246,
     569,  1245,   527,   591,    96,   152,   180,   382,   503,   523,
     564,  1245,    12,   842,  1311,   247,  1144,  1146,   177,   224,
    1240,  1242,    65,   482,   174,   482,   482,   482,   280,   500,
      65,   482,    12,    41,    82,    87,   226,   295,   358,   463,
     497,  1229,  1230,  1231,   198,   482,   482,   527,  1144,  1245,
    1242,   258,   143,    68,   370,   384,   500,   522,   482,   560,
     959,   406,   477,   964,   965,   958,    79,   953,   593,   342,
    1434,   496,  1435,   231,   423,  1433,   592,  1385,  1387,  1388,
    1389,   142,   604,  1008,  1251,  1291,  1309,   113,   829,   830,
     839,   840,   888,    99,  1028,   598,   646,     6,   739,   646,
     591,    98,   756,   756,   756,     4,   920,   926,   439,   564,
    1406,  1174,   519,   593,   113,   999,  1309,   998,   210,   234,
     903,  1006,   654,   655,  1029,   266,   267,   268,   269,   270,
     271,   273,   274,   275,   276,   277,   278,   279,   281,   404,
     405,   620,   621,   622,   158,   390,   974,    56,   158,   162,
     174,   294,   390,   985,   986,   987,    54,   407,   155,   626,
     739,    99,   756,   204,   593,  1024,  1024,  1024,   152,   180,
     180,  1406,  1303,   907,   908,  1176,  1177,  1303,   593,  1220,
     599,  1224,  1029,  1029,    12,   126,  1073,  1126,  1073,  1073,
    1073,   568,  1082,  1029,  1029,  1077,  1077,  1029,  1029,  1029,
     126,  1073,  1126,   592,  1029,   592,  1029,  1029,  1029,  1029,
    1299,   591,  1393,   104,   105,   106,   107,   108,   199,   200,
     201,   202,   297,   299,   300,   301,   308,   388,   437,   438,
     567,   579,   580,  1120,  1122,  1077,   100,   103,   512,   515,
    1123,   126,  1070,  1029,  1029,  1029,  1029,  1120,  1029,  1077,
    1079,     9,   593,   599,   126,  1073,  1029,  1029,   126,  1073,
    1029,  1029,  1077,  1077,  1077,  1029,  1024,  1063,  1064,  1029,
    1029,  1064,  1064,  1029,  1077,  1032,  1029,  1029,  1029,  1029,
    1029,  1029,  1073,  1073,  1029,  1029,   126,  1073,  1029,  1029,
     176,  1121,  1122,  1121,  1029,    44,   239,   520,  1029,  1029,
     592,  1300,  1301,  1309,  1073,  1073,  1029,  1029,  1394,  1394,
     592,   593,   592,  1029,   598,  1069,  1311,   599,  1029,  1029,
    1029,  1031,   161,   333,   525,   542,  1035,    12,    17,  1031,
    1038,  1032,  1032,   591,  1039,  1032,  1032,  1032,  1032,   246,
    1032,  1032,   220,  1032,   220,  1032,  1032,  1032,  1032,  1032,
      31,   224,   246,   403,  1311,  1039,  1029,  1062,  1063,  1309,
     599,  1303,   770,   330,   565,   771,   772,   144,   593,    50,
     422,   954,  1174,   598,   614,   615,    48,   571,   593,  1256,
     500,   591,  1367,  1367,  1367,  1367,   180,   382,   503,  1351,
    1355,  1309,   166,   323,  1309,  1342,  1343,  1188,  1306,   280,
     253,  1276,  1001,   280,  1125,   593,  1174,   789,   788,   363,
     796,   192,   234,  1311,    29,   519,  1265,   593,   519,   593,
     519,  1174,  1189,  1185,  1261,   177,   593,   180,   382,  1351,
    1309,    12,   126,  1391,   593,  1015,  1026,  1029,  1297,  1309,
     593,   185,   253,   341,   445,  1321,  1322,  1325,  1326,   224,
    1243,  1306,  1029,   586,   834,   645,   645,   645,  1303,   645,
    1303,   258,   312,   482,  1237,  1237,   261,   335,   530,  1147,
    1148,  1292,  1245,  1309,   645,  1245,  1312,   174,  1240,   645,
    1245,   225,   498,   163,   174,  1232,   593,  1240,  1303,  1242,
    1240,  1240,  1245,  1245,   545,   966,   593,   966,   459,   440,
     591,   595,  1083,  1084,  1085,  1086,  1087,  1096,  1097,  1104,
    1291,   368,  1436,   349,  1140,  1146,  1390,   830,    66,   879,
     122,  1311,    70,    81,   236,   305,   329,   392,   476,   648,
     650,   399,   535,   757,   758,   212,   753,   754,   755,   762,
     770,   772,    96,   197,   356,   365,   373,   460,   549,   629,
     630,  1306,    24,   286,   747,   748,   749,   762,   763,   764,
     770,   772,   740,   741,   747,     6,    13,    14,    25,    26,
      55,    59,    60,    64,    70,    78,    85,    99,   116,   123,
     124,   130,   138,   144,   172,   208,   210,   218,   233,   285,
     302,   306,   344,   349,   357,   364,   365,   397,   409,   410,
     411,   412,   432,   486,   501,   504,   528,   540,   781,   836,
     838,   839,   840,   931,   935,   937,   940,   946,   947,   948,
    1136,   340,   639,   927,   114,   223,  1303,  1306,  1175,   591,
     592,   593,   146,   146,   146,   146,   146,   146,   146,   146,
     146,   146,   146,   146,   146,   146,   146,   146,   593,   547,
     986,   828,   829,    70,   324,   400,   536,   750,   751,   752,
     762,   766,   767,   768,   769,   770,   772,   574,   551,   735,
      46,  1366,   180,   645,   645,   834,   645,  1309,   624,   528,
     552,   911,   340,   593,  1221,  1219,  1223,   177,   586,  1309,
    1125,   593,   592,  1073,   592,  1074,   592,   592,   592,  1029,
     136,   568,  1081,    18,   592,   552,   592,   592,   592,   593,
     552,   593,  1077,   592,   586,   592,   593,   593,   592,   592,
     592,   592,   177,   592,   593,  1066,   592,   593,   593,   593,
     585,   593,   592,   592,   591,  1299,  1309,  1073,   592,   592,
     592,  1073,   592,   593,   592,   592,   592,   592,   592,  1029,
     592,   593,   592,   592,   592,   592,   593,   592,   224,   592,
     593,   593,   593,   593,   592,   592,   592,   593,   177,   593,
    1073,   592,   592,   592,   593,   593,   593,   592,   177,  1029,
     177,  1029,   177,  1029,   177,   592,   593,   592,   592,   592,
     592,   593,   592,  1011,  1010,  1077,   596,   185,   253,   445,
    1324,   449,  1309,   161,   333,   525,   542,   591,    16,  1029,
    1393,   150,  1131,  1032,  1029,  1029,  1032,   591,  1039,  1032,
     592,   591,   599,  1309,  1173,   771,   146,   449,  1199,  1200,
    1312,   954,  1311,   593,   394,  1255,  1174,  1257,  1309,  1368,
    1369,   586,  1303,  1309,  1363,  1363,  1363,   146,   166,   181,
     190,   237,   238,   265,   323,   379,  1344,  1346,   569,  1127,
    1182,   211,  1002,  1003,  1303,   264,   394,   575,  1337,  1336,
     591,   794,   794,   110,   168,   195,   261,   335,   530,  1151,
    1154,  1155,   492,   797,   787,   591,  1029,  1306,  1312,  1312,
     995,  1303,   158,   390,   550,   977,   978,   979,   440,   448,
     556,   557,   591,   824,  1190,  1193,  1306,   186,  1363,  1363,
    1363,  1386,  1023,   177,   221,  1016,  1017,  1139,  1140,  1165,
    1025,   599,  1319,   113,   521,  1309,  1328,   313,   365,   598,
     879,  1327,  1306,   177,  1244,   592,  1309,   338,   593,   457,
    1245,   389,  1144,  1231,  1245,  1240,  1303,  1245,  1245,   622,
     967,   965,  1103,  1309,    89,   213,   231,   242,   316,   427,
     487,  1095,   448,   593,  1303,  1103,   593,   174,  1437,    46,
    1144,  1200,  1200,   314,  1306,   476,   476,   476,   476,   476,
     439,  1306,  1306,  1200,   593,   755,  1306,  1306,  1306,  1306,
     110,   168,   195,   261,   335,   530,  1150,  1306,  1306,   592,
     593,  1200,  1200,   593,   749,   742,   743,   762,   763,   764,
      69,    80,   179,   364,   464,   850,   853,   854,   901,   903,
     952,   952,   364,  1200,  1200,   952,  1200,   364,   364,  1200,
    1200,   519,   122,  1200,   232,   501,   173,   364,   380,   903,
     952,   232,  1200,   501,   122,  1200,  1200,  1200,  1200,   952,
     364,    46,  1200,   782,  1200,   364,   362,    18,   146,   519,
     956,   364,   364,  1200,   125,   295,  1309,  1200,  1200,  1200,
     836,   593,   780,   781,   935,   591,   599,   849,   855,  1302,
    1309,    74,   436,   410,   928,  1407,   380,  1116,  1117,  1118,
    1309,  1029,  1150,  1306,  1306,   110,   168,   261,   335,   530,
    1152,  1306,  1150,  1306,  1306,  1306,  1306,  1306,  1150,  1150,
    1306,  1306,  1150,   621,  1200,  1200,  1200,  1200,   593,   752,
    1311,   257,   159,   744,   745,   746,   762,   763,   764,   765,
     768,   769,   770,   772,   365,   508,  1309,  1426,     8,    29,
     730,   645,   591,   424,   246,   591,   774,   835,   837,   838,
      45,   192,   434,   913,   913,  1303,  1177,  1303,   552,  1127,
    1084,   599,  1224,   220,  1029,   592,   355,  1048,  1029,   511,
    1029,  1029,   140,    33,    58,   100,   103,   111,   318,   455,
     515,   544,  1075,    33,   880,  1311,  1029,   880,  1075,   592,
    1048,   592,   220,   220,  1029,  1029,  1077,  1029,  1029,  1029,
    1029,  1029,  1032,   592,  1048,   592,  1048,  1029,  1025,   177,
    1045,  1064,   572,   572,  1029,  1029,  1029,  1029,  1029,  1077,
    1048,  1048,   220,  1029,  1029,  1029,   592,  1048,  1029,  1029,
    1029,  1029,   177,  1029,   177,  1029,   177,  1029,  1029,  1048,
    1048,  1029,  1392,  1392,   592,   599,   599,   599,  1311,  1029,
    1393,  1031,   592,   593,   592,  1039,  1120,  1120,    16,  1029,
    1393,  1131,   207,   420,  1047,  1048,  1076,  1077,  1309,   841,
    1311,   615,   256,   592,   593,   599,   599,   519,   519,   519,
    1345,  1128,  1145,  1146,  1190,   508,  1308,   593,  1004,   575,
     253,  1024,    46,   591,   804,   794,   791,   792,   793,  1309,
     519,   978,   825,  1191,   591,  1196,  1201,  1196,   592,   824,
    1192,  1296,  1297,  1300,  1309,  1194,   346,   177,   177,   177,
    1009,   131,  1084,  1166,   174,   256,  1021,  1165,  1145,  1017,
      18,  1027,  1306,  1309,   586,  1309,   599,   228,   599,  1199,
     113,   880,   881,  1199,   174,  1199,   598,  1311,    33,   113,
     883,   884,  1311,  1152,  1236,   148,   566,  1148,  1148,   571,
     335,  1127,  1240,   593,  1098,  1103,  1083,   231,   231,   352,
    1105,   231,   242,   427,  1105,  1096,  1083,  1211,  1212,  1300,
    1085,  1125,  1100,  1101,  1150,   298,  1141,   113,   885,   887,
    1311,   881,    99,    99,   114,   223,   203,   773,  1151,   755,
     630,   773,   773,   749,   593,   743,   916,  1302,   903,   904,
     990,   904,    60,   173,   380,   541,   852,   902,   851,   852,
     916,  1302,   990,  1152,  1150,  1302,  1150,    12,   936,   944,
     945,  1309,   990,  1306,  1306,   879,  1200,  1150,   234,   944,
     234,  1302,  1302,   841,  1200,   166,   237,   329,   844,  1150,
    1152,  1152,  1302,   990,  1137,  1138,  1300,   113,  1150,   785,
    1306,   990,  1303,   990,   990,    73,    75,   113,   134,   167,
     401,   843,  1150,   841,   591,     6,   130,   948,   847,   848,
     849,   850,  1309,     8,   166,   955,   402,   851,   893,   856,
     599,   327,   378,    22,   153,   633,   519,   123,   138,   635,
     591,  1408,   592,   593,  1306,  1151,   773,   773,   752,   345,
     188,  1200,   593,   746,   508,   424,   591,   117,   217,   546,
     731,   632,  1420,   111,   222,   396,   488,   846,  1303,   246,
     364,   775,   780,   847,   780,   593,   837,   625,  1084,  1139,
    1127,  1125,  1029,   592,  1048,   591,  1029,   511,   591,   872,
     873,   873,   591,   867,   868,   872,   873,   222,   222,   592,
     592,   592,   592,   592,  1048,  1048,  1029,  1029,   592,   592,
    1072,  1140,   593,   593,   592,   593,   592,   224,  1059,  1060,
    1048,  1048,   592,  1027,   166,   237,  1046,  1047,   188,   188,
     592,   592,   592,   593,   592,   592,  1029,   592,   174,   592,
     592,   593,  1048,   592,   593,   593,   592,  1029,   592,  1029,
     592,  1029,   592,   592,   592,  1395,  1395,   599,   917,   592,
    1077,  1031,   592,   593,   592,   334,   334,  1048,   592,  1369,
     586,   586,  1365,  1365,  1365,   591,  1029,   340,  1206,  1272,
    1003,   207,  1007,   802,  1032,   790,   364,   805,   806,   592,
     593,  1312,  1018,  1197,  1198,  1300,  1202,   593,   591,  1193,
     592,   592,   593,   599,  1384,   177,  1365,  1365,  1365,  1127,
    1127,   132,   353,  1161,  1162,  1167,   546,   224,  1306,  1309,
     599,  1309,   244,  1309,    12,    33,   113,   340,  1029,  1331,
      66,   886,  1029,  1312,   339,   365,   508,  1330,  1324,  1199,
    1144,   268,  1245,   622,  1387,  1099,   596,   231,  1096,  1105,
    1105,   231,   340,   340,   552,   593,  1210,  1199,  1114,  1115,
    1018,  1029,  1142,  1298,   743,   938,  1029,   234,   234,   904,
     916,   908,   130,   448,   936,   949,   933,   593,  1151,   881,
    1306,   916,   954,  1306,   950,   936,   593,    19,   118,  1143,
     936,   941,   936,  1257,   592,   593,  1309,  1303,    32,    33,
      38,    40,    42,    43,    58,   100,   103,   111,   128,   145,
     167,   169,   182,   183,   222,   250,   259,   260,   262,   291,
     292,   293,   309,   310,   311,   315,   318,   336,   337,   371,
     372,   396,   444,   448,   458,   509,   512,   515,   516,   517,
     518,   558,   559,   580,   857,   860,   861,   862,   863,   864,
     865,   866,  1309,   378,  1029,  1029,   340,   639,   645,   340,
      70,   640,  1309,  1409,    18,  1117,   591,  1309,   773,   746,
     846,  1427,   340,   340,   656,   657,   659,  1309,   461,  1303,
     824,   592,   207,   415,   777,  1278,   837,   591,  1127,   247,
    1149,  1120,   364,  1049,  1029,   110,   261,   335,   530,    20,
      33,    47,   538,   879,   889,   335,  1120,  1120,   442,  1071,
    1029,  1029,  1077,    42,   316,   592,   571,  1061,  1048,   591,
     591,  1029,  1120,  1029,  1029,  1029,  1029,   592,   592,   592,
     592,  1309,   592,  1077,   417,  1370,  1370,  1370,   113,  1029,
    1204,  1205,   133,  1278,   240,  1025,   192,   234,   807,   592,
     593,   793,  1022,   593,  1199,  1203,  1204,  1201,  1195,  1193,
    1296,  1309,  1365,  1145,   188,  1132,  1308,  1308,   598,  1163,
    1164,  1311,   450,   586,   394,   413,   443,  1329,   887,  1199,
     591,   591,  1328,  1029,   146,   592,  1086,  1083,  1096,   231,
     231,  1083,  1096,  1089,  1088,  1090,  1212,  1127,  1205,  1112,
    1113,  1022,   593,  1143,   363,   591,   939,   916,   908,   591,
     113,   113,   855,   985,   945,   886,   857,   932,  1138,   942,
     944,   934,   592,   848,   894,   872,   872,   873,   867,   376,
     858,   867,   867,   889,    58,   558,   861,   863,   889,   889,
      58,   559,   559,   562,   867,   859,   873,   873,   889,   872,
     873,    25,    66,    70,   113,   333,   340,   380,   444,   541,
     875,   876,   877,   892,  1035,   562,   872,   889,    33,   872,
     890,   872,   872,   873,   591,   868,   874,   599,  1120,   457,
    1306,   129,   929,   592,   593,  1410,  1411,   629,   461,   215,
     224,   354,   660,   661,   662,   663,  1024,   436,   592,   593,
     658,  1306,   592,   592,   835,    18,   827,   914,   915,  1309,
    1148,   592,    46,   349,   391,   431,  1050,  1054,  1055,   592,
     592,   592,   592,   890,    20,   538,   879,   891,   890,   880,
     593,   592,   592,  1291,   592,   592,   593,   592,   304,   236,
     389,   349,   349,   592,   592,   592,   592,   592,   592,   592,
      61,   229,   325,   478,   490,   576,  1361,  1362,   571,  1371,
    1371,  1371,   592,   593,  1207,   221,   592,   591,   795,   591,
     808,  1309,   806,   826,  1198,  1205,   592,  1387,    46,   193,
    1129,  1168,  1311,   593,   304,    71,   532,   394,  1330,   508,
     508,  1199,  1306,  1125,   340,  1092,  1096,  1096,   340,  1094,
    1029,  1029,   591,  1139,   172,   207,   551,  1107,  1108,  1111,
    1102,  1298,  1151,   805,   591,   591,   914,   103,   512,   515,
     584,   585,  1293,  1294,   955,   875,   990,   943,   977,   282,
     340,   591,   895,   897,   898,   899,   455,   544,   581,   869,
     870,   871,   591,   869,   869,   889,   562,   869,   591,   889,
     869,   885,  1306,   328,   878,  1293,   546,   113,   234,   877,
     234,   333,   889,   890,   889,   890,   869,   335,   869,  1309,
     634,   641,   642,  1309,   440,   591,  1412,   592,  1306,   592,
     593,   658,  1415,   633,  1421,   659,   857,   776,   780,   591,
     824,   592,   593,  1143,   591,  1077,    46,   592,    31,    92,
     220,   531,  1029,  1056,   880,   890,   335,  1029,   304,   157,
      46,    46,   508,   508,   508,    16,  1360,   186,   283,   284,
     288,   289,  1372,  1373,  1205,   234,  1273,  1024,   798,   800,
     801,  1309,   556,   809,   845,  1017,  1145,  1133,  1130,  1139,
     879,   882,  1164,   592,   592,  1331,    16,  1091,   552,  1093,
     552,  1119,  1309,  1149,   903,   903,  1108,   845,  1143,   592,
     914,   914,   592,  1295,  1295,   951,   221,   178,   361,   456,
     117,   546,   896,  1309,   899,   871,   918,  1291,   918,  1028,
     328,   557,   480,   636,    52,    63,   164,   206,   230,   241,
     343,   425,   643,   681,   683,   684,   685,   687,   688,   689,
     690,   691,   692,   694,   702,   703,   706,   717,   720,   722,
     723,  1305,  1310,  1314,  1011,  1010,   571,  1413,  1428,   662,
    1309,  1303,   638,   639,   424,  1387,   777,   824,   778,   233,
     571,   909,   910,   911,   912,   915,   335,  1051,  1298,  1056,
     433,  1029,   171,   375,  1057,  1057,   592,   592,  1051,  1051,
    1361,   346,  1150,  1150,  1150,  1150,  1373,   546,   503,   802,
     491,   803,   592,   593,   224,   243,    70,    99,   210,   285,
     302,   324,   501,   821,   822,   823,  1239,  1021,  1134,  1298,
    1029,  1145,   881,  1169,   269,  1029,   591,  1029,   591,   592,
     593,   174,  1106,  1106,   592,   592,   909,   955,   591,    50,
     329,   422,   448,   900,   900,   592,   593,   592,   593,   592,
    1028,  1029,   141,   637,   704,   707,  1309,   177,   323,   695,
     682,  1310,  1310,  1309,   686,   606,   263,   414,   570,   726,
      30,   724,   600,   592,    51,    60,   253,   647,   857,   174,
     635,  1422,   592,  1384,  1200,   360,   912,  1143,   592,   593,
    1053,  1054,  1143,    16,  1120,   592,   592,  1213,  1214,  1300,
    1303,  1025,  1151,   799,   801,   591,   510,  1200,   122,   122,
    1200,  1200,  1200,  1200,   591,   816,   823,   144,   571,   593,
    1135,  1143,   382,  1156,    68,  1279,   146,  1119,  1119,  1309,
     188,   231,   349,  1110,  1109,   893,   909,   805,     5,   113,
     333,   897,  1309,   889,  1291,   889,  1029,  1029,   568,   709,
     713,   177,  1309,   697,   698,  1029,   665,   680,   681,   683,
     685,   687,   689,   690,   691,   692,   694,   702,   717,   720,
     722,   665,   727,   725,   718,   721,  1387,    60,   346,    60,
     121,   648,   649,  1035,  1429,  1024,   640,   857,   779,  1150,
    1305,  1298,   334,  1052,  1056,  1057,  1048,  1048,   593,  1199,
    1274,   592,   803,   813,   814,   815,  1032,   290,   591,   810,
     811,   812,  1306,  1200,  1200,   261,   335,   530,  1153,  1154,
    1153,  1151,  1311,   492,   817,   818,  1200,    90,   429,  1298,
    1309,   139,   149,   347,   507,  1280,  1281,   249,  1282,  1152,
     592,   592,    46,    46,   591,   591,   592,   705,   714,   136,
     713,   716,   221,   140,  1029,   140,   680,   597,   545,  1029,
     666,   726,   724,   346,   346,   121,   680,  1416,   129,  1423,
    1387,  1143,   166,   237,  1214,  1205,   882,   592,   593,   290,
     815,  1306,  1306,   819,   592,   593,   841,  1143,  1157,    46,
      46,   139,    46,  1281,   479,   507,  1283,  1284,    16,  1116,
    1118,   568,   708,   710,  1029,   665,   140,   693,   206,   511,
     263,   597,   729,   129,   112,   664,   667,   719,  1310,   719,
     135,   641,   647,  1052,  1275,   814,   592,   592,   820,  1311,
     818,   591,  1291,  1291,    46,  1291,    46,    46,  1284,   272,
     592,   592,   711,   710,   716,   715,    52,   696,  1309,   699,
    1029,   728,    83,   156,   672,   678,  1309,   140,   680,   597,
     433,  1424,  1279,   821,  1024,  1158,  1159,  1160,  1291,  1291,
    1291,   146,  1029,   140,   511,   593,   665,   140,   665,   191,
     593,   668,    77,    94,   597,  1417,   680,  1282,  1029,   592,
     593,  1150,   712,    52,   665,  1309,   700,   414,   140,   174,
    1309,   857,   174,   174,   680,   207,  1285,  1025,  1160,   511,
     136,   137,   701,   570,   669,   113,   679,   467,   675,  1150,
     670,   671,   335,   591,  1286,   665,   665,   697,   466,   468,
     673,   674,   675,   677,  1035,  1309,  1029,   557,   676,  1008,
     249,   592,   598,  1287,  1288,  1300,   448,  1289,   593,   680,
     175,  1307,  1311,   592,   593,  1213,   674,  1288
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 1389 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:
#line 1401 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                ! lip->stmt_prepare_mode &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:
#line 1426 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:
#line 1499 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:
#line 1514 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:
#line 1524 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:
#line 1531 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:
#line 1541 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:
#line 1548 "sql_yacc.yy"
    {}
    break;

  case 73:
#line 1563 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:
#line 1575 "sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:
#line 1583 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:
#line 1594 "sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 77:
#line 1600 "sql_yacc.yy"
    {}
    break;

  case 80:
#line 1610 "sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:
#line 1614 "sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:
#line 1618 "sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:
#line 1622 "sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:
#line 1626 "sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:
#line 1630 "sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 86:
#line 1635 "sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:
#line 1639 "sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:
#line 1643 "sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:
#line 1647 "sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:
#line 1651 "sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:
#line 1655 "sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 93:
#line 1664 "sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:
#line 1668 "sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 95:
#line 1684 "sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:
#line 1688 "sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 97:
#line 1699 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.db_type= ha_default_handlerton(thd);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
          }
    break;

  case 98:
#line 1718 "sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if (!lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
          }
    break;

  case 99:
#line 1733 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_CREATE_INDEX;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(7) - (7)].table),
                                                        NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_ADD_INDEX;
            lex->col_list.empty();
            lex->change=NullS;
          }
    break;

  case 100:
#line 1746 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key;
            if ((yyvsp[(2) - (12)].key_type) != Key::FULLTEXT && lex->key_create_info.parser_name.str)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            key= new Key((yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str, &lex->key_create_info, 0,
                         lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty();
          }
    break;

  case 101:
#line 1762 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 102:
#line 1767 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 103:
#line 1774 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 104:
#line 1780 "sql_yacc.yy"
    {}
    break;

  case 105:
#line 1782 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 106:
#line 1786 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 107:
#line 1790 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 108:
#line 1794 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 109:
#line 1805 "sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 112:
#line 1819 "sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 113:
#line 1823 "sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 114:
#line 1827 "sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 115:
#line 1831 "sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 116:
#line 1835 "sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 117:
#line 1839 "sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 118:
#line 1843 "sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 119:
#line 1850 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 120:
#line 1870 "sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 121:
#line 1881 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 123:
#line 1888 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 124:
#line 1894 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 125:
#line 1896 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            (yyval.num)= 1;
          }
    break;

  case 126:
#line 1901 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 127:
#line 1906 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 128:
#line 1914 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 129:
#line 1921 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 131:
#line 1929 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 132:
#line 1935 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 134:
#line 1941 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 135:
#line 1947 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 136:
#line 1955 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 137:
#line 1957 "sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 138:
#line 1964 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 139:
#line 2007 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 153:
#line 2039 "sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 154:
#line 2054 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 155:
#line 2070 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 156:
#line 2088 "sql_yacc.yy"
    {}
    break;

  case 157:
#line 2089 "sql_yacc.yy"
    {}
    break;

  case 158:
#line 2093 "sql_yacc.yy"
    {}
    break;

  case 159:
#line 2094 "sql_yacc.yy"
    {}
    break;

  case 160:
#line 2100 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 161:
#line 2102 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 162:
#line 2104 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 163:
#line 2106 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 164:
#line 2108 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 165:
#line 2110 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 166:
#line 2112 "sql_yacc.yy"
    {}
    break;

  case 167:
#line 2117 "sql_yacc.yy"
    { }
    break;

  case 168:
#line 2118 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 169:
#line 2119 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 170:
#line 2124 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 171:
#line 2128 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 172:
#line 2135 "sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 173:
#line 2143 "sql_yacc.yy"
    {}
    break;

  case 178:
#line 2159 "sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 179:
#line 2163 "sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 184:
#line 2181 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 185:
#line 2201 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 190:
#line 2238 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 191:
#line 2263 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 192:
#line 2264 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 193:
#line 2265 "sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 194:
#line 2266 "sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 195:
#line 2270 "sql_yacc.yy"
    {}
    break;

  case 197:
#line 2275 "sql_yacc.yy"
    {}
    break;

  case 199:
#line 2281 "sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 200:
#line 2285 "sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 201:
#line 2311 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 202:
#line 2319 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            lex->sphead->restore_lex(YYTHD);

            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 203:
#line 2376 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

	    if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 204:
#line 2391 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
	                              ctx->current_var_count());
            if (i == NULL ||
	        sp->add_instr(i) ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)))
              MYSQL_YYABORT;
          }
    break;

  case 205:
#line 2407 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
	          sp->add_instr(i) ||
	          sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 206:
#line 2439 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
	    if (i == NULL ||
                sp->add_instr(i) ||
	        ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 207:
#line 2464 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 208:
#line 2468 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            lex->sphead->restore_lex(YYTHD);
          }
    break;

  case 209:
#line 2486 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 210:
#line 2487 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 211:
#line 2493 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 212:
#line 2495 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 213:
#line 2500 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 214:
#line 2523 "sql_yacc.yy"
    { /* mysql errno */
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 215:
#line 2531 "sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, 5);
            (yyval.spcondtype)->sqlstate[5]= '\0';
          }
    break;

  case 216:
#line 2547 "sql_yacc.yy"
    {}
    break;

  case 217:
#line 2548 "sql_yacc.yy"
    {}
    break;

  case 218:
#line 2553 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 219:
#line 2557 "sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 220:
#line 2566 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 221:
#line 2573 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 222:
#line 2580 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 223:
#line 2590 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 224:
#line 2605 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 225:
#line 2622 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 226:
#line 2623 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 240:
#line 2644 "sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 241:
#line 2646 "sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 242:
#line 2650 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 243:
#line 2659 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            sp->restore_lex(thd);
          }
    break;

  case 244:
#line 2706 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 245:
#line 2708 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            sp->restore_lex(YYTHD);
          }
    break;

  case 246:
#line 2733 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 247:
#line 2739 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 248:
#line 2748 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 249:
#line 2801 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 250:
#line 2844 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 251:
#line 2864 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 252:
#line 2881 "sql_yacc.yy"
    {}
    break;

  case 253:
#line 2886 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 257:
#line 2912 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 258:
#line 2932 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 259:
#line 2954 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 260:
#line 2956 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
	        sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->restore_lex(YYTHD);
          }
    break;

  case 261:
#line 2971 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 262:
#line 2983 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 268:
#line 3003 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 269:
#line 3009 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 270:
#line 3020 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 271:
#line 3028 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 272:
#line 3036 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 277:
#line 3054 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 278:
#line 3058 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 279:
#line 3068 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 280:
#line 3077 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 281:
#line 3081 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 282:
#line 3089 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 283:
#line 3098 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 285:
#line 3113 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 286:
#line 3131 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 287:
#line 3148 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 288:
#line 3149 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 289:
#line 3154 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 290:
#line 3170 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 291:
#line 3186 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 292:
#line 3193 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 293:
#line 3201 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 294:
#line 3210 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 295:
#line 3238 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 296:
#line 3248 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 297:
#line 3250 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
	    /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->restore_lex(YYTHD);
          }
    break;

  case 298:
#line 3265 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 299:
#line 3276 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 300:
#line 3278 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD);
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 301:
#line 3296 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 302:
#line 3298 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 303:
#line 3303 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 304:
#line 3305 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 305:
#line 3307 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 309:
#line 3341 "sql_yacc.yy"
    {}
    break;

  case 310:
#line 3343 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 311:
#line 3353 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 312:
#line 3359 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 317:
#line 3382 "sql_yacc.yy"
    {}
    break;

  case 364:
#line 3476 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 365:
#line 3484 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 366:
#line 3492 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 367:
#line 3500 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 368:
#line 3512 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 369:
#line 3524 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 370:
#line 3529 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 371:
#line 3534 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 372:
#line 3542 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 373:
#line 3550 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 374:
#line 3558 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 375:
#line 3566 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 376:
#line 3574 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 377:
#line 3582 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 378:
#line 3590 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 379:
#line 3603 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 380:
#line 3616 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 383:
#line 3635 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 384:
#line 3640 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 385:
#line 3652 "sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 386:
#line 3654 "sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 387:
#line 3704 "sql_yacc.yy"
    {}
    break;

  case 388:
#line 3707 "sql_yacc.yy"
    {}
    break;

  case 389:
#line 3709 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 390:
#line 3723 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 391:
#line 3741 "sql_yacc.yy"
    {}
    break;

  case 392:
#line 3744 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 393:
#line 3745 "sql_yacc.yy"
    {}
    break;

  case 394:
#line 3749 "sql_yacc.yy"
    {}
    break;

  case 395:
#line 3751 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 396:
#line 3752 "sql_yacc.yy"
    {}
    break;

  case 397:
#line 3754 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 398:
#line 3755 "sql_yacc.yy"
    {}
    break;

  case 399:
#line 3783 "sql_yacc.yy"
    {}
    break;

  case 401:
#line 3789 "sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX *lex= Lex;
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-partition");
              MYSQL_YYABORT;
            }
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     "partitioning", "--with-partition");
            MYSQL_YYABORT;
#endif

          }
    break;

  case 403:
#line 3821 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 404:
#line 3833 "sql_yacc.yy"
    {}
    break;

  case 406:
#line 3842 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->list_of_part_fields= TRUE;
            lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 407:
#line 3848 "sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 408:
#line 3849 "sql_yacc.yy"
    {}
    break;

  case 409:
#line 3851 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 410:
#line 3852 "sql_yacc.yy"
    {}
    break;

  case 411:
#line 3854 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 412:
#line 3855 "sql_yacc.yy"
    {}
    break;

  case 413:
#line 3859 "sql_yacc.yy"
    {}
    break;

  case 414:
#line 3861 "sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 415:
#line 3865 "sql_yacc.yy"
    {}
    break;

  case 416:
#line 3866 "sql_yacc.yy"
    {}
    break;

  case 417:
#line 3870 "sql_yacc.yy"
    {}
    break;

  case 418:
#line 3871 "sql_yacc.yy"
    {}
    break;

  case 419:
#line 3876 "sql_yacc.yy"
    {
            if (Lex->part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 420:
#line 3887 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_part_fields= FALSE;
            lex->part_info->part_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->part_func_string= func_string;
            lex->part_info->part_func_len= expr_len;
          }
    break;

  case 421:
#line 3902 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_subpart_fields= FALSE;
            lex->part_info->subpart_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->subpart_func_string= func_string;        
            lex->part_info->subpart_func_len= expr_len;
          }
    break;

  case 422:
#line 3917 "sql_yacc.yy"
    {}
    break;

  case 423:
#line 3919 "sql_yacc.yy"
    { 
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            lex->part_info->no_parts= no_parts;
            lex->part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 424:
#line 3934 "sql_yacc.yy"
    {}
    break;

  case 425:
#line 3936 "sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 426:
#line 3937 "sql_yacc.yy"
    {}
    break;

  case 427:
#line 3940 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->subpart_type= HASH_PARTITION;
            lex->part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 428:
#line 3945 "sql_yacc.yy"
    {}
    break;

  case 429:
#line 3949 "sql_yacc.yy"
    {}
    break;

  case 430:
#line 3950 "sql_yacc.yy"
    {}
    break;

  case 431:
#line 3955 "sql_yacc.yy"
    {
            if (Lex->part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 432:
#line 3966 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_CONST_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 433:
#line 3981 "sql_yacc.yy"
    {}
    break;

  case 434:
#line 3983 "sql_yacc.yy"
    {
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->no_subparts= no_parts;
            lex->part_info->use_default_no_subpartitions= FALSE;
          }
    break;

  case 435:
#line 3998 "sql_yacc.yy"
    {}
    break;

  case 436:
#line 4000 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->no_parts != 0)
            {
              if (part_info->no_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->no_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 437:
#line 4022 "sql_yacc.yy"
    {}
    break;

  case 438:
#line 4023 "sql_yacc.yy"
    {}
    break;

  case 439:
#line 4028 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 440:
#line 4048 "sql_yacc.yy"
    {}
    break;

  case 441:
#line 4053 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 442:
#line 4063 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (lex->part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (lex->part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 443:
#line 4084 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 444:
#line 4099 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= LIST_PARTITION;
          }
    break;

  case 445:
#line 4117 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            lex->part_info->defined_max_value= TRUE;
            lex->part_info->curr_part_elem->max_value= TRUE;
            lex->part_info->curr_part_elem->range_value= LONGLONG_MAX;
          }
    break;

  case 446:
#line 4129 "sql_yacc.yy"
    {
            if (Lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            if (Lex->part_info->curr_part_elem->has_null_value)
            {
              my_parse_error(ER(ER_NULL_IN_VALUES_LESS_THAN));
              MYSQL_YYABORT;
            }
          }
    break;

  case 449:
#line 4150 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (!((yyvsp[(2) - (3)].p_elem_value)->unsigned_flag))
              part_info->curr_part_elem->signed_flag= TRUE;
            part_info->curr_part_elem->range_value= (yyvsp[(2) - (3)].p_elem_value)->value;
          }
    break;

  case 450:
#line 4159 "sql_yacc.yy"
    {}
    break;

  case 451:
#line 4160 "sql_yacc.yy"
    {}
    break;

  case 452:
#line 4165 "sql_yacc.yy"
    {
            part_elem_value *value_ptr= (yyvsp[(1) - (1)].p_elem_value);
            partition_info *part_info= Lex->part_info;
            if (!value_ptr->unsigned_flag)
              part_info->curr_part_elem->signed_flag= TRUE;
            if (!value_ptr->null_value &&
               part_info->curr_part_elem->
                list_val_list.push_back(value_ptr))
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
          }
    break;

  case 453:
#line 4182 "sql_yacc.yy"
    {
            Item *part_expr= (yyvsp[(1) - (1)].item);
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Name_resolution_context *context= &lex->current_select->context;
            TABLE_LIST *save_list= context->table_list;
            const char *save_where= thd->where;

            context->table_list= 0;
            thd->where= "partition function";

            part_elem_value *value_ptr= 
              (part_elem_value*)sql_alloc(sizeof(part_elem_value));
            if (!value_ptr)
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
            if (part_expr->walk(&Item::check_partition_func_processor, 0,
                                NULL))
            {
              my_error(ER_PARTITION_FUNCTION_IS_NOT_ALLOWED, MYF(0));
              MYSQL_YYABORT;
            }
            if (part_expr->fix_fields(YYTHD, (Item**)0) ||
                ((context->table_list= save_list), FALSE) ||
                (!part_expr->const_item()) ||
                (!lex->safe_to_cache_query))
            {
              my_error(ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR, MYF(0));
              MYSQL_YYABORT;
            }
            thd->where= save_where;
            value_ptr->value= part_expr->val_int();
            value_ptr->unsigned_flag= TRUE;
            if (!part_expr->unsigned_flag &&
                value_ptr->value < 0)
              value_ptr->unsigned_flag= FALSE;
            if ((value_ptr->null_value= part_expr->null_value))
            {
              if (Lex->part_info->curr_part_elem->has_null_value)
              {
                my_error(ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              Lex->part_info->curr_part_elem->has_null_value= TRUE;
            }
            else if (part_expr->result_type() != INT_RESULT)
            {
              my_parse_error(ER(ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.p_elem_value)= value_ptr; 
          }
    break;

  case 454:
#line 4240 "sql_yacc.yy"
    {
            if (Lex->part_info->no_subparts != 0 &&
                !Lex->part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 455:
#line 4253 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (part_info->no_subparts != 0)
            {
              if (part_info->no_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->no_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 456:
#line 4279 "sql_yacc.yy"
    {}
    break;

  case 457:
#line 4280 "sql_yacc.yy"
    {}
    break;

  case 458:
#line 4285 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_no_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 459:
#line 4318 "sql_yacc.yy"
    {}
    break;

  case 460:
#line 4323 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 461:
#line 4327 "sql_yacc.yy"
    {}
    break;

  case 462:
#line 4328 "sql_yacc.yy"
    {}
    break;

  case 463:
#line 4332 "sql_yacc.yy"
    {}
    break;

  case 464:
#line 4333 "sql_yacc.yy"
    {}
    break;

  case 465:
#line 4338 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 466:
#line 4340 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            lex->part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 467:
#line 4346 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 468:
#line 4348 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 469:
#line 4350 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 470:
#line 4352 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 471:
#line 4354 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 472:
#line 4356 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 473:
#line 4365 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->lock_option= TL_READ_DEFAULT;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 474:
#line 4381 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 475:
#line 4385 "sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 476:
#line 4395 "sql_yacc.yy"
    {}
    break;

  case 477:
#line 4396 "sql_yacc.yy"
    {}
    break;

  case 478:
#line 4400 "sql_yacc.yy"
    {}
    break;

  case 479:
#line 4401 "sql_yacc.yy"
    {}
    break;

  case 480:
#line 4405 "sql_yacc.yy"
    {}
    break;

  case 481:
#line 4406 "sql_yacc.yy"
    {}
    break;

  case 482:
#line 4410 "sql_yacc.yy"
    {}
    break;

  case 483:
#line 4411 "sql_yacc.yy"
    {}
    break;

  case 484:
#line 4415 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 485:
#line 4416 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 486:
#line 4420 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 487:
#line 4421 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 488:
#line 4425 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 489:
#line 4429 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 490:
#line 4430 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 498:
#line 4451 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 499:
#line 4456 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            WARN_DEPRECATED(yythd, "6.0", "TYPE=storage_engine",
                            "'ENGINE=storage_engine'");
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 500:
#line 4463 "sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 501:
#line 4468 "sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 502:
#line 4473 "sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 503:
#line 4478 "sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 504:
#line 4483 "sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 505:
#line 4488 "sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 506:
#line 4493 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 507:
#line 4508 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 508:
#line 4514 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 509:
#line 4519 "sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 510:
#line 4524 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 511:
#line 4529 "sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 512:
#line 4534 "sql_yacc.yy"
    {
            /* Move the union list to the merge_list */
            LEX *lex=Lex;
            TABLE_LIST *table_list= lex->select_lex.get_table_list();
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->create_info.merge_list.elements--;
            lex->create_info.merge_list.first=
              (uchar*) (table_list->next_local);
            lex->select_lex.table_list.elements=1;
            lex->select_lex.table_list.next=
              (uchar**) &(table_list->next_local);
            table_list->next_local= 0;
            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 515:
#line 4551 "sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 516:
#line 4556 "sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 517:
#line 4561 "sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 518:
#line 4566 "sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 519:
#line 4568 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 520:
#line 4570 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 521:
#line 4572 "sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 522:
#line 4578 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 523:
#line 4586 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 524:
#line 4604 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
              {
                my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                         (yyvsp[(4) - (4)].charset)->name, cinfo->default_table_charset->csname);
                MYSQL_YYABORT;
              }
              Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
              Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 525:
#line 4621 "sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 526:
#line 4644 "sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 527:
#line 4657 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 528:
#line 4658 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 529:
#line 4659 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 530:
#line 4660 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 531:
#line 4661 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 532:
#line 4662 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 533:
#line 4666 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 534:
#line 4667 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 535:
#line 4668 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 536:
#line 4672 "sql_yacc.yy"
    {}
    break;

  case 538:
#line 4677 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 539:
#line 4678 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 540:
#line 4679 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 541:
#line 4680 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 547:
#line 4696 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 548:
#line 4703 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (7)].key_type) != Key::FULLTEXT && lex->key_create_info.parser_name.str)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Key *key= new Key((yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].simple_string), &lex->key_create_info, 0,
                              lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 549:
#line 4719 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(3) - (8)].simple_string) ? (yyvsp[(3) - (8)].simple_string) : (yyvsp[(1) - (8)].simple_string);
            Key *key= new Key((yyvsp[(2) - (8)].key_type), key_name, &lex->key_create_info, 0,
                              lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 550:
#line 4730 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(1) - (8)].simple_string) ? (yyvsp[(1) - (8)].simple_string) : (yyvsp[(4) - (8)].simple_string);
            const char *fkey_name = (yyvsp[(4) - (8)].simple_string) ? (yyvsp[(4) - (8)].simple_string) : key_name;
            Key *key= new Foreign_key(fkey_name, lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            key= new Key(Key::MULTIPLE, key_name,
                         &default_key_create_info, 1,
                         lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 551:
#line 4754 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 552:
#line 4758 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 556:
#line 4773 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; }
    break;

  case 557:
#line 4774 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 558:
#line 4778 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(2) - (2)].simple_string); }
    break;

  case 559:
#line 4783 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 560:
#line 4792 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 561:
#line 4805 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 562:
#line 4806 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 563:
#line 4807 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 564:
#line 4809 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 565:
#line 4814 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 566:
#line 4818 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 567:
#line 4823 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 568:
#line 4828 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 569:
#line 4832 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 570:
#line 4837 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 571:
#line 4842 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 572:
#line 4848 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 573:
#line 4853 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 574:
#line 4859 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 575:
#line 4863 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 576:
#line 4868 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 577:
#line 4873 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_YEAR; }
    break;

  case 578:
#line 4875 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 579:
#line 4877 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 580:
#line 4879 "sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 581:
#line 4892 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 582:
#line 4894 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 583:
#line 4899 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 584:
#line 4904 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 585:
#line 4916 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 586:
#line 4921 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 587:
#line 4926 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 588:
#line 4931 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 589:
#line 4933 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 590:
#line 4935 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 591:
#line 4937 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 592:
#line 4939 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 593:
#line 4941 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 594:
#line 4943 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 595:
#line 4945 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 596:
#line 4947 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 597:
#line 4949 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 598:
#line 4951 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 599:
#line 4953 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 600:
#line 4955 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 601:
#line 4957 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 602:
#line 4965 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 603:
#line 4966 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 604:
#line 4968 "sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 605:
#line 4972 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 606:
#line 4973 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 607:
#line 4974 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 608:
#line 4975 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 609:
#line 4976 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 610:
#line 4980 "sql_yacc.yy"
    {}
    break;

  case 611:
#line 4984 "sql_yacc.yy"
    {}
    break;

  case 612:
#line 4985 "sql_yacc.yy"
    {}
    break;

  case 613:
#line 4989 "sql_yacc.yy"
    {}
    break;

  case 614:
#line 4990 "sql_yacc.yy"
    {}
    break;

  case 615:
#line 4994 "sql_yacc.yy"
    {}
    break;

  case 616:
#line 4995 "sql_yacc.yy"
    {}
    break;

  case 617:
#line 4996 "sql_yacc.yy"
    {}
    break;

  case 618:
#line 4997 "sql_yacc.yy"
    {}
    break;

  case 619:
#line 4998 "sql_yacc.yy"
    {}
    break;

  case 620:
#line 5002 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 621:
#line 5003 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 622:
#line 5004 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 623:
#line 5005 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 624:
#line 5006 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 625:
#line 5011 "sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 626:
#line 5016 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 627:
#line 5018 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 628:
#line 5023 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 629:
#line 5025 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 630:
#line 5027 "sql_yacc.yy"
    {}
    break;

  case 631:
#line 5032 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 632:
#line 5040 "sql_yacc.yy"
    {}
    break;

  case 633:
#line 5041 "sql_yacc.yy"
    {}
    break;

  case 634:
#line 5045 "sql_yacc.yy"
    {}
    break;

  case 635:
#line 5046 "sql_yacc.yy"
    {}
    break;

  case 636:
#line 5050 "sql_yacc.yy"
    {}
    break;

  case 637:
#line 5051 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 638:
#line 5052 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 639:
#line 5056 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 640:
#line 5057 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 641:
#line 5058 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 642:
#line 5059 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 643:
#line 5062 "sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 644:
#line 5063 "sql_yacc.yy"
    { }
    break;

  case 645:
#line 5066 "sql_yacc.yy"
    {}
    break;

  case 646:
#line 5067 "sql_yacc.yy"
    {}
    break;

  case 647:
#line 5071 "sql_yacc.yy"
    {}
    break;

  case 648:
#line 5072 "sql_yacc.yy"
    {}
    break;

  case 649:
#line 5076 "sql_yacc.yy"
    {}
    break;

  case 651:
#line 5081 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 652:
#line 5082 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 653:
#line 5083 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 654:
#line 5085 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 655:
#line 5091 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 656:
#line 5093 "sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 657:
#line 5099 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 658:
#line 5105 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 659:
#line 5111 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 660:
#line 5116 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 661:
#line 5118 "sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 662:
#line 5134 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 663:
#line 5140 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 664:
#line 5144 "sql_yacc.yy"
    {}
    break;

  case 665:
#line 5145 "sql_yacc.yy"
    {}
    break;

  case 666:
#line 5150 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 667:
#line 5157 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 668:
#line 5161 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 669:
#line 5162 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 670:
#line 5166 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 671:
#line 5167 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 672:
#line 5172 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 673:
#line 5180 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 674:
#line 5184 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 675:
#line 5185 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 676:
#line 5190 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 677:
#line 5200 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 678:
#line 5201 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 679:
#line 5205 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 680:
#line 5206 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 681:
#line 5210 "sql_yacc.yy"
    {}
    break;

  case 682:
#line 5211 "sql_yacc.yy"
    {}
    break;

  case 683:
#line 5215 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 684:
#line 5216 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 685:
#line 5217 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 686:
#line 5219 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 687:
#line 5227 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 688:
#line 5228 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 689:
#line 5232 "sql_yacc.yy"
    { }
    break;

  case 690:
#line 5233 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 691:
#line 5237 "sql_yacc.yy"
    { Lex->charset= NULL; }
    break;

  case 692:
#line 5238 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 693:
#line 5240 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 694:
#line 5248 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (2)].charset); }
    break;

  case 697:
#line 5258 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->fk_delete_opt= lex->fk_update_opt= lex->fk_match_option= 0;
            lex->ref_list.empty();
          }
    break;

  case 698:
#line 5264 "sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (4)].table);
          }
    break;

  case 699:
#line 5270 "sql_yacc.yy"
    {}
    break;

  case 700:
#line 5271 "sql_yacc.yy"
    {}
    break;

  case 701:
#line 5276 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 702:
#line 5283 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 703:
#line 5292 "sql_yacc.yy"
    {}
    break;

  case 704:
#line 5293 "sql_yacc.yy"
    {}
    break;

  case 705:
#line 5297 "sql_yacc.yy"
    {}
    break;

  case 706:
#line 5298 "sql_yacc.yy"
    {}
    break;

  case 707:
#line 5302 "sql_yacc.yy"
    { Lex->fk_delete_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 708:
#line 5303 "sql_yacc.yy"
    { Lex->fk_update_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 709:
#line 5304 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 710:
#line 5305 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 711:
#line 5306 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 712:
#line 5310 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 713:
#line 5311 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 714:
#line 5312 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 715:
#line 5313 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 716:
#line 5314 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 717:
#line 5318 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 718:
#line 5319 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT; }
    break;

  case 719:
#line 5321 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 720:
#line 5333 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 721:
#line 5334 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 722:
#line 5338 "sql_yacc.yy"
    {}
    break;

  case 723:
#line 5339 "sql_yacc.yy"
    {}
    break;

  case 724:
#line 5343 "sql_yacc.yy"
    {}
    break;

  case 726:
#line 5348 "sql_yacc.yy"
    {}
    break;

  case 727:
#line 5349 "sql_yacc.yy"
    {}
    break;

  case 728:
#line 5350 "sql_yacc.yy"
    {}
    break;

  case 729:
#line 5354 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 730:
#line 5355 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 731:
#line 5356 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 732:
#line 5358 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 733:
#line 5370 "sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 736:
#line 5387 "sql_yacc.yy"
    {}
    break;

  case 740:
#line 5397 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 741:
#line 5398 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 743:
#line 5404 "sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 744:
#line 5406 "sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 745:
#line 5418 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 746:
#line 5419 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 747:
#line 5420 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 748:
#line 5424 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 749:
#line 5425 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 750:
#line 5430 "sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 751:
#line 5436 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str).str,(uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 752:
#line 5449 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; /* Default length */ }
    break;

  case 753:
#line 5450 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 754:
#line 5454 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 755:
#line 5455 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 756:
#line 5459 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 757:
#line 5460 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 758:
#line 5468 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db=
              ((TABLE_LIST*) lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 759:
#line 5492 "sql_yacc.yy"
    {}
    break;

  case 760:
#line 5494 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 761:
#line 5499 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 762:
#line 5508 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 763:
#line 5519 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 764:
#line 5530 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 765:
#line 5537 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 766:
#line 5548 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 767:
#line 5555 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 768:
#line 5566 "sql_yacc.yy"
    {}
    break;

  case 769:
#line 5573 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 770:
#line 5585 "sql_yacc.yy"
    {}
    break;

  case 771:
#line 5587 "sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 772:
#line 5607 "sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 773:
#line 5620 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 774:
#line 5625 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 775:
#line 5630 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 776:
#line 5635 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 777:
#line 5640 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 778:
#line 5649 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 779:
#line 5650 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 780:
#line 5651 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 781:
#line 5652 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 782:
#line 5656 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 783:
#line 5658 "sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 784:
#line 5669 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 785:
#line 5670 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 786:
#line 5674 "sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 787:
#line 5675 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 789:
#line 5680 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 790:
#line 5681 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 796:
#line 5698 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 797:
#line 5703 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 798:
#line 5710 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 800:
#line 5720 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 801:
#line 5728 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_CHECK;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->check_opt.init();
          }
    break;

  case 803:
#line 5737 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 805:
#line 5746 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.no_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 807:
#line 5757 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 808:
#line 5764 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 810:
#line 5772 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 811:
#line 5784 "sql_yacc.yy"
    {}
    break;

  case 813:
#line 5790 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 814:
#line 5795 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 815:
#line 5803 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 817:
#line 5818 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 818:
#line 5822 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 819:
#line 5826 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 820:
#line 5833 "sql_yacc.yy"
    {}
    break;

  case 821:
#line 5834 "sql_yacc.yy"
    {}
    break;

  case 822:
#line 5839 "sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 825:
#line 5859 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 826:
#line 5867 "sql_yacc.yy"
    { }
    break;

  case 827:
#line 5869 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 828:
#line 5873 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 829:
#line 5877 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 831:
#line 5884 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 832:
#line 5893 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 834:
#line 5906 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 835:
#line 5915 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 836:
#line 5919 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 837:
#line 5928 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 838:
#line 5937 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 839:
#line 5943 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 840:
#line 5949 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 841:
#line 5958 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 842:
#line 5967 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 843:
#line 5986 "sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 844:
#line 6007 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
          }
    break;

  case 845:
#line 6012 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_FORCE;
          }
    break;

  case 846:
#line 6016 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 847:
#line 6023 "sql_yacc.yy"
    {}
    break;

  case 848:
#line 6024 "sql_yacc.yy"
    {}
    break;

  case 849:
#line 6028 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 850:
#line 6029 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 851:
#line 6033 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 852:
#line 6034 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 853:
#line 6035 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 854:
#line 6039 "sql_yacc.yy"
    {}
    break;

  case 855:
#line 6040 "sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 856:
#line 6041 "sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 857:
#line 6045 "sql_yacc.yy"
    {}
    break;

  case 858:
#line 6046 "sql_yacc.yy"
    {}
    break;

  case 859:
#line 6047 "sql_yacc.yy"
    {}
    break;

  case 860:
#line 6048 "sql_yacc.yy"
    {}
    break;

  case 861:
#line 6057 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 862:
#line 6066 "sql_yacc.yy"
    {}
    break;

  case 863:
#line 6068 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 864:
#line 6075 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 865:
#line 6083 "sql_yacc.yy"
    {}
    break;

  case 866:
#line 6085 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 867:
#line 6094 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 868:
#line 6102 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 869:
#line 6104 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 870:
#line 6110 "sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 871:
#line 6112 "sql_yacc.yy"
    {}
    break;

  case 874:
#line 6121 "sql_yacc.yy"
    {}
    break;

  case 875:
#line 6122 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 876:
#line 6123 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 877:
#line 6127 "sql_yacc.yy"
    {}
    break;

  case 878:
#line 6129 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 881:
#line 6150 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RESTORE_TABLE;
          }
    break;

  case 882:
#line 6154 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 883:
#line 6161 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BACKUP_TABLE;
          }
    break;

  case 884:
#line 6165 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 885:
#line 6172 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
          }
    break;

  case 886:
#line 6177 "sql_yacc.yy"
    {}
    break;

  case 887:
#line 6181 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 888:
#line 6182 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 889:
#line 6183 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 890:
#line 6188 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 891:
#line 6196 "sql_yacc.yy"
    {}
    break;

  case 892:
#line 6200 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 893:
#line 6201 "sql_yacc.yy"
    {}
    break;

  case 894:
#line 6205 "sql_yacc.yy"
    {}
    break;

  case 895:
#line 6206 "sql_yacc.yy"
    {}
    break;

  case 896:
#line 6210 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 897:
#line 6211 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 898:
#line 6212 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 899:
#line 6217 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 900:
#line 6225 "sql_yacc.yy"
    {}
    break;

  case 901:
#line 6230 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 902:
#line 6238 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 903:
#line 6251 "sql_yacc.yy"
    {}
    break;

  case 904:
#line 6255 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 905:
#line 6256 "sql_yacc.yy"
    {}
    break;

  case 906:
#line 6260 "sql_yacc.yy"
    {}
    break;

  case 907:
#line 6261 "sql_yacc.yy"
    {}
    break;

  case 908:
#line 6265 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 909:
#line 6266 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 910:
#line 6267 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 911:
#line 6268 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 912:
#line 6269 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 913:
#line 6270 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 914:
#line 6275 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 915:
#line 6283 "sql_yacc.yy"
    {}
    break;

  case 916:
#line 6287 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 917:
#line 6288 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 918:
#line 6289 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 919:
#line 6294 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 920:
#line 6298 "sql_yacc.yy"
    {}
    break;

  case 921:
#line 6300 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 922:
#line 6307 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 923:
#line 6312 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 926:
#line 6325 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 927:
#line 6338 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 930:
#line 6352 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ, 
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 931:
#line 6360 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 932:
#line 6361 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 933:
#line 6366 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
          }
    break;

  case 934:
#line 6371 "sql_yacc.yy"
    {}
    break;

  case 937:
#line 6381 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 938:
#line 6389 "sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        global_system_variables.old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 940:
#line 6400 "sql_yacc.yy"
    { }
    break;

  case 942:
#line 6406 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 943:
#line 6407 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 944:
#line 6417 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 947:
#line 6431 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (sel->set_braces(1))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                !sel->master_unit()->first_select()->braces &&
                sel->master_unit()->first_select()->linkage ==
                UNION_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                sel->master_unit()->fake_select_lex)
            {
 	       my_error(ER_WRONG_USAGE, MYF(0),
                        "CUBE/ROLLUP", "ORDER BY");
               MYSQL_YYABORT;
            }
            /* select in braces, can't contain global parameters */
            if (sel->master_unit()->fake_select_lex)
              sel->master_unit()->global_parameters=
                 sel->master_unit()->fake_select_lex;
          }
    break;

  case 949:
#line 6465 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 951:
#line 6484 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 952:
#line 6492 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 954:
#line 6499 "sql_yacc.yy"
    {}
    break;

  case 959:
#line 6509 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table= 
                (TABLE_LIST *) Select->table_list.first;
          }
    break;

  case 962:
#line 6524 "sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 965:
#line 6539 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 966:
#line 6541 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Lex->lock_option=  TL_READ_HIGH_PRIORITY;
            Lex->current_select->lock_option= TL_READ_HIGH_PRIORITY;
          }
    break;

  case 967:
#line 6547 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 968:
#line 6548 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 969:
#line 6549 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 970:
#line 6551 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 971:
#line 6557 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 972:
#line 6563 "sql_yacc.yy"
    {
            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 973:
#line 6569 "sql_yacc.yy"
    {
            Lex->thd->infinidb_vtable.override_largeside_estimate=1;
          }
    break;

  case 974:
#line 6573 "sql_yacc.yy"
    {
            /*
             Honor this flag only if SQL_NO_CACHE wasn't specified AND
             we are parsing the outermost SELECT in the query.
            */
            if (Lex->select_lex.sql_cache != SELECT_LEX::SQL_NO_CACHE &&
                Lex->current_select == &Lex->select_lex)
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 975:
#line 6586 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 977:
#line 6592 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->current_select->lock_option= TL_WRITE;
            lex->safe_to_cache_query=0;
            lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 978:
#line 6600 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->current_select->lock_option= TL_READ_WITH_SHARED_LOCKS;
            lex->safe_to_cache_query=0;
          }
    break;

  case 981:
#line 6613 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 982:
#line 6628 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 983:
#line 6653 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 984:
#line 6659 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 985:
#line 6665 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); /* table.* */ }
    break;

  case 986:
#line 6666 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 987:
#line 6670 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 988:
#line 6671 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 989:
#line 6672 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 990:
#line 6673 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 991:
#line 6674 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 992:
#line 6678 "sql_yacc.yy"
    {}
    break;

  case 993:
#line 6679 "sql_yacc.yy"
    {}
    break;

  case 994:
#line 6685 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 995:
#line 6736 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 996:
#line 6743 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 997:
#line 6786 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 998:
#line 6792 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 999:
#line 6798 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1000:
#line 6804 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1001:
#line 6810 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1002:
#line 6816 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1003:
#line 6822 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1005:
#line 6832 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1006:
#line 6838 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1007:
#line 6844 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1008:
#line 6850 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1009:
#line 6856 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1011:
#line 6866 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1012:
#line 6872 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1013:
#line 6882 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1014:
#line 6888 "sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:
#line 6896 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1016:
#line 6902 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1017:
#line 6912 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1018:
#line 6918 "sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1019:
#line 6927 "sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1020:
#line 6937 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:
#line 6943 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1022:
#line 6953 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1023:
#line 6959 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1025:
#line 6972 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1026:
#line 6978 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1027:
#line 6984 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1028:
#line 6990 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1029:
#line 6996 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1030:
#line 7002 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1031:
#line 7008 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1032:
#line 7014 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1033:
#line 7020 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1034:
#line 7026 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1035:
#line 7032 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1036:
#line 7038 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1037:
#line 7044 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1038:
#line 7050 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1048:
#line 7079 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1049:
#line 7080 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1050:
#line 7081 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1051:
#line 7082 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1052:
#line 7083 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1053:
#line 7084 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1054:
#line 7088 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1055:
#line 7089 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1062:
#line 7100 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1067:
#line 7116 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1068:
#line 7122 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1069:
#line 7126 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1070:
#line 7132 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1071:
#line 7138 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1072:
#line 7144 "sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1073:
#line 7150 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1074:
#line 7152 "sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1075:
#line 7159 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1076:
#line 7166 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1077:
#line 7172 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1078:
#line 7174 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1079:
#line 7183 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1080:
#line 7190 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:
#line 7198 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:
#line 7204 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:
#line 7211 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1084:
#line 7217 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:
#line 7231 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:
#line 7239 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:
#line 7254 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:
#line 7260 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:
#line 7266 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1090:
#line 7274 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:
#line 7280 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:
#line 7286 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1093:
#line 7292 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:
#line 7298 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:
#line 7313 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:
#line 7325 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:
#line 7331 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:
#line 7337 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:
#line 7343 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:
#line 7349 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:
#line 7355 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:
#line 7361 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:
#line 7367 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1104:
#line 7373 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1105:
#line 7379 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:
#line 7385 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:
#line 7391 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:
#line 7397 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:
#line 7403 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1110:
#line 7409 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:
#line 7415 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:
#line 7421 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1113:
#line 7429 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1114:
#line 7450 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1115:
#line 7457 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1116:
#line 7463 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1117:
#line 7470 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1118:
#line 7477 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1119:
#line 7485 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:
#line 7492 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:
#line 7498 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:
#line 7504 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:
#line 7510 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1124:
#line 7517 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1125:
#line 7524 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:
#line 7530 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:
#line 7537 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1128:
#line 7543 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:
#line 7549 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:
#line 7555 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:
#line 7561 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1132:
#line 7567 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1133:
#line 7577 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1134:
#line 7587 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:
#line 7593 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:
#line 7599 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1137:
#line 7606 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1138:
#line 7613 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1139:
#line 7628 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:
#line 7634 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:
#line 7640 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:
#line 7646 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:
#line 7652 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1144:
#line 7659 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:
#line 7665 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:
#line 7671 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:
#line 7677 "sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:
#line 7683 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1149:
#line 7695 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:
#line 7701 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:
#line 7707 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:
#line 7713 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:
#line 7719 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:
#line 7731 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:
#line 7737 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1156:
#line 7753 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1157:
#line 7759 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1158:
#line 7766 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1159:
#line 7773 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1160:
#line 7780 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1161:
#line 7787 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1162:
#line 7794 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1163:
#line 7798 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1164:
#line 7811 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_window_func *builder;
            Item *item= NULL;

            builder= find_native_window_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              ((Create_window_func*)builder)->respectNulls = 1;            
              item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].item_list));
              if (!item)
                MYSQL_YYABORT;
              ((Item_func_window*)item)->window_ctx((yyvsp[(5) - (5)].Window_context));
              (yyval.item) = item;
            }
            else
            {
              LEX_STRING args[1];
              args[0] = (yyvsp[(1) - (5)].lex_str);
              IDB_set_error(YYTHD, logging::ERR_WF_FUNCTION_NOT_EXISTS, args, 1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1165:
#line 7836 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_window_func *builder = NULL;
            Item *item= NULL;

            builder= find_native_window_function_builder_nulls(thd, (yyvsp[(1) - (6)].lex_str));
            if (builder)
            {
              ((Create_window_func*)builder)->respectNulls = (yyvsp[(5) - (6)].num);
              item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].item_list));
              if (!item)
                MYSQL_YYABORT;
              ((Item_func_window*)item)->window_ctx((yyvsp[(6) - (6)].Window_context));
              (yyval.item) = item;
            }
            else
            {
              builder= find_native_window_function_builder(thd, (yyvsp[(1) - (6)].lex_str));
              if (builder)
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
              }
              else
              {
                LEX_STRING args[1];
                args[0] = (yyvsp[(1) - (6)].lex_str);
                IDB_set_error(YYTHD, logging::ERR_WF_FUNCTION_NOT_EXISTS, args, 1);
                MYSQL_YYABORT;
              }
              MYSQL_YYABORT;
            }
          }
    break;

  case 1166:
#line 7872 "sql_yacc.yy"
    {
              LEX_STRING funcname= { C_STRING_WITH_LEN("SUM") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_sum(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1167:
#line 7880 "sql_yacc.yy"
    {
              // order by clause is not allowed for distinct
              if ((yyvsp[(6) - (6)].Window_context)->ordering)
              {
                IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
                MYSQL_YYABORT;
              }
              LEX_STRING funcname= { C_STRING_WITH_LEN("SUM_DISTINCT") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_sum(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1168:
#line 7894 "sql_yacc.yy"
    {
              LEX_STRING funcname= { C_STRING_WITH_LEN("AVG") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_avg(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1169:
#line 7902 "sql_yacc.yy"
    {
              // order by clause is not allowed for distinct
              if ((yyvsp[(6) - (6)].Window_context)->ordering)
              {
                IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
                MYSQL_YYABORT;
              }
              LEX_STRING funcname= { C_STRING_WITH_LEN("AVG_DISTINCT") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_avg(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1170:
#line 7916 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT(*)") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, (yyvsp[(6) - (6)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1171:
#line 7924 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1172:
#line 7932 "sql_yacc.yy"
    {
            Item* item = NULL;
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT_DISTINCT") };
            if ((yyvsp[(4) - (6)].item_list))
            {
              List_iterator_fast<Item> it(*(yyvsp[(4) - (6)].item_list));
              item = it++;
              if ((yyvsp[(4) - (6)].item_list)->elements != 1 || !item)
              {
                LEX_STRING args[1];
                args[0] = funcname;
                IDB_set_error(YYTHD, logging::ERR_WF_WRONG_ARGS, args, 1);
                MYSQL_YYABORT;
              }
            }

            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, item, (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1173:
#line 7960 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("MIN") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1174:
#line 7968 "sql_yacc.yy"
    {
            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            LEX_STRING funcname= { C_STRING_WITH_LEN("MIN_DISTINCT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1175:
#line 7982 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("MAX") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1176:
#line 7990 "sql_yacc.yy"
    {
            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            LEX_STRING funcname= { C_STRING_WITH_LEN("MAX_DISTINCT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1177:
#line 8004 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("VAR_POP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1178:
#line 8012 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("VAR_SAMP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1179:
#line 8020 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("STDDEV_POP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1180:
#line 8028 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("STDDEV_SAMP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1181:
#line 8037 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("NTH_VALUE") };
            Create_window_func *builder = & Create_window_func_nth_value::s_singleton;
            DBUG_ASSERT(builder);
            ((Create_window_func_nth_value*)builder)->fromFirst = (yyvsp[(5) - (7)].num);
            ((Create_window_func_nth_value*)builder)->respectNulls = (yyvsp[(6) - (7)].num);
            (yyval.item) = builder->create(YYTHD, funcname, (yyvsp[(3) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            ((Item_func_window*)(yyval.item))->window_ctx((yyvsp[(7) - (7)].Window_context));
          }
    break;

  case 1182:
#line 8050 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("PERCENTILE_CONT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_percentile(funcname, (yyvsp[(3) - (12)].item), (yyvsp[(10) - (12)].list), (yyvsp[(12) - (12)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:
#line 8058 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("PERCENTILE_DISC") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_percentile(funcname, (yyvsp[(3) - (12)].item), (yyvsp[(10) - (12)].list), (yyvsp[(12) - (12)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:
#line 8067 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1185:
#line 8068 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1186:
#line 8069 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1187:
#line 8072 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1188:
#line 8073 "sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1189:
#line 8076 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1190:
#line 8077 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1191:
#line 8081 "sql_yacc.yy"
    {
            if (Select->parsing_place == IN_ON)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, "ON clause");
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_WHERE)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, "WHERE clause");
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_HAVING)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, "HAVING clause");
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_GROUP_BY)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, "GROUP BY clause");
              MYSQL_YYABORT;
            }
            (yyval.Window_context) = new Window_context();
            (yyval.Window_context)->setPartitions((yyvsp[(3) - (5)].item_list));
            (yyval.Window_context)->setOrders((yyvsp[(4) - (5)].ordering));
          }
    break;

  case 1192:
#line 8108 "sql_yacc.yy"
    { (yyval.item_list) = 0; }
    break;

  case 1193:
#line 8109 "sql_yacc.yy"
    { (yyval.item_list) = (yyvsp[(3) - (3)].item_list); }
    break;

  case 1194:
#line 8113 "sql_yacc.yy"
    { (yyval.ordering) = 0; }
    break;

  case 1195:
#line 8115 "sql_yacc.yy"
    { 
            IDB_set_error(YYTHD, logging::ERR_WF_WINDOW_WITHOUT_ORDER, NULL, 0);
            MYSQL_YYABORT; 
          }
    break;

  case 1196:
#line 8120 "sql_yacc.yy"
    { 
            /*
            If RANGE is specified, order list shall contain a single <sort key> SK.
            The declared type of SK shall be numeric, date, or interval. The declared type of UVS shall be
            numeric if the declared type of SK is numeric -- reference ANSI-SQL 2003
            */
            if ((yyvsp[(3) - (4)].list) && (yyvsp[(3) - (4)].list)->elements > 1 && (yyvsp[(4) - (4)].frame) && (yyvsp[(4) - (4)].frame)->isRange &&  
                (((yyvsp[(4) - (4)].frame)->start && (yyvsp[(4) - (4)].frame)->start->bound == PRECEDING) || 
                ((yyvsp[(4) - (4)].frame)->end && (yyvsp[(4) - (4)].frame)->end->bound == FOLLOWING)))
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_ORDER_KEY, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.ordering) = new Ordering();
            (yyval.ordering)->orders = (yyvsp[(3) - (4)].list); 
            (yyval.ordering)->frame = (yyvsp[(4) - (4)].frame);
          }
    break;

  case 1197:
#line 8141 "sql_yacc.yy"
    { 
            if (add_to_list(YYTHD, *(yyvsp[(1) - (5)].list), (yyvsp[(3) - (5)].item),(bool) (yyvsp[(4) - (5)].num), (uint)(yyvsp[(5) - (5)].num)))
              MYSQL_YYABORT; 
            (yyval.list) = (yyvsp[(1) - (5)].list);
          }
    break;

  case 1198:
#line 8147 "sql_yacc.yy"
    {
            (yyval.list) = new SQL_LIST();
            (yyval.list)->elements= 0;
            (yyval.list)->first= 0;
            (yyval.list)->next= (uchar**) &((yyval.list)->first);
            if ((yyval.list) == NULL)
              MYSQL_YYABORT;
            if (add_to_list(YYTHD, *(yyval.list), (yyvsp[(1) - (3)].item), (bool) (yyvsp[(2) - (3)].num), (uint) (yyvsp[(3) - (3)].num))) 
              MYSQL_YYABORT; 
          }
    break;

  case 1199:
#line 8160 "sql_yacc.yy"
    { (yyval.num)= 2; }
    break;

  case 1200:
#line 8161 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1201:
#line 8162 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1202:
#line 8166 "sql_yacc.yy"
    { (yyval.frame)= 0; }
    break;

  case 1203:
#line 8167 "sql_yacc.yy"
    { (yyval.frame)= (yyvsp[(1) - (1)].frame); }
    break;

  case 1204:
#line 8172 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (5)].boundary)->bound == UNBOUNDED_FOLLOWING || (yyvsp[(5) - (5)].boundary)->bound == UNBOUNDED_PRECEDING ||
                ((yyvsp[(3) - (5)].boundary)->bound == CURRENT_ROW && (yyvsp[(5) - (5)].boundary)->bound == PRECEDING) ||
                ((yyvsp[(3) - (5)].boundary)->bound == FOLLOWING && (yyvsp[(5) - (5)].boundary)->bound == PRECEDING) ||
                ((yyvsp[(3) - (5)].boundary)->bound == FOLLOWING && (yyvsp[(5) - (5)].boundary)->bound == CURRENT_ROW))
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_WINDOW, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.frame) = new Frame();
            (yyval.frame)->start = (yyvsp[(3) - (5)].boundary);
            (yyval.frame)->end = (yyvsp[(5) - (5)].boundary);
            (yyval.frame)->isRange = (yyvsp[(1) - (5)].num);
          }
    break;

  case 1205:
#line 8187 "sql_yacc.yy"
    {
            if ((yyvsp[(2) - (2)].boundary)->bound == FOLLOWING || (yyvsp[(2) - (2)].boundary)->bound == UNBOUNDED_FOLLOWING)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_WINDOW, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.frame) = new Frame();
            (yyval.frame)->start = (yyvsp[(2) - (2)].boundary);
            (yyval.frame)->isRange = (yyvsp[(1) - (2)].num);
          }
    break;

  case 1206:
#line 8199 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1207:
#line 8200 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1208:
#line 8205 "sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = ((yyvsp[(2) - (2)].bound) == PRECEDING? UNBOUNDED_PRECEDING : UNBOUNDED_FOLLOWING);
          }
    break;

  case 1209:
#line 8210 "sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = CURRENT_ROW;
          }
    break;

  case 1210:
#line 8215 "sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = (yyvsp[(2) - (2)].bound);
            (yyval.boundary)->item = (yyvsp[(1) - (2)].item);
          }
    break;

  case 1211:
#line 8221 "sql_yacc.yy"
    {
            // @todo interval range support
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = (yyvsp[(4) - (4)].bound);
            (yyval.boundary)->item = new (YYTHD->mem_root) Item_interval((yyvsp[(2) - (4)].item), (yyvsp[(3) - (4)].interval));
          }
    break;

  case 1212:
#line 8230 "sql_yacc.yy"
    { (yyval.bound)= PRECEDING; }
    break;

  case 1213:
#line 8231 "sql_yacc.yy"
    { (yyval.bound)= FOLLOWING; }
    break;

  case 1214:
#line 8249 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (4)].lex_str).str, (yyvsp[(1) - (4)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            //$<udf>$= udf;
#endif
         // }
         // opt_udf_expr_list ')'
         // {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (4)].lex_str));
            if (builder)
            {
              //item= builder->create(thd, $1, $4);
              item= builder->create(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              //udf_func *udf= $<udf>3;

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                //item= Create_udf_func::s_singleton.create(thd, udf, $4);
                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(3) - (4)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                //item= builder->create(thd, $1, $4);
                item= builder->create(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1215:
#line 8320 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1216:
#line 8352 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1217:
#line 8354 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1218:
#line 8358 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1219:
#line 8359 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1220:
#line 8363 "sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1221:
#line 8364 "sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1222:
#line 8368 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1223:
#line 8369 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1224:
#line 8374 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1225:
#line 8381 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1226:
#line 8389 "sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1227:
#line 8409 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:
#line 8415 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:
#line 8421 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:
#line 8427 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:
#line 8433 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:
#line 8439 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:
#line 8448 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:
#line 8469 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count_distinct(* (yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:
#line 8475 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:
#line 8486 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:
#line 8492 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:
#line 8498 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:
#line 8504 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:
#line 8510 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:
#line 8516 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:
#line 8522 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:
#line 8528 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:
#line 8534 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:
#line 8540 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1246:
#line 8544 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1247:
#line 8558 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1248:
#line 8566 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1249:
#line 8573 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1250:
#line 8583 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1251:
#line 8591 "sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe();
          }
    break;

  case 1252:
#line 8606 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1253:
#line 8607 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1254:
#line 8612 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:
#line 8617 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1256:
#line 8622 "sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1257:
#line 8626 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list=
              (SQL_LIST*) sql_memdup((char*) &select->order_list,
                                     sizeof(st_sql_list));
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1258:
#line 8639 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1259:
#line 8648 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1260:
#line 8656 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1261:
#line 8658 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1262:
#line 8660 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1263:
#line 8662 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1264:
#line 8664 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1265:
#line 8666 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1266:
#line 8668 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1267:
#line 8670 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1268:
#line 8672 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1269:
#line 8674 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1270:
#line 8676 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1271:
#line 8680 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1272:
#line 8681 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1273:
#line 8686 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1274:
#line 8693 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1275:
#line 8700 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1276:
#line 8701 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1277:
#line 8706 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1278:
#line 8713 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1279:
#line 8720 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1280:
#line 8721 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1281:
#line 8725 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1282:
#line 8726 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1283:
#line 8731 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1284:
#line 8739 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1285:
#line 8748 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1286:
#line 8750 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1287:
#line 8758 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1288:
#line 8769 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1289:
#line 8770 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1290:
#line 8775 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1291:
#line 8777 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1292:
#line 8797 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1293:
#line 8799 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1294:
#line 8802 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1295:
#line 8810 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1296:
#line 8817 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1297:
#line 8825 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1298:
#line 8833 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1299:
#line 8837 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1300:
#line 8839 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1301:
#line 8847 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1302:
#line 8855 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1303:
#line 8863 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1304:
#line 8867 "sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1305:
#line 8873 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1306:
#line 8883 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1307:
#line 8891 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1308:
#line 8900 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1309:
#line 8904 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1310:
#line 8911 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1311:
#line 8921 "sql_yacc.yy"
    {}
    break;

  case 1312:
#line 8922 "sql_yacc.yy"
    {}
    break;

  case 1313:
#line 8923 "sql_yacc.yy"
    {}
    break;

  case 1314:
#line 8928 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1315:
#line 8933 "sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                Lex->lock_option,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1316:
#line 8942 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1317:
#line 8964 "sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */

            if (!((yyvsp[(3) - (6)].table_list) || (yyvsp[(6) - (6)].lex_str_ptr)) && (yyvsp[(2) - (6)].select_lex)->embedding &&
                !(yyvsp[(2) - (6)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (6)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(6) - (6)].lex_str_ptr), 0,
                                               TL_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(4) - (6)].num) || (yyvsp[(6) - (6)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (6)].table_list);
            }
          }
    break;

  case 1318:
#line 9016 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1319:
#line 9022 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1320:
#line 9038 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1321:
#line 9055 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1323:
#line 9062 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1324:
#line 9067 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1325:
#line 9092 "sql_yacc.yy"
    {}
    break;

  case 1326:
#line 9093 "sql_yacc.yy"
    {}
    break;

  case 1327:
#line 9098 "sql_yacc.yy"
    {
            (yyval.num)= global_system_variables.old_mode ? 
                  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1328:
#line 9102 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1329:
#line 9103 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1330:
#line 9104 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1331:
#line 9108 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1332:
#line 9109 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1333:
#line 9114 "sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1335:
#line 9119 "sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1340:
#line 9132 "sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1342:
#line 9136 "sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1344:
#line 9141 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1345:
#line 9142 "sql_yacc.yy"
    {}
    break;

  case 1346:
#line 9147 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1347:
#line 9149 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1350:
#line 9159 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1351:
#line 9170 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1352:
#line 9182 "sql_yacc.yy"
    {}
    break;

  case 1353:
#line 9183 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1354:
#line 9184 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1355:
#line 9185 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1356:
#line 9186 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1357:
#line 9187 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1358:
#line 9188 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1359:
#line 9189 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1360:
#line 9190 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1361:
#line 9191 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1362:
#line 9192 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1363:
#line 9193 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1364:
#line 9197 "sql_yacc.yy"
    {}
    break;

  case 1365:
#line 9198 "sql_yacc.yy"
    { 
                                  (yyval.interval_time_st)=INTERVAL_MICROSECOND; 
                                  /*
                                    FRAC_SECOND was mistakenly implemented with
                                    a wrong resolution. According to the ODBC
                                    standard it should be nanoseconds, not
                                    microseconds. Changing it to nanoseconds
                                    in MySQL would mean making TIMESTAMPDIFF
                                    and TIMESTAMPADD to return DECIMAL, since
                                    the return value would be too big for BIGINT
                                    Hence we just deprecate the incorrect
                                    implementation without changing its
                                    resolution.
                                  */
                                  WARN_DEPRECATED(yythd, "6.2", "FRAC_SECOND", "MICROSECOND");
                                }
    break;

  case 1366:
#line 9217 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1367:
#line 9218 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1368:
#line 9219 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1369:
#line 9220 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1370:
#line 9221 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1371:
#line 9222 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1372:
#line 9223 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1373:
#line 9224 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1374:
#line 9225 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1375:
#line 9229 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1376:
#line 9230 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1377:
#line 9231 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1378:
#line 9232 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1382:
#line 9242 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1383:
#line 9244 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1386:
#line 9257 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1387:
#line 9259 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1388:
#line 9263 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1390:
#line 9275 "sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1391:
#line 9279 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1392:
#line 9290 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1393:
#line 9295 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1395:
#line 9313 "sql_yacc.yy"
    {
            Select->parsing_place= IN_GROUP_BY;
          }
    break;

  case 1397:
#line 9321 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1398:
#line 9323 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1399:
#line 9327 "sql_yacc.yy"
    {}
    break;

  case 1400:
#line 9329 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT; /* To be deleted in 5.1 */
          }
    break;

  case 1401:
#line 9342 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1405:
#line 9369 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1408:
#line 9388 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1410:
#line 9423 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1411:
#line 9425 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1412:
#line 9429 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1413:
#line 9430 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1414:
#line 9431 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1415:
#line 9436 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1416:
#line 9442 "sql_yacc.yy"
    {}
    break;

  case 1417:
#line 9446 "sql_yacc.yy"
    {}
    break;

  case 1418:
#line 9447 "sql_yacc.yy"
    {}
    break;

  case 1419:
#line 9451 "sql_yacc.yy"
    {}
    break;

  case 1420:
#line 9456 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1421:
#line 9463 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1422:
#line 9470 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1423:
#line 9480 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1424:
#line 9484 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1425:
#line 9490 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1426:
#line 9496 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1427:
#line 9505 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1428:
#line 9510 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1429:
#line 9518 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1430:
#line 9519 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1431:
#line 9520 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1432:
#line 9521 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1433:
#line 9522 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1434:
#line 9523 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1435:
#line 9527 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1436:
#line 9528 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1437:
#line 9529 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1438:
#line 9530 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1439:
#line 9531 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1440:
#line 9535 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1441:
#line 9536 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1442:
#line 9537 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1443:
#line 9538 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1444:
#line 9539 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1445:
#line 9543 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1446:
#line 9544 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1447:
#line 9545 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1448:
#line 9546 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1449:
#line 9551 "sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1453:
#line 9562 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select ||
                lex->select_lex.get_table_list()->derived)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= (uchar**) &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1455:
#line 9593 "sql_yacc.yy"
    {}
    break;

  case 1456:
#line 9594 "sql_yacc.yy"
    {}
    break;

  case 1459:
#line 9604 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1460:
#line 9615 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && 
                  (!(lex->result= new select_dumpvar(lex->nest_level))))
              MYSQL_YYABORT;
          }
    break;

  case 1461:
#line 9622 "sql_yacc.yy"
    {}
    break;

  case 1463:
#line 9627 "sql_yacc.yy"
    {}
    break;

  case 1464:
#line 9632 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1465:
#line 9651 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1466:
#line 9683 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1468:
#line 9695 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange, lex->nest_level)))
              MYSQL_YYABORT;
          }
    break;

  case 1469:
#line 9703 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1471:
#line 9706 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange, lex->nest_level)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1472:
#line 9718 "sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1473:
#line 9729 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1474:
#line 9735 "sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1475:
#line 9746 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (6)].num);
            lex->drop_if_exists= (yyvsp[(4) - (6)].num);
          }
    break;

  case 1476:
#line 9752 "sql_yacc.yy"
    {}
    break;

  case 1477:
#line 9753 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1478:
#line 9767 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1479:
#line 9774 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1480:
#line 9797 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1481:
#line 9818 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1482:
#line 9830 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1483:
#line 9834 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (5)].num);
          }
    break;

  case 1484:
#line 9840 "sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1485:
#line 9846 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1486:
#line 9853 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1487:
#line 9858 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1488:
#line 9863 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1491:
#line 9878 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1494:
#line 9891 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option ))
              MYSQL_YYABORT;
          }
    break;

  case 1495:
#line 9900 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1496:
#line 9901 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1497:
#line 9905 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1498:
#line 9906 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1499:
#line 9914 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
            /* for subselects */
            lex->lock_option= TL_READ_DEFAULT;
          }
    break;

  case 1500:
#line 9924 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1501:
#line 9929 "sql_yacc.yy"
    {}
    break;

  case 1502:
#line 9934 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1503:
#line 9941 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1504:
#line 9946 "sql_yacc.yy"
    {}
    break;

  case 1505:
#line 9951 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1506:
#line 9963 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1507:
#line 9964 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1508:
#line 9965 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1509:
#line 9969 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1510:
#line 9970 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1511:
#line 9974 "sql_yacc.yy"
    {}
    break;

  case 1512:
#line 9975 "sql_yacc.yy"
    {}
    break;

  case 1513:
#line 9980 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1514:
#line 9988 "sql_yacc.yy"
    {}
    break;

  case 1515:
#line 9989 "sql_yacc.yy"
    {}
    break;

  case 1516:
#line 9990 "sql_yacc.yy"
    {}
    break;

  case 1517:
#line 9992 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1519:
#line 10002 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1520:
#line 10003 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1521:
#line 10007 "sql_yacc.yy"
    {}
    break;

  case 1522:
#line 10008 "sql_yacc.yy"
    {}
    break;

  case 1523:
#line 10010 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1524:
#line 10011 "sql_yacc.yy"
    {}
    break;

  case 1525:
#line 10013 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1526:
#line 10014 "sql_yacc.yy"
    {}
    break;

  case 1531:
#line 10029 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1532:
#line 10038 "sql_yacc.yy"
    {}
    break;

  case 1533:
#line 10039 "sql_yacc.yy"
    {}
    break;

  case 1534:
#line 10043 "sql_yacc.yy"
    {}
    break;

  case 1535:
#line 10044 "sql_yacc.yy"
    {}
    break;

  case 1536:
#line 10049 "sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1537:
#line 10054 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1538:
#line 10062 "sql_yacc.yy"
    {}
    break;

  case 1540:
#line 10068 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1541:
#line 10073 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1542:
#line 10080 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1543:
#line 10082 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1545:
#line 10091 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1547:
#line 10099 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->lock_option= TL_UNLOCK; /* Will be set later */
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1548:
#line 10108 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1549:
#line 10126 "sql_yacc.yy"
    {}
    break;

  case 1552:
#line 10136 "sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1555:
#line 10149 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1556:
#line 10158 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1557:
#line 10159 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1558:
#line 10166 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            lex->lock_option= TL_WRITE_DEFAULT;
            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1559:
#line 10174 "sql_yacc.yy"
    {}
    break;

  case 1560:
#line 10179 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1561:
#line 10185 "sql_yacc.yy"
    {}
    break;

  case 1562:
#line 10187 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1563:
#line 10189 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1564:
#line 10194 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1565:
#line 10196 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1566:
#line 10203 "sql_yacc.yy"
    {}
    break;

  case 1567:
#line 10204 "sql_yacc.yy"
    {}
    break;

  case 1568:
#line 10209 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (3)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(3) - (3)].lex_str_ptr),
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1569:
#line 10221 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(5) - (5)].lex_str_ptr), 
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1570:
#line 10235 "sql_yacc.yy"
    {}
    break;

  case 1571:
#line 10236 "sql_yacc.yy"
    {}
    break;

  case 1572:
#line 10240 "sql_yacc.yy"
    {}
    break;

  case 1573:
#line 10241 "sql_yacc.yy"
    {}
    break;

  case 1574:
#line 10245 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1575:
#line 10246 "sql_yacc.yy"
    { Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1576:
#line 10247 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1577:
#line 10252 "sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
          }
    break;

  case 1584:
#line 10276 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1585:
#line 10280 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1586:
#line 10284 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1587:
#line 10288 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1588:
#line 10292 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1589:
#line 10296 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1590:
#line 10300 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1591:
#line 10304 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1592:
#line 10308 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1593:
#line 10315 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1594:
#line 10319 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1595:
#line 10328 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1596:
#line 10337 "sql_yacc.yy"
    {}
    break;

  case 1597:
#line 10342 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1598:
#line 10349 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1599:
#line 10357 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1600:
#line 10365 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1601:
#line 10373 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1602:
#line 10381 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1603:
#line 10389 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            WARN_DEPRECATED(yythd, "6.0", "SHOW PLUGIN", "'SHOW PLUGINS'");
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1604:
#line 10397 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1605:
#line 10404 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1606:
#line 10406 "sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1607:
#line 10408 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1608:
#line 10423 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
            Lex->mi.log_file_name = (yyvsp[(8) - (16)].lex_str).str;
            Lex->mi.pos = (yyvsp[(12) - (16)].ulonglong_number);
            Lex->mi.server_id = (yyvsp[(16) - (16)].ulong_num);
          }
    break;

  case 1609:
#line 10430 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1610:
#line 10434 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1611:
#line 10438 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1613:
#line 10443 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1614:
#line 10452 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_COLUMN_TYPES;
          }
    break;

  case 1615:
#line 10457 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            WARN_DEPRECATED(yythd, "6.0", "SHOW TABLE TYPES", "'SHOW [STORAGE] ENGINES'");
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1616:
#line 10465 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1617:
#line 10472 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1618:
#line 10477 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1619:
#line 10482 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1620:
#line 10487 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1621:
#line 10489 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1622:
#line 10491 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1623:
#line 10493 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1624:
#line 10495 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1625:
#line 10497 "sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1626:
#line 10504 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1627:
#line 10512 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_STATUS;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW INNODB STATUS", "'SHOW ENGINE INNODB STATUS'");
          }
    break;

  case 1628:
#line 10524 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_MUTEX;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW MUTEX STATUS", "'SHOW ENGINE INNODB MUTEX'");
          }
    break;

  case 1629:
#line 10536 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1630:
#line 10538 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1631:
#line 10546 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1632:
#line 10553 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1633:
#line 10560 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1634:
#line 10570 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1635:
#line 10577 "sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1636:
#line 10583 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1637:
#line 10592 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1638:
#line 10600 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1639:
#line 10604 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1640:
#line 10608 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1641:
#line 10615 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1642:
#line 10622 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1643:
#line 10628 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1644:
#line 10635 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1645:
#line 10642 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1646:
#line 10652 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1647:
#line 10662 "sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1648:
#line 10670 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1649:
#line 10672 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1650:
#line 10674 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1655:
#line 10688 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1656:
#line 10689 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1657:
#line 10693 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1658:
#line 10694 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1661:
#line 10703 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1662:
#line 10704 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1663:
#line 10708 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1664:
#line 10709 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1666:
#line 10715 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1667:
#line 10722 "sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1668:
#line 10732 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1669:
#line 10743 "sql_yacc.yy"
    {}
    break;

  case 1670:
#line 10745 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1671:
#line 10747 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1674:
#line 10759 "sql_yacc.yy"
    {}
    break;

  case 1675:
#line 10760 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1676:
#line 10761 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1677:
#line 10765 "sql_yacc.yy"
    {}
    break;

  case 1678:
#line 10766 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1679:
#line 10768 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1680:
#line 10782 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1681:
#line 10789 "sql_yacc.yy"
    {}
    break;

  case 1684:
#line 10799 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES; }
    break;

  case 1685:
#line 10800 "sql_yacc.yy"
    {}
    break;

  case 1686:
#line 10802 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
    break;

  case 1687:
#line 10804 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1688:
#line 10806 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1689:
#line 10808 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1690:
#line 10810 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1691:
#line 10812 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1692:
#line 10814 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1693:
#line 10816 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1694:
#line 10818 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1695:
#line 10820 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1696:
#line 10824 "sql_yacc.yy"
    {}
    break;

  case 1697:
#line 10825 "sql_yacc.yy"
    {}
    break;

  case 1698:
#line 10830 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1699:
#line 10835 "sql_yacc.yy"
    {}
    break;

  case 1702:
#line 10844 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1703:
#line 10845 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1704:
#line 10846 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1705:
#line 10851 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1706:
#line 10857 "sql_yacc.yy"
    {}
    break;

  case 1708:
#line 10866 "sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1709:
#line 10870 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1710:
#line 10882 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1711:
#line 10891 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1712:
#line 10892 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1713:
#line 10893 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1714:
#line 10900 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1715:
#line 10911 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD DATA");
              MYSQL_YYABORT;
            }
            lex->fname_start= lip->get_ptr();
          }
    break;

  case 1716:
#line 10924 "sql_yacc.yy"
    {}
    break;

  case 1717:
#line 10926 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            WARN_DEPRECATED(yythd, "6.0", "LOAD TABLE FROM MASTER",
                            "MySQL Administrator (mysqldump, mysql)");
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD TABLE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(3) - (5)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1718:
#line 10943 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->lock_option= (yyvsp[(1) - (4)].lock_type);
            lex->local_file=  (yyvsp[(2) - (4)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(4) - (4)].lex_str).str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 1719:
#line 10954 "sql_yacc.yy"
    {
            Lex->fname_end= YYLIP->get_ptr();
          }
    break;

  case 1720:
#line 10958 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(10) - (10)].table), NULL, TL_OPTION_UPDATING,
                                           lex->lock_option))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1721:
#line 10968 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(12) - (12)].charset); }
    break;

  case 1722:
#line 10971 "sql_yacc.yy"
    {}
    break;

  case 1723:
#line 10973 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
            WARN_DEPRECATED(yythd, "6.0", "LOAD DATA FROM MASTER",
                            "mysqldump or future "
                            "BACKUP/RESTORE DATABASE facility");
          }
    break;

  case 1724:
#line 10982 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1725:
#line 10983 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1726:
#line 10987 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1727:
#line 10989 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1728:
#line 11000 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1729:
#line 11004 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1730:
#line 11005 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1731:
#line 11006 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1736:
#line 11021 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1737:
#line 11026 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1738:
#line 11033 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1739:
#line 11038 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1744:
#line 11056 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1745:
#line 11061 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1747:
#line 11070 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1748:
#line 11077 "sql_yacc.yy"
    {}
    break;

  case 1749:
#line 11078 "sql_yacc.yy"
    {}
    break;

  case 1750:
#line 11079 "sql_yacc.yy"
    {}
    break;

  case 1751:
#line 11084 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1752:
#line 11086 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1753:
#line 11090 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1754:
#line 11092 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1755:
#line 11100 "sql_yacc.yy"
    {}
    break;

  case 1756:
#line 11101 "sql_yacc.yy"
    {}
    break;

  case 1757:
#line 11108 "sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1758:
#line 11132 "sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1759:
#line 11144 "sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1760:
#line 11155 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1761:
#line 11174 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1762:
#line 11182 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1763:
#line 11194 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1764:
#line 11209 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1765:
#line 11229 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1766:
#line 11230 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1767:
#line 11232 "sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1768:
#line 11239 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1769:
#line 11240 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1770:
#line 11242 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1771:
#line 11249 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1772:
#line 11255 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1773:
#line 11261 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1774:
#line 11267 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1775:
#line 11273 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1776:
#line 11302 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1777:
#line 11329 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1778:
#line 11330 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1779:
#line 11331 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1780:
#line 11336 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1781:
#line 11346 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1782:
#line 11356 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1783:
#line 11362 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1784:
#line 11371 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1785:
#line 11385 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1786:
#line 11386 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1787:
#line 11391 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1788:
#line 11400 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1789:
#line 11415 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1790:
#line 11420 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1791:
#line 11466 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1792:
#line 11471 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1793:
#line 11488 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1794:
#line 11493 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list((uchar*) trg_fld,
                                                 (uchar**) &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1795:
#line 11572 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1796:
#line 11597 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1797:
#line 11627 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1798:
#line 11629 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1799:
#line 11645 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1800:
#line 11654 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1801:
#line 11659 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1802:
#line 11665 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1803:
#line 11671 "sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1804:
#line 11681 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1805:
#line 11690 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1806:
#line 11692 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, (yyvsp[(1) - (1)].lex_str).str + wlen);
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1807:
#line 11721 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1808:
#line 11737 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1809:
#line 11753 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1810:
#line 11769 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1811:
#line 11771 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1812:
#line 11781 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1813:
#line 11783 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1814:
#line 11793 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1815:
#line 11794 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1816:
#line 11795 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1817:
#line 11800 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1818:
#line 11814 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
          }
    break;

  case 1819:
#line 11827 "sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1820:
#line 11841 "sql_yacc.yy"
    {}
    break;

  case 1821:
#line 11842 "sql_yacc.yy"
    {}
    break;

  case 1822:
#line 11843 "sql_yacc.yy"
    {}
    break;

  case 1823:
#line 11844 "sql_yacc.yy"
    {}
    break;

  case 1824:
#line 11845 "sql_yacc.yy"
    {}
    break;

  case 1825:
#line 11846 "sql_yacc.yy"
    {}
    break;

  case 1826:
#line 11847 "sql_yacc.yy"
    {}
    break;

  case 1827:
#line 11848 "sql_yacc.yy"
    {}
    break;

  case 1828:
#line 11849 "sql_yacc.yy"
    {}
    break;

  case 1829:
#line 11850 "sql_yacc.yy"
    {}
    break;

  case 1830:
#line 11851 "sql_yacc.yy"
    {}
    break;

  case 1831:
#line 11852 "sql_yacc.yy"
    {}
    break;

  case 1832:
#line 11853 "sql_yacc.yy"
    {}
    break;

  case 1833:
#line 11854 "sql_yacc.yy"
    {}
    break;

  case 1834:
#line 11855 "sql_yacc.yy"
    {}
    break;

  case 1835:
#line 11856 "sql_yacc.yy"
    {}
    break;

  case 1836:
#line 11857 "sql_yacc.yy"
    {}
    break;

  case 1837:
#line 11858 "sql_yacc.yy"
    {}
    break;

  case 1838:
#line 11859 "sql_yacc.yy"
    {}
    break;

  case 1839:
#line 11860 "sql_yacc.yy"
    {}
    break;

  case 1840:
#line 11861 "sql_yacc.yy"
    {}
    break;

  case 1841:
#line 11862 "sql_yacc.yy"
    {}
    break;

  case 1842:
#line 11863 "sql_yacc.yy"
    {}
    break;

  case 1843:
#line 11864 "sql_yacc.yy"
    {}
    break;

  case 1844:
#line 11865 "sql_yacc.yy"
    {}
    break;

  case 1845:
#line 11866 "sql_yacc.yy"
    {}
    break;

  case 1846:
#line 11867 "sql_yacc.yy"
    {}
    break;

  case 1847:
#line 11868 "sql_yacc.yy"
    {}
    break;

  case 1848:
#line 11869 "sql_yacc.yy"
    {}
    break;

  case 1849:
#line 11870 "sql_yacc.yy"
    {}
    break;

  case 1850:
#line 11871 "sql_yacc.yy"
    {}
    break;

  case 1851:
#line 11872 "sql_yacc.yy"
    {}
    break;

  case 1852:
#line 11873 "sql_yacc.yy"
    {}
    break;

  case 1853:
#line 11874 "sql_yacc.yy"
    {}
    break;

  case 1854:
#line 11875 "sql_yacc.yy"
    {}
    break;

  case 1855:
#line 11876 "sql_yacc.yy"
    {}
    break;

  case 1856:
#line 11877 "sql_yacc.yy"
    {}
    break;

  case 1857:
#line 11878 "sql_yacc.yy"
    {}
    break;

  case 1858:
#line 11879 "sql_yacc.yy"
    {}
    break;

  case 1859:
#line 11880 "sql_yacc.yy"
    {}
    break;

  case 1860:
#line 11881 "sql_yacc.yy"
    {}
    break;

  case 1861:
#line 11882 "sql_yacc.yy"
    {}
    break;

  case 1862:
#line 11883 "sql_yacc.yy"
    {}
    break;

  case 1863:
#line 11884 "sql_yacc.yy"
    {}
    break;

  case 1864:
#line 11885 "sql_yacc.yy"
    {}
    break;

  case 1865:
#line 11886 "sql_yacc.yy"
    {}
    break;

  case 1866:
#line 11887 "sql_yacc.yy"
    {}
    break;

  case 1867:
#line 11888 "sql_yacc.yy"
    {}
    break;

  case 1868:
#line 11889 "sql_yacc.yy"
    {}
    break;

  case 1869:
#line 11890 "sql_yacc.yy"
    {}
    break;

  case 1870:
#line 11900 "sql_yacc.yy"
    {}
    break;

  case 1871:
#line 11901 "sql_yacc.yy"
    {}
    break;

  case 1872:
#line 11902 "sql_yacc.yy"
    {}
    break;

  case 1873:
#line 11903 "sql_yacc.yy"
    {}
    break;

  case 1874:
#line 11904 "sql_yacc.yy"
    {}
    break;

  case 1875:
#line 11905 "sql_yacc.yy"
    {}
    break;

  case 1876:
#line 11906 "sql_yacc.yy"
    {}
    break;

  case 1877:
#line 11907 "sql_yacc.yy"
    {}
    break;

  case 1878:
#line 11908 "sql_yacc.yy"
    {}
    break;

  case 1879:
#line 11909 "sql_yacc.yy"
    {}
    break;

  case 1880:
#line 11910 "sql_yacc.yy"
    {}
    break;

  case 1881:
#line 11911 "sql_yacc.yy"
    {}
    break;

  case 1882:
#line 11912 "sql_yacc.yy"
    {}
    break;

  case 1883:
#line 11913 "sql_yacc.yy"
    {}
    break;

  case 1884:
#line 11914 "sql_yacc.yy"
    {}
    break;

  case 1885:
#line 11915 "sql_yacc.yy"
    {}
    break;

  case 1886:
#line 11916 "sql_yacc.yy"
    {}
    break;

  case 1887:
#line 11917 "sql_yacc.yy"
    {}
    break;

  case 1888:
#line 11918 "sql_yacc.yy"
    {}
    break;

  case 1889:
#line 11919 "sql_yacc.yy"
    {}
    break;

  case 1890:
#line 11920 "sql_yacc.yy"
    {}
    break;

  case 1891:
#line 11921 "sql_yacc.yy"
    {}
    break;

  case 1892:
#line 11922 "sql_yacc.yy"
    {}
    break;

  case 1893:
#line 11923 "sql_yacc.yy"
    {}
    break;

  case 1894:
#line 11924 "sql_yacc.yy"
    {}
    break;

  case 1895:
#line 11925 "sql_yacc.yy"
    {}
    break;

  case 1896:
#line 11926 "sql_yacc.yy"
    {}
    break;

  case 1897:
#line 11927 "sql_yacc.yy"
    {}
    break;

  case 1898:
#line 11928 "sql_yacc.yy"
    {}
    break;

  case 1899:
#line 11929 "sql_yacc.yy"
    {}
    break;

  case 1900:
#line 11930 "sql_yacc.yy"
    {}
    break;

  case 1901:
#line 11931 "sql_yacc.yy"
    {}
    break;

  case 1902:
#line 11932 "sql_yacc.yy"
    {}
    break;

  case 1903:
#line 11933 "sql_yacc.yy"
    {}
    break;

  case 1904:
#line 11934 "sql_yacc.yy"
    {}
    break;

  case 1905:
#line 11935 "sql_yacc.yy"
    {}
    break;

  case 1906:
#line 11936 "sql_yacc.yy"
    {}
    break;

  case 1907:
#line 11937 "sql_yacc.yy"
    {}
    break;

  case 1908:
#line 11938 "sql_yacc.yy"
    {}
    break;

  case 1909:
#line 11939 "sql_yacc.yy"
    {}
    break;

  case 1910:
#line 11940 "sql_yacc.yy"
    {}
    break;

  case 1911:
#line 11941 "sql_yacc.yy"
    {}
    break;

  case 1912:
#line 11942 "sql_yacc.yy"
    {}
    break;

  case 1913:
#line 11943 "sql_yacc.yy"
    {}
    break;

  case 1914:
#line 11944 "sql_yacc.yy"
    {}
    break;

  case 1915:
#line 11945 "sql_yacc.yy"
    {}
    break;

  case 1916:
#line 11946 "sql_yacc.yy"
    {}
    break;

  case 1917:
#line 11947 "sql_yacc.yy"
    {}
    break;

  case 1918:
#line 11948 "sql_yacc.yy"
    {}
    break;

  case 1919:
#line 11949 "sql_yacc.yy"
    {}
    break;

  case 1920:
#line 11950 "sql_yacc.yy"
    {}
    break;

  case 1921:
#line 11951 "sql_yacc.yy"
    {}
    break;

  case 1922:
#line 11952 "sql_yacc.yy"
    {}
    break;

  case 1923:
#line 11953 "sql_yacc.yy"
    {}
    break;

  case 1924:
#line 11954 "sql_yacc.yy"
    {}
    break;

  case 1925:
#line 11955 "sql_yacc.yy"
    {}
    break;

  case 1926:
#line 11956 "sql_yacc.yy"
    {}
    break;

  case 1927:
#line 11957 "sql_yacc.yy"
    {}
    break;

  case 1928:
#line 11958 "sql_yacc.yy"
    {}
    break;

  case 1929:
#line 11959 "sql_yacc.yy"
    {}
    break;

  case 1930:
#line 11960 "sql_yacc.yy"
    {}
    break;

  case 1931:
#line 11961 "sql_yacc.yy"
    {}
    break;

  case 1932:
#line 11962 "sql_yacc.yy"
    {}
    break;

  case 1933:
#line 11963 "sql_yacc.yy"
    {}
    break;

  case 1934:
#line 11964 "sql_yacc.yy"
    {}
    break;

  case 1935:
#line 11965 "sql_yacc.yy"
    {}
    break;

  case 1936:
#line 11966 "sql_yacc.yy"
    {}
    break;

  case 1937:
#line 11967 "sql_yacc.yy"
    {}
    break;

  case 1938:
#line 11968 "sql_yacc.yy"
    {}
    break;

  case 1939:
#line 11969 "sql_yacc.yy"
    {}
    break;

  case 1940:
#line 11970 "sql_yacc.yy"
    {}
    break;

  case 1941:
#line 11971 "sql_yacc.yy"
    {}
    break;

  case 1942:
#line 11972 "sql_yacc.yy"
    {}
    break;

  case 1943:
#line 11973 "sql_yacc.yy"
    {}
    break;

  case 1944:
#line 11974 "sql_yacc.yy"
    {}
    break;

  case 1945:
#line 11975 "sql_yacc.yy"
    {}
    break;

  case 1946:
#line 11976 "sql_yacc.yy"
    {}
    break;

  case 1947:
#line 11977 "sql_yacc.yy"
    {}
    break;

  case 1948:
#line 11978 "sql_yacc.yy"
    {}
    break;

  case 1949:
#line 11979 "sql_yacc.yy"
    {}
    break;

  case 1950:
#line 11980 "sql_yacc.yy"
    {}
    break;

  case 1951:
#line 11981 "sql_yacc.yy"
    {}
    break;

  case 1952:
#line 11982 "sql_yacc.yy"
    {}
    break;

  case 1953:
#line 11983 "sql_yacc.yy"
    {}
    break;

  case 1954:
#line 11984 "sql_yacc.yy"
    {}
    break;

  case 1955:
#line 11985 "sql_yacc.yy"
    {}
    break;

  case 1956:
#line 11986 "sql_yacc.yy"
    {}
    break;

  case 1957:
#line 11987 "sql_yacc.yy"
    {}
    break;

  case 1958:
#line 11988 "sql_yacc.yy"
    {}
    break;

  case 1959:
#line 11989 "sql_yacc.yy"
    {}
    break;

  case 1960:
#line 11990 "sql_yacc.yy"
    {}
    break;

  case 1961:
#line 11991 "sql_yacc.yy"
    {}
    break;

  case 1962:
#line 11992 "sql_yacc.yy"
    {}
    break;

  case 1963:
#line 11993 "sql_yacc.yy"
    {}
    break;

  case 1964:
#line 11994 "sql_yacc.yy"
    {}
    break;

  case 1965:
#line 11995 "sql_yacc.yy"
    {}
    break;

  case 1966:
#line 11996 "sql_yacc.yy"
    {}
    break;

  case 1967:
#line 11997 "sql_yacc.yy"
    {}
    break;

  case 1968:
#line 11998 "sql_yacc.yy"
    {}
    break;

  case 1969:
#line 11999 "sql_yacc.yy"
    {}
    break;

  case 1970:
#line 12000 "sql_yacc.yy"
    {}
    break;

  case 1971:
#line 12001 "sql_yacc.yy"
    {}
    break;

  case 1972:
#line 12002 "sql_yacc.yy"
    {}
    break;

  case 1973:
#line 12003 "sql_yacc.yy"
    {}
    break;

  case 1974:
#line 12004 "sql_yacc.yy"
    {}
    break;

  case 1975:
#line 12005 "sql_yacc.yy"
    {}
    break;

  case 1976:
#line 12006 "sql_yacc.yy"
    {}
    break;

  case 1977:
#line 12007 "sql_yacc.yy"
    {}
    break;

  case 1978:
#line 12008 "sql_yacc.yy"
    {}
    break;

  case 1979:
#line 12009 "sql_yacc.yy"
    {}
    break;

  case 1980:
#line 12010 "sql_yacc.yy"
    {}
    break;

  case 1981:
#line 12011 "sql_yacc.yy"
    {}
    break;

  case 1982:
#line 12012 "sql_yacc.yy"
    {}
    break;

  case 1983:
#line 12013 "sql_yacc.yy"
    {}
    break;

  case 1984:
#line 12014 "sql_yacc.yy"
    {}
    break;

  case 1985:
#line 12015 "sql_yacc.yy"
    {}
    break;

  case 1986:
#line 12016 "sql_yacc.yy"
    {}
    break;

  case 1987:
#line 12017 "sql_yacc.yy"
    {}
    break;

  case 1988:
#line 12018 "sql_yacc.yy"
    {}
    break;

  case 1989:
#line 12019 "sql_yacc.yy"
    {}
    break;

  case 1990:
#line 12020 "sql_yacc.yy"
    {}
    break;

  case 1991:
#line 12021 "sql_yacc.yy"
    {}
    break;

  case 1992:
#line 12022 "sql_yacc.yy"
    {}
    break;

  case 1993:
#line 12023 "sql_yacc.yy"
    {}
    break;

  case 1994:
#line 12024 "sql_yacc.yy"
    {}
    break;

  case 1995:
#line 12025 "sql_yacc.yy"
    {}
    break;

  case 1996:
#line 12026 "sql_yacc.yy"
    {}
    break;

  case 1997:
#line 12027 "sql_yacc.yy"
    {}
    break;

  case 1998:
#line 12028 "sql_yacc.yy"
    {}
    break;

  case 1999:
#line 12029 "sql_yacc.yy"
    {}
    break;

  case 2000:
#line 12030 "sql_yacc.yy"
    {}
    break;

  case 2001:
#line 12031 "sql_yacc.yy"
    {}
    break;

  case 2002:
#line 12032 "sql_yacc.yy"
    {}
    break;

  case 2003:
#line 12033 "sql_yacc.yy"
    {}
    break;

  case 2004:
#line 12034 "sql_yacc.yy"
    {}
    break;

  case 2005:
#line 12035 "sql_yacc.yy"
    {}
    break;

  case 2006:
#line 12036 "sql_yacc.yy"
    {}
    break;

  case 2007:
#line 12037 "sql_yacc.yy"
    {}
    break;

  case 2008:
#line 12038 "sql_yacc.yy"
    {}
    break;

  case 2009:
#line 12039 "sql_yacc.yy"
    {}
    break;

  case 2010:
#line 12040 "sql_yacc.yy"
    {}
    break;

  case 2011:
#line 12041 "sql_yacc.yy"
    {}
    break;

  case 2012:
#line 12042 "sql_yacc.yy"
    {}
    break;

  case 2013:
#line 12043 "sql_yacc.yy"
    {}
    break;

  case 2014:
#line 12044 "sql_yacc.yy"
    {}
    break;

  case 2015:
#line 12045 "sql_yacc.yy"
    {}
    break;

  case 2016:
#line 12046 "sql_yacc.yy"
    {}
    break;

  case 2017:
#line 12047 "sql_yacc.yy"
    {}
    break;

  case 2018:
#line 12048 "sql_yacc.yy"
    {}
    break;

  case 2019:
#line 12049 "sql_yacc.yy"
    {}
    break;

  case 2020:
#line 12050 "sql_yacc.yy"
    {}
    break;

  case 2021:
#line 12051 "sql_yacc.yy"
    {}
    break;

  case 2022:
#line 12052 "sql_yacc.yy"
    {}
    break;

  case 2023:
#line 12053 "sql_yacc.yy"
    {}
    break;

  case 2024:
#line 12054 "sql_yacc.yy"
    {}
    break;

  case 2025:
#line 12055 "sql_yacc.yy"
    {}
    break;

  case 2026:
#line 12056 "sql_yacc.yy"
    {}
    break;

  case 2027:
#line 12057 "sql_yacc.yy"
    {}
    break;

  case 2028:
#line 12058 "sql_yacc.yy"
    {}
    break;

  case 2029:
#line 12059 "sql_yacc.yy"
    {}
    break;

  case 2030:
#line 12060 "sql_yacc.yy"
    {}
    break;

  case 2031:
#line 12061 "sql_yacc.yy"
    {}
    break;

  case 2032:
#line 12062 "sql_yacc.yy"
    {}
    break;

  case 2033:
#line 12063 "sql_yacc.yy"
    {}
    break;

  case 2034:
#line 12064 "sql_yacc.yy"
    {}
    break;

  case 2035:
#line 12065 "sql_yacc.yy"
    {}
    break;

  case 2036:
#line 12066 "sql_yacc.yy"
    {}
    break;

  case 2037:
#line 12067 "sql_yacc.yy"
    {}
    break;

  case 2038:
#line 12068 "sql_yacc.yy"
    {}
    break;

  case 2039:
#line 12069 "sql_yacc.yy"
    {}
    break;

  case 2040:
#line 12070 "sql_yacc.yy"
    {}
    break;

  case 2041:
#line 12071 "sql_yacc.yy"
    {}
    break;

  case 2042:
#line 12072 "sql_yacc.yy"
    {}
    break;

  case 2043:
#line 12073 "sql_yacc.yy"
    {}
    break;

  case 2044:
#line 12074 "sql_yacc.yy"
    {}
    break;

  case 2045:
#line 12075 "sql_yacc.yy"
    {}
    break;

  case 2046:
#line 12076 "sql_yacc.yy"
    {}
    break;

  case 2047:
#line 12077 "sql_yacc.yy"
    {}
    break;

  case 2048:
#line 12078 "sql_yacc.yy"
    {}
    break;

  case 2049:
#line 12079 "sql_yacc.yy"
    {}
    break;

  case 2050:
#line 12080 "sql_yacc.yy"
    {}
    break;

  case 2051:
#line 12081 "sql_yacc.yy"
    {}
    break;

  case 2052:
#line 12082 "sql_yacc.yy"
    {}
    break;

  case 2053:
#line 12083 "sql_yacc.yy"
    {}
    break;

  case 2054:
#line 12084 "sql_yacc.yy"
    {}
    break;

  case 2055:
#line 12085 "sql_yacc.yy"
    {}
    break;

  case 2056:
#line 12086 "sql_yacc.yy"
    {}
    break;

  case 2057:
#line 12087 "sql_yacc.yy"
    {}
    break;

  case 2058:
#line 12088 "sql_yacc.yy"
    {}
    break;

  case 2059:
#line 12089 "sql_yacc.yy"
    {}
    break;

  case 2060:
#line 12090 "sql_yacc.yy"
    {}
    break;

  case 2061:
#line 12091 "sql_yacc.yy"
    {}
    break;

  case 2062:
#line 12092 "sql_yacc.yy"
    {}
    break;

  case 2063:
#line 12093 "sql_yacc.yy"
    {}
    break;

  case 2064:
#line 12094 "sql_yacc.yy"
    {}
    break;

  case 2065:
#line 12095 "sql_yacc.yy"
    {}
    break;

  case 2066:
#line 12096 "sql_yacc.yy"
    {}
    break;

  case 2067:
#line 12097 "sql_yacc.yy"
    {}
    break;

  case 2068:
#line 12098 "sql_yacc.yy"
    {}
    break;

  case 2069:
#line 12099 "sql_yacc.yy"
    {}
    break;

  case 2070:
#line 12100 "sql_yacc.yy"
    {}
    break;

  case 2071:
#line 12101 "sql_yacc.yy"
    {}
    break;

  case 2072:
#line 12102 "sql_yacc.yy"
    {}
    break;

  case 2073:
#line 12103 "sql_yacc.yy"
    {}
    break;

  case 2074:
#line 12104 "sql_yacc.yy"
    {}
    break;

  case 2075:
#line 12105 "sql_yacc.yy"
    {}
    break;

  case 2076:
#line 12106 "sql_yacc.yy"
    {}
    break;

  case 2077:
#line 12107 "sql_yacc.yy"
    {}
    break;

  case 2078:
#line 12108 "sql_yacc.yy"
    {}
    break;

  case 2079:
#line 12109 "sql_yacc.yy"
    {}
    break;

  case 2080:
#line 12110 "sql_yacc.yy"
    {}
    break;

  case 2081:
#line 12111 "sql_yacc.yy"
    {}
    break;

  case 2082:
#line 12112 "sql_yacc.yy"
    {}
    break;

  case 2083:
#line 12113 "sql_yacc.yy"
    {}
    break;

  case 2084:
#line 12114 "sql_yacc.yy"
    {}
    break;

  case 2085:
#line 12115 "sql_yacc.yy"
    {}
    break;

  case 2086:
#line 12116 "sql_yacc.yy"
    {}
    break;

  case 2087:
#line 12117 "sql_yacc.yy"
    {}
    break;

  case 2088:
#line 12118 "sql_yacc.yy"
    {}
    break;

  case 2089:
#line 12119 "sql_yacc.yy"
    {}
    break;

  case 2090:
#line 12120 "sql_yacc.yy"
    {}
    break;

  case 2091:
#line 12121 "sql_yacc.yy"
    {}
    break;

  case 2092:
#line 12122 "sql_yacc.yy"
    {}
    break;

  case 2093:
#line 12123 "sql_yacc.yy"
    {}
    break;

  case 2094:
#line 12124 "sql_yacc.yy"
    {}
    break;

  case 2095:
#line 12125 "sql_yacc.yy"
    {}
    break;

  case 2096:
#line 12126 "sql_yacc.yy"
    {}
    break;

  case 2097:
#line 12127 "sql_yacc.yy"
    {}
    break;

  case 2098:
#line 12128 "sql_yacc.yy"
    {}
    break;

  case 2099:
#line 12129 "sql_yacc.yy"
    {}
    break;

  case 2100:
#line 12130 "sql_yacc.yy"
    {}
    break;

  case 2101:
#line 12131 "sql_yacc.yy"
    {}
    break;

  case 2102:
#line 12132 "sql_yacc.yy"
    {}
    break;

  case 2103:
#line 12133 "sql_yacc.yy"
    {}
    break;

  case 2104:
#line 12134 "sql_yacc.yy"
    {}
    break;

  case 2105:
#line 12135 "sql_yacc.yy"
    {}
    break;

  case 2106:
#line 12136 "sql_yacc.yy"
    {}
    break;

  case 2107:
#line 12137 "sql_yacc.yy"
    {}
    break;

  case 2108:
#line 12138 "sql_yacc.yy"
    {}
    break;

  case 2109:
#line 12139 "sql_yacc.yy"
    {}
    break;

  case 2110:
#line 12140 "sql_yacc.yy"
    {}
    break;

  case 2111:
#line 12141 "sql_yacc.yy"
    {}
    break;

  case 2112:
#line 12142 "sql_yacc.yy"
    {}
    break;

  case 2113:
#line 12143 "sql_yacc.yy"
    {}
    break;

  case 2114:
#line 12144 "sql_yacc.yy"
    {}
    break;

  case 2115:
#line 12145 "sql_yacc.yy"
    {}
    break;

  case 2116:
#line 12146 "sql_yacc.yy"
    {}
    break;

  case 2117:
#line 12147 "sql_yacc.yy"
    {}
    break;

  case 2118:
#line 12148 "sql_yacc.yy"
    {}
    break;

  case 2119:
#line 12149 "sql_yacc.yy"
    {}
    break;

  case 2120:
#line 12150 "sql_yacc.yy"
    {}
    break;

  case 2121:
#line 12151 "sql_yacc.yy"
    {}
    break;

  case 2122:
#line 12152 "sql_yacc.yy"
    {}
    break;

  case 2123:
#line 12153 "sql_yacc.yy"
    {}
    break;

  case 2124:
#line 12154 "sql_yacc.yy"
    {}
    break;

  case 2125:
#line 12155 "sql_yacc.yy"
    {}
    break;

  case 2126:
#line 12156 "sql_yacc.yy"
    {}
    break;

  case 2127:
#line 12157 "sql_yacc.yy"
    {}
    break;

  case 2128:
#line 12158 "sql_yacc.yy"
    {}
    break;

  case 2129:
#line 12159 "sql_yacc.yy"
    {}
    break;

  case 2130:
#line 12160 "sql_yacc.yy"
    {}
    break;

  case 2131:
#line 12167 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2132:
#line 12177 "sql_yacc.yy"
    {}
    break;

  case 2133:
#line 12181 "sql_yacc.yy"
    {}
    break;

  case 2134:
#line 12182 "sql_yacc.yy"
    {}
    break;

  case 2137:
#line 12191 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2138:
#line 12222 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              lex->sphead->restore_lex(thd);
            }
          }
    break;

  case 2139:
#line 12272 "sql_yacc.yy"
    {}
    break;

  case 2140:
#line 12273 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2141:
#line 12274 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2142:
#line 12275 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2143:
#line 12279 "sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2144:
#line 12280 "sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2145:
#line 12284 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2146:
#line 12285 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2147:
#line 12286 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2148:
#line 12287 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2149:
#line 12291 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2150:
#line 12292 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2151:
#line 12293 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2152:
#line 12294 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2155:
#line 12304 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              Item *it;
              Item_trigger_field *trg_fld;
              sp_instr_set_trigger_field *sp_fld;
              LINT_INIT(sp_fld);
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if ((yyvsp[(4) - (4)].item))
                it= (yyvsp[(4) - (4)].item);
              else
              {
                /* QQ: Shouldn't this be field's default value ? */
                it= new Item_null();
              }

              DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));

              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            Item_trigger_field::NEW_ROW,
                                            (yyvsp[(2) - (4)].variable).base_name.str,
                                            UPDATE_ACL, FALSE);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              sp_fld= new sp_instr_set_trigger_field(lex->sphead->
                                                     instructions(),
                                                     lex->spcont,
                                                     trg_fld,
                                                     it, lex);
              if (sp_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field
                objects in trigger.
              */
              lex->trg_table_fields.link_in_list((uchar *)trg_fld,
                                                 (uchar **) &trg_fld->
                                                   next_trg_field);

              if (lex->sphead->add_instr(sp_fld))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            { /* System variable */
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);
              set_var *var= new set_var(lex->option_type, (yyvsp[(2) - (4)].variable).var,
                                        &(yyvsp[(2) - (4)].variable).base_name, (yyvsp[(4) - (4)].item));
              if (var == NULL)
                MYSQL_YYABORT;
              lex->var_list.push_back(var);
            }
            else
            {
              /* An SP local variable */
              sp_pcontext *ctx= lex->spcont;
              sp_variable_t *spv;
              sp_instr_set *sp_set;
              Item *it;
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              spv= ctx->find_variable(&(yyvsp[(2) - (4)].variable).base_name);

              if ((yyvsp[(4) - (4)].item))
                it= (yyvsp[(4) - (4)].item);
              else if (spv->dflt)
                it= spv->dflt;
              else
              {
                it= new (thd->mem_root) Item_null();
                if (it == NULL)
                  MYSQL_YYABORT;
              }
              sp_set= new sp_instr_set(lex->sphead->instructions(), ctx,
                                       spv->offset, it, spv->type, lex, TRUE);
              if (sp_set == NULL ||
                  lex->sphead->add_instr(sp_set))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2156:
#line 12402 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2157:
#line 12421 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2158:
#line 12432 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            set_var *var= new set_var((yyvsp[(3) - (6)].var_type), (yyvsp[(4) - (6)].variable).var, &(yyvsp[(4) - (6)].variable).base_name, (yyvsp[(6) - (6)].item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2159:
#line 12440 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2160:
#line 12454 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2161:
#line 12469 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2162:
#line 12488 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->priv_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2163:
#line 12515 "sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2164:
#line 12528 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            /* We have to lookup here since local vars can shadow sysvars */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* Not an SP local variable */
              sys_var *tmp=find_sys_var(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= null_lex_str;
              if (spc && tmp == &sys_autocommit)
              {
                /*
                  We don't allow setting AUTOCOMMIT from a stored function
                  or trigger.
                */
                lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
              }
            }
            else
            {
              /* An SP local variable */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2165:
#line 12560 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2166:
#line 12603 "sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2167:
#line 12616 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2168:
#line 12617 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2169:
#line 12618 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2170:
#line 12619 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2171:
#line 12623 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2172:
#line 12625 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2173:
#line 12634 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2174:
#line 12645 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2175:
#line 12646 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2176:
#line 12648 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2177:
#line 12654 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2178:
#line 12660 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2179:
#line 12671 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2180:
#line 12682 "sql_yacc.yy"
    {}
    break;

  case 2185:
#line 12697 "sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type))
              MYSQL_YYABORT;
            /* If table is to be write locked, protect from a impending GRL. */
            if (lock_type >= TL_WRITE_ALLOW_WRITE)
              Lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 2186:
#line 12708 "sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2187:
#line 12709 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2188:
#line 12710 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2189:
#line 12711 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2190:
#line 12716 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2191:
#line 12727 "sql_yacc.yy"
    {}
    break;

  case 2192:
#line 12736 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2193:
#line 12748 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2194:
#line 12760 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2195:
#line 12779 "sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
          }
    break;

  case 2196:
#line 12785 "sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2197:
#line 12786 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2198:
#line 12790 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2199:
#line 12791 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2200:
#line 12795 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2201:
#line 12796 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2202:
#line 12797 "sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2203:
#line 12798 "sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2204:
#line 12800 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2205:
#line 12808 "sql_yacc.yy"
    {}
    break;

  case 2206:
#line 12812 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2207:
#line 12813 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2208:
#line 12814 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2209:
#line 12815 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2210:
#line 12816 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2211:
#line 12823 "sql_yacc.yy"
    {}
    break;

  case 2212:
#line 12828 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2213:
#line 12834 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2214:
#line 12845 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2215:
#line 12856 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2216:
#line 12863 "sql_yacc.yy"
    {}
    break;

  case 2217:
#line 12869 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2218:
#line 12876 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2219:
#line 12888 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2222:
#line 12906 "sql_yacc.yy"
    {}
    break;

  case 2223:
#line 12908 "sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2228:
#line 12926 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2229:
#line 12927 "sql_yacc.yy"
    {}
    break;

  case 2230:
#line 12929 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2231:
#line 12930 "sql_yacc.yy"
    {}
    break;

  case 2232:
#line 12932 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2233:
#line 12933 "sql_yacc.yy"
    {}
    break;

  case 2234:
#line 12935 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2235:
#line 12936 "sql_yacc.yy"
    {}
    break;

  case 2236:
#line 12937 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2237:
#line 12938 "sql_yacc.yy"
    {}
    break;

  case 2238:
#line 12939 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2239:
#line 12940 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2240:
#line 12941 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2241:
#line 12942 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2242:
#line 12943 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2243:
#line 12944 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2244:
#line 12945 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2245:
#line 12946 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2246:
#line 12947 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2247:
#line 12948 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2248:
#line 12949 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2249:
#line 12950 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2250:
#line 12951 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2251:
#line 12952 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2252:
#line 12953 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2253:
#line 12954 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2254:
#line 12955 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2255:
#line 12956 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2256:
#line 12957 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2257:
#line 12958 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2258:
#line 12959 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2259:
#line 12960 "sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2260:
#line 12961 "sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2261:
#line 12965 "sql_yacc.yy"
    {}
    break;

  case 2262:
#line 12966 "sql_yacc.yy"
    {}
    break;

  case 2265:
#line 12976 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2266:
#line 12986 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2267:
#line 12996 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2268:
#line 13009 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2269:
#line 13024 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2270:
#line 13037 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2271:
#line 13050 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2272:
#line 13062 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2273:
#line 13067 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2274:
#line 13075 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2275:
#line 13080 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2276:
#line 13088 "sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2277:
#line 13115 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); }
    break;

  case 2278:
#line 13117 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2279:
#line 13122 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2283:
#line 13136 "sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2285:
#line 13165 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2286:
#line 13169 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2287:
#line 13173 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2288:
#line 13177 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2289:
#line 13183 "sql_yacc.yy"
    {}
    break;

  case 2291:
#line 13188 "sql_yacc.yy"
    {}
    break;

  case 2292:
#line 13189 "sql_yacc.yy"
    {}
    break;

  case 2293:
#line 13193 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2294:
#line 13195 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2295:
#line 13201 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2296:
#line 13207 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2297:
#line 13213 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2298:
#line 13222 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2299:
#line 13227 "sql_yacc.yy"
    {}
    break;

  case 2300:
#line 13231 "sql_yacc.yy"
    {}
    break;

  case 2301:
#line 13232 "sql_yacc.yy"
    {}
    break;

  case 2302:
#line 13237 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 1); }
    break;

  case 2303:
#line 13238 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2304:
#line 13239 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2305:
#line 13244 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 2); }
    break;

  case 2306:
#line 13245 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2307:
#line 13246 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2308:
#line 13250 "sql_yacc.yy"
    {}
    break;

  case 2309:
#line 13251 "sql_yacc.yy"
    {}
    break;

  case 2310:
#line 13256 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2311:
#line 13266 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2312:
#line 13274 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2313:
#line 13283 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2314:
#line 13292 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2315:
#line 13305 "sql_yacc.yy"
    {}
    break;

  case 2317:
#line 13311 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result && 
               (lex->result->get_nest_level() == -1 ||
                lex->result->get_nest_level() == lex->nest_level))
              {
                /* 
                   Only the last SELECT can have INTO unless the INTO and UNION
                   are at different nest levels. In version 5.1 and above, INTO
                   will onle be allowed at top level.
                */
                my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
                MYSQL_YYABORT;
              }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* This counter shouldn't be incremented for UNION parts */
            Lex->nest_level--;
            if (mysql_new_select(lex, 0))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage=UNION_TYPE;
            if ((yyvsp[(2) - (2)].num)) /* UNION DISTINCT - remember position */
              lex->current_select->master_unit()->union_distinct=
                lex->current_select;
          }
    break;

  case 2318:
#line 13341 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2319:
#line 13351 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2320:
#line 13352 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2321:
#line 13353 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2322:
#line 13357 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2323:
#line 13373 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2326:
#line 13386 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2327:
#line 13387 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2328:
#line 13388 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2329:
#line 13392 "sql_yacc.yy"
    {
          (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
        }
    break;

  case 2330:
#line 13399 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (5)].select_lex);
        }
    break;

  case 2331:
#line 13404 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (6)].select_lex);
        }
    break;

  case 2332:
#line 13409 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2333:
#line 13430 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            /*
              Set the required lock level for the tables associated with the
              current sub-select. This will overwrite previous lock options set
              using st_select_lex::add_table_to_list in any of the following
              rules: single_multi, table_wild_one, load_data, table_alias_ref,
              table_factor.
              The default lock level is TL_READ_DEFAULT but it can be modified
              with query options specific for a certain (sub-)SELECT.
            */
            lex->current_select->
              set_lock_for_tables(lex->current_select->lock_option);

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2334:
#line 13466 "sql_yacc.yy"
    {}
    break;

  case 2335:
#line 13468 "sql_yacc.yy"
    {}
    break;

  case 2336:
#line 13470 "sql_yacc.yy"
    {}
    break;

  case 2350:
#line 13503 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2351:
#line 13517 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2352:
#line 13530 "sql_yacc.yy"
    {}
    break;

  case 2353:
#line 13532 "sql_yacc.yy"
    {}
    break;

  case 2354:
#line 13534 "sql_yacc.yy"
    {}
    break;

  case 2355:
#line 13539 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2356:
#line 13544 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2357:
#line 13546 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2358:
#line 13548 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2359:
#line 13553 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2360:
#line 13555 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2361:
#line 13557 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2362:
#line 13562 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 2364:
#line 13575 "sql_yacc.yy"
    {}
    break;

  case 2366:
#line 13581 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2367:
#line 13586 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2368:
#line 13593 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2369:
#line 13602 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2372:
#line 13624 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2373:
#line 13626 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2374:
#line 13628 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2375:
#line 13630 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2376:
#line 13647 "sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2377:
#line 13653 "sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2378:
#line 13658 "sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2379:
#line 13688 "sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 2380:
#line 13721 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2381:
#line 13739 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2382:
#line 13762 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2383:
#line 13794 "sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2384:
#line 13798 "sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2385:
#line 13806 "sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2386:
#line 13829 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2387:
#line 13838 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2388:
#line 13894 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2389:
#line 13918 "sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2390:
#line 13927 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2391:
#line 13935 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2392:
#line 13943 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2393:
#line 13957 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2394:
#line 13961 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2395:
#line 13965 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2396:
#line 13969 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2397:
#line 13973 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2398:
#line 13977 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2399:
#line 13984 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2400:
#line 13991 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2401:
#line 13998 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2402:
#line 14007 "sql_yacc.yy"
    {}
    break;

  case 2403:
#line 14008 "sql_yacc.yy"
    {}
    break;

  case 2404:
#line 14012 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2405:
#line 14013 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2406:
#line 14014 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2407:
#line 14018 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2408:
#line 14019 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2409:
#line 14024 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2410:
#line 14026 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2412:
#line 14031 "sql_yacc.yy"
    {}
    break;

  case 2413:
#line 14032 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2414:
#line 14037 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2415:
#line 14047 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;


/* Line 1267 of yacc.c.  */
#line 33150 "sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



