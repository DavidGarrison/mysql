
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 23 "sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "mysql_priv.h"
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

const LEX_STRING null_lex_str= {0,0};

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  /* Push an error into the error stack */
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  (yytext ? yytext : ""),
                  lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}



/* Line 189 of yacc.c  */
#line 528 "sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CHAIN_SYM = 309,
     CHANGE = 310,
     CHANGED = 311,
     CHARSET = 312,
     CHAR_SYM = 313,
     CHECKSUM_SYM = 314,
     CHECK_SYM = 315,
     CIPHER_SYM = 316,
     CLIENT_SYM = 317,
     CLOSE_SYM = 318,
     COALESCE = 319,
     CODE_SYM = 320,
     COLLATE_SYM = 321,
     COLLATION_SYM = 322,
     COLUMNS = 323,
     COLUMN_SYM = 324,
     COMMENT_SYM = 325,
     COMMITTED_SYM = 326,
     COMMIT_SYM = 327,
     COMPACT_SYM = 328,
     COMPLETION_SYM = 329,
     COMPRESSED_SYM = 330,
     CONCURRENT = 331,
     CONDITION_SYM = 332,
     CONNECTION_SYM = 333,
     CONSISTENT_SYM = 334,
     CONSTRAINT = 335,
     CONTAINS_SYM = 336,
     CONTEXT_SYM = 337,
     CONTINUE_SYM = 338,
     CONTRIBUTORS_SYM = 339,
     CONVERT_SYM = 340,
     COUNT_SYM = 341,
     CPU_SYM = 342,
     CREATE = 343,
     CROSS = 344,
     CUBE_SYM = 345,
     CURDATE = 346,
     CURRENT_USER = 347,
     CURSOR_SYM = 348,
     CURTIME = 349,
     DATABASE = 350,
     DATABASES = 351,
     DATAFILE_SYM = 352,
     DATA_SYM = 353,
     DATETIME = 354,
     DATE_ADD_INTERVAL = 355,
     DATE_SUB_INTERVAL = 356,
     DATE_SYM = 357,
     DAY_HOUR_SYM = 358,
     DAY_MICROSECOND_SYM = 359,
     DAY_MINUTE_SYM = 360,
     DAY_SECOND_SYM = 361,
     DAY_SYM = 362,
     DEALLOCATE_SYM = 363,
     DECIMAL_NUM = 364,
     DECIMAL_SYM = 365,
     DECLARE_SYM = 366,
     DEFAULT = 367,
     DEFINER_SYM = 368,
     DELAYED_SYM = 369,
     DELAY_KEY_WRITE_SYM = 370,
     DELETE_SYM = 371,
     DESC = 372,
     DESCRIBE = 373,
     DES_KEY_FILE = 374,
     DETERMINISTIC_SYM = 375,
     DIRECTORY_SYM = 376,
     DISABLE_SYM = 377,
     DISCARD = 378,
     DISK_SYM = 379,
     DISTINCT = 380,
     DIV_SYM = 381,
     DOUBLE_SYM = 382,
     DO_SYM = 383,
     DROP = 384,
     DUAL_SYM = 385,
     DUMPFILE = 386,
     DUPLICATE_SYM = 387,
     DYNAMIC_SYM = 388,
     EACH_SYM = 389,
     ELSE = 390,
     ELSEIF_SYM = 391,
     ENABLE_SYM = 392,
     ENCLOSED = 393,
     END = 394,
     ENDS_SYM = 395,
     END_OF_INPUT = 396,
     ENGINES_SYM = 397,
     ENGINE_SYM = 398,
     ENUM = 399,
     EQ = 400,
     EQUAL_SYM = 401,
     ERRORS = 402,
     ESCAPED = 403,
     ESCAPE_SYM = 404,
     EVENTS_SYM = 405,
     EVENT_SYM = 406,
     EVERY_SYM = 407,
     EXECUTE_SYM = 408,
     EXISTS = 409,
     EXIT_SYM = 410,
     EXPANSION_SYM = 411,
     EXTENDED_SYM = 412,
     EXTENT_SIZE_SYM = 413,
     EXTRACT_SYM = 414,
     FALSE_SYM = 415,
     FAST_SYM = 416,
     FAULTS_SYM = 417,
     FETCH_SYM = 418,
     FILE_SYM = 419,
     FIRST_SYM = 420,
     FIXED_SYM = 421,
     FLOAT_NUM = 422,
     FLOAT_SYM = 423,
     FLUSH_SYM = 424,
     FORCE_SYM = 425,
     FOREIGN = 426,
     FOR_SYM = 427,
     FOUND_SYM = 428,
     FRAC_SECOND_SYM = 429,
     FROM = 430,
     FULL = 431,
     FULLTEXT_SYM = 432,
     FUNCTION_SYM = 433,
     GE = 434,
     GEOMETRYCOLLECTION = 435,
     GEOMETRY_SYM = 436,
     GET_FORMAT = 437,
     GLOBAL_SYM = 438,
     GRANT = 439,
     GRANTS = 440,
     GROUP_SYM = 441,
     GROUP_CONCAT_SYM = 442,
     GT_SYM = 443,
     HANDLER_SYM = 444,
     HASH_SYM = 445,
     HAVING = 446,
     HELP_SYM = 447,
     HEX_NUM = 448,
     HIGH_PRIORITY = 449,
     HOST_SYM = 450,
     HOSTS_SYM = 451,
     HOUR_MICROSECOND_SYM = 452,
     HOUR_MINUTE_SYM = 453,
     HOUR_SECOND_SYM = 454,
     HOUR_SYM = 455,
     IDENT = 456,
     IDENTIFIED_SYM = 457,
     IDENT_QUOTED = 458,
     IF = 459,
     IGNORE_SYM = 460,
     IMPORT = 461,
     INDEXES = 462,
     INDEX_SYM = 463,
     INFILE = 464,
     INITIAL_SIZE_SYM = 465,
     INNER_SYM = 466,
     INNOBASE_SYM = 467,
     INOUT_SYM = 468,
     INSENSITIVE_SYM = 469,
     INSERT = 470,
     INSERT_METHOD = 471,
     INSTALL_SYM = 472,
     INTERVAL_SYM = 473,
     INTO = 474,
     INT_SYM = 475,
     INVOKER_SYM = 476,
     IN_SYM = 477,
     IO_SYM = 478,
     IPC_SYM = 479,
     IS = 480,
     ISOLATION = 481,
     ISSUER_SYM = 482,
     ITERATE_SYM = 483,
     JOIN_SYM = 484,
     KEYS = 485,
     KEY_BLOCK_SIZE = 486,
     KEY_SYM = 487,
     KILL_SYM = 488,
     LANGUAGE_SYM = 489,
     LAST_SYM = 490,
     LE = 491,
     LEADING = 492,
     LEAVES = 493,
     LEAVE_SYM = 494,
     LEFT = 495,
     LESS_SYM = 496,
     LEVEL_SYM = 497,
     LEX_HOSTNAME = 498,
     LIKE = 499,
     LIMIT = 500,
     LINEAR_SYM = 501,
     LINES = 502,
     LINESTRING = 503,
     LIST_SYM = 504,
     LOAD = 505,
     LOCAL_SYM = 506,
     LOCATOR_SYM = 507,
     LOCKS_SYM = 508,
     LOCK_SYM = 509,
     LOGFILE_SYM = 510,
     LOGS_SYM = 511,
     LONGBLOB = 512,
     LONGTEXT = 513,
     LONG_NUM = 514,
     LONG_SYM = 515,
     LOOP_SYM = 516,
     LOW_PRIORITY = 517,
     LT = 518,
     MASTER_CONNECT_RETRY_SYM = 519,
     MASTER_HOST_SYM = 520,
     MASTER_LOG_FILE_SYM = 521,
     MASTER_LOG_POS_SYM = 522,
     MASTER_PASSWORD_SYM = 523,
     MASTER_PORT_SYM = 524,
     MASTER_SERVER_ID_SYM = 525,
     MASTER_SSL_CAPATH_SYM = 526,
     MASTER_SSL_CA_SYM = 527,
     MASTER_SSL_CERT_SYM = 528,
     MASTER_SSL_CIPHER_SYM = 529,
     MASTER_SSL_KEY_SYM = 530,
     MASTER_SSL_SYM = 531,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 532,
     MASTER_SYM = 533,
     MASTER_USER_SYM = 534,
     MATCH = 535,
     MAX_CONNECTIONS_PER_HOUR = 536,
     MAX_QUERIES_PER_HOUR = 537,
     MAX_ROWS = 538,
     MAX_SIZE_SYM = 539,
     MAX_SYM = 540,
     MAX_UPDATES_PER_HOUR = 541,
     MAX_USER_CONNECTIONS_SYM = 542,
     MAX_VALUE_SYM = 543,
     MEDIUMBLOB = 544,
     MEDIUMINT = 545,
     MEDIUMTEXT = 546,
     MEDIUM_SYM = 547,
     MEMORY_SYM = 548,
     MERGE_SYM = 549,
     MICROSECOND_SYM = 550,
     MIGRATE_SYM = 551,
     MINUTE_MICROSECOND_SYM = 552,
     MINUTE_SECOND_SYM = 553,
     MINUTE_SYM = 554,
     MIN_ROWS = 555,
     MIN_SYM = 556,
     MODE_SYM = 557,
     MODIFIES_SYM = 558,
     MODIFY_SYM = 559,
     MOD_SYM = 560,
     MONTH_SYM = 561,
     MULTILINESTRING = 562,
     MULTIPOINT = 563,
     MULTIPOLYGON = 564,
     MUTEX_SYM = 565,
     NAMES_SYM = 566,
     NAME_SYM = 567,
     NATIONAL_SYM = 568,
     NATURAL = 569,
     NCHAR_STRING = 570,
     NCHAR_SYM = 571,
     NDBCLUSTER_SYM = 572,
     NE = 573,
     NEG = 574,
     NEW_SYM = 575,
     NEXT_SYM = 576,
     NODEGROUP_SYM = 577,
     NONE_SYM = 578,
     NOT2_SYM = 579,
     NOT_SYM = 580,
     NOW_SYM = 581,
     NO_SYM = 582,
     NO_WAIT_SYM = 583,
     NO_WRITE_TO_BINLOG = 584,
     NULL_SYM = 585,
     NUM = 586,
     NUMERIC_SYM = 587,
     NVARCHAR_SYM = 588,
     OFFSET_SYM = 589,
     OLD_PASSWORD = 590,
     ON = 591,
     ONE_SHOT_SYM = 592,
     ONE_SYM = 593,
     OPEN_SYM = 594,
     OPTIMIZE = 595,
     OPTIONS_SYM = 596,
     OPTION = 597,
     OPTIONALLY = 598,
     OR2_SYM = 599,
     ORDER_SYM = 600,
     OR_OR_SYM = 601,
     OR_SYM = 602,
     OUTER = 603,
     OUTFILE = 604,
     OUT_SYM = 605,
     OWNER_SYM = 606,
     PACK_KEYS_SYM = 607,
     PAGE_SYM = 608,
     PARAM_MARKER = 609,
     PARSER_SYM = 610,
     PARTIAL = 611,
     PARTITIONING_SYM = 612,
     PARTITIONS_SYM = 613,
     PARTITION_SYM = 614,
     PASSWORD = 615,
     PHASE_SYM = 616,
     PLUGINS_SYM = 617,
     PLUGIN_SYM = 618,
     POINT_SYM = 619,
     POLYGON = 620,
     PORT_SYM = 621,
     POSITION_SYM = 622,
     PRECISION = 623,
     PREPARE_SYM = 624,
     PRESERVE_SYM = 625,
     PREV_SYM = 626,
     PRIMARY_SYM = 627,
     PRIVILEGES = 628,
     PROCEDURE = 629,
     PROCESS = 630,
     PROCESSLIST_SYM = 631,
     PROFILE_SYM = 632,
     PROFILES_SYM = 633,
     PURGE = 634,
     QUARTER_SYM = 635,
     QUERY_SYM = 636,
     QUICK = 637,
     RANGE_SYM = 638,
     READS_SYM = 639,
     READ_ONLY_SYM = 640,
     READ_SYM = 641,
     READ_WRITE_SYM = 642,
     REAL = 643,
     REBUILD_SYM = 644,
     RECOVER_SYM = 645,
     REDOFILE_SYM = 646,
     REDO_BUFFER_SIZE_SYM = 647,
     REDUNDANT_SYM = 648,
     REFERENCES = 649,
     REGEXP = 650,
     RELAY_LOG_FILE_SYM = 651,
     RELAY_LOG_POS_SYM = 652,
     RELAY_THREAD = 653,
     RELEASE_SYM = 654,
     RELOAD = 655,
     REMOVE_SYM = 656,
     RENAME = 657,
     REORGANIZE_SYM = 658,
     REPAIR = 659,
     REPEATABLE_SYM = 660,
     REPEAT_SYM = 661,
     REPLACE = 662,
     REPLICATION = 663,
     REQUIRE_SYM = 664,
     RESET_SYM = 665,
     RESOURCES = 666,
     RESTORE_SYM = 667,
     RESTRICT = 668,
     RESUME_SYM = 669,
     RETURNS_SYM = 670,
     RETURN_SYM = 671,
     REVOKE = 672,
     RIGHT = 673,
     ROLLBACK_SYM = 674,
     ROLLUP_SYM = 675,
     ROUTINE_SYM = 676,
     ROWS_SYM = 677,
     ROW_FORMAT_SYM = 678,
     ROW_SYM = 679,
     RTREE_SYM = 680,
     SAVEPOINT_SYM = 681,
     SCHEDULE_SYM = 682,
     SECOND_MICROSECOND_SYM = 683,
     SECOND_SYM = 684,
     SECURITY_SYM = 685,
     SELECT_SYM = 686,
     SENSITIVE_SYM = 687,
     SEPARATOR_SYM = 688,
     SERIALIZABLE_SYM = 689,
     SERIAL_SYM = 690,
     SESSION_SYM = 691,
     SERVER_SYM = 692,
     SERVER_OPTIONS = 693,
     SET = 694,
     SET_VAR = 695,
     SHARE_SYM = 696,
     SHIFT_LEFT = 697,
     SHIFT_RIGHT = 698,
     SHOW = 699,
     SHUTDOWN = 700,
     SIGNED_SYM = 701,
     SIMPLE_SYM = 702,
     SLAVE = 703,
     SMALLINT = 704,
     SNAPSHOT_SYM = 705,
     SOCKET_SYM = 706,
     SONAME_SYM = 707,
     SOUNDS_SYM = 708,
     SOURCE_SYM = 709,
     SPATIAL_SYM = 710,
     SPECIFIC_SYM = 711,
     SQLEXCEPTION_SYM = 712,
     SQLSTATE_SYM = 713,
     SQLWARNING_SYM = 714,
     SQL_BIG_RESULT = 715,
     SQL_BUFFER_RESULT = 716,
     SQL_CACHE_SYM = 717,
     SQL_CALC_FOUND_ROWS = 718,
     SQL_NO_CACHE_SYM = 719,
     SQL_SMALL_RESULT = 720,
     SQL_SYM = 721,
     SQL_THREAD = 722,
     SSL_SYM = 723,
     STARTING = 724,
     STARTS_SYM = 725,
     START_SYM = 726,
     STATUS_SYM = 727,
     STDDEV_SAMP_SYM = 728,
     STD_SYM = 729,
     STOP_SYM = 730,
     STORAGE_SYM = 731,
     STRAIGHT_JOIN = 732,
     STRING_SYM = 733,
     SUBDATE_SYM = 734,
     SUBJECT_SYM = 735,
     SUBPARTITIONS_SYM = 736,
     SUBPARTITION_SYM = 737,
     SUBSTRING = 738,
     SUM_SYM = 739,
     SUPER_SYM = 740,
     SUSPEND_SYM = 741,
     SWAPS_SYM = 742,
     SWITCHES_SYM = 743,
     SYSDATE = 744,
     TABLES = 745,
     TABLESPACE = 746,
     TABLE_REF_PRIORITY = 747,
     TABLE_SYM = 748,
     TABLE_CHECKSUM_SYM = 749,
     TEMPORARY = 750,
     TEMPTABLE_SYM = 751,
     TERMINATED = 752,
     TEXT_STRING = 753,
     TEXT_SYM = 754,
     THAN_SYM = 755,
     THEN_SYM = 756,
     TIMESTAMP = 757,
     TIMESTAMP_ADD = 758,
     TIMESTAMP_DIFF = 759,
     TIME_SYM = 760,
     TINYBLOB = 761,
     TINYINT = 762,
     TINYTEXT = 763,
     TO_SYM = 764,
     TRAILING = 765,
     TRANSACTION_SYM = 766,
     TRIGGERS_SYM = 767,
     TRIGGER_SYM = 768,
     TRIM = 769,
     TRUE_SYM = 770,
     TRUNCATE_SYM = 771,
     TYPES_SYM = 772,
     TYPE_SYM = 773,
     UDF_RETURNS_SYM = 774,
     ULONGLONG_NUM = 775,
     UNCOMMITTED_SYM = 776,
     UNDEFINED_SYM = 777,
     UNDERSCORE_CHARSET = 778,
     UNDOFILE_SYM = 779,
     UNDO_BUFFER_SIZE_SYM = 780,
     UNDO_SYM = 781,
     UNICODE_SYM = 782,
     UNINSTALL_SYM = 783,
     UNION_SYM = 784,
     UNIQUE_SYM = 785,
     UNKNOWN_SYM = 786,
     UNLOCK_SYM = 787,
     UNSIGNED = 788,
     UNTIL_SYM = 789,
     UPDATE_SYM = 790,
     UPGRADE_SYM = 791,
     USAGE = 792,
     USER = 793,
     USE_FRM = 794,
     USE_SYM = 795,
     USING = 796,
     UTC_DATE_SYM = 797,
     UTC_TIMESTAMP_SYM = 798,
     UTC_TIME_SYM = 799,
     VALUES = 800,
     VALUE_SYM = 801,
     VARBINARY = 802,
     VARCHAR = 803,
     VARIABLES = 804,
     VARIANCE_SYM = 805,
     VARYING = 806,
     VAR_SAMP_SYM = 807,
     VIEW_SYM = 808,
     WAIT_SYM = 809,
     WARNINGS = 810,
     WEEK_SYM = 811,
     WHEN_SYM = 812,
     WHERE = 813,
     WHILE_SYM = 814,
     WITH = 815,
     WORK_SYM = 816,
     WRAPPER_SYM = 817,
     WRITE_SYM = 818,
     X509_SYM = 819,
     XA_SYM = 820,
     XOR = 821,
     YEAR_MONTH_SYM = 822,
     YEAR_SYM = 823,
     ZEROFILL = 824
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CHAIN_SYM 309
#define CHANGE 310
#define CHANGED 311
#define CHARSET 312
#define CHAR_SYM 313
#define CHECKSUM_SYM 314
#define CHECK_SYM 315
#define CIPHER_SYM 316
#define CLIENT_SYM 317
#define CLOSE_SYM 318
#define COALESCE 319
#define CODE_SYM 320
#define COLLATE_SYM 321
#define COLLATION_SYM 322
#define COLUMNS 323
#define COLUMN_SYM 324
#define COMMENT_SYM 325
#define COMMITTED_SYM 326
#define COMMIT_SYM 327
#define COMPACT_SYM 328
#define COMPLETION_SYM 329
#define COMPRESSED_SYM 330
#define CONCURRENT 331
#define CONDITION_SYM 332
#define CONNECTION_SYM 333
#define CONSISTENT_SYM 334
#define CONSTRAINT 335
#define CONTAINS_SYM 336
#define CONTEXT_SYM 337
#define CONTINUE_SYM 338
#define CONTRIBUTORS_SYM 339
#define CONVERT_SYM 340
#define COUNT_SYM 341
#define CPU_SYM 342
#define CREATE 343
#define CROSS 344
#define CUBE_SYM 345
#define CURDATE 346
#define CURRENT_USER 347
#define CURSOR_SYM 348
#define CURTIME 349
#define DATABASE 350
#define DATABASES 351
#define DATAFILE_SYM 352
#define DATA_SYM 353
#define DATETIME 354
#define DATE_ADD_INTERVAL 355
#define DATE_SUB_INTERVAL 356
#define DATE_SYM 357
#define DAY_HOUR_SYM 358
#define DAY_MICROSECOND_SYM 359
#define DAY_MINUTE_SYM 360
#define DAY_SECOND_SYM 361
#define DAY_SYM 362
#define DEALLOCATE_SYM 363
#define DECIMAL_NUM 364
#define DECIMAL_SYM 365
#define DECLARE_SYM 366
#define DEFAULT 367
#define DEFINER_SYM 368
#define DELAYED_SYM 369
#define DELAY_KEY_WRITE_SYM 370
#define DELETE_SYM 371
#define DESC 372
#define DESCRIBE 373
#define DES_KEY_FILE 374
#define DETERMINISTIC_SYM 375
#define DIRECTORY_SYM 376
#define DISABLE_SYM 377
#define DISCARD 378
#define DISK_SYM 379
#define DISTINCT 380
#define DIV_SYM 381
#define DOUBLE_SYM 382
#define DO_SYM 383
#define DROP 384
#define DUAL_SYM 385
#define DUMPFILE 386
#define DUPLICATE_SYM 387
#define DYNAMIC_SYM 388
#define EACH_SYM 389
#define ELSE 390
#define ELSEIF_SYM 391
#define ENABLE_SYM 392
#define ENCLOSED 393
#define END 394
#define ENDS_SYM 395
#define END_OF_INPUT 396
#define ENGINES_SYM 397
#define ENGINE_SYM 398
#define ENUM 399
#define EQ 400
#define EQUAL_SYM 401
#define ERRORS 402
#define ESCAPED 403
#define ESCAPE_SYM 404
#define EVENTS_SYM 405
#define EVENT_SYM 406
#define EVERY_SYM 407
#define EXECUTE_SYM 408
#define EXISTS 409
#define EXIT_SYM 410
#define EXPANSION_SYM 411
#define EXTENDED_SYM 412
#define EXTENT_SIZE_SYM 413
#define EXTRACT_SYM 414
#define FALSE_SYM 415
#define FAST_SYM 416
#define FAULTS_SYM 417
#define FETCH_SYM 418
#define FILE_SYM 419
#define FIRST_SYM 420
#define FIXED_SYM 421
#define FLOAT_NUM 422
#define FLOAT_SYM 423
#define FLUSH_SYM 424
#define FORCE_SYM 425
#define FOREIGN 426
#define FOR_SYM 427
#define FOUND_SYM 428
#define FRAC_SECOND_SYM 429
#define FROM 430
#define FULL 431
#define FULLTEXT_SYM 432
#define FUNCTION_SYM 433
#define GE 434
#define GEOMETRYCOLLECTION 435
#define GEOMETRY_SYM 436
#define GET_FORMAT 437
#define GLOBAL_SYM 438
#define GRANT 439
#define GRANTS 440
#define GROUP_SYM 441
#define GROUP_CONCAT_SYM 442
#define GT_SYM 443
#define HANDLER_SYM 444
#define HASH_SYM 445
#define HAVING 446
#define HELP_SYM 447
#define HEX_NUM 448
#define HIGH_PRIORITY 449
#define HOST_SYM 450
#define HOSTS_SYM 451
#define HOUR_MICROSECOND_SYM 452
#define HOUR_MINUTE_SYM 453
#define HOUR_SECOND_SYM 454
#define HOUR_SYM 455
#define IDENT 456
#define IDENTIFIED_SYM 457
#define IDENT_QUOTED 458
#define IF 459
#define IGNORE_SYM 460
#define IMPORT 461
#define INDEXES 462
#define INDEX_SYM 463
#define INFILE 464
#define INITIAL_SIZE_SYM 465
#define INNER_SYM 466
#define INNOBASE_SYM 467
#define INOUT_SYM 468
#define INSENSITIVE_SYM 469
#define INSERT 470
#define INSERT_METHOD 471
#define INSTALL_SYM 472
#define INTERVAL_SYM 473
#define INTO 474
#define INT_SYM 475
#define INVOKER_SYM 476
#define IN_SYM 477
#define IO_SYM 478
#define IPC_SYM 479
#define IS 480
#define ISOLATION 481
#define ISSUER_SYM 482
#define ITERATE_SYM 483
#define JOIN_SYM 484
#define KEYS 485
#define KEY_BLOCK_SIZE 486
#define KEY_SYM 487
#define KILL_SYM 488
#define LANGUAGE_SYM 489
#define LAST_SYM 490
#define LE 491
#define LEADING 492
#define LEAVES 493
#define LEAVE_SYM 494
#define LEFT 495
#define LESS_SYM 496
#define LEVEL_SYM 497
#define LEX_HOSTNAME 498
#define LIKE 499
#define LIMIT 500
#define LINEAR_SYM 501
#define LINES 502
#define LINESTRING 503
#define LIST_SYM 504
#define LOAD 505
#define LOCAL_SYM 506
#define LOCATOR_SYM 507
#define LOCKS_SYM 508
#define LOCK_SYM 509
#define LOGFILE_SYM 510
#define LOGS_SYM 511
#define LONGBLOB 512
#define LONGTEXT 513
#define LONG_NUM 514
#define LONG_SYM 515
#define LOOP_SYM 516
#define LOW_PRIORITY 517
#define LT 518
#define MASTER_CONNECT_RETRY_SYM 519
#define MASTER_HOST_SYM 520
#define MASTER_LOG_FILE_SYM 521
#define MASTER_LOG_POS_SYM 522
#define MASTER_PASSWORD_SYM 523
#define MASTER_PORT_SYM 524
#define MASTER_SERVER_ID_SYM 525
#define MASTER_SSL_CAPATH_SYM 526
#define MASTER_SSL_CA_SYM 527
#define MASTER_SSL_CERT_SYM 528
#define MASTER_SSL_CIPHER_SYM 529
#define MASTER_SSL_KEY_SYM 530
#define MASTER_SSL_SYM 531
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 532
#define MASTER_SYM 533
#define MASTER_USER_SYM 534
#define MATCH 535
#define MAX_CONNECTIONS_PER_HOUR 536
#define MAX_QUERIES_PER_HOUR 537
#define MAX_ROWS 538
#define MAX_SIZE_SYM 539
#define MAX_SYM 540
#define MAX_UPDATES_PER_HOUR 541
#define MAX_USER_CONNECTIONS_SYM 542
#define MAX_VALUE_SYM 543
#define MEDIUMBLOB 544
#define MEDIUMINT 545
#define MEDIUMTEXT 546
#define MEDIUM_SYM 547
#define MEMORY_SYM 548
#define MERGE_SYM 549
#define MICROSECOND_SYM 550
#define MIGRATE_SYM 551
#define MINUTE_MICROSECOND_SYM 552
#define MINUTE_SECOND_SYM 553
#define MINUTE_SYM 554
#define MIN_ROWS 555
#define MIN_SYM 556
#define MODE_SYM 557
#define MODIFIES_SYM 558
#define MODIFY_SYM 559
#define MOD_SYM 560
#define MONTH_SYM 561
#define MULTILINESTRING 562
#define MULTIPOINT 563
#define MULTIPOLYGON 564
#define MUTEX_SYM 565
#define NAMES_SYM 566
#define NAME_SYM 567
#define NATIONAL_SYM 568
#define NATURAL 569
#define NCHAR_STRING 570
#define NCHAR_SYM 571
#define NDBCLUSTER_SYM 572
#define NE 573
#define NEG 574
#define NEW_SYM 575
#define NEXT_SYM 576
#define NODEGROUP_SYM 577
#define NONE_SYM 578
#define NOT2_SYM 579
#define NOT_SYM 580
#define NOW_SYM 581
#define NO_SYM 582
#define NO_WAIT_SYM 583
#define NO_WRITE_TO_BINLOG 584
#define NULL_SYM 585
#define NUM 586
#define NUMERIC_SYM 587
#define NVARCHAR_SYM 588
#define OFFSET_SYM 589
#define OLD_PASSWORD 590
#define ON 591
#define ONE_SHOT_SYM 592
#define ONE_SYM 593
#define OPEN_SYM 594
#define OPTIMIZE 595
#define OPTIONS_SYM 596
#define OPTION 597
#define OPTIONALLY 598
#define OR2_SYM 599
#define ORDER_SYM 600
#define OR_OR_SYM 601
#define OR_SYM 602
#define OUTER 603
#define OUTFILE 604
#define OUT_SYM 605
#define OWNER_SYM 606
#define PACK_KEYS_SYM 607
#define PAGE_SYM 608
#define PARAM_MARKER 609
#define PARSER_SYM 610
#define PARTIAL 611
#define PARTITIONING_SYM 612
#define PARTITIONS_SYM 613
#define PARTITION_SYM 614
#define PASSWORD 615
#define PHASE_SYM 616
#define PLUGINS_SYM 617
#define PLUGIN_SYM 618
#define POINT_SYM 619
#define POLYGON 620
#define PORT_SYM 621
#define POSITION_SYM 622
#define PRECISION 623
#define PREPARE_SYM 624
#define PRESERVE_SYM 625
#define PREV_SYM 626
#define PRIMARY_SYM 627
#define PRIVILEGES 628
#define PROCEDURE 629
#define PROCESS 630
#define PROCESSLIST_SYM 631
#define PROFILE_SYM 632
#define PROFILES_SYM 633
#define PURGE 634
#define QUARTER_SYM 635
#define QUERY_SYM 636
#define QUICK 637
#define RANGE_SYM 638
#define READS_SYM 639
#define READ_ONLY_SYM 640
#define READ_SYM 641
#define READ_WRITE_SYM 642
#define REAL 643
#define REBUILD_SYM 644
#define RECOVER_SYM 645
#define REDOFILE_SYM 646
#define REDO_BUFFER_SIZE_SYM 647
#define REDUNDANT_SYM 648
#define REFERENCES 649
#define REGEXP 650
#define RELAY_LOG_FILE_SYM 651
#define RELAY_LOG_POS_SYM 652
#define RELAY_THREAD 653
#define RELEASE_SYM 654
#define RELOAD 655
#define REMOVE_SYM 656
#define RENAME 657
#define REORGANIZE_SYM 658
#define REPAIR 659
#define REPEATABLE_SYM 660
#define REPEAT_SYM 661
#define REPLACE 662
#define REPLICATION 663
#define REQUIRE_SYM 664
#define RESET_SYM 665
#define RESOURCES 666
#define RESTORE_SYM 667
#define RESTRICT 668
#define RESUME_SYM 669
#define RETURNS_SYM 670
#define RETURN_SYM 671
#define REVOKE 672
#define RIGHT 673
#define ROLLBACK_SYM 674
#define ROLLUP_SYM 675
#define ROUTINE_SYM 676
#define ROWS_SYM 677
#define ROW_FORMAT_SYM 678
#define ROW_SYM 679
#define RTREE_SYM 680
#define SAVEPOINT_SYM 681
#define SCHEDULE_SYM 682
#define SECOND_MICROSECOND_SYM 683
#define SECOND_SYM 684
#define SECURITY_SYM 685
#define SELECT_SYM 686
#define SENSITIVE_SYM 687
#define SEPARATOR_SYM 688
#define SERIALIZABLE_SYM 689
#define SERIAL_SYM 690
#define SESSION_SYM 691
#define SERVER_SYM 692
#define SERVER_OPTIONS 693
#define SET 694
#define SET_VAR 695
#define SHARE_SYM 696
#define SHIFT_LEFT 697
#define SHIFT_RIGHT 698
#define SHOW 699
#define SHUTDOWN 700
#define SIGNED_SYM 701
#define SIMPLE_SYM 702
#define SLAVE 703
#define SMALLINT 704
#define SNAPSHOT_SYM 705
#define SOCKET_SYM 706
#define SONAME_SYM 707
#define SOUNDS_SYM 708
#define SOURCE_SYM 709
#define SPATIAL_SYM 710
#define SPECIFIC_SYM 711
#define SQLEXCEPTION_SYM 712
#define SQLSTATE_SYM 713
#define SQLWARNING_SYM 714
#define SQL_BIG_RESULT 715
#define SQL_BUFFER_RESULT 716
#define SQL_CACHE_SYM 717
#define SQL_CALC_FOUND_ROWS 718
#define SQL_NO_CACHE_SYM 719
#define SQL_SMALL_RESULT 720
#define SQL_SYM 721
#define SQL_THREAD 722
#define SSL_SYM 723
#define STARTING 724
#define STARTS_SYM 725
#define START_SYM 726
#define STATUS_SYM 727
#define STDDEV_SAMP_SYM 728
#define STD_SYM 729
#define STOP_SYM 730
#define STORAGE_SYM 731
#define STRAIGHT_JOIN 732
#define STRING_SYM 733
#define SUBDATE_SYM 734
#define SUBJECT_SYM 735
#define SUBPARTITIONS_SYM 736
#define SUBPARTITION_SYM 737
#define SUBSTRING 738
#define SUM_SYM 739
#define SUPER_SYM 740
#define SUSPEND_SYM 741
#define SWAPS_SYM 742
#define SWITCHES_SYM 743
#define SYSDATE 744
#define TABLES 745
#define TABLESPACE 746
#define TABLE_REF_PRIORITY 747
#define TABLE_SYM 748
#define TABLE_CHECKSUM_SYM 749
#define TEMPORARY 750
#define TEMPTABLE_SYM 751
#define TERMINATED 752
#define TEXT_STRING 753
#define TEXT_SYM 754
#define THAN_SYM 755
#define THEN_SYM 756
#define TIMESTAMP 757
#define TIMESTAMP_ADD 758
#define TIMESTAMP_DIFF 759
#define TIME_SYM 760
#define TINYBLOB 761
#define TINYINT 762
#define TINYTEXT 763
#define TO_SYM 764
#define TRAILING 765
#define TRANSACTION_SYM 766
#define TRIGGERS_SYM 767
#define TRIGGER_SYM 768
#define TRIM 769
#define TRUE_SYM 770
#define TRUNCATE_SYM 771
#define TYPES_SYM 772
#define TYPE_SYM 773
#define UDF_RETURNS_SYM 774
#define ULONGLONG_NUM 775
#define UNCOMMITTED_SYM 776
#define UNDEFINED_SYM 777
#define UNDERSCORE_CHARSET 778
#define UNDOFILE_SYM 779
#define UNDO_BUFFER_SIZE_SYM 780
#define UNDO_SYM 781
#define UNICODE_SYM 782
#define UNINSTALL_SYM 783
#define UNION_SYM 784
#define UNIQUE_SYM 785
#define UNKNOWN_SYM 786
#define UNLOCK_SYM 787
#define UNSIGNED 788
#define UNTIL_SYM 789
#define UPDATE_SYM 790
#define UPGRADE_SYM 791
#define USAGE 792
#define USER 793
#define USE_FRM 794
#define USE_SYM 795
#define USING 796
#define UTC_DATE_SYM 797
#define UTC_TIMESTAMP_SYM 798
#define UTC_TIME_SYM 799
#define VALUES 800
#define VALUE_SYM 801
#define VARBINARY 802
#define VARCHAR 803
#define VARIABLES 804
#define VARIANCE_SYM 805
#define VARYING 806
#define VAR_SAMP_SYM 807
#define VIEW_SYM 808
#define WAIT_SYM 809
#define WARNINGS 810
#define WEEK_SYM 811
#define WHEN_SYM 812
#define WHERE 813
#define WHILE_SYM 814
#define WITH 815
#define WORK_SYM 816
#define WRAPPER_SYM 817
#define WRITE_SYM 818
#define X509_SYM 819
#define XA_SYM 820
#define XOR 821
#define YEAR_MONTH_SYM 822
#define YEAR_SYM 823
#define ZEROFILL 824




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 468 "sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  struct st_lex *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;



/* Line 214 of yacc.c  */
#line 1748 "sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 512 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 1765 "sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  548
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   46628

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  589
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  827
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2364
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4036

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   824

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   582,     2,     2,     2,   576,   571,     2,
     579,   580,   574,   573,   581,   572,   587,   575,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   588,   585,
       2,     2,     2,     2,   586,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   577,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   583,   570,   584,   578,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   228,   232,   236,   240,   244,   245,   253,
     254,   267,   268,   275,   276,   280,   285,   290,   294,   297,
     308,   310,   314,   317,   320,   323,   326,   329,   332,   335,
     336,   350,   351,   358,   361,   362,   364,   368,   370,   371,
     374,   375,   378,   379,   381,   385,   390,   391,   394,   395,
     398,   400,   402,   404,   406,   408,   410,   412,   414,   416,
     418,   420,   422,   424,   425,   429,   431,   432,   435,   436,
     439,   442,   445,   448,   451,   455,   459,   461,   463,   465,
     468,   472,   476,   477,   482,   483,   487,   488,   490,   494,
     496,   497,   499,   503,   505,   506,   510,   511,   513,   517,
     519,   524,   525,   527,   529,   531,   532,   536,   539,   543,
     544,   548,   549,   555,   561,   562,   570,   576,   577,   580,
     582,   584,   586,   590,   592,   594,   598,   599,   601,   603,
     605,   607,   610,   612,   614,   618,   619,   622,   624,   626,
     628,   630,   632,   634,   636,   638,   640,   642,   644,   646,
     648,   649,   655,   656,   659,   660,   664,   665,   668,   671,
     674,   677,   678,   685,   688,   689,   692,   694,   696,   700,
     701,   702,   703,   711,   712,   715,   718,   720,   722,   723,
     724,   733,   734,   741,   743,   746,   748,   751,   752,   753,
     760,   761,   762,   769,   770,   773,   774,   780,   781,   783,
     784,   790,   791,   794,   795,   801,   806,   807,   808,   817,
     818,   826,   828,   830,   832,   834,   836,   839,   844,   850,
     851,   856,   861,   866,   870,   874,   877,   880,   881,   884,
     886,   889,   893,   895,   897,   899,   901,   903,   906,   910,
     912,   914,   916,   918,   920,   922,   924,   926,   928,   930,
     933,   937,   939,   941,   943,   945,   947,   949,   951,   954,
     958,   960,   962,   964,   966,   968,   970,   972,   974,   976,
     979,   983,   985,   987,   989,   992,   995,   998,  1000,  1002,
    1004,  1006,  1009,  1013,  1017,  1021,  1025,  1029,  1033,  1037,
    1041,  1046,  1047,  1049,  1051,  1053,  1055,  1057,  1060,  1064,
    1067,  1072,  1078,  1079,  1085,  1086,  1087,  1093,  1094,  1102,
    1103,  1105,  1106,  1110,  1111,  1115,  1121,  1127,  1128,  1133,
    1134,  1138,  1139,  1143,  1144,  1146,  1147,  1149,  1151,  1155,
    1157,  1163,  1169,  1170,  1173,  1174,  1175,  1183,  1184,  1194,
    1196,  1200,  1202,  1204,  1205,  1208,  1209,  1213,  1215,  1219,
    1220,  1227,  1229,  1230,  1235,  1241,  1243,  1245,  1247,  1251,
    1255,  1257,  1261,  1263,  1265,  1266,  1270,  1272,  1276,  1277,
    1282,  1284,  1285,  1287,  1290,  1292,  1296,  1301,  1305,  1309,
    1313,  1318,  1323,  1327,  1328,  1329,  1336,  1337,  1339,  1340,
    1342,  1344,  1347,  1349,  1351,  1352,  1354,  1356,  1359,  1361,
    1362,  1366,  1367,  1369,  1371,  1374,  1376,  1379,  1383,  1387,
    1391,  1395,  1399,  1403,  1407,  1411,  1415,  1419,  1423,  1427,
    1431,  1435,  1439,  1445,  1447,  1449,  1453,  1458,  1463,  1466,
    1469,  1472,  1476,  1480,  1485,  1490,  1492,  1494,  1496,  1498,
    1500,  1502,  1504,  1506,  1508,  1510,  1512,  1514,  1517,  1519,
    1521,  1523,  1525,  1527,  1531,  1533,  1535,  1538,  1541,  1549,
    1558,  1567,  1570,  1573,  1574,  1576,  1579,  1580,  1582,  1585,
    1586,  1591,  1595,  1599,  1603,  1605,  1608,  1610,  1612,  1616,
    1619,  1623,  1626,  1629,  1631,  1635,  1639,  1642,  1646,  1648,
    1650,  1653,  1655,  1657,  1660,  1662,  1664,  1666,  1669,  1673,
    1676,  1680,  1683,  1686,  1690,  1694,  1698,  1699,  1706,  1707,
    1714,  1717,  1719,  1721,  1723,  1725,  1727,  1729,  1731,  1733,
    1735,  1737,  1739,  1742,  1745,  1747,  1750,  1752,  1755,  1759,
    1762,  1764,  1766,  1768,  1770,  1772,  1774,  1776,  1779,  1780,
    1782,  1784,  1790,  1791,  1793,  1796,  1798,  1800,  1802,  1804,
    1808,  1812,  1816,  1820,  1821,  1823,  1824,  1826,  1827,  1829,
    1832,  1834,  1836,  1839,  1842,  1847,  1849,  1853,  1856,  1858,
    1861,  1864,  1867,  1870,  1872,  1875,  1877,  1879,  1881,  1883,
    1885,  1886,  1889,  1891,  1893,  1895,  1897,  1899,  1900,  1903,
    1905,  1907,  1908,  1910,  1911,  1914,  1916,  1919,  1923,  1926,
    1927,  1929,  1930,  1932,  1934,  1937,  1938,  1940,  1941,  1946,
    1948,  1953,  1957,  1959,  1960,  1962,  1965,  1967,  1971,  1975,
    1978,  1981,  1984,  1986,  1988,  1991,  1994,  1997,  1999,  2002,
    2005,  2008,  2011,  2013,  2015,  2016,  2018,  2020,  2022,  2024,
    2025,  2027,  2029,  2031,  2032,  2034,  2037,  2038,  2040,  2042,
    2045,  2048,  2051,  2053,  2057,  2061,  2063,  2065,  2067,  2072,
    2075,  2077,  2082,  2083,  2085,  2086,  2089,  2091,  2095,  2096,
    2103,  2104,  2110,  2118,  2119,  2125,  2126,  2132,  2133,  2139,
    2140,  2145,  2146,  2157,  2161,  2166,  2170,  2174,  2182,  2183,
    2187,  2189,  2194,  2195,  2199,  2200,  2203,  2204,  2206,  2207,
    2210,  2213,  2216,  2219,  2221,  2223,  2225,  2229,  2234,  2235,
    2242,  2247,  2248,  2254,  2255,  2262,  2267,  2269,  2272,  2274,
    2276,  2277,  2283,  2284,  2288,  2291,  2292,  2298,  2299,  2300,
    2307,  2309,  2313,  2315,  2317,  2321,  2324,  2328,  2331,  2336,
    2337,  2344,  2345,  2346,  2355,  2360,  2365,  2369,  2373,  2376,
    2379,  2386,  2392,  2396,  2402,  2404,  2406,  2408,  2409,  2411,
    2412,  2414,  2415,  2417,  2419,  2420,  2423,  2425,  2426,  2428,
    2430,  2432,  2433,  2439,  2443,  2444,  2450,  2454,  2458,  2459,
    2463,  2464,  2467,  2469,  2473,  2474,  2476,  2478,  2479,  2482,
    2484,  2488,  2489,  2496,  2497,  2504,  2505,  2511,  2512,  2514,
    2516,  2517,  2524,  2525,  2527,  2529,  2532,  2534,  2536,  2538,
    2539,  2545,  2548,  2549,  2555,  2556,  2558,  2560,  2563,  2565,
    2567,  2569,  2571,  2573,  2576,  2577,  2583,  2584,  2586,  2588,
    2589,  2594,  2599,  2603,  2609,  2611,  2615,  2619,  2625,  2627,
    2631,  2634,  2636,  2638,  2639,  2646,  2648,  2652,  2656,  2657,
    2660,  2661,  2666,  2667,  2670,  2672,  2675,  2680,  2683,  2687,
    2688,  2692,  2693,  2694,  2701,  2704,  2706,  2708,  2711,  2714,
    2723,  2728,  2729,  2731,  2734,  2736,  2738,  2740,  2742,  2744,
    2746,  2748,  2750,  2752,  2754,  2756,  2757,  2760,  2765,  2769,
    2771,  2773,  2778,  2779,  2780,  2782,  2784,  2785,  2788,  2791,
    2793,  2795,  2796,  2799,  2803,  2807,  2811,  2814,  2818,  2823,
    2827,  2832,  2836,  2841,  2843,  2847,  2852,  2856,  2860,  2867,
    2869,  2875,  2882,  2888,  2896,  2903,  2912,  2918,  2925,  2930,
    2935,  2941,  2945,  2950,  2952,  2956,  2960,  2964,  2968,  2972,
    2976,  2982,  2988,  2992,  2996,  3000,  3004,  3008,  3012,  3014,
    3016,  3018,  3020,  3022,  3024,  3026,  3028,  3030,  3032,  3034,
    3036,  3038,  3040,  3042,  3044,  3046,  3048,  3050,  3052,  3054,
    3056,  3060,  3062,  3064,  3066,  3068,  3072,  3075,  3078,  3081,
    3084,  3088,  3092,  3098,  3105,  3110,  3115,  3123,  3126,  3133,
    3139,  3146,  3153,  3158,  3163,  3169,  3174,  3181,  3184,  3189,
    3194,  3199,  3210,  3217,  3226,  3233,  3238,  3243,  3250,  3255,
    3260,  3265,  3272,  3277,  3285,  3293,  3301,  3308,  3315,  3322,
    3329,  3333,  3338,  3345,  3354,  3357,  3360,  3365,  3374,  3383,
    3390,  3397,  3400,  3405,  3412,  3419,  3428,  3437,  3444,  3453,
    3460,  3463,  3468,  3477,  3486,  3489,  3492,  3495,  3500,  3505,
    3510,  3515,  3519,  3528,  3533,  3540,  3545,  3550,  3555,  3562,
    3571,  3578,  3583,  3590,  3592,  3599,  3604,  3609,  3614,  3619,
    3624,  3631,  3636,  3637,  3643,  3650,  3653,  3657,  3658,  3663,
    3664,  3668,  3669,  3671,  3673,  3677,  3682,  3687,  3693,  3698,
    3703,  3708,  3714,  3719,  3720,  3721,  3729,  3734,  3740,  3745,
    3751,  3756,  3761,  3766,  3771,  3776,  3782,  3783,  3792,  3793,
    3797,  3801,  3803,  3808,  3809,  3811,  3812,  3815,  3816,  3818,
    3819,  3823,  3826,  3830,  3833,  3835,  3838,  3840,  3843,  3845,
    3847,  3849,  3852,  3853,  3855,  3857,  3861,  3863,  3867,  3869,
    3873,  3874,  3876,  3877,  3880,  3885,  3891,  3893,  3895,  3897,
    3899,  3904,  3906,  3910,  3914,  3918,  3919,  3926,  3927,  3934,
    3935,  3944,  3949,  3950,  3959,  3960,  3971,  3978,  3979,  3988,
    3989,  4000,  4007,  4009,  4012,  4015,  4016,  4021,  4025,  4032,
    4033,  4037,  4038,  4039,  4045,  4046,  4048,  4049,  4051,  4052,
    4055,  4059,  4063,  4065,  4067,  4068,  4076,  4077,  4085,  4087,
    4090,  4091,  4092,  4095,  4096,  4099,  4100,  4102,  4104,  4106,
    4108,  4112,  4114,  4118,  4120,  4122,  4124,  4126,  4128,  4130,
    4132,  4134,  4136,  4138,  4140,  4142,  4144,  4146,  4148,  4150,
    4152,  4154,  4156,  4158,  4160,  4162,  4164,  4166,  4168,  4170,
    4172,  4173,  4175,  4177,  4178,  4181,  4182,  4184,  4185,  4186,
    4190,  4191,  4192,  4196,  4199,  4200,  4201,  4206,  4211,  4214,
    4215,  4218,  4221,  4225,  4229,  4231,  4234,  4235,  4237,  4238,
    4243,  4248,  4251,  4252,  4254,  4256,  4257,  4259,  4260,  4262,
    4265,  4267,  4271,  4275,  4277,  4279,  4281,  4283,  4284,  4287,
    4289,  4291,  4293,  4295,  4297,  4299,  4301,  4303,  4305,  4307,
    4309,  4311,  4313,  4315,  4317,  4319,  4321,  4323,  4325,  4327,
    4329,  4331,  4333,  4334,  4335,  4342,  4343,  4345,  4349,  4351,
    4355,  4356,  4359,  4363,  4365,  4368,  4370,  4371,  4375,  4376,
    4377,  4385,  4388,  4390,  4391,  4395,  4402,  4403,  4410,  4415,
    4422,  4427,  4432,  4437,  4443,  4448,  4453,  4459,  4466,  4471,
    4473,  4477,  4479,  4481,  4485,  4487,  4488,  4491,  4492,  4494,
    4495,  4496,  4505,  4506,  4507,  4514,  4515,  4517,  4519,  4521,
    4523,  4525,  4528,  4530,  4532,  4534,  4538,  4543,  4544,  4548,
    4552,  4554,  4557,  4560,  4561,  4565,  4566,  4572,  4576,  4578,
    4582,  4584,  4588,  4590,  4592,  4593,  4595,  4596,  4601,  4602,
    4604,  4608,  4610,  4612,  4614,  4615,  4616,  4623,  4624,  4625,
    4637,  4641,  4643,  4647,  4651,  4653,  4657,  4658,  4660,  4661,
    4666,  4667,  4674,  4675,  4681,  4682,  4689,  4691,  4695,  4699,
    4705,  4706,  4709,  4710,  4713,  4715,  4717,  4719,  4723,  4724,
    4726,  4727,  4729,  4731,  4735,  4737,  4739,  4742,  4745,  4748,
    4750,  4752,  4754,  4756,  4757,  4761,  4762,  4766,  4769,  4774,
    4779,  4783,  4788,  4793,  4796,  4798,  4802,  4806,  4813,  4830,
    4833,  4836,  4837,  4844,  4850,  4853,  4856,  4859,  4861,  4863,
    4865,  4871,  4877,  4880,  4883,  4885,  4890,  4894,  4897,  4900,
    4903,  4907,  4910,  4913,  4915,  4919,  4924,  4928,  4932,  4935,
    4938,  4942,  4946,  4950,  4954,  4958,  4962,  4966,  4970,  4972,
    4974,  4976,  4978,  4980,  4981,  4983,  4984,  4987,  4988,  4990,
    4992,  4994,  4995,  4998,  4999,  5002,  5003,  5006,  5009,  5010,
    5015,  5016,  5021,  5023,  5025,  5026,  5028,  5030,  5031,  5033,
    5035,  5036,  5041,  5045,  5047,  5048,  5052,  5057,  5060,  5062,
    5064,  5066,  5068,  5070,  5072,  5074,  5076,  5077,  5079,  5080,
    5084,  5088,  5090,  5092,  5094,  5097,  5098,  5102,  5106,  5109,
    5112,  5116,  5117,  5119,  5121,  5124,  5125,  5130,  5136,  5137,
    5138,  5139,  5140,  5159,  5162,  5163,  5165,  5166,  5168,  5170,
    5171,  5173,  5175,  5176,  5179,  5182,  5184,  5188,  5193,  5197,
    5201,  5202,  5205,  5208,  5210,  5214,  5218,  5219,  5223,  5224,
    5228,  5231,  5235,  5237,  5239,  5242,  5243,  5246,  5248,  5250,
    5253,  5256,  5258,  5260,  5262,  5264,  5266,  5269,  5272,  5274,
    5276,  5278,  5280,  5282,  5284,  5286,  5289,  5292,  5295,  5298,
    5301,  5303,  5305,  5307,  5309,  5311,  5313,  5315,  5319,  5325,
    5327,  5329,  5331,  5333,  5335,  5339,  5344,  5350,  5352,  5358,
    5362,  5365,  5367,  5371,  5374,  5376,  5378,  5380,  5382,  5384,
    5386,  5388,  5390,  5392,  5394,  5396,  5398,  5400,  5402,  5406,
    5409,  5411,  5413,  5415,  5417,  5419,  5421,  5423,  5425,  5427,
    5429,  5431,  5433,  5435,  5437,  5439,  5441,  5443,  5445,  5447,
    5449,  5451,  5453,  5455,  5457,  5459,  5461,  5463,  5465,  5467,
    5469,  5471,  5473,  5475,  5477,  5479,  5481,  5483,  5485,  5487,
    5489,  5491,  5493,  5495,  5497,  5499,  5501,  5503,  5505,  5507,
    5509,  5511,  5513,  5515,  5517,  5519,  5521,  5523,  5525,  5527,
    5529,  5531,  5533,  5535,  5537,  5539,  5541,  5543,  5545,  5547,
    5549,  5551,  5553,  5555,  5557,  5559,  5561,  5563,  5565,  5567,
    5569,  5571,  5573,  5575,  5577,  5579,  5581,  5583,  5585,  5587,
    5589,  5591,  5593,  5595,  5597,  5599,  5601,  5603,  5605,  5607,
    5609,  5611,  5613,  5615,  5617,  5619,  5621,  5623,  5625,  5627,
    5629,  5631,  5633,  5635,  5637,  5639,  5641,  5643,  5645,  5647,
    5649,  5651,  5653,  5655,  5657,  5659,  5661,  5663,  5665,  5667,
    5669,  5671,  5673,  5675,  5677,  5679,  5681,  5683,  5685,  5687,
    5689,  5691,  5693,  5695,  5697,  5699,  5701,  5703,  5705,  5707,
    5709,  5711,  5713,  5715,  5717,  5719,  5721,  5723,  5725,  5727,
    5729,  5731,  5733,  5735,  5737,  5739,  5741,  5743,  5745,  5747,
    5749,  5751,  5753,  5755,  5757,  5759,  5761,  5763,  5765,  5767,
    5769,  5771,  5773,  5775,  5777,  5779,  5781,  5783,  5785,  5787,
    5789,  5791,  5793,  5795,  5797,  5799,  5801,  5803,  5805,  5807,
    5809,  5811,  5813,  5815,  5817,  5819,  5821,  5823,  5825,  5827,
    5829,  5831,  5833,  5835,  5837,  5839,  5841,  5843,  5845,  5847,
    5849,  5851,  5853,  5855,  5857,  5859,  5861,  5863,  5865,  5867,
    5869,  5871,  5873,  5875,  5877,  5879,  5881,  5883,  5885,  5887,
    5889,  5891,  5893,  5895,  5897,  5899,  5901,  5903,  5905,  5907,
    5909,  5911,  5913,  5915,  5917,  5919,  5921,  5923,  5925,  5927,
    5929,  5931,  5933,  5935,  5937,  5939,  5941,  5943,  5945,  5947,
    5949,  5951,  5953,  5955,  5957,  5959,  5961,  5963,  5965,  5967,
    5969,  5971,  5973,  5975,  5977,  5979,  5981,  5983,  5985,  5987,
    5989,  5991,  5993,  5995,  5997,  5999,  6001,  6003,  6005,  6007,
    6009,  6011,  6013,  6015,  6017,  6019,  6021,  6023,  6025,  6027,
    6029,  6030,  6035,  6036,  6038,  6040,  6044,  6045,  6048,  6050,
    6052,  6054,  6056,  6057,  6059,  6060,  6062,  6064,  6066,  6067,
    6070,  6073,  6076,  6078,  6081,  6086,  6092,  6097,  6104,  6107,
    6111,  6115,  6119,  6125,  6127,  6131,  6135,  6138,  6141,  6144,
    6146,  6148,  6153,  6158,  6160,  6162,  6164,  6166,  6168,  6169,
    6174,  6176,  6178,  6180,  6184,  6188,  6190,  6192,  6195,  6198,
    6199,  6203,  6208,  6212,  6213,  6221,  6223,  6226,  6228,  6230,
    6232,  6234,  6236,  6238,  6239,  6245,  6247,  6249,  6251,  6253,
    6255,  6259,  6266,  6273,  6280,  6288,  6292,  6301,  6310,  6319,
    6320,  6322,  6324,  6327,  6328,  6330,  6332,  6336,  6337,  6341,
    6342,  6346,  6347,  6351,  6352,  6356,  6358,  6360,  6362,  6364,
    6366,  6368,  6370,  6372,  6374,  6376,  6378,  6381,  6384,  6386,
    6390,  6393,  6396,  6399,  6402,  6405,  6408,  6411,  6414,  6416,
    6418,  6419,  6421,  6425,  6427,  6430,  6433,  6436,  6438,  6442,
    6446,  6448,  6450,  6454,  6456,  6460,  6465,  6471,  6473,  6474,
    6478,  6482,  6484,  6486,  6487,  6490,  6493,  6496,  6499,  6500,
    6503,  6506,  6508,  6511,  6514,  6517,  6520,  6523,  6524,  6528,
    6529,  6531,  6532,  6536,  6539,  6540,  6542,  6545,  6546,  6548,
    6553,  6558,  6564,  6567,  6571,  6572,  6574,  6575,  6580,  6581,
    6583,  6585,  6586,  6589,  6592,  6594,  6595,  6597,  6599,  6600,
    6606,  6613,  6614,  6615,  6618,  6621,  6625,  6627,  6629,  6631,
    6633,  6635,  6637,  6639,  6641,  6643,  6645,  6647,  6649,  6651,
    6652,  6656,  6658,  6661,  6663,  6666,  6670,  6674,  6678,  6679,
    6683,  6687,  6688,  6696,  6697,  6701,  6703,  6707,  6708,  6712,
    6715,  6720,  6721,  6725,  6730,  6735,  6736,  6737,  6738,  6755,
    6764,  6772,  6773,  6774,  6775,  6776,  6777,  6793,  6794,  6795,
    6796,  6797,  6810,  6815,  6820,  6824,  6829,  6833,  6836,  6838,
    6842,  6848,  6850,  6852,  6853,  6855,  6857,  6858,  6861,  6862,
    6863,  6867,  6868,  6871,  6877
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     590,     0,    -1,   141,    -1,    -1,   593,   591,   585,   592,
      -1,   593,   141,    -1,    -1,   141,    -1,   594,    -1,  1350,
      -1,   907,    -1,   968,    -1,   958,    -1,   970,    -1,   639,
      -1,   606,    -1,   971,    -1,   960,    -1,  1356,    -1,   611,
      -1,   595,    -1,  1192,    -1,  1222,    -1,  1146,    -1,  1148,
      -1,   599,    -1,  1228,    -1,  1325,    -1,  1316,    -1,   604,
      -1,  1156,    -1,  1414,    -1,  1242,    -1,  1245,    -1,  1308,
      -1,   976,    -1,   984,    -1,   771,    -1,   988,    -1,   597,
      -1,  1238,    -1,  1359,    -1,   979,    -1,   963,    -1,  1159,
      -1,  1234,    -1,   956,    -1,  1323,    -1,  1357,    -1,  1358,
      -1,   996,    -1,  1291,    -1,  1209,    -1,   945,    -1,   948,
      -1,  1203,    -1,  1415,    -1,  1314,    -1,  1184,    -1,  1244,
      -1,  1406,    -1,   596,   369,  1285,    -1,   108,    -1,   129,
      -1,   369,  1285,   175,   598,    -1,  1282,    -1,   586,  1287,
      -1,    -1,   153,  1285,   600,   601,    -1,    -1,   541,   602,
      -1,   602,   581,   603,    -1,   603,    -1,   586,  1287,    -1,
      -1,   192,   605,  1287,    -1,    -1,    55,   278,   509,   607,
     608,    -1,   609,    -1,   608,   581,   609,    -1,   265,   145,
    1282,    -1,   279,   145,  1282,    -1,   268,   145,  1282,    -1,
     269,   145,  1126,    -1,   264,   145,  1126,    -1,   276,   145,
    1126,    -1,   272,   145,  1282,    -1,   271,   145,  1282,    -1,
     273,   145,  1282,    -1,   274,   145,  1282,    -1,   275,   145,
    1282,    -1,   277,   145,  1126,    -1,   610,    -1,   266,   145,
    1282,    -1,   267,   145,  1128,    -1,   396,   145,  1282,    -1,
     397,   145,  1126,    -1,    -1,    88,   819,   493,   822,  1279,
     612,   762,    -1,    -1,    88,   894,   208,  1285,   896,   336,
    1279,   613,   579,   902,   580,   897,    -1,    -1,    88,    95,
     822,  1285,   614,   816,    -1,    -1,    88,   615,  1372,    -1,
      88,   538,   632,  1341,    -1,    88,   255,   186,   725,    -1,
      88,   491,   722,    -1,    88,   616,    -1,   437,  1287,   171,
      98,   562,  1287,   341,   579,   617,   580,    -1,   618,    -1,
     617,   581,   618,    -1,   538,  1282,    -1,   195,  1282,    -1,
      95,  1282,    -1,   351,  1282,    -1,   360,  1282,    -1,   451,
    1282,    -1,   366,  1126,    -1,    -1,  1012,   151,   822,   633,
     620,   336,   427,   621,   626,   623,   628,   128,   629,    -1,
      -1,   152,  1017,  1097,   622,   624,   625,    -1,    22,  1017,
      -1,    -1,   137,    -1,   122,   336,   448,    -1,   122,    -1,
      -1,   470,  1017,    -1,    -1,   140,  1017,    -1,    -1,   627,
      -1,   336,    74,   370,    -1,   336,    74,   325,   370,    -1,
      -1,    70,  1282,    -1,    -1,   630,   631,    -1,   671,    -1,
     673,    -1,   669,    -1,   690,    -1,   708,    -1,   710,    -1,
     705,    -1,   675,    -1,   677,    -1,   678,    -1,   679,    -1,
     680,    -1,   682,    -1,    -1,  1285,   587,  1285,    -1,  1285,
      -1,    -1,   634,   636,    -1,    -1,   635,   637,    -1,    70,
    1282,    -1,   234,   466,    -1,   327,   466,    -1,    81,   466,
      -1,   384,   466,    98,    -1,   303,   466,    98,    -1,   638,
      -1,   636,    -1,   120,    -1,  1023,   120,    -1,   466,   430,
     113,    -1,   466,   430,   221,    -1,    -1,    49,   633,   640,
     641,    -1,    -1,   579,   642,   580,    -1,    -1,   643,    -1,
     643,   581,  1017,    -1,  1017,    -1,    -1,   645,    -1,   645,
     581,   647,    -1,   647,    -1,    -1,  1285,   646,   845,    -1,
      -1,   649,    -1,   649,   581,   650,    -1,   650,    -1,   651,
     646,  1285,   845,    -1,    -1,   222,    -1,   350,    -1,   213,
      -1,    -1,   652,   668,   585,    -1,   668,   585,    -1,   653,
     668,   585,    -1,    -1,   654,   655,   585,    -1,    -1,   111,
     666,   656,   845,   667,    -1,   111,  1285,    77,   172,   663,
      -1,    -1,   111,   660,   189,   172,   657,   661,   668,    -1,
     111,  1285,    93,   172,   658,    -1,    -1,   659,   996,    -1,
     155,    -1,    83,    -1,   662,    -1,   661,   581,   662,    -1,
     665,    -1,  1126,    -1,   458,   664,  1283,    -1,    -1,   546,
      -1,   663,    -1,  1285,    -1,   459,    -1,  1023,   173,    -1,
     457,    -1,  1285,    -1,   666,   581,  1285,    -1,    -1,   112,
    1017,    -1,   671,    -1,   673,    -1,   669,    -1,   690,    -1,
     708,    -1,   710,    -1,   705,    -1,   675,    -1,   677,    -1,
     678,    -1,   679,    -1,   680,    -1,   682,    -1,    -1,   204,
     670,   685,   139,   204,    -1,    -1,   672,   594,    -1,    -1,
     416,   674,  1017,    -1,    -1,   676,   714,    -1,   239,  1286,
      -1,   228,  1286,    -1,   339,  1285,    -1,    -1,   163,   683,
    1285,   219,   681,   684,    -1,    63,  1285,    -1,    -1,   321,
     175,    -1,   175,    -1,  1285,    -1,   684,   581,  1285,    -1,
      -1,    -1,    -1,   686,  1017,   501,   687,   653,   688,   689,
      -1,    -1,   136,   685,    -1,   135,   653,    -1,   691,    -1,
     694,    -1,    -1,    -1,    52,   692,  1017,   693,   696,   704,
     139,    52,    -1,    -1,    52,   695,   697,   704,   139,    52,
      -1,   698,    -1,   696,   698,    -1,   701,    -1,   697,   701,
      -1,    -1,    -1,   557,   699,  1017,   700,   501,   653,    -1,
      -1,    -1,   557,   702,  1017,   703,   501,   653,    -1,    -1,
     135,   653,    -1,    -1,  1286,   588,   706,   714,   707,    -1,
      -1,  1286,    -1,    -1,  1286,   588,   709,   712,   707,    -1,
      -1,   711,   712,    -1,    -1,    30,   713,   654,   652,   139,
      -1,   261,   653,   139,   261,    -1,    -1,    -1,   559,   715,
    1017,   128,   716,   653,   139,   559,    -1,    -1,   406,   653,
     534,   717,  1017,   139,   406,    -1,    29,    -1,     8,    -1,
     215,    -1,   535,    -1,   116,    -1,   747,   749,    -1,   747,
      55,   744,   728,    -1,   747,     6,   744,   723,   732,    -1,
      -1,   540,   255,   186,  1285,    -1,   747,     6,   744,   735,
      -1,   747,   129,   744,   735,    -1,   748,   727,   738,    -1,
     748,   727,   741,    -1,     6,   745,    -1,     6,   746,    -1,
      -1,   729,   730,    -1,   731,    -1,   730,   731,    -1,   730,
     581,   731,    -1,   750,    -1,   751,    -1,   752,    -1,   733,
      -1,   734,    -1,   733,   734,    -1,   733,   581,   734,    -1,
     750,    -1,   751,    -1,   752,    -1,   753,    -1,   756,    -1,
     758,    -1,   760,    -1,   757,    -1,   736,    -1,   737,    -1,
     736,   737,    -1,   736,   581,   737,    -1,   750,    -1,   751,
      -1,   752,    -1,   758,    -1,   760,    -1,   739,    -1,   740,
      -1,   739,   740,    -1,   739,   581,   740,    -1,   750,    -1,
     754,    -1,   755,    -1,   756,    -1,   758,    -1,   760,    -1,
     757,    -1,   742,    -1,   743,    -1,   742,   743,    -1,   742,
     581,   743,    -1,   750,    -1,   758,    -1,   760,    -1,    97,
    1282,    -1,   524,  1282,    -1,   391,  1282,    -1,  1285,    -1,
    1285,    -1,   385,    -1,   387,    -1,   325,     4,    -1,   210,
    1176,   761,    -1,    24,  1176,   761,    -1,   284,  1176,   761,
      -1,   158,  1176,   761,    -1,   525,  1176,   761,    -1,   392,
    1176,   761,    -1,   322,  1176,  1127,    -1,    70,  1176,  1282,
      -1,  1215,   143,  1176,   829,    -1,    -1,   760,    -1,   554,
      -1,   328,    -1,  1127,    -1,   201,    -1,   579,   763,    -1,
     823,   768,   765,    -1,   244,  1279,    -1,   579,   244,  1279,
     580,    -1,   835,   580,   823,   768,   765,    -1,    -1,   768,
     812,   580,   764,  1363,    -1,    -1,    -1,  1254,   815,   812,
     766,  1360,    -1,    -1,  1254,   815,   579,   812,   580,   767,
    1363,    -1,    -1,   769,    -1,    -1,   359,   770,   773,    -1,
      -1,   359,   772,   773,    -1,    46,   774,   784,   785,   792,
      -1,   778,   232,   579,   779,   580,    -1,    -1,   778,   190,
     775,   782,    -1,    -1,   383,   776,   782,    -1,    -1,   249,
     777,   782,    -1,    -1,   246,    -1,    -1,   780,    -1,   781,
      -1,   780,   581,   781,    -1,  1285,    -1,   579,  1012,   790,
    1013,   580,    -1,   579,  1012,   790,  1013,   580,    -1,    -1,
     358,  1127,    -1,    -1,    -1,   482,    46,   778,   190,   783,
     786,   791,    -1,    -1,   482,    46,   778,   232,   579,   788,
     580,   787,   791,    -1,   789,    -1,   788,   581,   789,    -1,
    1285,    -1,  1020,    -1,    -1,   481,  1127,    -1,    -1,   579,
     793,   580,    -1,   794,    -1,   793,   581,   794,    -1,    -1,
     359,   795,   796,   797,   809,   804,    -1,  1285,    -1,    -1,
     545,   241,   500,   798,    -1,   545,   222,   579,   801,   580,
      -1,   799,    -1,   800,    -1,   288,    -1,   579,   288,   580,
      -1,   579,   803,   580,    -1,   802,    -1,   801,   581,   802,
      -1,   803,    -1,  1020,    -1,    -1,   579,   805,   580,    -1,
     806,    -1,   805,   581,   806,    -1,    -1,   482,   807,   808,
     809,    -1,  1287,    -1,    -1,   810,    -1,   810,   811,    -1,
     811,    -1,   491,  1176,  1287,    -1,  1215,   143,  1176,   829,
      -1,   322,  1176,  1127,    -1,   283,  1176,  1129,    -1,   300,
    1176,  1129,    -1,    98,   121,  1176,  1282,    -1,   208,   121,
    1176,  1282,    -1,    70,  1176,  1282,    -1,    -1,    -1,   431,
     813,  1006,  1010,   814,   833,    -1,    -1,    18,    -1,    -1,
     817,    -1,   818,    -1,   817,   818,    -1,   828,    -1,   827,
      -1,    -1,   820,    -1,   821,    -1,   821,   820,    -1,   495,
      -1,    -1,   204,  1023,   154,    -1,    -1,   825,    -1,   826,
      -1,   826,   824,    -1,   826,    -1,   826,   825,    -1,   826,
     581,   825,    -1,   143,  1176,   829,    -1,   518,  1176,   829,
      -1,   283,  1176,  1128,    -1,   300,  1176,  1128,    -1,    26,
    1176,  1126,    -1,   360,  1176,  1282,    -1,    70,  1176,  1282,
      -1,    25,  1176,  1128,    -1,   352,  1176,  1126,    -1,   352,
    1176,   112,    -1,    59,  1176,  1126,    -1,   494,  1176,  1126,
      -1,   115,  1176,  1126,    -1,   423,  1176,   831,    -1,   529,
    1176,   579,  1233,   580,    -1,   827,    -1,   828,    -1,   216,
    1176,   832,    -1,    98,   121,  1176,  1282,    -1,   208,   121,
    1176,  1282,    -1,   491,  1285,    -1,   476,   124,    -1,   476,
     293,    -1,    78,  1176,  1282,    -1,   231,  1176,  1126,    -1,
     876,   867,  1176,   869,    -1,   876,    66,  1176,   875,    -1,
    1287,    -1,  1287,    -1,   112,    -1,   166,    -1,   133,    -1,
      75,    -1,   393,    -1,    73,    -1,   327,    -1,   165,    -1,
     235,    -1,  1121,    -1,  1005,  1009,    -1,   478,    -1,   388,
      -1,   110,    -1,   220,    -1,   836,    -1,   835,   581,   836,
      -1,   837,    -1,   838,    -1,   843,   839,    -1,   843,   881,
      -1,   889,   904,   896,   579,   902,   580,   897,    -1,   841,
     890,   904,   896,   579,   902,   580,   897,    -1,   841,   171,
     232,   904,   579,   902,   580,   881,    -1,   842,   839,    -1,
     841,   840,    -1,    -1,   840,    -1,    60,  1017,    -1,    -1,
     842,    -1,    80,   904,    -1,    -1,  1278,   844,   845,   863,
      -1,   853,   861,   857,    -1,   854,   862,   857,    -1,   168,
     855,   857,    -1,    38,    -1,    38,   860,    -1,    43,    -1,
      42,    -1,   849,   860,   877,    -1,   849,   877,    -1,   850,
     860,   878,    -1,   850,   878,    -1,    33,   860,    -1,    33,
      -1,   851,   860,   877,    -1,   852,   860,   878,    -1,   547,
     860,    -1,   568,   861,   857,    -1,   102,    -1,   505,    -1,
     502,   861,    -1,    99,    -1,   506,    -1,    40,   861,    -1,
     848,    -1,   289,    -1,   257,    -1,   260,   547,    -1,   260,
     851,   877,    -1,   508,   877,    -1,   499,   861,   877,    -1,
     291,   877,    -1,   258,   877,    -1,   110,   855,   857,    -1,
     332,   855,   857,    -1,   166,   855,   857,    -1,    -1,   144,
     846,   579,   906,   580,   877,    -1,    -1,   439,   847,   579,
     906,   580,   877,    -1,   260,   877,    -1,   435,    -1,   181,
      -1,   180,    -1,   364,    -1,   308,    -1,   248,    -1,   307,
      -1,   365,    -1,   309,    -1,    58,    -1,   316,    -1,   313,
      58,    -1,   849,   551,    -1,   548,    -1,   313,   548,    -1,
     333,    -1,   316,   548,    -1,   313,    58,   551,    -1,   316,
     551,    -1,   220,    -1,   507,    -1,   449,    -1,   290,    -1,
      32,    -1,   388,    -1,   127,    -1,   127,   368,    -1,    -1,
     860,    -1,   856,    -1,   579,   331,   581,   331,   580,    -1,
      -1,   858,    -1,   858,   859,    -1,   859,    -1,   446,    -1,
     533,    -1,   569,    -1,   579,   259,   580,    -1,   579,   520,
     580,    -1,   579,   109,   580,    -1,   579,   331,   580,    -1,
      -1,   860,    -1,    -1,   856,    -1,    -1,   864,    -1,   864,
     865,    -1,   865,    -1,   330,    -1,  1023,   330,    -1,   112,
     866,    -1,   336,   535,   326,  1016,    -1,    25,    -1,   435,
     112,   546,    -1,   880,   232,    -1,   530,    -1,   530,   232,
      -1,    70,  1282,    -1,    66,   873,    -1,   326,  1016,    -1,
    1269,    -1,    58,   439,    -1,    57,    -1,  1287,    -1,    33,
      -1,   868,    -1,   112,    -1,    -1,   867,   869,    -1,  1287,
      -1,    33,    -1,   871,    -1,   112,    -1,  1287,    -1,    -1,
      66,   875,    -1,   873,    -1,   112,    -1,    -1,   112,    -1,
      -1,    20,   878,    -1,    47,    -1,   527,   878,    -1,   867,
     868,   878,    -1,    33,   879,    -1,    -1,    33,    -1,    -1,
      20,    -1,   527,    -1,   867,   868,    -1,    -1,   372,    -1,
      -1,   394,  1279,   882,   883,    -1,   885,    -1,   579,   884,
     580,   885,    -1,   884,   581,  1285,    -1,  1285,    -1,    -1,
     886,    -1,   886,   887,    -1,   887,    -1,   336,   116,   888,
      -1,   336,   535,   888,    -1,   280,   176,    -1,   280,   356,
      -1,   280,   447,    -1,   413,    -1,    50,    -1,   439,   330,
      -1,   327,     5,    -1,   439,   112,    -1,   891,    -1,   177,
     892,    -1,   455,   892,    -1,   372,   232,    -1,   530,   892,
      -1,   232,    -1,   208,    -1,    -1,   891,    -1,   230,    -1,
     208,    -1,   207,    -1,    -1,   530,    -1,   177,    -1,   455,
      -1,    -1,   895,    -1,   895,   899,    -1,    -1,   898,    -1,
     900,    -1,   898,   900,    -1,   541,   901,    -1,   518,   901,
      -1,   899,    -1,   231,  1176,  1126,    -1,   560,   355,  1281,
      -1,    45,    -1,   425,    -1,   190,    -1,   902,   581,   903,
    1119,    -1,   903,  1119,    -1,  1285,    -1,  1285,   579,   331,
     580,    -1,    -1,  1278,    -1,    -1,   587,  1285,    -1,  1267,
      -1,   906,   581,  1267,    -1,    -1,    13,   941,   493,  1279,
     908,   919,    -1,    -1,    13,    95,   918,   909,   817,    -1,
      13,    95,  1285,   536,    98,   121,   312,    -1,    -1,    13,
     374,   633,   910,   634,    -1,    -1,    13,   178,   633,   911,
     634,    -1,    -1,    13,  1380,  1375,   912,  1382,    -1,    -1,
      13,  1375,   913,  1382,    -1,    -1,    13,  1375,   151,   633,
     914,   915,   916,   623,   628,   917,    -1,    13,   491,   724,
      -1,    13,   255,   186,   726,    -1,    13,   491,   721,    -1,
      13,   491,   720,    -1,    13,   437,  1287,   341,   579,   617,
     580,    -1,    -1,   336,   427,   621,    -1,   627,    -1,   336,
     427,   621,   627,    -1,    -1,   402,   509,   633,    -1,    -1,
     128,   629,    -1,    -1,  1285,    -1,    -1,   123,   491,    -1,
     206,   491,    -1,   934,   768,    -1,   934,   923,    -1,   923,
      -1,   769,    -1,   925,    -1,   129,   359,   932,    -1,   389,
     359,   978,   924,    -1,    -1,   340,   359,   978,   924,   920,
     978,    -1,    14,   359,   978,   924,    -1,    -1,    60,   359,
     924,   921,   973,    -1,    -1,   404,   359,   978,   924,   922,
     965,    -1,    64,   359,   978,  1127,    -1,   928,    -1,   401,
     357,    -1,    12,    -1,   932,    -1,    -1,     6,   359,   978,
     926,   927,    -1,    -1,   579,   793,   580,    -1,   358,  1127,
      -1,    -1,   403,   359,   978,   929,   930,    -1,    -1,    -1,
     932,   931,   219,   579,   793,   580,    -1,   933,    -1,   932,
     581,   933,    -1,  1285,    -1,   936,    -1,   934,   581,   936,
      -1,     6,   940,    -1,   935,   837,   943,    -1,     6,   838,
      -1,   935,   579,   835,   580,    -1,    -1,    55,   940,  1278,
     937,   843,   943,    -1,    -1,    -1,   304,   940,  1278,   938,
     845,   863,   939,   943,    -1,   129,   940,  1278,   942,    -1,
     129,   171,   232,   904,    -1,   129,   372,   232,    -1,   129,
     891,  1278,    -1,   122,   230,    -1,   137,   230,    -1,    13,
     940,  1278,   439,   112,  1269,    -1,    13,   940,  1278,   129,
     112,    -1,   402,   944,  1279,    -1,    85,   509,   867,   869,
     874,    -1,   824,    -1,   170,    -1,  1112,    -1,    -1,    69,
      -1,    -1,   205,    -1,    -1,   413,    -1,    50,    -1,    -1,
       8,  1285,    -1,   165,    -1,    -1,   509,    -1,   145,    -1,
      18,    -1,    -1,   471,   448,   950,   946,   954,    -1,   475,
     448,   950,    -1,    -1,   448,   471,   950,   947,   954,    -1,
     448,   475,   950,    -1,   471,   511,   949,    -1,    -1,   560,
      79,   450,    -1,    -1,   951,   952,    -1,   953,    -1,   952,
     581,   953,    -1,    -1,   467,    -1,   398,    -1,    -1,   534,
     955,    -1,   610,    -1,   955,   581,   610,    -1,    -1,   412,
    1310,   957,  1150,   175,  1282,    -1,    -1,    28,  1310,   959,
    1150,   509,  1282,    -1,    -1,    59,  1310,   961,  1150,   962,
      -1,    -1,   382,    -1,   157,    -1,    -1,   404,   978,  1310,
     964,  1150,   965,    -1,    -1,   966,    -1,   967,    -1,   967,
     966,    -1,   382,    -1,   157,    -1,   539,    -1,    -1,    14,
     978,  1310,   969,  1150,    -1,    34,  1282,    -1,    -1,    60,
    1310,   972,  1150,   973,    -1,    -1,   974,    -1,   975,    -1,
     975,   974,    -1,   382,    -1,   161,    -1,   292,    -1,   157,
      -1,    56,    -1,   172,   536,    -1,    -1,   340,   978,  1310,
     977,  1150,    -1,    -1,   329,    -1,   251,    -1,    -1,   402,
    1310,   980,   982,    -1,   402,   538,   632,   981,    -1,  1288,
     509,  1288,    -1,   981,   581,  1288,   509,  1288,    -1,   983,
      -1,   982,   581,   983,    -1,  1279,   509,  1279,    -1,    48,
     208,   985,   222,   987,    -1,   986,    -1,   985,   581,   986,
      -1,  1279,   992,    -1,  1285,    -1,   112,    -1,    -1,   250,
     208,   219,    48,   989,   990,    -1,   991,    -1,   990,   581,
     991,    -1,  1279,   992,   995,    -1,    -1,   993,   994,    -1,
      -1,   891,   579,  1093,   580,    -1,    -1,   205,   238,    -1,
     997,    -1,   431,   999,    -1,   579,   998,   580,  1363,    -1,
     431,  1001,    -1,   579,   998,   580,    -1,    -1,  1001,  1000,
    1360,    -1,    -1,    -1,  1002,  1006,  1010,  1003,  1004,  1009,
      -1,  1115,  1121,    -1,  1141,    -1,  1005,    -1,  1141,  1005,
      -1,  1005,  1141,    -1,   175,  1061,  1104,  1109,  1106,  1115,
    1121,  1132,    -1,   175,   130,  1104,  1121,    -1,    -1,  1007,
      -1,  1007,  1008,    -1,  1008,    -1,   477,    -1,   194,    -1,
     125,    -1,   465,    -1,   460,    -1,   461,    -1,   463,    -1,
     464,    -1,   462,    -1,    12,    -1,    -1,   172,   535,    -1,
     254,   222,   441,   302,    -1,  1010,   581,  1011,    -1,  1011,
      -1,   574,    -1,  1012,  1014,  1013,  1015,    -1,    -1,    -1,
    1273,    -1,  1017,    -1,    -1,    18,  1285,    -1,    18,  1282,
      -1,  1285,    -1,  1282,    -1,    -1,   579,   580,    -1,  1017,
    1021,  1017,    -1,  1017,   566,  1017,    -1,  1017,  1022,  1017,
      -1,   325,  1017,    -1,  1018,   225,   515,    -1,  1018,   225,
    1023,   515,    -1,  1018,   225,   160,    -1,  1018,   225,  1023,
     160,    -1,  1018,   225,   531,    -1,  1018,   225,  1023,   531,
      -1,  1018,    -1,  1018,   225,   330,    -1,  1018,   225,  1023,
     330,    -1,  1018,   146,  1019,    -1,  1018,  1025,  1019,    -1,
    1018,  1025,  1026,   579,  1369,   580,    -1,  1019,    -1,  1020,
     222,   579,  1369,   580,    -1,  1020,  1023,   222,   579,  1369,
     580,    -1,  1020,   222,   579,  1017,   580,    -1,  1020,   222,
     579,  1017,   581,  1054,   580,    -1,  1020,  1023,   222,   579,
    1017,   580,    -1,  1020,  1023,   222,   579,  1017,   581,  1054,
     580,    -1,  1020,    31,  1020,    16,  1019,    -1,  1020,  1023,
      31,  1020,    16,  1019,    -1,  1020,   453,   244,  1020,    -1,
    1020,   244,  1027,  1108,    -1,  1020,  1023,   244,  1027,  1108,
      -1,  1020,   395,  1020,    -1,  1020,  1023,   395,  1020,    -1,
    1020,    -1,  1020,   570,  1020,    -1,  1020,   571,  1020,    -1,
    1020,   442,  1020,    -1,  1020,   443,  1020,    -1,  1020,   573,
    1020,    -1,  1020,   572,  1020,    -1,  1020,   573,   218,  1017,
    1097,    -1,  1020,   572,   218,  1017,  1097,    -1,  1020,   574,
    1020,    -1,  1020,   575,  1020,    -1,  1020,   576,  1020,    -1,
    1020,   126,  1020,    -1,  1020,   305,  1020,    -1,  1020,   577,
    1020,    -1,  1027,    -1,   347,    -1,   344,    -1,    16,    -1,
      15,    -1,   325,    -1,   324,    -1,   582,    -1,   324,    -1,
     145,    -1,   179,    -1,   188,    -1,   236,    -1,   263,    -1,
     318,    -1,    12,    -1,    17,    -1,  1275,    -1,  1028,    -1,
    1029,    -1,  1032,    -1,  1030,    -1,  1027,    66,  1287,    -1,
    1270,    -1,  1268,    -1,  1044,    -1,  1040,    -1,  1027,   346,
    1027,    -1,   573,  1027,    -1,   572,  1027,    -1,   578,  1027,
      -1,  1024,  1027,    -1,   579,  1369,   580,    -1,   579,  1017,
     580,    -1,   579,  1017,   581,  1054,   580,    -1,   424,   579,
    1017,   581,  1054,   580,    -1,   154,   579,  1369,   580,    -1,
     583,  1285,  1017,   584,    -1,   280,  1055,     9,   579,  1020,
    1034,   580,    -1,    33,  1027,    -1,    53,   579,  1017,    18,
    1052,   580,    -1,    52,  1057,  1059,  1058,   139,    -1,    85,
     579,  1017,   581,  1052,   580,    -1,    85,   579,  1017,   541,
     868,   580,    -1,   112,   579,  1275,   580,    -1,   545,   579,
    1276,   580,    -1,   218,  1017,  1097,   573,  1017,    -1,    58,
     579,  1054,   580,    -1,    58,   579,  1054,   541,   868,   580,
      -1,    92,  1016,    -1,   102,   579,  1017,   580,    -1,   107,
     579,  1017,   580,    -1,   200,   579,  1017,   580,    -1,   215,
     579,  1017,   581,  1017,   581,  1017,   581,  1017,   580,    -1,
     218,   579,  1017,   581,  1017,   580,    -1,   218,   579,  1017,
     581,  1017,   581,  1054,   580,    -1,   240,   579,  1017,   581,
    1017,   580,    -1,   299,   579,  1017,   580,    -1,   306,   579,
    1017,   580,    -1,   418,   579,  1017,   581,  1017,   580,    -1,
     429,   579,  1017,   580,    -1,   505,   579,  1017,   580,    -1,
     502,   579,  1017,   580,    -1,   502,   579,  1017,   581,  1017,
     580,    -1,   514,   579,  1017,   580,    -1,   514,   579,   237,
    1017,   175,  1017,   580,    -1,   514,   579,   510,  1017,   175,
    1017,   580,    -1,   514,   579,    44,  1017,   175,  1017,   580,
      -1,   514,   579,   237,   175,  1017,   580,    -1,   514,   579,
     510,   175,  1017,   580,    -1,   514,   579,    44,   175,  1017,
     580,    -1,   514,   579,  1017,   175,  1017,   580,    -1,   538,
     579,   580,    -1,   568,   579,  1017,   580,    -1,     7,   579,
    1017,   581,  1017,   580,    -1,     7,   579,  1017,   581,   218,
    1017,  1097,   580,    -1,    91,  1016,    -1,    94,  1016,    -1,
      94,   579,  1017,   580,    -1,   100,   579,  1017,   581,   218,
    1017,  1097,   580,    -1,   101,   579,  1017,   581,   218,  1017,
    1097,   580,    -1,   159,   579,  1097,   175,  1017,   580,    -1,
     182,   579,  1100,   581,  1017,   580,    -1,   326,  1016,    -1,
     326,   579,  1017,   580,    -1,   367,   579,  1020,   222,  1017,
     580,    -1,   479,   579,  1017,   581,  1017,   580,    -1,   479,
     579,  1017,   581,   218,  1017,  1097,   580,    -1,   483,   579,
    1017,   581,  1017,   581,  1017,   580,    -1,   483,   579,  1017,
     581,  1017,   580,    -1,   483,   579,  1017,   175,  1017,   172,
    1017,   580,    -1,   483,   579,  1017,   175,  1017,   580,    -1,
     489,  1016,    -1,   489,   579,  1017,   580,    -1,   503,   579,
    1098,   581,  1017,   581,  1017,   580,    -1,   504,   579,  1098,
     581,  1017,   581,  1017,   580,    -1,   542,  1016,    -1,   544,
    1016,    -1,   543,  1016,    -1,    20,   579,  1017,   580,    -1,
      57,   579,  1017,   580,    -1,    64,   579,  1054,   580,    -1,
      67,   579,  1017,   580,    -1,    95,   579,   580,    -1,   204,
     579,  1017,   581,  1017,   581,  1017,   580,    -1,   295,   579,
    1017,   580,    -1,   305,   579,  1017,   581,  1017,   580,    -1,
     335,   579,  1017,   580,    -1,   360,   579,  1017,   580,    -1,
     380,   579,  1017,   580,    -1,   406,   579,  1017,   581,  1017,
     580,    -1,   407,   579,  1017,   581,  1017,   581,  1017,   580,
      -1,   516,   579,  1017,   581,  1017,   580,    -1,   556,   579,
    1017,   580,    -1,   556,   579,  1017,   581,  1017,   580,    -1,
    1031,    -1,    81,   579,  1017,   581,  1017,   580,    -1,   180,
     579,  1054,   580,    -1,   248,   579,  1054,   580,    -1,   307,
     579,  1054,   580,    -1,   308,   579,  1054,   580,    -1,   309,
     579,  1054,   580,    -1,   364,   579,  1017,   581,  1017,   580,
      -1,   365,   579,  1054,   580,    -1,    -1,  1281,   579,  1033,
    1037,   580,    -1,  1285,   587,  1285,   579,  1053,   580,    -1,
    1035,  1036,    -1,   222,    42,   302,    -1,    -1,   222,   314,
     234,   302,    -1,    -1,   560,   381,   156,    -1,    -1,  1038,
      -1,  1039,    -1,  1038,   581,  1039,    -1,  1012,  1017,  1013,
    1015,    -1,    27,   579,  1050,   580,    -1,    27,   579,   125,
    1050,   580,    -1,    36,   579,  1050,   580,    -1,    37,   579,
    1050,   580,    -1,    39,   579,  1050,   580,    -1,    86,   579,
    1103,   574,   580,    -1,    86,   579,  1050,   580,    -1,    -1,
      -1,    86,   579,   125,  1041,  1054,  1042,   580,    -1,   301,
     579,  1050,   580,    -1,   301,   579,   125,  1050,   580,    -1,
     285,   579,  1050,   580,    -1,   285,   579,   125,  1050,   580,
      -1,   474,   579,  1050,   580,    -1,   550,   579,  1050,   580,
      -1,   473,   579,  1050,   580,    -1,   552,   579,  1050,   580,
      -1,   484,   579,  1050,   580,    -1,   484,   579,   125,  1050,
     580,    -1,    -1,   187,   579,  1047,  1043,  1054,  1049,  1048,
     580,    -1,    -1,   586,  1045,  1046,    -1,  1287,   440,  1017,
      -1,  1287,    -1,   586,  1300,  1287,   905,    -1,    -1,   125,
      -1,    -1,   433,  1267,    -1,    -1,  1116,    -1,    -1,  1103,
    1051,  1017,    -1,    33,   861,    -1,    58,   861,   877,    -1,
     316,   861,    -1,   446,    -1,   446,   220,    -1,   533,    -1,
     533,   220,    -1,   102,    -1,   505,    -1,    99,    -1,   110,
     855,    -1,    -1,  1054,    -1,  1017,    -1,  1054,   581,  1017,
      -1,  1056,    -1,   579,  1056,   580,    -1,  1275,    -1,  1056,
     581,  1275,    -1,    -1,  1017,    -1,    -1,   135,  1017,    -1,
     557,  1017,   501,  1017,    -1,  1059,   557,  1017,   501,  1017,
      -1,  1073,    -1,  1064,    -1,  1063,    -1,  1060,    -1,   583,
    1285,  1060,   584,    -1,  1062,    -1,  1063,   581,  1062,    -1,
    1060,  1072,  1060,    -1,  1060,   477,  1073,    -1,    -1,  1060,
    1072,  1060,   336,  1065,  1017,    -1,    -1,  1060,   477,  1073,
     336,  1066,  1017,    -1,    -1,  1060,  1072,  1060,   541,  1067,
     579,  1096,   580,    -1,  1060,   314,   229,  1073,    -1,    -1,
    1060,   240,  1082,   229,  1060,   336,  1068,  1017,    -1,    -1,
    1060,   240,  1082,   229,  1073,  1069,   541,   579,  1096,   580,
      -1,  1060,   314,   240,  1082,   229,  1073,    -1,    -1,  1060,
     418,  1082,   229,  1060,   336,  1070,  1017,    -1,    -1,  1060,
     418,  1082,   229,  1073,  1071,   541,   579,  1096,   580,    -1,
    1060,   314,   418,  1082,   229,  1073,    -1,   229,    -1,   211,
     229,    -1,    89,   229,    -1,    -1,  1074,  1279,  1102,  1091,
      -1,  1081,  1080,  1077,    -1,   579,  1080,  1075,  1363,   580,
    1102,    -1,    -1,  1080,  1076,  1063,    -1,    -1,    -1,  1078,
    1006,  1010,  1079,   833,    -1,    -1,   431,    -1,    -1,   348,
      -1,    -1,   172,   229,    -1,   172,   345,    46,    -1,   172,
     186,    46,    -1,   170,    -1,   205,    -1,    -1,  1084,   891,
    1083,  1086,   579,  1095,   580,    -1,    -1,   540,   891,  1083,
    1087,   579,  1093,   580,    -1,  1085,    -1,  1088,  1085,    -1,
      -1,    -1,  1090,  1088,    -1,    -1,  1092,  1089,    -1,    -1,
    1095,    -1,  1285,    -1,   372,    -1,  1094,    -1,  1095,   581,
    1094,    -1,  1285,    -1,  1096,   581,  1285,    -1,  1099,    -1,
     103,    -1,   104,    -1,   105,    -1,   106,    -1,   197,    -1,
     198,    -1,   199,    -1,   297,    -1,   298,    -1,   428,    -1,
     567,    -1,  1099,    -1,   174,    -1,   107,    -1,   556,    -1,
     200,    -1,   299,    -1,   306,    -1,   380,    -1,   429,    -1,
     295,    -1,   568,    -1,   102,    -1,   505,    -1,    99,    -1,
     502,    -1,    -1,    18,    -1,   145,    -1,    -1,  1101,  1285,
      -1,    -1,    12,    -1,    -1,    -1,   558,  1105,  1017,    -1,
      -1,    -1,   191,  1107,  1017,    -1,   149,  1027,    -1,    -1,
      -1,   186,    46,  1110,  1111,    -1,  1110,   581,  1274,  1119,
      -1,  1274,  1119,    -1,    -1,   560,    90,    -1,   560,   420,
      -1,   345,    46,  1113,    -1,  1113,   581,  1114,    -1,  1114,
      -1,  1276,  1119,    -1,    -1,  1116,    -1,    -1,   345,    46,
    1117,  1118,    -1,  1118,   581,  1274,  1119,    -1,  1274,  1119,
      -1,    -1,    19,    -1,   117,    -1,    -1,  1122,    -1,    -1,
    1122,    -1,   245,  1123,    -1,  1124,    -1,  1124,   581,  1124,
      -1,  1124,   334,  1124,    -1,  1268,    -1,   520,    -1,   259,
      -1,   331,    -1,    -1,   245,  1124,    -1,   331,    -1,   193,
      -1,   259,    -1,   520,    -1,   109,    -1,   167,    -1,   331,
      -1,   193,    -1,   259,    -1,   520,    -1,  1130,    -1,   331,
      -1,   520,    -1,   259,    -1,   109,    -1,   167,    -1,   331,
      -1,   520,    -1,   259,    -1,  1130,    -1,  1131,    -1,   109,
      -1,   167,    -1,    -1,    -1,   374,  1285,  1133,   579,  1134,
     580,    -1,    -1,  1135,    -1,  1135,   581,  1136,    -1,  1136,
      -1,  1012,  1017,  1013,    -1,    -1,  1138,  1139,    -1,  1139,
     581,  1140,    -1,  1140,    -1,   586,  1287,    -1,  1287,    -1,
      -1,   219,  1142,  1143,    -1,    -1,    -1,   349,  1284,  1144,
     870,  1145,  1255,  1258,    -1,   131,  1284,    -1,  1137,    -1,
      -1,   128,  1147,  1054,    -1,   129,  1155,  1310,  1154,  1150,
     942,    -1,    -1,   129,   208,  1285,   336,  1279,  1149,    -1,
     129,    95,  1154,  1285,    -1,   129,   178,  1154,  1285,   587,
    1285,    -1,   129,   178,  1154,  1285,    -1,   129,   374,  1154,
     633,    -1,   129,   538,   632,  1340,    -1,   129,   553,  1154,
    1150,   942,    -1,   129,   151,  1154,   633,    -1,   129,   513,
    1154,   633,    -1,   129,   491,   747,   758,   759,    -1,   129,
     255,   186,   748,   758,   759,    -1,   129,   437,  1154,  1287,
      -1,  1151,    -1,  1150,   581,  1151,    -1,  1279,    -1,  1153,
      -1,  1152,   581,  1153,    -1,  1279,    -1,    -1,   204,   154,
      -1,    -1,   495,    -1,    -1,    -1,   215,  1157,  1162,   941,
    1164,  1158,  1166,  1182,    -1,    -1,    -1,   407,  1160,  1163,
    1164,  1161,  1166,    -1,    -1,   262,    -1,   114,    -1,   194,
      -1,  1191,    -1,   114,    -1,   219,  1165,    -1,  1165,    -1,
    1151,    -1,  1169,    -1,   579,   580,  1169,    -1,   579,  1168,
     580,  1169,    -1,    -1,   439,  1167,  1173,    -1,  1168,   581,
    1272,    -1,  1272,    -1,   545,  1172,    -1,   546,  1172,    -1,
      -1,   812,  1170,  1360,    -1,    -1,   579,   812,   580,  1171,
    1363,    -1,  1172,   581,  1177,    -1,  1177,    -1,  1173,   581,
    1174,    -1,  1174,    -1,  1276,  1175,  1181,    -1,   145,    -1,
     440,    -1,    -1,  1175,    -1,    -1,   579,  1178,  1179,   580,
      -1,    -1,  1180,    -1,  1180,   581,  1181,    -1,  1181,    -1,
    1017,    -1,   112,    -1,    -1,    -1,   336,   132,  1183,   232,
     535,  1189,    -1,    -1,    -1,   535,  1185,  1191,   941,  1061,
     439,  1187,  1186,  1104,  1115,  1125,    -1,  1187,   581,  1188,
      -1,  1188,    -1,  1276,  1175,  1181,    -1,  1189,   581,  1190,
      -1,  1190,    -1,  1276,  1175,  1181,    -1,    -1,   262,    -1,
      -1,   116,  1193,  1201,  1194,    -1,    -1,   175,  1279,  1195,
    1104,  1115,  1125,    -1,    -1,  1198,  1196,   175,  1061,  1104,
      -1,    -1,   175,  1152,  1197,   541,  1061,  1104,    -1,  1199,
      -1,  1198,   581,  1199,    -1,  1285,  1200,  1102,    -1,  1285,
     587,  1285,  1200,  1102,    -1,    -1,   587,   574,    -1,    -1,
    1202,  1201,    -1,   382,    -1,   262,    -1,   205,    -1,   516,
    1204,  1151,    -1,    -1,   493,    -1,    -1,  1206,    -1,  1207,
      -1,  1206,   581,  1207,    -1,    87,    -1,   293,    -1,    41,
     223,    -1,    82,   488,    -1,   353,   162,    -1,   224,    -1,
     487,    -1,   454,    -1,    12,    -1,    -1,   172,   381,   331,
      -1,    -1,   444,  1210,  1211,    -1,    96,  1221,    -1,  1217,
     490,  1216,  1221,    -1,  1217,   512,  1216,  1221,    -1,   150,
    1216,  1221,    -1,   493,   472,  1216,  1221,    -1,   339,   490,
    1216,  1221,    -1,  1217,   363,    -1,   362,    -1,   143,   830,
    1213,    -1,   143,    12,  1213,    -1,  1217,    68,  1218,  1279,
    1216,  1221,    -1,   320,   278,   172,   448,   560,   266,   145,
    1282,    16,   267,   145,  1128,    16,   270,   145,  1126,    -1,
    1214,   256,    -1,   448,   196,    -1,    -1,    34,   150,  1219,
    1220,  1212,  1120,    -1,   893,  1218,  1279,  1216,  1104,    -1,
      69,   517,    -1,   493,   517,    -1,  1215,   142,    -1,    23,
      -1,    84,    -1,   373,    -1,    86,   579,   574,   580,   555,
      -1,    86,   579,   574,   580,   147,    -1,   555,  1120,    -1,
     147,  1120,    -1,   378,    -1,   377,  1205,  1208,  1120,    -1,
    1299,   472,  1221,    -1,   212,   472,    -1,   310,   472,    -1,
    1217,   376,    -1,  1299,   549,  1221,    -1,   867,  1221,    -1,
      67,  1221,    -1,   185,    -1,   185,   172,  1288,    -1,    88,
      95,   822,  1285,    -1,    88,   493,  1279,    -1,    88,   553,
    1279,    -1,   278,   472,    -1,   448,   472,    -1,    88,   374,
     633,    -1,    88,   178,   633,    -1,    88,   513,   633,    -1,
     374,   472,  1221,    -1,   178,   472,  1221,    -1,   374,    65,
     633,    -1,   178,    65,   633,    -1,    88,   151,   633,    -1,
     472,    -1,   310,    -1,   256,    -1,   278,    -1,    33,    -1,
      -1,   476,    -1,    -1,  1218,  1285,    -1,    -1,   176,    -1,
     175,    -1,   222,    -1,    -1,   222,  1282,    -1,    -1,   175,
    1128,    -1,    -1,   244,  1282,    -1,   558,  1017,    -1,    -1,
    1225,  1279,  1223,  1227,    -1,    -1,  1225,  1226,  1224,   996,
      -1,   117,    -1,   118,    -1,    -1,   157,    -1,   358,    -1,
      -1,  1267,    -1,  1285,    -1,    -1,   169,   978,  1229,  1230,
      -1,  1230,   581,  1231,    -1,  1231,    -1,    -1,  1310,  1232,
    1233,    -1,   490,   560,   386,   254,    -1,   381,    48,    -1,
     196,    -1,   373,    -1,   256,    -1,   472,    -1,   448,    -1,
     278,    -1,   119,    -1,   411,    -1,    -1,  1150,    -1,    -1,
     410,  1235,  1236,    -1,  1236,   581,  1237,    -1,  1237,    -1,
     448,    -1,   278,    -1,   381,    48,    -1,    -1,   379,  1239,
    1240,    -1,  1214,   256,  1241,    -1,   509,  1282,    -1,    29,
    1017,    -1,   233,  1243,  1017,    -1,    -1,    78,    -1,   381,
      -1,   540,  1285,    -1,    -1,   250,    98,  1246,  1247,    -1,
     250,   493,  1279,   175,   278,    -1,    -1,    -1,    -1,    -1,
    1253,  1252,   209,  1284,  1248,  1254,   219,  1249,   493,  1279,
    1250,   870,  1251,  1255,  1258,  1261,  1262,  1265,    -1,   175,
     278,    -1,    -1,   251,    -1,    -1,    76,    -1,   262,    -1,
      -1,   407,    -1,   205,    -1,    -1,    68,  1256,    -1,  1256,
    1257,    -1,  1257,    -1,   497,    46,  1267,    -1,   343,   138,
      46,  1267,    -1,   138,    46,  1267,    -1,   148,    46,  1267,
      -1,    -1,   247,  1259,    -1,  1259,  1260,    -1,  1260,    -1,
     497,    46,  1267,    -1,   469,    46,  1267,    -1,    -1,   205,
     331,   247,    -1,    -1,   579,  1263,   580,    -1,   579,   580,
      -1,  1263,   581,  1264,    -1,  1264,    -1,  1276,    -1,   586,
    1287,    -1,    -1,   439,  1189,    -1,   498,    -1,   315,    -1,
     523,   498,    -1,  1266,  1283,    -1,  1283,    -1,   193,    -1,
      35,    -1,   354,    -1,  1270,    -1,   573,  1271,    -1,   572,
    1271,    -1,  1266,    -1,  1271,    -1,   330,    -1,   160,    -1,
     515,    -1,   193,    -1,    35,    -1,   523,   193,    -1,   523,
      35,    -1,   102,  1266,    -1,   505,  1266,    -1,   502,  1266,
      -1,   331,    -1,   259,    -1,   520,    -1,   109,    -1,   167,
      -1,  1276,    -1,  1273,    -1,  1285,   587,   574,    -1,  1285,
     587,  1285,   587,   574,    -1,  1017,    -1,  1285,    -1,  1277,
      -1,  1285,    -1,  1277,    -1,  1285,   587,  1285,    -1,   587,
    1285,   587,  1285,    -1,  1285,   587,  1285,   587,  1285,    -1,
    1285,    -1,  1285,   587,  1285,   587,  1285,    -1,  1285,   587,
    1285,    -1,   587,  1285,    -1,  1285,    -1,  1285,   587,  1285,
      -1,   587,  1285,    -1,  1285,    -1,   201,    -1,   203,    -1,
     498,    -1,   498,    -1,   498,    -1,  1281,    -1,  1289,    -1,
    1281,    -1,  1290,    -1,  1285,    -1,  1282,    -1,   243,    -1,
    1287,    -1,  1287,   586,  1287,    -1,    92,  1016,    -1,  1290,
      -1,    20,    -1,    28,    -1,    30,    -1,    47,    -1,    48,
      -1,    57,    -1,    59,    -1,    63,    -1,    70,    -1,    72,
      -1,    81,    -1,   108,    -1,   128,    -1,   139,    -1,   153,
      -1,   169,    -1,   189,    -1,   192,    -1,   195,    -1,   217,
      -1,   234,    -1,   327,    -1,   339,    -1,   341,    -1,   351,
      -1,   355,    -1,   359,    -1,   366,    -1,   369,    -1,   401,
      -1,   404,    -1,   410,    -1,   412,    -1,   419,    -1,   426,
      -1,   430,    -1,   437,    -1,   446,    -1,   451,    -1,   448,
      -1,   452,    -1,   471,    -1,   475,    -1,   516,    -1,   527,
      -1,   528,    -1,   562,    -1,   565,    -1,   536,    -1,     5,
      -1,     7,    -1,     8,    -1,     9,    -1,    10,    -1,    11,
      -1,    17,    -1,    22,    -1,    23,    -1,    25,    -1,    24,
      -1,    26,    -1,    27,    -1,    34,    -1,    38,    -1,    41,
      -1,    43,    -1,    42,    -1,    45,    -1,    51,    -1,    54,
      -1,    56,    -1,    61,    -1,    62,    -1,    64,    -1,    65,
      -1,    67,    -1,    68,    -1,    71,    -1,    73,    -1,    74,
      -1,    75,    -1,    76,    -1,    78,    -1,    79,    -1,    82,
      -1,    84,    -1,    87,    -1,    90,    -1,    98,    -1,    97,
      -1,    99,    -1,   102,    -1,   107,    -1,   113,    -1,   115,
      -1,   119,    -1,   121,    -1,   122,    -1,   123,    -1,   124,
      -1,   131,    -1,   132,    -1,   133,    -1,   140,    -1,   144,
      -1,   143,    -1,   142,    -1,   147,    -1,   149,    -1,   151,
      -1,   150,    -1,   152,    -1,   156,    -1,   157,    -1,   158,
      -1,   162,    -1,   161,    -1,   173,    -1,   137,    -1,   176,
      -1,   164,    -1,   165,    -1,   166,    -1,   174,    -1,   181,
      -1,   180,    -1,   182,    -1,   185,    -1,   183,    -1,   190,
      -1,   196,    -1,   200,    -1,   202,    -1,   221,    -1,   206,
      -1,   207,    -1,   210,    -1,   223,    -1,   224,    -1,   226,
      -1,   227,    -1,   212,    -1,   216,    -1,   231,    -1,   235,
      -1,   238,    -1,   241,    -1,   242,    -1,   248,    -1,   249,
      -1,   251,    -1,   253,    -1,   255,    -1,   256,    -1,   283,
      -1,   278,    -1,   265,    -1,   269,    -1,   266,    -1,   267,
      -1,   279,    -1,   268,    -1,   270,    -1,   264,    -1,   276,
      -1,   272,    -1,   271,    -1,   273,    -1,   274,    -1,   275,
      -1,   281,    -1,   282,    -1,   284,    -1,   286,    -1,   287,
      -1,   288,    -1,   292,    -1,   293,    -1,   294,    -1,   295,
      -1,   296,    -1,   299,    -1,   300,    -1,   304,    -1,   302,
      -1,   306,    -1,   307,    -1,   308,    -1,   309,    -1,   310,
      -1,   312,    -1,   311,    -1,   313,    -1,   316,    -1,   317,
      -1,   321,    -1,   320,    -1,   328,    -1,   322,    -1,   323,
      -1,   333,    -1,   334,    -1,   335,    -1,   337,    -1,   338,
      -1,   352,    -1,   353,    -1,   356,    -1,   357,    -1,   358,
      -1,   360,    -1,   361,    -1,   363,    -1,   362,    -1,   364,
      -1,   365,    -1,   370,    -1,   371,    -1,   373,    -1,   375,
      -1,   376,    -1,   377,    -1,   378,    -1,   380,    -1,   381,
      -1,   382,    -1,   385,    -1,   389,    -1,   390,    -1,   392,
      -1,   391,    -1,   393,    -1,   396,    -1,   397,    -1,   398,
      -1,   400,    -1,   403,    -1,   405,    -1,   408,    -1,   411,
      -1,   414,    -1,   415,    -1,   420,    -1,   421,    -1,   422,
      -1,   423,    -1,   424,    -1,   425,    -1,   427,    -1,   429,
      -1,   435,    -1,   434,    -1,   436,    -1,   447,    -1,   441,
      -1,   445,    -1,   450,    -1,   453,    -1,   454,    -1,   462,
      -1,   461,    -1,   464,    -1,   467,    -1,   470,    -1,   472,
      -1,   476,    -1,   478,    -1,   479,    -1,   480,    -1,   482,
      -1,   481,    -1,   485,    -1,   486,    -1,   487,    -1,   488,
      -1,   490,    -1,   494,    -1,   491,    -1,   495,    -1,   496,
      -1,   499,    -1,   500,    -1,   511,    -1,   512,    -1,   502,
      -1,   503,    -1,   504,    -1,   505,    -1,   517,    -1,   518,
      -1,   519,    -1,   178,    -1,   521,    -1,   522,    -1,   525,
      -1,   524,    -1,   531,    -1,   534,    -1,   538,    -1,   539,
      -1,   549,    -1,   553,    -1,   546,    -1,   555,    -1,   554,
      -1,   556,    -1,   561,    -1,   564,    -1,   568,    -1,    -1,
     439,  1293,  1292,  1294,    -1,    -1,   342,    -1,  1295,    -1,
    1294,   581,  1295,    -1,    -1,  1296,  1301,    -1,  1298,    -1,
     183,    -1,   251,    -1,   436,    -1,    -1,   337,    -1,    -1,
     183,    -1,   251,    -1,   436,    -1,    -1,   183,   587,    -1,
     251,   587,    -1,   436,   587,    -1,  1302,    -1,  1298,  1303,
      -1,  1297,  1304,  1175,  1307,    -1,  1297,   511,   226,   242,
    1305,    -1,   586,  1287,  1175,  1017,    -1,   586,   586,  1300,
    1304,  1175,  1307,    -1,   867,   872,    -1,   311,  1175,  1017,
      -1,   311,   869,   874,    -1,   360,  1175,  1306,    -1,   360,
     172,  1288,  1175,  1306,    -1,  1285,    -1,  1285,   587,  1285,
      -1,   112,   587,  1285,    -1,   386,   521,    -1,   386,    71,
      -1,   405,   386,    -1,   434,    -1,   498,    -1,   360,   579,
     498,   580,    -1,   335,   579,   498,   580,    -1,  1017,    -1,
     112,    -1,   336,    -1,    12,    -1,    33,    -1,    -1,   254,
    1310,  1309,  1311,    -1,   493,    -1,   490,    -1,  1312,    -1,
    1311,   581,  1312,    -1,  1279,  1102,  1313,    -1,   386,    -1,
     563,    -1,   262,   563,    -1,   386,   251,    -1,    -1,   532,
    1315,  1310,    -1,   189,  1279,   339,  1102,    -1,   189,  1280,
      63,    -1,    -1,   189,  1280,   386,  1317,  1318,  1104,  1121,
      -1,  1319,    -1,  1285,  1320,    -1,   165,    -1,   321,    -1,
     165,    -1,   321,    -1,   371,    -1,   235,    -1,    -1,  1322,
    1321,   579,  1180,   580,    -1,   145,    -1,   179,    -1,   236,
      -1,   188,    -1,   263,    -1,   417,   632,  1324,    -1,  1328,
     336,  1327,  1339,   175,  1341,    -1,  1328,   336,   178,  1339,
     175,  1341,    -1,  1328,   336,   374,  1339,   175,  1341,    -1,
      12,  1329,   581,   184,   342,   175,  1341,    -1,   184,   632,
    1326,    -1,  1328,   336,  1327,  1339,   509,  1341,  1346,  1347,
      -1,  1328,   336,   178,  1339,   509,  1341,  1346,  1347,    -1,
    1328,   336,   374,  1339,   509,  1341,  1346,  1347,    -1,    -1,
     493,    -1,  1330,    -1,    12,  1329,    -1,    -1,   373,    -1,
    1331,    -1,  1330,   581,  1331,    -1,    -1,   431,  1332,  1343,
      -1,    -1,   215,  1333,  1343,    -1,    -1,   535,  1334,  1343,
      -1,    -1,   394,  1335,  1343,    -1,   116,    -1,   537,    -1,
     208,    -1,    13,    -1,    88,    -1,   129,    -1,   153,    -1,
     400,    -1,   445,    -1,   375,    -1,   164,    -1,   184,   342,
      -1,   444,    96,    -1,   485,    -1,    88,   495,   490,    -1,
     254,   490,    -1,   408,   448,    -1,   408,    62,    -1,    88,
     553,    -1,   444,   553,    -1,    88,   421,    -1,    13,   421,
      -1,    88,   538,    -1,   151,    -1,   513,    -1,    -1,    16,
      -1,  1338,  1336,  1337,    -1,  1338,    -1,   480,   498,    -1,
     227,   498,    -1,    61,   498,    -1,   574,    -1,  1285,   587,
     574,    -1,   574,   587,   574,    -1,  1279,    -1,  1288,    -1,
    1340,   581,  1288,    -1,  1342,    -1,  1341,   581,  1342,    -1,
    1288,   202,    46,   498,    -1,  1288,   202,    46,   360,   498,
      -1,  1288,    -1,    -1,   579,  1344,   580,    -1,  1344,   581,
    1345,    -1,  1345,    -1,  1285,    -1,    -1,   409,  1337,    -1,
     409,   468,    -1,   409,   564,    -1,   409,   323,    -1,    -1,
     560,  1348,    -1,  1348,  1349,    -1,  1349,    -1,   184,   342,
      -1,   282,  1126,    -1,   286,  1126,    -1,   281,  1126,    -1,
     287,  1126,    -1,    -1,    30,  1351,  1352,    -1,    -1,   561,
      -1,    -1,    16,   327,    54,    -1,    16,    54,    -1,    -1,
     399,    -1,   327,   399,    -1,    -1,   426,    -1,    72,  1352,
    1353,  1354,    -1,   419,  1352,  1353,  1354,    -1,   419,  1352,
     509,  1355,  1285,    -1,   426,  1285,    -1,   399,   426,  1285,
      -1,    -1,  1361,    -1,    -1,   529,  1367,  1362,   997,    -1,
      -1,  1361,    -1,  1364,    -1,    -1,  1365,  1366,    -1,  1116,
    1120,    -1,  1122,    -1,    -1,   125,    -1,    12,    -1,    -1,
     431,  1370,   999,  1368,  1371,    -1,   579,  1370,   998,  1368,
    1371,   580,    -1,    -1,    -1,  1377,  1373,    -1,  1376,  1374,
      -1,  1378,  1375,  1382,    -1,  1382,    -1,  1390,    -1,  1401,
      -1,  1395,    -1,   619,    -1,  1382,    -1,  1390,    -1,  1401,
      -1,  1395,    -1,  1394,    -1,   619,    -1,  1376,    -1,  1377,
      -1,    -1,   113,   145,  1288,    -1,  1379,    -1,  1379,  1380,
      -1,  1380,    -1,   347,   407,    -1,    11,   145,   522,    -1,
      11,   145,   294,    -1,    11,   145,   496,    -1,    -1,   466,
     430,   113,    -1,   466,   430,   221,    -1,    -1,  1381,   553,
    1279,  1383,  1384,    18,  1386,    -1,    -1,   579,  1385,   580,
      -1,  1285,    -1,  1385,   581,  1285,    -1,    -1,  1387,  1388,
    1389,    -1,   431,   999,    -1,   579,   998,   580,  1363,    -1,
      -1,   560,    60,   342,    -1,   560,    51,    60,   342,    -1,
     560,   251,    60,   342,    -1,    -1,    -1,    -1,   513,  1012,
     633,   718,   719,   336,  1012,  1391,  1279,   172,  1012,  1392,
     134,   424,  1393,   668,    -1,    10,  1012,   178,  1285,   415,
     834,   452,  1282,    -1,  1012,   178,  1285,   415,   834,   452,
    1282,    -1,    -1,    -1,    -1,    -1,    -1,  1012,   178,   633,
     579,  1396,   644,   580,  1397,   415,  1398,   845,  1399,   635,
    1400,   668,    -1,    -1,    -1,    -1,    -1,   374,  1012,   633,
    1402,   579,  1403,   648,   580,  1404,   635,  1405,   668,    -1,
     565,  1408,  1407,  1409,    -1,   565,   139,  1407,  1411,    -1,
     565,   369,  1407,    -1,   565,    72,  1407,  1410,    -1,   565,
     419,  1407,    -1,   565,   390,    -1,  1267,    -1,  1267,   581,
    1267,    -1,  1267,   581,  1267,   581,  1126,    -1,    30,    -1,
     471,    -1,    -1,   229,    -1,   414,    -1,    -1,   338,   361,
      -1,    -1,    -1,   486,  1412,  1413,    -1,    -1,   172,   296,
      -1,   217,   363,  1285,   452,  1282,    -1,   528,   363,  1285,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1351,  1351,  1364,  1363,  1388,  1395,  1397,  1401,  1402,
    1407,  1408,  1409,  1410,  1411,  1412,  1413,  1414,  1415,  1416,
    1417,  1418,  1419,  1420,  1421,  1422,  1423,  1424,  1425,  1426,
    1427,  1428,  1429,  1430,  1431,  1432,  1433,  1434,  1435,  1436,
    1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,  1445,  1446,
    1447,  1448,  1449,  1450,  1451,  1452,  1453,  1454,  1455,  1456,
    1457,  1461,  1471,  1472,  1476,  1486,  1493,  1504,  1503,  1514,
    1516,  1520,  1521,  1525,  1538,  1537,  1557,  1556,  1567,  1568,
    1572,  1576,  1580,  1584,  1588,  1592,  1597,  1601,  1605,  1609,
    1613,  1617,  1622,  1626,  1630,  1646,  1650,  1662,  1661,  1696,
    1694,  1725,  1724,  1737,  1736,  1744,  1748,  1752,  1756,  1763,
    1776,  1777,  1781,  1785,  1789,  1793,  1797,  1801,  1805,  1813,
    1812,  1844,  1843,  1850,  1857,  1858,  1863,  1868,  1877,  1883,
    1889,  1891,  1898,  1899,  1903,  1909,  1918,  1919,  1927,  1927,
    1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,
    1995,  1996,  1997,  2002,  2016,  2032,  2051,  2052,  2056,  2057,
    2062,  2064,  2066,  2068,  2070,  2072,  2074,  2080,  2081,  2082,
    2086,  2090,  2098,  2097,  2110,  2112,  2115,  2117,  2121,  2125,
    2132,  2134,  2138,  2139,  2144,  2163,  2189,  2191,  2195,  2196,
    2200,  2226,  2227,  2228,  2229,  2233,  2234,  2238,  2239,  2244,
    2247,  2274,  2273,  2338,  2354,  2353,  2401,  2427,  2427,  2449,
    2450,  2455,  2457,  2462,  2485,  2493,  2510,  2511,  2515,  2519,
    2528,  2535,  2542,  2552,  2567,  2585,  2586,  2590,  2591,  2592,
    2593,  2594,  2595,  2596,  2597,  2598,  2599,  2600,  2601,  2602,
    2607,  2606,  2613,  2613,  2669,  2668,  2696,  2696,  2710,  2763,
    2806,  2827,  2826,  2848,  2867,  2869,  2870,  2874,  2894,  2917,
    2919,  2934,  2917,  2953,  2955,  2956,  2960,  2961,  2966,  2972,
    2965,  2991,  2990,  3006,  3007,  3011,  3012,  3017,  3021,  3016,
    3040,  3044,  3039,  3061,  3071,  3076,  3075,  3111,  3112,  3117,
    3116,  3149,  3149,  3164,  3163,  3199,  3211,  3213,  3210,  3239,
    3238,  3258,  3260,  3265,  3267,  3269,  3286,  3291,  3297,  3304,
    3305,  3313,  3319,  3328,  3334,  3340,  3341,  3345,  3345,  3350,
    3351,  3352,  3356,  3357,  3358,  3362,  3366,  3367,  3368,  3372,
    3373,  3374,  3375,  3376,  3377,  3378,  3379,  3383,  3387,  3388,
    3389,  3393,  3394,  3395,  3396,  3397,  3401,  3405,  3406,  3407,
    3411,  3412,  3413,  3414,  3415,  3416,  3417,  3421,  3425,  3426,
    3427,  3431,  3432,  3433,  3438,  3446,  3454,  3462,  3474,  3486,
    3491,  3496,  3504,  3512,  3520,  3528,  3536,  3544,  3552,  3565,
    3578,  3591,  3593,  3597,  3602,  3615,  3616,  3667,  3668,  3671,
    3685,  3702,  3707,  3705,  3712,  3714,  3713,  3717,  3716,  3746,
    3747,  3752,  3751,  3784,  3783,  3800,  3804,  3811,  3810,  3814,
    3813,  3817,  3816,  3822,  3823,  3828,  3829,  3833,  3834,  3838,
    3849,  3864,  3880,  3881,  3897,  3899,  3898,  3903,  3901,  3912,
    3913,  3917,  3928,  3944,  3945,  3961,  3962,  3985,  3986,  3991,
    3990,  4015,  4026,  4046,  4061,  4079,  4091,  4107,  4108,  4112,
    4122,  4123,  4127,  4144,  4203,  4215,  4242,  4243,  4248,  4247,
    4285,  4290,  4291,  4295,  4296,  4300,  4302,  4308,  4310,  4312,
    4314,  4316,  4318,  4328,  4344,  4327,  4358,  4359,  4363,  4364,
    4368,  4369,  4373,  4374,  4378,  4379,  4383,  4384,  4388,  4392,
    4393,  4396,  4398,  4402,  4403,  4407,  4408,  4409,  4413,  4418,
    4425,  4430,  4435,  4440,  4445,  4450,  4455,  4470,  4476,  4481,
    4486,  4491,  4496,  4511,  4512,  4513,  4518,  4523,  4528,  4530,
    4532,  4534,  4540,  4548,  4566,  4583,  4606,  4620,  4621,  4622,
    4623,  4624,  4625,  4629,  4630,  4631,  4635,  4636,  4640,  4641,
    4642,  4643,  4647,  4648,  4652,  4653,  4657,  4658,  4665,  4680,
    4692,  4716,  4720,  4726,  4728,  4732,  4736,  4737,  4741,  4746,
    4745,  4768,  4769,  4770,  4771,  4776,  4780,  4785,  4790,  4794,
    4799,  4804,  4810,  4815,  4821,  4825,  4830,  4835,  4837,  4839,
    4841,  4854,  4856,  4861,  4866,  4878,  4883,  4888,  4893,  4895,
    4897,  4899,  4901,  4903,  4905,  4907,  4910,  4909,  4914,  4913,
    4917,  4919,  4928,  4929,  4930,  4935,  4936,  4937,  4938,  4939,
    4943,  4947,  4948,  4952,  4953,  4957,  4958,  4959,  4960,  4961,
    4965,  4966,  4967,  4968,  4969,  4973,  4978,  4980,  4986,  4987,
    4989,  4994,  5003,  5004,  5008,  5009,  5013,  5014,  5015,  5019,
    5020,  5021,  5022,  5025,  5026,  5029,  5030,  5034,  5035,  5039,
    5040,  5044,  5045,  5046,  5047,  5054,  5055,  5061,  5067,  5073,
    5079,  5080,  5096,  5102,  5107,  5108,  5112,  5120,  5124,  5125,
    5129,  5130,  5134,  5143,  5147,  5148,  5152,  5163,  5164,  5168,
    5169,  5173,  5174,  5178,  5179,  5180,  5181,  5190,  5191,  5195,
    5196,  5200,  5201,  5202,  5211,  5214,  5216,  5221,  5220,  5233,
    5234,  5238,  5245,  5255,  5256,  5260,  5261,  5265,  5266,  5267,
    5268,  5269,  5273,  5274,  5275,  5276,  5277,  5281,  5282,  5283,
    5296,  5297,  5301,  5302,  5306,  5307,  5311,  5312,  5313,  5317,
    5318,  5319,  5320,  5333,  5345,  5346,  5350,  5351,  5355,  5356,
    5360,  5361,  5365,  5366,  5368,  5381,  5382,  5383,  5387,  5388,
    5392,  5398,  5412,  5413,  5417,  5418,  5422,  5423,  5431,  5430,
    5457,  5456,  5470,  5482,  5481,  5500,  5499,  5518,  5517,  5536,
    5530,  5550,  5549,  5582,  5587,  5592,  5597,  5602,  5612,  5613,
    5614,  5615,  5619,  5620,  5632,  5633,  5637,  5638,  5641,  5643,
    5644,  5645,  5647,  5649,  5650,  5659,  5660,  5664,  5673,  5671,
    5681,  5691,  5690,  5700,  5698,  5708,  5715,  5719,  5726,  5730,
    5735,  5734,  5750,  5752,  5757,  5766,  5765,  5781,  5785,  5784,
    5796,  5797,  5801,  5816,  5817,  5821,  5830,  5831,  5835,  5840,
    5839,  5847,  5856,  5846,  5868,  5877,  5881,  5890,  5899,  5905,
    5911,  5920,  5929,  5948,  5969,  5974,  5978,  5986,  5987,  5991,
    5992,  5996,  5997,  5998,  6002,  6003,  6004,  6008,  6009,  6010,
    6011,  6020,  6019,  6030,  6038,  6037,  6047,  6056,  6065,  6066,
    6073,  6073,  6079,  6080,  6084,  6085,  6086,  6090,  6091,  6107,
    6108,  6113,  6112,  6124,  6123,  6135,  6134,  6144,  6145,  6146,
    6151,  6150,  6163,  6164,  6168,  6169,  6173,  6174,  6175,  6180,
    6179,  6192,  6201,  6200,  6218,  6219,  6223,  6224,  6228,  6229,
    6230,  6231,  6232,  6233,  6238,  6237,  6250,  6251,  6252,  6257,
    6256,  6262,  6269,  6274,  6282,  6283,  6287,  6300,  6309,  6310,
    6314,  6323,  6324,  6329,  6328,  6338,  6339,  6343,  6352,  6352,
    6363,  6364,  6369,  6370,  6379,  6388,  6389,  6393,  6423,  6428,
    6427,  6447,  6455,  6447,  6462,  6463,  6464,  6465,  6466,  6470,
    6477,  6484,  6486,  6497,  6498,  6502,  6503,  6510,  6511,  6512,
    6513,  6519,  6525,  6531,  6545,  6548,  6550,  6558,  6569,  6570,
    6571,  6586,  6612,  6618,  6624,  6625,  6629,  6630,  6631,  6632,
    6633,  6637,  6638,  6643,  6694,  6701,  6744,  6750,  6756,  6762,
    6768,  6774,  6780,  6786,  6790,  6796,  6802,  6808,  6814,  6820,
    6824,  6830,  6840,  6846,  6854,  6860,  6870,  6876,  6885,  6895,
    6901,  6911,  6917,  6926,  6930,  6936,  6942,  6948,  6954,  6960,
    6966,  6972,  6978,  6984,  6990,  6996,  7002,  7008,  7014,  7018,
    7019,  7023,  7024,  7028,  7029,  7033,  7034,  7038,  7039,  7040,
    7041,  7042,  7043,  7047,  7048,  7052,  7053,  7054,  7055,  7056,
    7057,  7069,  7070,  7071,  7072,  7073,  7079,  7083,  7089,  7095,
    7101,  7107,  7109,  7116,  7123,  7129,  7131,  7140,  7147,  7155,
    7161,  7168,  7174,  7188,  7195,  7211,  7217,  7223,  7231,  7237,
    7243,  7249,  7255,  7270,  7282,  7288,  7294,  7300,  7306,  7312,
    7318,  7324,  7330,  7336,  7342,  7348,  7354,  7360,  7366,  7372,
    7378,  7386,  7407,  7414,  7420,  7427,  7434,  7441,  7448,  7455,
    7461,  7467,  7474,  7481,  7487,  7494,  7500,  7506,  7512,  7518,
    7524,  7534,  7544,  7550,  7556,  7563,  7570,  7585,  7591,  7597,
    7603,  7609,  7616,  7622,  7628,  7634,  7640,  7652,  7658,  7664,
    7670,  7676,  7688,  7694,  7710,  7716,  7723,  7730,  7737,  7744,
    7751,  7755,  7775,  7774,  7842,  7874,  7876,  7881,  7882,  7886,
    7887,  7891,  7892,  7896,  7903,  7911,  7931,  7937,  7943,  7949,
    7955,  7961,  7970,  7977,  7979,  7976,  7986,  7997,  8003,  8009,
    8015,  8021,  8027,  8033,  8039,  8045,  8052,  8051,  8070,  8069,
    8084,  8094,  8102,  8118,  8119,  8124,  8129,  8134,  8137,  8151,
    8150,  8167,  8169,  8171,  8173,  8175,  8177,  8179,  8181,  8183,
    8185,  8187,  8192,  8193,  8197,  8204,  8212,  8213,  8217,  8224,
    8232,  8233,  8237,  8238,  8242,  8250,  8260,  8261,  8270,  8281,
    8282,  8287,  8288,  8308,  8310,  8314,  8312,  8329,  8327,  8345,
    8343,  8350,  8359,  8357,  8375,  8374,  8384,  8395,  8393,  8412,
    8411,  8422,  8433,  8434,  8435,  8440,  8440,  8453,  8475,  8528,
    8527,  8550,  8567,  8550,  8574,  8578,  8604,  8605,  8610,  8614,
    8615,  8616,  8620,  8621,  8626,  8625,  8631,  8630,  8638,  8639,
    8642,  8644,  8644,  8648,  8648,  8653,  8654,  8658,  8660,  8665,
    8666,  8670,  8681,  8694,  8695,  8696,  8697,  8698,  8699,  8700,
    8701,  8702,  8703,  8704,  8705,  8709,  8710,  8729,  8730,  8731,
    8732,  8733,  8734,  8735,  8736,  8737,  8741,  8742,  8743,  8744,
    8747,  8749,  8750,  8754,  8755,  8763,  8765,  8769,  8771,  8770,
    8784,  8787,  8786,  8801,  8807,  8822,  8824,  8828,  8830,  8835,
    8836,  8849,  8867,  8871,  8872,  8876,  8889,  8891,  8896,  8895,
    8930,  8932,  8937,  8938,  8939,  8944,  8950,  8954,  8955,  8959,
    8963,  8970,  8977,  8987,  8991,  8997,  9003,  9013,  9017,  9026,
    9027,  9028,  9029,  9030,  9031,  9035,  9036,  9037,  9038,  9039,
    9043,  9044,  9045,  9046,  9047,  9051,  9052,  9053,  9054,  9058,
    9063,  9064,  9067,  9070,  9069,  9101,  9102,  9106,  9107,  9111,
    9123,  9123,  9134,  9135,  9139,  9158,  9191,  9190,  9203,  9211,
    9202,  9213,  9225,  9237,  9236,  9253,  9260,  9260,  9274,  9281,
    9304,  9325,  9337,  9341,  9347,  9353,  9360,  9365,  9370,  9380,
    9381,  9385,  9393,  9394,  9398,  9408,  9409,  9413,  9414,  9422,
    9432,  9421,  9442,  9449,  9441,  9459,  9471,  9472,  9473,  9477,
    9478,  9482,  9483,  9487,  9496,  9497,  9498,  9500,  9499,  9510,
    9511,  9515,  9516,  9518,  9517,  9521,  9520,  9526,  9527,  9531,
    9532,  9536,  9546,  9547,  9551,  9552,  9557,  9556,  9570,  9571,
    9575,  9580,  9588,  9589,  9597,  9599,  9599,  9607,  9616,  9606,
    9638,  9639,  9643,  9651,  9652,  9656,  9666,  9667,  9674,  9673,
    9687,  9686,  9695,  9694,  9702,  9701,  9711,  9712,  9716,  9728,
    9743,  9744,  9748,  9749,  9753,  9754,  9755,  9759,  9769,  9771,
    9774,  9776,  9779,  9780,  9783,  9787,  9791,  9795,  9799,  9803,
    9807,  9811,  9815,  9823,  9826,  9836,  9835,  9849,  9856,  9864,
    9872,  9880,  9888,  9896,  9904,  9911,  9913,  9915,  9924,  9937,
    9941,  9946,  9945,  9950,  9959,  9964,  9972,  9979,  9984,  9989,
    9994,  9996,  9998, 10000, 10002, 10004, 10011, 10019, 10031, 10043,
   10045, 10053, 10060, 10067, 10077, 10084, 10090, 10099, 10107, 10111,
   10115, 10122, 10129, 10135, 10142, 10149, 10159, 10169, 10177, 10179,
   10181, 10186, 10187, 10190, 10192, 10196, 10197, 10201, 10202, 10206,
   10207, 10211, 10212, 10216, 10217, 10220, 10222, 10229, 10240, 10239,
   10253, 10252, 10262, 10263, 10267, 10268, 10269, 10273, 10274, 10275,
   10290, 10289, 10301, 10302, 10307, 10306, 10309, 10311, 10313, 10315,
   10317, 10319, 10321, 10323, 10325, 10327, 10332, 10333, 10338, 10337,
   10347, 10348, 10352, 10353, 10354, 10359, 10358, 10369, 10373, 10377,
   10389, 10399, 10400, 10401, 10407, 10419, 10418, 10433, 10451, 10462,
   10466, 10476, 10450, 10480, 10490, 10491, 10495, 10496, 10508, 10512,
   10513, 10514, 10517, 10519, 10523, 10524, 10528, 10533, 10540, 10545,
   10552, 10554, 10558, 10559, 10563, 10568, 10575, 10577, 10585, 10586,
   10587, 10591, 10593, 10598, 10599, 10608, 10609, 10615, 10639, 10651,
   10662, 10681, 10689, 10701, 10716, 10737, 10738, 10739, 10747, 10748,
   10749, 10756, 10762, 10768, 10774, 10780, 10809, 10837, 10838, 10839,
   10843, 10853, 10863, 10869, 10878, 10893, 10894, 10898, 10907, 10923,
   10927, 10974, 10978, 10996, 11000, 11079, 11104, 11135, 11136, 11152,
   11162, 11166, 11172, 11178, 11188, 11198, 11199, 11228, 11244, 11260,
   11277, 11278, 11289, 11290, 11301, 11302, 11303, 11307, 11321, 11334,
   11349, 11350, 11351, 11352, 11353, 11354, 11355, 11356, 11357, 11358,
   11359, 11360, 11361, 11362, 11363, 11364, 11365, 11366, 11367, 11368,
   11369, 11370, 11371, 11372, 11373, 11374, 11375, 11376, 11377, 11378,
   11379, 11380, 11381, 11382, 11383, 11384, 11385, 11386, 11387, 11388,
   11389, 11390, 11391, 11392, 11393, 11394, 11395, 11396, 11397, 11398,
   11408, 11409, 11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417,
   11418, 11419, 11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427,
   11428, 11429, 11430, 11431, 11432, 11433, 11434, 11435, 11436, 11437,
   11438, 11439, 11440, 11441, 11442, 11443, 11444, 11445, 11446, 11447,
   11448, 11449, 11450, 11451, 11452, 11453, 11454, 11455, 11456, 11457,
   11458, 11459, 11460, 11461, 11462, 11463, 11464, 11465, 11466, 11467,
   11468, 11469, 11470, 11471, 11472, 11473, 11474, 11475, 11476, 11477,
   11478, 11479, 11480, 11481, 11482, 11483, 11484, 11485, 11486, 11487,
   11488, 11489, 11490, 11491, 11492, 11493, 11494, 11495, 11496, 11497,
   11498, 11499, 11500, 11501, 11502, 11503, 11504, 11505, 11506, 11507,
   11508, 11509, 11510, 11511, 11512, 11513, 11514, 11515, 11516, 11517,
   11518, 11519, 11520, 11521, 11522, 11523, 11524, 11525, 11526, 11527,
   11528, 11529, 11530, 11531, 11532, 11533, 11534, 11535, 11536, 11537,
   11538, 11539, 11540, 11541, 11542, 11543, 11544, 11545, 11546, 11547,
   11548, 11549, 11550, 11551, 11552, 11553, 11554, 11555, 11556, 11557,
   11558, 11559, 11560, 11561, 11562, 11563, 11564, 11565, 11566, 11567,
   11568, 11569, 11570, 11571, 11572, 11573, 11574, 11575, 11576, 11577,
   11578, 11579, 11580, 11581, 11582, 11583, 11584, 11585, 11586, 11587,
   11588, 11589, 11590, 11591, 11592, 11593, 11594, 11595, 11596, 11597,
   11598, 11599, 11600, 11601, 11602, 11603, 11604, 11605, 11606, 11607,
   11608, 11609, 11610, 11611, 11612, 11613, 11614, 11615, 11616, 11617,
   11618, 11619, 11620, 11621, 11622, 11623, 11624, 11625, 11626, 11627,
   11628, 11629, 11630, 11631, 11632, 11633, 11634, 11635, 11636, 11637,
   11638, 11639, 11640, 11641, 11642, 11643, 11644, 11645, 11646, 11647,
   11648, 11649, 11650, 11651, 11652, 11653, 11654, 11655, 11656, 11657,
   11658, 11659, 11660, 11661, 11662, 11663, 11664, 11665, 11666, 11667,
   11674, 11673, 11688, 11689, 11693, 11694, 11698, 11698, 11779, 11780,
   11781, 11782, 11786, 11787, 11791, 11792, 11793, 11794, 11798, 11799,
   11800, 11801, 11805, 11806, 11810, 11908, 11927, 11938, 11946, 11960,
   11975, 11994, 12021, 12034, 12066, 12109, 12123, 12124, 12125, 12126,
   12130, 12131, 12140, 12152, 12153, 12154, 12160, 12166, 12178, 12177,
   12193, 12194, 12198, 12199, 12203, 12215, 12216, 12217, 12218, 12223,
   12222, 12242, 12254, 12267, 12266, 12292, 12293, 12297, 12298, 12302,
   12303, 12304, 12305, 12307, 12306, 12319, 12320, 12321, 12322, 12323,
   12329, 12334, 12340, 12351, 12362, 12369, 12374, 12381, 12393, 12407,
   12409, 12413, 12414, 12421, 12423, 12427, 12428, 12433, 12432, 12436,
   12435, 12439, 12438, 12442, 12441, 12444, 12445, 12446, 12447, 12448,
   12449, 12450, 12451, 12452, 12453, 12454, 12455, 12456, 12457, 12458,
   12459, 12460, 12461, 12462, 12463, 12464, 12465, 12466, 12467, 12468,
   12472, 12473, 12477, 12478, 12482, 12492, 12502, 12515, 12530, 12543,
   12556, 12568, 12573, 12581, 12586, 12594, 12621, 12623, 12629, 12633,
   12637, 12638, 12642, 12669, 12671, 12675, 12679, 12683, 12690, 12691,
   12695, 12696, 12700, 12701, 12707, 12713, 12719, 12729, 12728, 12738,
   12739, 12744, 12745, 12746, 12751, 12752, 12753, 12757, 12758, 12762,
   12772, 12779, 12789, 12798, 12812, 12813, 12818, 12817, 12858, 12859,
   12860, 12864, 12864, 12888, 12889, 12893, 12894, 12895, 12899, 12904,
   12909, 12916, 12937, 12972, 12974, 12976, 12981, 12982, 12983, 12984,
   12985, 12989, 12990, 12991, 12992, 12993, 12994, 13004, 13005, 13010,
   13023, 13036, 13038, 13040, 13045, 13050, 13052, 13054, 13060, 13061,
   13063, 13069, 13068, 13082, 13083, 13087, 13092, 13100, 13100, 13125,
   13126, 13131, 13132, 13134, 13136, 13154, 13160, 13165, 13147, 13226,
   13244, 13269, 13301, 13305, 13313, 13336, 13265, 13401, 13425, 13434,
   13442, 13400, 13463, 13467, 13471, 13475, 13479, 13483, 13490, 13497,
   13504, 13514, 13515, 13519, 13520, 13521, 13525, 13526, 13531, 13533,
   13532, 13538, 13539, 13543, 13553
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CHAIN_SYM", "CHANGE",
  "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM",
  "CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM",
  "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM",
  "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_USER",
  "CURSOR_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM", "DELAYED_SYM",
  "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD",
  "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP",
  "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM",
  "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM",
  "EVERY_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_SYM",
  "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM",
  "FOREIGN", "FOR_SYM", "FOUND_SYM", "FRAC_SECOND_SYM", "FROM", "FULL",
  "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM",
  "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INNOBASE_SYM", "INOUT_SYM",
  "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM",
  "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES",
  "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MICROSECOND_SYM", "MIGRATE_SYM", "MINUTE_MICROSECOND_SYM",
  "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM",
  "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING",
  "MULTIPOINT", "MULTIPOLYGON", "MUTEX_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM",
  "NE", "NEG", "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM",
  "NOT2_SYM", "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM",
  "NO_WRITE_TO_BINLOG", "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "PARTIAL", "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM",
  "PASSWORD", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PURGE",
  "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESOURCES", "RESTORE_SYM",
  "RESTRICT", "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM",
  "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM",
  "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET",
  "SET_VAR", "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SMALLINT", "SNAPSHOT_SYM",
  "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIMESTAMP",
  "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB", "TINYINT",
  "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TRIGGERS_SYM",
  "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM",
  "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM",
  "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH",
  "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XOR",
  "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "master_file_def",
  "create", "$@5", "$@6", "$@7", "$@8", "server_def",
  "server_options_list", "server_option", "event_tail", "$@9",
  "ev_schedule_time", "$@10", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@11", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@12", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@13", "$@14", "sp_cursor_stmt", "$@15",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "opt_value", "sp_hcond", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "$@16", "sp_proc_stmt_statement",
  "$@17", "sp_proc_stmt_return", "$@18", "sp_proc_stmt_unlabeled", "$@19",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@20", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@21", "$@22", "$@23", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@24", "$@25",
  "searched_case_stmt", "$@26", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@27", "$@28",
  "searched_when_clause", "$@29", "$@30", "else_clause_opt",
  "sp_labeled_control", "$@31", "sp_opt_label", "sp_labeled_block", "$@32",
  "sp_unlabeled_block", "$@33", "sp_block_content", "$@34",
  "sp_unlabeled_control", "$@35", "$@36", "$@37", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "$@38", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@39", "create3", "$@40", "$@41", "opt_partitioning",
  "partitioning", "$@42", "partition_entry", "$@43", "partition",
  "part_type_def", "$@44", "$@45", "$@46", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_func", "sub_part_func",
  "opt_no_parts", "opt_sub_part", "$@47", "$@48", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_no_subparts", "part_defs",
  "part_def_list", "part_definition", "$@49", "part_name",
  "opt_part_values", "part_func_max", "max_value_sym", "part_range_func",
  "part_list_func", "part_list_item", "part_bit_expr", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@50", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@51", "$@52", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "field_list", "field_list_item", "column_def", "key_def",
  "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@53", "type", "$@54", "$@55",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "opt_binary", "opt_bin_mod", "opt_bin_charset",
  "opt_primary", "references", "$@56", "opt_ref_list", "ref_list",
  "opt_on_delete", "opt_on_delete_list", "opt_on_delete_item",
  "delete_option", "key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique_or_fulltext",
  "init_key_options", "key_alg", "key_options", "key_opts",
  "key_using_alg", "key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "$@57", "$@58",
  "$@59", "$@60", "$@61", "$@62", "$@63",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@64", "$@65", "$@66",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@67", "add_part_extra", "reorg_partition_rule", "$@68",
  "reorg_parts_rule", "$@69", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@70", "$@71", "$@72",
  "opt_column", "opt_ignore", "opt_restrict", "opt_place", "opt_to",
  "slave", "$@73", "$@74", "start", "start_transaction_opts",
  "slave_thread_opts", "$@75", "slave_thread_opt_list", "slave_thread_opt",
  "slave_until", "slave_until_opts", "restore", "$@76", "backup", "$@77",
  "checksum", "$@78", "opt_checksum_type", "repair", "$@79",
  "opt_mi_repair_type", "mi_repair_types", "mi_repair_type", "analyze",
  "$@80", "binlog_base64_event", "check", "$@81", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@82",
  "opt_no_write_to_binlog", "rename", "$@83", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "keycache_list",
  "assign_to_keycache", "key_cache_name", "preload", "$@84",
  "preload_list", "preload_keys", "cache_keys_spec", "$@85",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_init2", "$@86", "select_part2", "$@87", "$@88",
  "select_into", "select_from", "select_options", "select_option_list",
  "select_option", "select_lock_type", "select_item_list", "select_item",
  "remember_name", "remember_end", "select_item2", "select_alias",
  "optional_braces", "expr", "bool_pri", "predicate", "bit_expr", "or",
  "and", "not", "not2", "comp_op", "all_or_any", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@89", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@90", "$@91", "$@92", "variable", "$@93", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause",
  "in_sum_expr", "$@94", "cast_type", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@95", "$@96", "$@97", "$@98", "$@99", "$@100", "$@101",
  "normal_join", "table_factor", "$@102", "select_derived", "$@103",
  "select_derived2", "$@104", "$@105", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "$@106", "$@107",
  "index_hints_list", "opt_index_hints_list", "$@108",
  "opt_key_definition", "$@109", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "interval_time_st", "date_time_type", "table_alias", "opt_table_alias",
  "opt_all", "where_clause", "$@110", "having_clause", "$@111",
  "opt_escape", "group_clause", "group_list", "olap_opt",
  "alter_order_clause", "alter_order_list", "alter_order_item",
  "opt_order_clause", "order_clause", "$@112", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "$@113", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@114",
  "select_var_list", "select_var_ident", "into", "$@115",
  "into_destination", "$@116", "$@117", "do", "$@118", "drop", "$@119",
  "table_list", "table_name", "table_alias_ref_list", "table_alias_ref",
  "if_exists", "opt_temporary", "insert", "$@120", "$@121", "replace",
  "$@122", "$@123", "insert_lock_option", "replace_lock_option", "insert2",
  "insert_table", "insert_field_spec", "$@124", "fields", "insert_values",
  "$@125", "$@126", "values_list", "ident_eq_list", "ident_eq_value",
  "equal", "opt_equal", "no_braces", "$@127", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "$@128", "update", "$@129",
  "$@130", "update_list", "update_elem", "insert_update_list",
  "insert_update_elem", "opt_low_priority", "delete", "$@131",
  "single_multi", "$@132", "$@133", "$@134", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@135", "show_param",
  "$@136", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@137", "$@138", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@139",
  "flush_options", "flush_option", "$@140", "opt_table_list", "reset",
  "$@141", "reset_options", "reset_option", "purge", "$@142",
  "purge_options", "purge_option", "kill", "kill_option", "use", "load",
  "$@143", "load_data", "$@144", "$@145", "$@146", "$@147", "opt_local",
  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list",
  "field_term", "opt_line_term", "line_term_list", "line_term",
  "opt_ignore_lines", "opt_field_or_var_spec", "fields_or_vars",
  "field_or_var", "opt_load_data_set_spec", "text_literal", "text_string",
  "param_marker", "signed_literal", "literal", "NUM_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user", "keyword", "keyword_sp", "set", "$@148",
  "opt_option", "option_value_list", "option_type_value", "$@149",
  "option_type", "option_type2", "opt_var_type", "opt_var_ident_type",
  "ext_option_value", "sys_option_value", "option_value",
  "internal_variable_name", "isolation_types", "text_or_password",
  "set_expr_or_default", "lock", "$@150", "table_or_tables",
  "table_lock_list", "table_lock", "lock_option", "unlock", "$@151",
  "handler", "$@152", "handler_read_or_scan", "handler_scan_function",
  "handler_rkey_function", "$@153", "handler_rkey_mode", "revoke",
  "revoke_command", "grant", "grant_command", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "$@154", "$@155", "$@156", "$@157", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "grant_user", "opt_column_list", "column_list",
  "column_list_id", "require_clause", "grant_options", "grant_option_list",
  "grant_option", "begin", "$@158", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@159", "union_opt",
  "union_order_or_limit", "$@160", "order_or_limit", "union_option",
  "take_first_select", "subselect", "subselect_start", "subselect_end",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@161",
  "view_list_opt", "view_list", "view_select", "$@162", "view_select_aux",
  "view_check_option", "trigger_tail", "$@163", "$@164", "$@165",
  "udf_tail", "sf_tail", "$@166", "$@167", "$@168", "$@169", "$@170",
  "sp_tail", "$@171", "$@172", "$@173", "$@174", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@175", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     124,    38,    45,    43,    42,    47,    37,    94,   126,    40,
      41,    44,    33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   589,   590,   591,   590,   590,   592,   592,   593,   593,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   595,   596,   596,   597,   598,   598,   600,   599,   601,
     601,   602,   602,   603,   605,   604,   607,   606,   608,   608,
     609,   609,   609,   609,   609,   609,   609,   609,   609,   609,
     609,   609,   609,   610,   610,   610,   610,   612,   611,   613,
     611,   614,   611,   615,   611,   611,   611,   611,   611,   616,
     617,   617,   618,   618,   618,   618,   618,   618,   618,   620,
     619,   622,   621,   621,   623,   623,   623,   623,   624,   624,
     625,   625,   626,   626,   627,   627,   628,   628,   630,   629,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   632,   633,   633,   634,   634,   635,   635,
     636,   636,   636,   636,   636,   636,   636,   637,   637,   637,
     638,   638,   640,   639,   641,   641,   642,   642,   643,   643,
     644,   644,   645,   645,   646,   647,   648,   648,   649,   649,
     650,   651,   651,   651,   651,   652,   652,   653,   653,   654,
     654,   656,   655,   655,   657,   655,   655,   659,   658,   660,
     660,   661,   661,   662,   663,   663,   664,   664,   665,   665,
     665,   665,   665,   666,   666,   667,   667,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     670,   669,   672,   671,   674,   673,   676,   675,   677,   678,
     679,   681,   680,   682,   683,   683,   683,   684,   684,   686,
     687,   688,   685,   689,   689,   689,   690,   690,   692,   693,
     691,   695,   694,   696,   696,   697,   697,   699,   700,   698,
     702,   703,   701,   704,   704,   706,   705,   707,   707,   709,
     708,   711,   710,   713,   712,   714,   715,   716,   714,   717,
     714,   718,   718,   719,   719,   719,   720,   721,   722,   723,
     723,   724,   724,   725,   726,   727,   727,   729,   728,   730,
     730,   730,   731,   731,   731,   732,   733,   733,   733,   734,
     734,   734,   734,   734,   734,   734,   734,   735,   736,   736,
     736,   737,   737,   737,   737,   737,   738,   739,   739,   739,
     740,   740,   740,   740,   740,   740,   740,   741,   742,   742,
     742,   743,   743,   743,   744,   745,   746,   747,   748,   749,
     749,   749,   750,   751,   752,   753,   754,   755,   756,   757,
     758,   759,   759,   760,   760,   761,   761,   762,   762,   762,
     762,   763,   764,   763,   765,   766,   765,   767,   765,   768,
     768,   770,   769,   772,   771,   773,   774,   775,   774,   776,
     774,   777,   774,   778,   778,   779,   779,   780,   780,   781,
     782,   783,   784,   784,   785,   786,   785,   787,   785,   788,
     788,   789,   790,   791,   791,   792,   792,   793,   793,   795,
     794,   796,   797,   797,   797,   798,   798,   799,   799,   800,
     801,   801,   802,   803,   804,   804,   805,   805,   807,   806,
     808,   809,   809,   810,   810,   811,   811,   811,   811,   811,
     811,   811,   811,   813,   814,   812,   815,   815,   816,   816,
     817,   817,   818,   818,   819,   819,   820,   820,   821,   822,
     822,   823,   823,   824,   824,   825,   825,   825,   826,   826,
     826,   826,   826,   826,   826,   826,   826,   826,   826,   826,
     826,   826,   826,   826,   826,   826,   826,   826,   826,   826,
     826,   826,   826,   827,   828,   829,   830,   831,   831,   831,
     831,   831,   831,   832,   832,   832,   833,   833,   834,   834,
     834,   834,   835,   835,   836,   836,   837,   837,   838,   838,
     838,   838,   838,   839,   839,   840,   841,   841,   842,   844,
     843,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   846,   845,   847,   845,
     845,   845,   848,   848,   848,   848,   848,   848,   848,   848,
     849,   850,   850,   851,   851,   852,   852,   852,   852,   852,
     853,   853,   853,   853,   853,   854,   854,   854,   855,   855,
     855,   856,   857,   857,   858,   858,   859,   859,   859,   860,
     860,   860,   860,   861,   861,   862,   862,   863,   863,   864,
     864,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   866,   866,   867,   867,   868,   868,   869,   869,
     870,   870,   871,   871,   872,   872,   873,   874,   874,   875,
     875,   876,   876,   877,   877,   877,   877,   877,   877,   878,
     878,   879,   879,   879,   879,   880,   880,   882,   881,   883,
     883,   884,   884,   885,   885,   886,   886,   887,   887,   887,
     887,   887,   888,   888,   888,   888,   888,   889,   889,   889,
     890,   890,   891,   891,   892,   892,   893,   893,   893,   894,
     894,   894,   894,   895,   896,   896,   897,   897,   898,   898,
     899,   899,   900,   900,   900,   901,   901,   901,   902,   902,
     903,   903,   904,   904,   905,   905,   906,   906,   908,   907,
     909,   907,   907,   910,   907,   911,   907,   912,   907,   913,
     907,   914,   907,   907,   907,   907,   907,   907,   915,   915,
     915,   915,   916,   916,   917,   917,   918,   918,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   920,   919,
     919,   921,   919,   922,   919,   919,   919,   923,   924,   924,
     926,   925,   927,   927,   927,   929,   928,   930,   931,   930,
     932,   932,   933,   934,   934,   935,   936,   936,   936,   937,
     936,   938,   939,   936,   936,   936,   936,   936,   936,   936,
     936,   936,   936,   936,   936,   936,   936,   940,   940,   941,
     941,   942,   942,   942,   943,   943,   943,   944,   944,   944,
     944,   946,   945,   945,   947,   945,   945,   948,   949,   949,
     951,   950,   952,   952,   953,   953,   953,   954,   954,   955,
     955,   957,   956,   959,   958,   961,   960,   962,   962,   962,
     964,   963,   965,   965,   966,   966,   967,   967,   967,   969,
     968,   970,   972,   971,   973,   973,   974,   974,   975,   975,
     975,   975,   975,   975,   977,   976,   978,   978,   978,   980,
     979,   979,   981,   981,   982,   982,   983,   984,   985,   985,
     986,   987,   987,   989,   988,   990,   990,   991,   993,   992,
     994,   994,   995,   995,   996,   997,   997,   998,   998,  1000,
     999,  1002,  1003,  1001,  1004,  1004,  1004,  1004,  1004,  1005,
    1005,  1006,  1006,  1007,  1007,  1008,  1008,  1008,  1008,  1008,
    1008,  1008,  1008,  1008,  1008,  1009,  1009,  1009,  1010,  1010,
    1010,  1011,  1012,  1013,  1014,  1014,  1015,  1015,  1015,  1015,
    1015,  1016,  1016,  1017,  1017,  1017,  1017,  1017,  1017,  1017,
    1017,  1017,  1017,  1017,  1018,  1018,  1018,  1018,  1018,  1018,
    1019,  1019,  1019,  1019,  1019,  1019,  1019,  1019,  1019,  1019,
    1019,  1019,  1019,  1019,  1020,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1021,
    1021,  1022,  1022,  1023,  1023,  1024,  1024,  1025,  1025,  1025,
    1025,  1025,  1025,  1026,  1026,  1027,  1027,  1027,  1027,  1027,
    1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,
    1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,
    1027,  1027,  1027,  1027,  1027,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1033,  1032,  1032,  1034,  1034,  1035,  1035,  1036,
    1036,  1037,  1037,  1038,  1038,  1039,  1040,  1040,  1040,  1040,
    1040,  1040,  1040,  1041,  1042,  1040,  1040,  1040,  1040,  1040,
    1040,  1040,  1040,  1040,  1040,  1040,  1043,  1040,  1045,  1044,
    1046,  1046,  1046,  1047,  1047,  1048,  1048,  1049,  1049,  1051,
    1050,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1052,  1053,  1053,  1054,  1054,  1055,  1055,  1056,  1056,
    1057,  1057,  1058,  1058,  1059,  1059,  1060,  1060,  1061,  1062,
    1062,  1063,  1063,  1064,  1064,  1065,  1064,  1066,  1064,  1067,
    1064,  1064,  1068,  1064,  1069,  1064,  1064,  1070,  1064,  1071,
    1064,  1064,  1072,  1072,  1072,  1074,  1073,  1073,  1073,  1076,
    1075,  1078,  1079,  1077,  1080,  1081,  1082,  1082,  1083,  1083,
    1083,  1083,  1084,  1084,  1086,  1085,  1087,  1085,  1088,  1088,
    1089,  1090,  1089,  1092,  1091,  1093,  1093,  1094,  1094,  1095,
    1095,  1096,  1096,  1097,  1097,  1097,  1097,  1097,  1097,  1097,
    1097,  1097,  1097,  1097,  1097,  1098,  1098,  1099,  1099,  1099,
    1099,  1099,  1099,  1099,  1099,  1099,  1100,  1100,  1100,  1100,
    1101,  1101,  1101,  1102,  1102,  1103,  1103,  1104,  1105,  1104,
    1106,  1107,  1106,  1108,  1108,  1109,  1109,  1110,  1110,  1111,
    1111,  1111,  1112,  1113,  1113,  1114,  1115,  1115,  1117,  1116,
    1118,  1118,  1119,  1119,  1119,  1120,  1120,  1121,  1121,  1122,
    1123,  1123,  1123,  1124,  1124,  1124,  1124,  1125,  1125,  1126,
    1126,  1126,  1126,  1126,  1126,  1127,  1127,  1127,  1127,  1127,
    1128,  1128,  1128,  1128,  1128,  1129,  1129,  1129,  1129,  1130,
    1131,  1131,  1132,  1133,  1132,  1134,  1134,  1135,  1135,  1136,
    1138,  1137,  1139,  1139,  1140,  1140,  1142,  1141,  1144,  1145,
    1143,  1143,  1143,  1147,  1146,  1148,  1149,  1148,  1148,  1148,
    1148,  1148,  1148,  1148,  1148,  1148,  1148,  1148,  1148,  1150,
    1150,  1151,  1152,  1152,  1153,  1154,  1154,  1155,  1155,  1157,
    1158,  1156,  1160,  1161,  1159,  1162,  1162,  1162,  1162,  1163,
    1163,  1164,  1164,  1165,  1166,  1166,  1166,  1167,  1166,  1168,
    1168,  1169,  1169,  1170,  1169,  1171,  1169,  1172,  1172,  1173,
    1173,  1174,  1175,  1175,  1176,  1176,  1178,  1177,  1179,  1179,
    1180,  1180,  1181,  1181,  1182,  1183,  1182,  1185,  1186,  1184,
    1187,  1187,  1188,  1189,  1189,  1190,  1191,  1191,  1193,  1192,
    1195,  1194,  1196,  1194,  1197,  1194,  1198,  1198,  1199,  1199,
    1200,  1200,  1201,  1201,  1202,  1202,  1202,  1203,  1204,  1204,
    1205,  1205,  1206,  1206,  1207,  1207,  1207,  1207,  1207,  1207,
    1207,  1207,  1207,  1208,  1208,  1210,  1209,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1212,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1213,  1213,
    1213,  1214,  1214,  1215,  1215,  1216,  1216,  1217,  1217,  1218,
    1218,  1219,  1219,  1220,  1220,  1221,  1221,  1221,  1223,  1222,
    1224,  1222,  1225,  1225,  1226,  1226,  1226,  1227,  1227,  1227,
    1229,  1228,  1230,  1230,  1232,  1231,  1231,  1231,  1231,  1231,
    1231,  1231,  1231,  1231,  1231,  1231,  1233,  1233,  1235,  1234,
    1236,  1236,  1237,  1237,  1237,  1239,  1238,  1240,  1241,  1241,
    1242,  1243,  1243,  1243,  1244,  1246,  1245,  1245,  1248,  1249,
    1250,  1251,  1247,  1247,  1252,  1252,  1253,  1253,  1253,  1254,
    1254,  1254,  1255,  1255,  1256,  1256,  1257,  1257,  1257,  1257,
    1258,  1258,  1259,  1259,  1260,  1260,  1261,  1261,  1262,  1262,
    1262,  1263,  1263,  1264,  1264,  1265,  1265,  1266,  1266,  1266,
    1266,  1267,  1267,  1267,  1268,  1269,  1269,  1269,  1270,  1270,
    1270,  1270,  1270,  1270,  1270,  1270,  1270,  1270,  1270,  1270,
    1271,  1271,  1271,  1271,  1271,  1272,  1272,  1273,  1273,  1274,
    1275,  1275,  1276,  1276,  1277,  1277,  1277,  1278,  1278,  1278,
    1278,  1279,  1279,  1279,  1280,  1281,  1281,  1282,  1283,  1284,
    1285,  1285,  1286,  1286,  1287,  1287,  1287,  1288,  1288,  1288,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1292,  1291,  1293,  1293,  1294,  1294,  1296,  1295,  1297,  1297,
    1297,  1297,  1298,  1298,  1299,  1299,  1299,  1299,  1300,  1300,
    1300,  1300,  1301,  1301,  1302,  1302,  1303,  1303,  1303,  1303,
    1303,  1303,  1303,  1304,  1304,  1304,  1305,  1305,  1305,  1305,
    1306,  1306,  1306,  1307,  1307,  1307,  1307,  1307,  1309,  1308,
    1310,  1310,  1311,  1311,  1312,  1313,  1313,  1313,  1313,  1315,
    1314,  1316,  1316,  1317,  1316,  1318,  1318,  1319,  1319,  1320,
    1320,  1320,  1320,  1321,  1320,  1322,  1322,  1322,  1322,  1322,
    1323,  1324,  1324,  1324,  1324,  1325,  1326,  1326,  1326,  1327,
    1327,  1328,  1328,  1329,  1329,  1330,  1330,  1332,  1331,  1333,
    1331,  1334,  1331,  1335,  1331,  1331,  1331,  1331,  1331,  1331,
    1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,
    1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,
    1336,  1336,  1337,  1337,  1338,  1338,  1338,  1339,  1339,  1339,
    1339,  1340,  1340,  1341,  1341,  1342,  1342,  1342,  1343,  1343,
    1344,  1344,  1345,  1346,  1346,  1346,  1346,  1346,  1347,  1347,
    1348,  1348,  1349,  1349,  1349,  1349,  1349,  1351,  1350,  1352,
    1352,  1353,  1353,  1353,  1354,  1354,  1354,  1355,  1355,  1356,
    1357,  1357,  1358,  1359,  1360,  1360,  1362,  1361,  1363,  1363,
    1363,  1365,  1364,  1366,  1366,  1367,  1367,  1367,  1368,  1369,
    1369,  1370,  1371,  1372,  1372,  1372,  1373,  1373,  1373,  1373,
    1373,  1374,  1374,  1374,  1374,  1374,  1374,  1375,  1375,  1376,
    1377,  1378,  1378,  1378,  1379,  1380,  1380,  1380,  1381,  1381,
    1381,  1383,  1382,  1384,  1384,  1385,  1385,  1387,  1386,  1388,
    1388,  1389,  1389,  1389,  1389,  1391,  1392,  1393,  1390,  1394,
    1394,  1396,  1397,  1398,  1399,  1400,  1395,  1402,  1403,  1404,
    1405,  1401,  1406,  1406,  1406,  1406,  1406,  1406,  1407,  1407,
    1407,  1408,  1408,  1409,  1409,  1409,  1410,  1410,  1411,  1412,
    1411,  1413,  1413,  1414,  1415
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     0,     7,     0,
      12,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     5,     0,     2,     1,
       1,     1,     3,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     1,     3,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     5,     0,     2,     0,     3,     0,     2,     2,     2,
       2,     0,     6,     2,     0,     2,     1,     1,     3,     0,
       0,     0,     7,     0,     2,     2,     1,     1,     0,     0,
       8,     0,     6,     1,     2,     1,     2,     0,     0,     6,
       0,     0,     6,     0,     2,     0,     5,     0,     1,     0,
       5,     0,     2,     0,     5,     4,     0,     0,     8,     0,
       7,     1,     1,     1,     1,     1,     2,     4,     5,     0,
       4,     4,     4,     3,     3,     2,     2,     0,     2,     1,
       2,     3,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     0,     1,     1,     1,     1,     1,     2,     3,     2,
       4,     5,     0,     5,     0,     0,     5,     0,     7,     0,
       1,     0,     3,     0,     3,     5,     5,     0,     4,     0,
       3,     0,     3,     0,     1,     0,     1,     1,     3,     1,
       5,     5,     0,     2,     0,     0,     7,     0,     9,     1,
       3,     1,     1,     0,     2,     0,     3,     1,     3,     0,
       6,     1,     0,     4,     5,     1,     1,     1,     3,     3,
       1,     3,     1,     1,     0,     3,     1,     3,     0,     4,
       1,     0,     1,     2,     1,     3,     4,     3,     3,     3,
       4,     4,     3,     0,     0,     6,     0,     1,     0,     1,
       1,     2,     1,     1,     0,     1,     1,     2,     1,     0,
       3,     0,     1,     1,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     1,     1,     3,     4,     4,     2,     2,
       2,     3,     3,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     3,     1,     1,     2,     2,     7,     8,
       8,     2,     2,     0,     1,     2,     0,     1,     2,     0,
       4,     3,     3,     3,     1,     2,     1,     1,     3,     2,
       3,     2,     2,     1,     3,     3,     2,     3,     1,     1,
       2,     1,     1,     2,     1,     1,     1,     2,     3,     2,
       3,     2,     2,     3,     3,     3,     0,     6,     0,     6,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     2,     1,     2,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     0,     1,
       1,     5,     0,     1,     2,     1,     1,     1,     1,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     2,
       1,     1,     2,     2,     4,     1,     3,     2,     1,     2,
       2,     2,     2,     1,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     0,     1,     0,     2,     1,     2,     3,     2,     0,
       1,     0,     1,     1,     2,     0,     1,     0,     4,     1,
       4,     3,     1,     0,     1,     2,     1,     3,     3,     2,
       2,     2,     1,     1,     2,     2,     2,     1,     2,     2,
       2,     2,     1,     1,     0,     1,     1,     1,     1,     0,
       1,     1,     1,     0,     1,     2,     0,     1,     1,     2,
       2,     2,     1,     3,     3,     1,     1,     1,     4,     2,
       1,     4,     0,     1,     0,     2,     1,     3,     0,     6,
       0,     5,     7,     0,     5,     0,     5,     0,     5,     0,
       4,     0,    10,     3,     4,     3,     3,     7,     0,     3,
       1,     4,     0,     3,     0,     2,     0,     1,     0,     2,
       2,     2,     2,     1,     1,     1,     3,     4,     0,     6,
       4,     0,     5,     0,     6,     4,     1,     2,     1,     1,
       0,     5,     0,     3,     2,     0,     5,     0,     0,     6,
       1,     3,     1,     1,     3,     2,     3,     2,     4,     0,
       6,     0,     0,     8,     4,     4,     3,     3,     2,     2,
       6,     5,     3,     5,     1,     1,     1,     0,     1,     0,
       1,     0,     1,     1,     0,     2,     1,     0,     1,     1,
       1,     0,     5,     3,     0,     5,     3,     3,     0,     3,
       0,     2,     1,     3,     0,     1,     1,     0,     2,     1,
       3,     0,     6,     0,     6,     0,     5,     0,     1,     1,
       0,     6,     0,     1,     1,     2,     1,     1,     1,     0,
       5,     2,     0,     5,     0,     1,     1,     2,     1,     1,
       1,     1,     1,     2,     0,     5,     0,     1,     1,     0,
       4,     4,     3,     5,     1,     3,     3,     5,     1,     3,
       2,     1,     1,     0,     6,     1,     3,     3,     0,     2,
       0,     4,     0,     2,     1,     2,     4,     2,     3,     0,
       3,     0,     0,     6,     2,     1,     1,     2,     2,     8,
       4,     0,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     2,     4,     3,     1,
       1,     4,     0,     0,     1,     1,     0,     2,     2,     1,
       1,     0,     2,     3,     3,     3,     2,     3,     4,     3,
       4,     3,     4,     1,     3,     4,     3,     3,     6,     1,
       5,     6,     5,     7,     6,     8,     5,     6,     4,     4,
       5,     3,     4,     1,     3,     3,     3,     3,     3,     3,
       5,     5,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     3,     2,     2,     2,     2,
       3,     3,     5,     6,     4,     4,     7,     2,     6,     5,
       6,     6,     4,     4,     5,     4,     6,     2,     4,     4,
       4,    10,     6,     8,     6,     4,     4,     6,     4,     4,
       4,     6,     4,     7,     7,     7,     6,     6,     6,     6,
       3,     4,     6,     8,     2,     2,     4,     8,     8,     6,
       6,     2,     4,     6,     6,     8,     8,     6,     8,     6,
       2,     4,     8,     8,     2,     2,     2,     4,     4,     4,
       4,     3,     8,     4,     6,     4,     4,     4,     6,     8,
       6,     4,     6,     1,     6,     4,     4,     4,     4,     4,
       6,     4,     0,     5,     6,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     3,     4,     4,     5,     4,     4,
       4,     5,     4,     0,     0,     7,     4,     5,     4,     5,
       4,     4,     4,     4,     4,     5,     0,     8,     0,     3,
       3,     1,     4,     0,     1,     0,     2,     0,     1,     0,
       3,     2,     3,     2,     1,     2,     1,     2,     1,     1,
       1,     2,     0,     1,     1,     3,     1,     3,     1,     3,
       0,     1,     0,     2,     4,     5,     1,     1,     1,     1,
       4,     1,     3,     3,     3,     0,     6,     0,     6,     0,
       8,     4,     0,     8,     0,    10,     6,     0,     8,     0,
      10,     6,     1,     2,     2,     0,     4,     3,     6,     0,
       3,     0,     0,     5,     0,     1,     0,     1,     0,     2,
       3,     3,     1,     1,     0,     7,     0,     7,     1,     2,
       0,     0,     2,     0,     2,     0,     1,     1,     1,     1,
       3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     0,     2,     0,     1,     0,     0,     3,
       0,     0,     3,     2,     0,     0,     4,     4,     2,     0,
       2,     2,     3,     3,     1,     2,     0,     1,     0,     4,
       4,     2,     0,     1,     1,     0,     1,     0,     1,     2,
       1,     3,     3,     1,     1,     1,     1,     0,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     0,     6,     0,     1,     3,     1,     3,
       0,     2,     3,     1,     2,     1,     0,     3,     0,     0,
       7,     2,     1,     0,     3,     6,     0,     6,     4,     6,
       4,     4,     4,     5,     4,     4,     5,     6,     4,     1,
       3,     1,     1,     3,     1,     0,     2,     0,     1,     0,
       0,     8,     0,     0,     6,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     4,     0,     3,     3,
       1,     2,     2,     0,     3,     0,     5,     3,     1,     3,
       1,     3,     1,     1,     0,     1,     0,     4,     0,     1,
       3,     1,     1,     1,     0,     0,     6,     0,     0,    11,
       3,     1,     3,     3,     1,     3,     0,     1,     0,     4,
       0,     6,     0,     5,     0,     6,     1,     3,     3,     5,
       0,     2,     0,     2,     1,     1,     1,     3,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     2,     1,     3,     3,     6,    16,     2,
       2,     0,     6,     5,     2,     2,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     2,     2,
       3,     2,     2,     1,     3,     4,     3,     3,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     0,     1,     0,     2,     0,     1,     1,
       1,     0,     2,     0,     2,     0,     2,     2,     0,     4,
       0,     4,     1,     1,     0,     1,     1,     0,     1,     1,
       0,     4,     3,     1,     0,     3,     4,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     0,     3,
       3,     1,     1,     1,     2,     0,     3,     3,     2,     2,
       3,     0,     1,     1,     2,     0,     4,     5,     0,     0,
       0,     0,    18,     2,     0,     1,     0,     1,     1,     0,
       1,     1,     0,     2,     2,     1,     3,     4,     3,     3,
       0,     2,     2,     1,     3,     3,     0,     3,     0,     3,
       2,     3,     1,     1,     2,     0,     2,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     3,     5,     1,
       1,     1,     1,     1,     3,     4,     5,     1,     5,     3,
       2,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     4,     0,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     0,     1,     0,     1,     1,     1,     0,     2,
       2,     2,     1,     2,     4,     5,     4,     6,     2,     3,
       3,     3,     5,     1,     3,     3,     2,     2,     2,     1,
       1,     4,     4,     1,     1,     1,     1,     1,     0,     4,
       1,     1,     1,     3,     3,     1,     1,     2,     2,     0,
       3,     4,     3,     0,     7,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     5,     1,     1,     1,     1,     1,
       3,     6,     6,     6,     7,     3,     8,     8,     8,     0,
       1,     1,     2,     0,     1,     1,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       0,     1,     3,     1,     2,     2,     2,     1,     3,     3,
       1,     1,     3,     1,     3,     4,     5,     1,     0,     3,
       3,     1,     1,     0,     2,     2,     2,     2,     0,     2,
       2,     1,     2,     2,     2,     2,     2,     0,     3,     0,
       1,     0,     3,     2,     0,     1,     2,     0,     1,     4,
       4,     5,     2,     3,     0,     1,     0,     4,     0,     1,
       1,     0,     2,     2,     1,     0,     1,     1,     0,     5,
       6,     0,     0,     2,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     2,     1,     2,     3,     3,     3,     0,     3,
       3,     0,     7,     0,     3,     1,     3,     0,     3,     2,
       4,     0,     3,     4,     4,     0,     0,     0,    16,     8,
       7,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,    12,     4,     4,     3,     4,     3,     2,     1,     3,
       5,     1,     1,     0,     1,     1,     0,     2,     0,     0,
       3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2299,   916,     0,  2247,     0,     0,     0,     0,     0,
       0,  2249,   103,    62,  1508,  1622,  1623,  1423,  1447,     2,
       0,   916,   153,     0,    74,  1449,     0,  1661,     0,     0,
     916,   403,     0,  1655,     0,     0,   916,  1452,  1648,     0,
     153,  2249,     0,   951,  2082,  1545,     0,     0,     0,  1528,
       0,  2139,  1497,     0,     0,     0,     0,     3,     8,    20,
       0,    39,    25,    29,    15,    19,    14,    37,    10,    53,
      54,    46,    12,    17,    43,    11,    13,    16,    35,    42,
      36,    38,    50,   944,    23,    24,    30,    44,    58,    21,
      55,    52,    22,  1624,    26,    45,    40,    32,    59,    33,
      51,    34,    57,    28,    47,    27,     9,    18,    48,    49,
      41,    60,    31,    56,     0,   786,     0,     0,   850,     0,
       0,     0,     0,     0,   769,  2297,  2298,  2299,   918,   917,
       0,  2131,  2130,   883,  2249,  1757,   901,     0,  1820,  1821,
    1822,  1823,  1824,  1825,  1826,  1771,  1827,  1828,  1830,  1829,
    1831,  1832,  1772,  1773,  1833,  1834,  1835,  1837,  1836,  1838,
    1774,  1775,  1839,  1840,  1841,  1776,  1777,  1842,  1843,  1778,
    1844,  1845,  1846,  1847,  1779,  1848,  1780,  1849,  1850,  1851,
    1852,  1853,  1854,  1781,  1855,  1856,  1857,  1858,  1860,  1859,
    1861,  1862,  1863,  1782,  1864,  1865,  1866,  1867,  1868,  1869,
    1870,  1783,  1871,  1872,  1873,  1889,  1784,  1874,  1877,  1876,
    1875,  1878,  1879,  1881,  1880,  1882,  1785,  1883,  1884,  1885,
    1887,  1886,  1891,  1892,  1893,  1786,  1888,  1894,  1890,  2062,
    1896,  1895,  1897,  1899,  1898,  1787,  1900,  1788,  1789,  1901,
    1902,  1755,  1903,  1756,  1905,  1906,  1907,  1912,  1913,  1790,
    1904,  1908,  1909,  1910,  1911,  1914,  1791,  1915,  1916,  1917,
    1918,  1919,  1920,  1921,  1922,  1923,  1924,  1934,  1927,  1929,
    1930,  1932,  1928,  1933,  1937,  1936,  1938,  1939,  1940,  1935,
    1926,  1931,  1941,  1942,  1925,  1943,  1944,  1945,  1946,  1947,
    1948,  1949,  1950,  1951,  1952,  1953,  1955,  1954,  1956,  1957,
    1958,  1959,  1960,  1962,  1961,  1963,  1964,  1965,  1967,  1966,
    1969,  1970,  1792,  1968,  1971,  1972,  1973,  1974,  1975,  1793,
    1794,  1795,  1976,  1977,  1796,  1978,  1979,  1980,  1797,  1981,
    1982,  1984,  1983,  1985,  1986,  1798,  1799,  1987,  1988,  1989,
    1990,  1991,  1992,  1993,  1994,  1995,  1996,  1997,  1998,  1999,
    2001,  2000,  2002,  2003,  2004,  2005,  2006,  1800,  2007,  1801,
    2008,  2009,  1802,  2010,  1803,  2011,  2012,  1804,  2013,  2014,
    2015,  2016,  2017,  2018,  1805,  2019,  2020,  1806,  2022,  2021,
    2023,  1807,  2025,  2026,  1808,  2024,  1810,  2027,  1809,  1811,
    2028,  2029,  2031,  2030,  2032,  2033,  2034,  1812,  2035,  1813,
    2036,  2037,  2038,  2039,  2041,  2040,  2042,  2043,  2044,  2045,
    2046,  2048,  2047,  2049,  2050,  2051,  2052,  2055,  2056,  2057,
    2058,  2053,  2054,  1814,  2059,  2060,  2061,  2063,  2064,  2066,
    2065,  1815,  1816,  2067,  2068,  1819,  2069,  2070,  2073,  2071,
    2072,  2075,  2074,  2076,  2077,  1817,  2078,  1818,  2079,   172,
    1760,   155,  1761,  1770,     0,   885,   902,  2250,  2251,   489,
     731,     0,     0,   732,     0,   488,   730,   153,  2299,   108,
       0,   485,   486,     0,  1522,     0,  1445,  1445,  1445,     0,
       0,  1445,  1445,     0,  1448,  1445,   153,  1445,     0,    67,
    1630,     0,     0,     0,     0,  1754,     0,  1455,     0,  1662,
    1663,     0,  1665,     0,     0,  2128,     0,     0,     0,     0,
       0,   153,   919,     0,  1506,     0,   881,     0,  2251,  2262,
     945,   949,   961,  2083,  2080,  1607,   870,   870,   870,   868,
     870,  1529,     0,     0,     0,  1506,  1664,  2351,     0,     0,
       0,  2347,     0,  2352,     0,   951,     0,     0,     1,     5,
       0,     0,  1884,  1980,  1620,  1618,  1751,     0,   760,   787,
       0,   765,     0,   763,  1766,  1765,  1764,     0,   776,   775,
     773,     0,   367,     0,     0,  2308,   767,   899,     0,  2248,
       0,   928,   938,   174,     0,    76,     0,     0,     0,  2254,
       0,     0,     0,     0,   107,     0,     0,     0,   104,   982,
     982,  2299,  2301,  2303,   489,   487,     0,  1526,  1525,  1524,
       0,  1522,  1821,  1771,  1832,     0,  1724,     0,     0,     0,
    1230,     0,  1776,     0,  1844,  1846,  1781,     0,     0,   991,
     991,   991,     0,     0,     0,  1862,  1863,  1733,     0,     0,
       0,  1721,  1734,  1896,  1897,     0,  1723,  1902,     0,     0,
       0,     0,  1919,  1731,     0,     0,  1950,  1952,     0,     0,
    1956,  1957,  1958,  1959,  1708,  1046,     0,   991,  1720,  1730,
    1973,  1714,  1981,  1985,  1986,     0,  1994,     0,     0,     0,
    2017,  2020,     0,     0,  2038,     0,     0,   991,  1707,  2055,
    2056,  2057,  2058,     0,  1722,  1814,  1732,     0,  2069,   991,
     991,   991,     0,     0,     0,  2076,  2079,     0,     0,     0,
       0,  1045,     0,  1198,     0,  1224,  1003,  1009,  1023,     0,
    1038,  1056,  1057,  1059,  1153,  1058,  1064,  1063,  1424,  1718,
    1062,  1061,  1719,  1055,  1741,  1760,  1740,     0,     0,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,     0,  1445,
      69,     0,  2173,  2188,  2189,  2185,  2190,  2208,  2191,  2195,
       0,  2187,  2179,     0,  2194,  2183,  2192,     0,  2177,     0,
    2193,  2198,  2209,  2181,  2186,  2165,     0,  2171,  2175,  1753,
    1330,  2142,  2143,     0,    75,  1457,  1458,  1456,   849,     0,
    1660,  1676,     0,     0,     0,   914,   413,   404,     0,  1602,
    1601,     0,  1656,  2263,     0,     0,   890,  1460,  1507,     0,
    1459,  1653,     0,  1652,  1649,  1651,     0,  2173,  2160,     0,
    2257,  2254,  2264,   974,   967,   966,   969,   970,   973,   971,
     972,   968,   965,   982,   962,   964,  2086,  1567,     0,   665,
       0,  1615,     0,  1568,     0,     0,  1615,     0,  1365,  1605,
    1608,     0,  2095,  1583,   728,   727,     0,   726,  2096,  1601,
       0,     0,     0,  1554,  1569,     0,  1530,  1574,  2097,     0,
    1604,     0,  1365,  1615,     0,  1546,     0,     0,     0,     0,
     864,   874,   866,   861,     0,   867,   863,  1527,  1441,  2364,
    2140,   849,  1713,  1712,  1758,  2348,  1711,  2356,  2358,  2344,
    2346,  2353,   947,     0,  2268,     6,    61,     0,  1627,  2306,
    2307,  2305,   681,     0,   991,  1767,  2300,   156,   774,     0,
     368,   156,     0,     0,     0,     0,     0,   369,   370,   306,
     758,   771,     0,     0,   770,  2308,     0,     0,  1439,     0,
       0,   930,   940,   176,   173,   154,     0,   887,   904,  2253,
       0,     0,  2255,  2259,  1044,  1043,     0,   101,   106,     0,
       0,     0,  2227,   105,  2223,  2304,   982,   982,   982,  2296,
       0,  2284,  2291,  2292,  2295,  2294,  2293,  2290,     0,  2283,
    2286,  2287,  2289,  2288,  2308,  2302,     0,   733,     0,  1509,
    1512,  1516,  1520,  1523,     0,     0,  1335,  1077,  1335,  1335,
    1335,  1231,     0,     0,     0,     0,     0,     0,     0,     0,
    1335,     0,  1114,  1087,     0,  1115,     0,     0,     0,     0,
       0,  1727,     0,     0,     0,     0,     0,     0,  1203,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1226,  1228,
    1740,  1335,     0,     0,  1335,     0,     0,     0,     0,     0,
     996,     0,  1121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1335,  1335,     0,     0,  1335,     0,
    1130,     0,  1729,     0,     0,     0,  1728,     0,     0,  1726,
    1725,  1709,     0,  1134,  1136,  1135,     0,  1335,  1335,     0,
       0,  1067,  1066,  1068,  2281,     0,     0,     0,     0,     0,
       0,  1042,  1041,  1040,  1039,     0,     0,     0,  1047,     0,
    1048,  1049,     0,  1050,  1051,  1052,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1069,     0,     0,     0,  1710,
    1162,     0,  1446,  1428,  1434,  1430,     0,  1603,  1431,  1438,
     381,     0,  1435,  2221,  1432,   851,     0,     0,    68,  1644,
    1638,  1640,  1643,  1639,     0,  1645,  1642,  1641,  2131,  1631,
    1633,  1634,  2174,  2172,  2206,  2205,     0,  2207,  2203,  2196,
    2228,  2200,  2228,  2202,  2201,  2228,  2197,  2204,  2228,  2169,
       0,  1331,  1332,     0,  2141,     0,  1752,     0,     0,  1677,
       0,  1678,  1666,  1674,   933,     0,  1330,  2129,  2132,     0,
     414,   411,   409,   422,     0,     0,    64,    65,     0,   921,
       0,   920,   924,     0,     0,     0,  1463,  1453,  1462,  1654,
       0,     0,  2172,  2169,  2258,     0,  2260,  2275,   950,  2265,
     980,   952,   979,     0,   963,  2081,  2084,  2092,  1611,   664,
       0,     0,  1582,  1564,     0,   489,     0,     0,     0,     0,
       0,     0,  1547,     0,     0,   526,     0,  1573,  1366,  1609,
    1610,  1615,     0,     0,  1615,     0,  1577,  1588,  1578,     0,
    1605,     0,  1615,  1542,     0,     0,  1534,  1539,  1535,     0,
    1541,  1540,  1543,  1531,  1532,  1560,  1589,  1605,  1565,  1572,
    1581,     0,  1559,  1566,     0,  1553,  1579,  1605,  1605,  1615,
    1615,   877,   876,   875,   871,   872,   877,     0,  1265,     0,
       0,  2345,  2359,  2343,  2354,  2355,  2342,   948,  2269,   946,
    2270,     0,     7,     4,  1621,  1619,  1628,  1629,   682,   681,
     480,   483,   482,     0,     0,  1769,     0,   766,     0,  1603,
     764,     0,     0,  1603,   317,  1603,   371,   681,   778,     0,
       0,   768,   900,     0,     0,   932,   927,   931,   929,   723,
     722,     0,   939,     0,   177,   179,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    77,    78,    92,   889,   888,   886,   912,   911,
     909,     0,   910,   908,   903,   905,   906,  2252,  2256,   490,
     681,  1603,     0,   309,     0,     0,     0,     0,     0,   489,
       0,     0,  2285,    97,   734,     0,  1514,  1442,  1510,     0,
       0,     0,  1330,     0,     0,  1336,  1335,     0,  1209,     0,
       0,     0,     0,  1232,     0,     0,     0,     0,     0,     0,
       0,  1183,     0,  1209,   992,     0,  1141,     0,     0,     0,
       0,     0,  2281,     0,  1304,  1305,  1306,  1307,  1317,  1308,
    1309,  1310,  1319,  1324,  1311,  1312,  1320,  1321,  1322,  1313,
    1323,  1318,  1314,  1325,     0,  1303,     0,  1328,  1326,  1329,
    1327,     0,  1204,  1196,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1335,     0,     0,     0,  1335,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1335,     0,     0,     0,  1316,     0,  1315,     0,
       0,     0,     0,     0,     0,     0,  1110,     0,  1743,  1742,
       0,     0,     0,     0,   951,     0,  1071,     0,  1070,     0,
    2098,  1199,  1201,     0,   994,   993,   995,  1006,   999,  1004,
     997,  1001,     0,  1053,  1826,  1007,     0,     0,  1035,     0,
    1344,  1036,  1021,  1026,  1027,     0,  1024,  1025,     0,  1029,
       0,  1028,  1032,  1033,  1034,  1037,     0,     0,     0,     0,
    1060,  1065,  1225,   982,  1744,     0,  1426,   381,   384,   383,
    1436,   382,  1484,     0,   853,   852,  1433,   851,     0,    70,
      72,  1637,     0,     0,  1646,  2199,     0,  2180,  2184,  2178,
    2182,     0,     0,  2170,     0,  2176,  1334,  1892,  1966,     0,
    1337,  2145,  1450,  2363,  1673,  1675,     0,     0,  1667,     0,
       0,   915,     0,     0,     0,   424,   407,     0,    66,     0,
       0,  1657,     0,     0,     0,     0,   892,  1461,     0,  1650,
       0,     0,     0,     0,     0,  2261,  2277,  2276,  2266,   982,
    1356,   983,   985,   984,  1740,  2086,  2089,  2090,  2093,  2091,
       0,  2088,  2087,  2102,     0,  1613,  1616,  1617,     0,     0,
    1597,  1591,  1590,  1586,  1592,  1587,  1600,  1599,  1598,  1556,
    1555,  1375,  1376,  1374,  1369,  1370,  1373,  1550,  1606,  1596,
    1594,  1584,     0,  1615,  1595,  1593,  1536,  1537,  1538,     0,
    1365,     0,  1615,  1605,     0,  1615,  1615,  1576,  1580,     0,
     865,   874,   862,   869,  1275,  1274,     0,  1239,     0,  1241,
    1238,  1237,  1236,     0,  1274,  2349,  2357,  2361,     0,  1365,
    2274,  2272,   481,  1484,  1484,     0,  1768,     0,     0,     0,
       0,     0,     0,     0,   157,   166,     0,     0,   315,   316,
    1484,   314,   357,   358,   361,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   110,   364,  1484,  1484,   311,
     337,   338,   341,   342,   343,   344,   345,   307,     0,   312,
     847,   847,     0,  1484,  1484,   847,  1484,     0,     0,  1484,
    1484,     0,     0,  1484,     0,     0,   847,     0,  1484,   845,
       0,     0,  1484,  1484,  1484,  1484,   847,     0,     0,  1484,
     401,  1484,     0,     0,   857,     0,     0,  1484,     0,     0,
    1484,  1484,  1484,   794,   844,   493,   513,   514,   759,   793,
     795,   806,   399,     0,   823,   846,     0,   780,   782,  2309,
    2310,  2311,   884,  1440,  1295,   175,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   913,   907,   102,   681,  1484,  1484,
    1484,  1484,   313,   346,   347,   350,   351,   352,   353,   356,
     354,   355,     0,     0,  1603,     0,  2224,     0,  2337,     0,
       0,     0,   155,   491,     0,     0,   735,     0,     0,     0,
    1337,  1517,  1265,  1521,  1520,  1518,     0,  1137,     0,  1176,
       0,  1178,  1179,  1180,     0,     0,     0,     0,     0,  1138,
       0,  1085,  1139,  1140,     0,     0,     0,     0,  1182,     0,
    1116,     0,     0,  1088,  1089,  1082,  1074,     0,  1155,     0,
       0,  1090,     0,     0,     0,     0,     0,  1156,  1227,     0,
    1229,  1744,     0,  1188,  1143,  1095,     0,  1186,     0,  1096,
    1157,  1158,  1159,  1122,  1145,  1146,     0,  1161,     0,  1147,
       0,     0,     0,     0,  1098,  1192,  1190,     0,     0,     0,
       0,  1194,  1131,  1100,     0,     0,     0,  1099,     0,     0,
       0,     0,     0,     0,     0,  1102,     0,  1083,  1191,  1193,
    1151,     0,  1111,  2278,  2278,     0,  1075,     0,     0,     0,
       0,     0,  1745,  1000,  1005,   998,  1002,     0,     0,     0,
       0,     0,  1019,  1018,     0,     0,     0,     0,  1344,  1022,
       0,     0,  1172,  1173,  1222,     0,  1429,  1427,  1437,  1482,
    1483,  1485,     0,  2222,  1425,    73,     0,     0,  1632,  1647,
    1635,  2232,     0,  2231,  2217,  2220,  1751,     0,     0,     0,
    2155,  2149,  2156,  2158,  2152,  2157,  2159,  2150,  2151,  2146,
    2153,  1338,  1367,     0,     0,   934,   935,   938,     0,  2135,
    2136,  2134,  2133,   982,   412,   410,  1400,  1401,  1386,  1387,
    1385,  1388,   423,  1389,  1399,     0,   435,     0,   415,  1659,
    1658,     0,   922,   925,   926,   897,   896,   898,   891,   893,
     894,   473,  1467,     0,     0,     0,  1473,  1454,  1464,   882,
       0,     0,     0,     0,     0,   978,  1265,  1416,   975,   956,
    1367,  1357,   955,   986,     0,  2085,     0,  2053,  2113,     0,
       0,     0,     0,     0,  2103,  1612,     0,  1561,     0,  1585,
       0,     0,     0,  1552,     0,  1575,  1533,  1551,  1337,  1605,
    1548,  1549,   879,   878,   873,  1274,  1265,     0,     0,  1262,
    1276,     0,  1276,  1265,  1265,     0,  1265,  1330,  1271,     0,
       0,  2360,  1358,  2273,     0,     0,   762,   160,   163,   161,
       0,   162,     0,     0,   366,   365,     0,  1603,   359,   114,
     113,   115,   116,  1383,  1384,  1380,  1381,  1379,  1382,   118,
     117,   112,   777,     0,     0,     0,  1603,   339,   318,   319,
     322,   323,   324,   848,   752,   724,   916,   724,   827,     0,
     553,   752,   717,   825,     0,   916,     0,     0,     0,     0,
       0,   916,     0,     0,     0,  1484,     0,   838,   789,     0,
       0,     0,     0,     0,   839,     0,   790,  1484,     0,     0,
       0,     0,     0,   916,     0,     0,     0,     0,   916,   807,
     860,   859,   858,     0,   916,   916,     0,   519,   520,   518,
       0,     0,     0,   494,   681,   791,   400,   792,   556,     0,
     854,   553,   559,  1747,     0,     0,     0,   124,  2313,  1298,
       0,  1299,  1296,  1297,   178,    84,    80,    93,  1393,  1394,
    1392,  1390,  1391,    94,    82,    83,    87,    86,    88,    89,
      90,    85,    91,    81,    95,    96,    79,     0,     0,     0,
       0,  1603,   348,     0,     0,  1484,   308,   325,   326,   329,
     330,   331,   332,   333,   336,   334,   335,     0,  2225,     0,
       0,   302,   301,     0,   119,  2331,     0,     0,   556,    98,
     399,   492,   495,   745,   747,   746,   741,   740,    99,  1443,
    1444,  1265,  1356,  1337,     0,  1330,     0,     0,  1177,  1210,
       0,  1233,     0,  1079,   643,   643,  1220,  1218,   628,   643,
    1214,  1219,  1216,     0,   667,     0,   666,     0,     0,     0,
    1184,  1181,     0,     0,     0,     0,  1207,     0,     0,     0,
    1084,     0,  1167,  1189,  1187,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1195,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2282,
    2282,  1072,  2099,  2100,  2101,   754,  1200,     0,  1016,  1012,
       0,  1010,  1343,  1031,  1030,     0,     0,     0,  1020,   983,
    1163,   982,     0,  1223,  1746,   380,   525,    71,  1636,  2229,
       0,     0,     0,     0,     0,     0,     0,     0,  2144,  1368,
    1494,  1759,  1668,     0,   942,  2137,  2138,     0,   413,     0,
     405,   408,     0,   416,   417,   419,     0,   895,   961,     0,
    1486,  1471,  1478,  1472,     0,     0,     0,  1470,  1736,  1735,
    1742,  2264,     0,     0,     0,     0,  2267,  1337,  1337,  1410,
       0,     0,   953,   958,   954,   957,     0,   981,   990,   989,
    1737,  1744,     0,     0,     0,     0,   669,   668,   677,     0,
       0,     0,  2098,     0,   673,   675,   674,  2108,   672,  1614,
    1365,  1571,  1570,  1372,  1371,     0,  1544,  1563,  1615,     0,
    2271,  1269,     0,  1264,  1263,  1277,     0,  1265,  1276,  1276,
       0,  1244,  1243,  1498,  1501,     0,  1242,  1293,  1267,   961,
    2350,  2362,     0,   680,   679,   524,   676,   523,   165,   164,
     170,   171,   386,   372,   385,   360,   111,   373,   374,   340,
       0,   320,   558,   753,   725,   718,   810,   719,     0,     0,
       0,   724,   552,   752,   551,   554,   733,     0,     0,   505,
     502,   829,   508,   808,   801,   809,   820,   822,     0,   504,
     521,     0,     0,   510,   752,   796,   836,   837,   851,   498,
       0,   534,   535,   533,   515,   522,   500,   501,   831,     0,
    1352,  1354,  1362,   507,   506,   402,   503,     0,   842,   815,
       0,   532,   530,   527,   529,   528,   531,   511,   509,   499,
    1646,   847,   847,   824,     0,   542,   544,   545,  1750,     0,
     856,   826,     0,   546,   547,     0,     0,     0,   134,     0,
       0,   779,     0,   127,   125,   136,     0,     0,   941,     0,
     379,   378,   377,   376,   349,     0,     0,     0,  1603,   327,
    2226,     0,  2338,   305,   303,   304,     0,     0,   180,   540,
     541,   539,   538,     0,   389,     0,  1797,   387,     0,     0,
    1679,   681,   496,     0,  1337,  1377,  1513,  1519,     0,  1112,
    1234,     0,     0,   644,  1211,   683,     0,  1221,   630,   629,
    1213,  1215,  1217,  1078,  1086,  1154,  1081,  1080,     0,     0,
       0,  1119,  1120,  1205,  1208,     0,     0,  1092,     0,  1094,
       0,     0,  1169,  1144,  1160,  1123,  1148,     0,  1097,  1073,
       0,  1124,     0,  1129,  1127,     0,  1101,     0,     0,  1108,
       0,  1106,     0,  1107,     0,  1109,  1150,  1152,  2279,     0,
       0,  1202,  1008,     0,  1017,  1014,     0,  1011,   986,  1174,
    1164,  2230,  2219,  2218,  2233,  2233,  2233,     0,  1339,     0,
    1451,  1679,   936,     0,   937,   983,   432,     0,   439,     0,
     437,   406,     0,   923,   982,  1468,  1480,     0,  1488,     0,
       0,  1465,  1475,     0,     0,     0,  1474,     0,  2162,  2163,
    2161,  1367,  1345,     0,     0,  1422,     0,  1417,   976,     0,
     988,   987,     0,  2115,     0,  2114,  2126,  2127,  2124,  2125,
    2123,  2104,     0,  2110,  2109,     0,     0,     0,  2120,  2111,
       0,     0,  1562,     0,  1557,   880,     0,  1265,  1240,  1265,
    1251,     0,     0,  1265,  1247,  1245,  1249,     0,  1337,     0,
    1266,  1290,   982,  1739,  1359,  1362,   321,   812,   555,   752,
     720,   721,   733,     0,     0,     0,   800,     0,   904,     0,
     805,   677,   516,   835,   834,   517,     0,   798,     0,  1363,
    1364,  1355,   797,   817,   803,     0,   828,   556,   855,   697,
     624,   573,   564,   643,   567,   566,   610,   581,   578,   628,
     626,   596,   628,   628,   603,   602,   620,   606,   586,   683,
     683,   585,   623,   683,   607,   605,   609,     0,   611,   628,
     616,   604,   608,   625,   601,   598,   622,   643,   643,   579,
     582,   621,   683,     0,   614,   643,   647,   584,   683,   689,
       0,     0,   643,   645,  1749,   135,   123,     0,     0,   781,
     783,     0,     0,   784,  2315,     0,  2317,  1300,     0,   310,
     375,   328,     0,   191,   982,     0,     0,   181,   183,   184,
       0,     0,     0,   491,  1681,  1680,   388,   476,   497,     0,
    1515,     0,  1511,     0,  1235,     0,     0,     0,     0,   689,
     691,   685,   689,     0,  1212,     0,  1185,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1076,     0,  1165,     0,
       0,     0,     0,     0,     0,  1105,  1103,  1104,  2280,   755,
    1013,     0,  1175,     0,  2238,  2238,  2238,  1493,  1492,     0,
    1491,  1495,     0,   943,     0,     0,     0,     0,   436,     0,
     418,   474,     0,     0,     0,  1489,  1477,  2268,  1466,  1469,
    1744,  2164,   960,     0,  1340,  1421,  1418,     0,  1411,  1413,
    1415,     0,  1738,     0,     0,  2119,  2105,   678,     0,     0,
       0,     0,  2106,     0,  1330,  1270,     0,  1236,  1265,  1265,
       0,  1236,     0,     0,     0,  1500,  1356,  1502,  1294,     0,
    1272,     0,  1361,     0,     0,   811,     0,     0,     0,   841,
       0,   854,   802,   821,   843,   647,   916,  1353,   816,   818,
     892,   512,   543,   703,   572,   565,   583,   632,   627,     0,
     632,   632,   592,   610,   587,     0,   683,   600,   591,   612,
     615,   617,   619,   632,     0,   683,   580,   589,   576,   632,
     655,     0,     0,     0,   651,     0,   696,     0,   658,   560,
     648,   650,     0,     0,   613,   683,   569,   690,   689,   571,
     683,   689,   632,     0,   646,   632,     0,   121,   126,   137,
     138,   772,  2314,     0,  2312,     0,     0,     0,   194,   192,
     193,     0,   187,   189,   184,  2325,     0,  2332,     0,     0,
    2330,   390,   392,   399,   477,     0,     0,  1362,   750,  1378,
    1113,   641,   639,   642,   640,   684,   692,   693,     0,   688,
     686,   689,     0,  1117,  1118,  1206,  1197,  1142,     0,  1093,
    1166,     0,     0,  1149,  1125,  1128,  1126,  1132,  1133,  1015,
       0,     0,  2237,  2235,     0,  2236,  2234,  2210,     0,  2167,
    2168,  2166,  2154,     0,     0,  1669,   420,   982,   425,     0,
     442,   441,   438,  1367,  1479,  1481,  1487,  1476,     0,  1341,
    1356,   670,  1414,     0,   977,  2117,  2116,  2118,  2112,     0,
       0,     0,     0,  1268,  1252,     0,  1256,  1261,  1257,     0,
    1248,  1246,     0,  1377,  1282,  1283,     0,     0,  1288,  1292,
    1367,  1362,   814,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   840,  1715,   830,   832,   799,     0,   804,     0,
       0,     0,   698,   699,   704,   706,   636,   637,   638,   593,
     633,   635,     0,   595,   563,   588,   618,   594,     0,   590,
     577,   661,   660,   991,   653,   663,     0,     0,   659,   649,
     657,   652,   568,   570,   574,   575,   561,     0,   562,  1748,
     128,   785,   242,  2316,   951,     0,  2321,   109,  2329,  2339,
     191,     0,     0,   132,     0,   182,   185,  2268,  1679,     0,
     395,   736,     0,   749,     0,   694,   687,     0,     0,  1168,
    1170,  2216,  2215,  2214,  2211,     0,     0,     0,     0,     0,
       0,  2239,  2241,  1490,     0,     0,     0,   433,     0,   429,
     431,     0,   461,   475,   975,   536,  1349,  1362,     0,  1367,
       0,  1419,  1412,  2122,  2121,  2107,     0,     0,     0,     0,
       0,     0,  1301,  1499,  1278,  1278,  1289,  1273,  1360,   813,
       0,     0,   736,  1717,  1716,   854,     0,   709,   710,   711,
       0,     0,     0,   702,   705,   634,     0,   756,     0,   662,
     991,   656,     0,   130,   268,     0,   254,   240,     0,     0,
       0,   244,   139,   142,   140,     0,   141,   147,     0,   148,
     149,   150,   151,   152,   143,   266,   267,   146,   144,   145,
       0,  1762,     0,  1763,  2319,     0,     0,  2318,   158,   188,
       0,     0,   124,   133,  2333,   393,   391,     0,  2264,  1484,
       0,   100,   737,   742,   738,  1362,     0,   631,  1091,  2212,
    2242,  2245,  2243,  2244,  2246,  2240,     0,     0,   983,     0,
     426,   427,     0,     0,     0,  1484,     0,     0,  1484,  1484,
    1484,  1484,   454,   462,   464,     0,   537,     0,     0,  1346,
    1348,  1342,  1402,   671,  1682,     0,  1253,     0,  1258,     0,
    1250,     0,     0,  1286,  1284,     0,   736,   548,   833,     0,
     713,     0,   712,     0,   707,   708,   703,     0,   683,     0,
     683,   654,   129,     0,   122,     0,     0,   253,   256,     0,
       0,   259,   249,   248,   250,     0,   243,   242,   242,   296,
     247,   293,   292,   285,  2268,     0,     0,     0,  2340,   190,
     982,   136,     0,   397,   396,     0,     0,   739,   748,   751,
    1496,  1504,     0,  1670,     0,   434,   433,   430,     0,     0,
       0,  1484,  1484,     0,     0,     0,     0,     0,   440,   463,
    1484,  1350,  1351,  1362,     0,   959,     0,  1690,     0,     0,
       0,  1302,     0,  1279,     0,     0,     0,   550,   549,     0,
     715,   716,   714,   700,   701,   597,   757,   599,   131,   269,
     280,   283,   275,   255,     0,     0,     0,   245,   242,     0,
     229,   227,   228,   234,   235,   236,   237,   238,   239,   230,
     233,   231,   232,   242,     0,   199,     0,     0,  2320,     0,
    2322,     0,   168,   167,   159,     0,   242,  2326,     0,  2334,
    2268,   743,   744,     0,     0,   670,   421,   428,     0,   450,
     452,   453,   447,     0,   443,   445,   446,   472,     0,     0,
    1397,  1395,  1396,   468,  1398,   469,   467,   465,   458,     0,
     456,     0,  1347,  1403,     0,     0,     0,     0,  1683,  1685,
       0,  1420,     0,  1255,  1260,  1281,  1280,  1295,     0,   819,
       0,     0,   242,   276,     0,   251,     0,     0,     0,     0,
     197,   299,     0,   195,   287,   287,  2323,  2324,   169,  2341,
       0,   138,   158,   398,  1503,  1505,  1671,   444,     0,  1946,
       0,   470,   471,     0,   455,     0,   466,     0,     0,     0,
       0,     0,  1684,     0,     0,  1691,  1693,     0,     0,     0,
     277,   283,   273,   281,   242,     0,     0,   241,   260,   295,
     198,     0,   297,     0,   242,     0,   286,   288,   290,     0,
     120,  2335,  1682,   451,   448,   449,   461,   460,   457,   982,
    1688,  1689,     0,  1686,     0,     0,  1692,     0,  1287,  1285,
       0,   274,     0,     0,   272,   252,   257,   242,     0,   242,
     210,   209,     0,   201,   223,   294,     0,   200,  2327,   242,
    1690,   459,     0,     0,  1406,  1408,  1687,  1695,  1694,     0,
     278,     0,   242,     0,   242,     0,   242,     0,     0,     0,
       0,     0,   196,   242,  2336,  1696,   983,  1404,   982,  1558,
       0,   270,   242,   258,   263,   300,     0,   204,   224,   225,
       0,   207,  2328,     0,  1698,  1409,  1407,   242,   242,   259,
     262,   298,     0,     0,   202,   216,   203,   214,   206,     0,
       0,     0,  1705,   242,   242,   264,   222,   220,   242,   211,
     218,   213,     0,   219,   226,   217,     0,   208,  1697,  1700,
       0,     0,  1702,  1703,     0,  1672,     0,   205,   221,   215,
    1704,  1699,     0,  1706,   212,  1701
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   550,  1333,    57,    58,    59,    60,    61,  1216,
      62,   750,  1158,  1619,  1620,    63,   496,    64,   946,  1392,
    1393,  1394,    65,  1923,  2763,  1410,   468,   469,  1794,  1795,
     969,  2747,  2721,  3430,  2725,  3533,  3654,  3572,  1867,  3033,
    3431,  3432,  3542,   491,  1921,  1347,  3678,  1774,  3774,  1775,
      66,   583,   944,  1373,  1374,  3046,  3047,  3269,  3048,  3261,
    3262,  3263,  3264,  3894,  3748,  3843,  3895,  3959,  3992,  3998,
    3999,  3932,  4008,  4009,  4010,  4016,  4011,  3933,  3994,  3749,
    3750,  3661,  3751,  3545,  3752,  3665,  3753,  3548,  3754,  3755,
    3756,  3757,  3886,  3758,  3660,  3925,  3745,  3746,  3927,  3974,
    3990,  3759,  3555,  3655,  3830,  3556,  3656,  3881,  3741,  3882,
    3920,  3970,  3742,  3831,  3923,  3834,  3760,  3766,  3896,  3761,
    3767,  3762,  3560,  3672,  3765,  3670,  3764,  3929,  3891,  2383,
    2746,   568,   569,   594,  1914,   570,   958,   918,  1349,  1807,
    1808,  2248,  2249,  2366,  2367,  2368,  1799,  1800,  1801,  1902,
    1903,  1904,  1781,  1782,  1783,  1353,  1778,  1779,   571,   919,
     929,  1802,  1803,  1804,  2372,  1906,  1907,  1908,  1909,  1805,
    1610,  1806,  2623,  2389,  2757,  3447,  3056,  3578,  3780,  2315,
    2316,  2296,    67,   507,   797,  1213,  2127,  1653,  1652,  1214,
    2522,  2523,  2524,  2114,  3328,  1655,  2126,  3477,  3696,  3478,
    3479,  2855,  3600,  2520,  2859,  2860,  3117,  3330,  3482,  3794,
    3795,  3796,  3788,  3789,  3790,  3708,  3809,  3810,  3863,  3906,
    3612,  3613,  3614,  2146,  2528,  3333,  3275,  1896,  1339,  1340,
     470,   471,   472,   591,  2390,  1854,  2391,  2392,  1856,  1857,
    2495,  1264,  2697,  2674,  3483,  2753,  2704,  2705,  2706,  2707,
    2644,  2645,  2259,  2260,  2321,  2715,  3016,  3199,  3214,  3017,
    3018,  3019,  3020,  3021,  3022,  3023,  2777,  2778,  3399,  3400,
    3401,  2773,  2774,  3245,  3229,  3230,  3231,  3414,  3073,  2567,
    2568,  3491,  2576,  2577,  2614,  2903,  2615,  1343,  3074,  3239,
    3289,  3232,  2714,  3193,  3392,  3522,  3393,  3394,  3395,  3644,
    2261,  2643,  2262,  2635,   874,   473,  1424,  1425,  3581,  3582,
    3583,  3584,  2396,  3276,  3277,  2632,  2831,  3526,    68,  1357,
     912,   921,   917,   935,   575,  1358,  1868,  2327,  3251,   558,
    1858,  3186,  2948,  3190,  1859,  2654,  1860,  2937,  3175,  1861,
    2963,  3188,  3387,  2655,  2656,  1862,  1863,  1864,  2947,  2956,
    3515,  2263,   123,  1616,  2711,  2303,    69,  1316,  1311,    70,
     885,   880,   881,  1314,  1315,  1740,  2193,    71,   816,    72,
     578,    73,   586,  1397,    74,  1224,  2138,  2139,  2140,    75,
     936,    76,    77,   587,  1404,  1405,  1406,    78,  1209,   130,
      79,   805,  1219,  1221,  1222,    80,   580,   581,  1366,    81,
    1647,  2105,  2106,   941,   942,  1372,  2854,    82,    83,   547,
     520,   822,   521,   522,  1680,  2158,  3484,   833,   834,   835,
    2552,  1241,  1242,  1243,  2163,  1681,  2557,  1012,   715,   716,
     717,   718,  1106,  1107,  3233,   719,  1116,  1576,   720,   721,
     722,   723,   724,   725,  1603,  2801,  2802,  3088,  2061,  2062,
    2063,   726,  1957,  2788,  1970,   727,  1099,  1561,  1493,  3080,
    2793,  1437,  1940,  2423,  2492,  2035,  1037,  1038,  1002,  1947,
    1443,  1747,  1748,  1749,  1750,  1751,  3163,  3162,  3164,  3497,
    3355,  3499,  3359,  2204,  1752,  1753,  2590,  2917,  2608,  2609,
    3370,  2195,  1754,  2596,  3633,  3367,  3368,  3726,  3725,  3369,
    3168,  3169,  2930,  2931,  2330,  2331,  2332,  3501,  1484,  1537,
    1485,  1491,  1193,  1194,  1438,  2102,  2507,  3340,  3488,  2052,
    3134,  3486,  3619,  1865,  2680,  2681,  2160,  2161,  2612,  2934,
    2961,  1267,  3485,  2509,  1714,  1715,  3062,  3997,  2624,  2343,
    3803,  2123,  2124,  3715,  3867,  3943,  3944,  3945,  2885,  2886,
    3138,  3139,  2162,  2549,  2887,  3341,  3624,    84,   475,    85,
    2067,  2079,   938,  1426,  1427,   738,   488,    86,   497,  2103,
      87,   514,  1668,   788,   809,  1227,  1228,  2147,  2529,  2536,
    2148,  2541,  3127,  2531,  2865,  2866,  2071,  2072,  2532,  2868,
    3124,  3109,  3110,  2850,  3324,    88,   535,  2928,  2603,  2604,
    3690,  3691,   810,    89,   474,   989,  1930,  1430,  1929,   990,
     991,  1432,   610,   611,    90,   532,  1292,  1293,  1294,  1730,
      91,   525,   875,  2580,  1709,   801,  1151,  1271,   878,  1272,
    1695,  2177,  1252,    92,   908,   907,    93,   554,  1335,    94,
     751,  1169,  1170,  1624,  2080,    95,   515,   814,   815,    96,
     509,   802,  1661,    97,   501,    98,    99,   791,  1202,  2851,
    3475,  3785,  3902,  1646,  1203,  3057,  3717,  3818,  3819,  3821,
    3875,  3876,  3984,  4002,  4021,  4022,  4025,   729,   895,   730,
    3382,   731,   732,  2537,  2538,  2935,   733,  3692,   734,  2322,
     888,   494,   450,   565,   896,  2512,   736,  3562,   915,   962,
     452,   453,   100,   836,   524,  1245,  1246,  1247,  1690,  1691,
     879,  2040,  1692,  1693,  2174,  2169,  3146,  2909,  2901,   101,
     794,  1171,  1207,  1208,  2111,   102,   534,   103,  1195,  1640,
    1641,  2099,  2506,  2100,   104,   818,   105,   775,  1634,   776,
    1173,   777,   778,  1185,  1180,  1188,  1182,  3465,  3316,  3317,
    2087,  1154,   963,   964,  1627,  2082,  2083,  3104,  3319,  3471,
    3472,   106,   134,   458,   589,   953,  1235,   107,   108,   109,
     110,  1238,  1328,  2154,  1329,  1330,  1331,  1761,  1678,  2469,
    1097,  1555,  2828,   598,   979,   971,   124,   125,   126,   601,
     602,   127,   933,   934,  2328,  2727,  3035,  3254,  3255,  3436,
    3567,   973,  3442,  3850,  3963,   974,   975,  2748,  3444,  3682,
    3852,  3939,   976,  2380,  3043,  3568,  3776,   111,   897,   544,
    1326,  1321,  1323,  1757,  2211,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3410
static const int yypact[] =
{
    4179,  2366,   130,  1414, -3410,  -141,   184, 39316,   530,  1414,
    1414,   381,  2650, -3410, -3410, -3410, -3410, -3410,  2631, -3410,
   39316,   130, -3410, 21869, -3410, -3410,   493,   415,   330,  1414,
     130, -3410, 39316, -3410,   529,  -131,   130, -3410, -3410,  1414,
   -3410,   381, 39316, -3410,   745, -3410,   -89,   -99,   545,   642,
     734, -3410, -3410, 39316,  1734,  -148,  1211,  1146, -3410, -3410,
    1052, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, 22435, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410,  1313, 39316,  1380, 39316, -3410,  1345,
   39316, 33696, 39316,  1044,  1424, -3410, -3410,  1517, -3410, -3410,
    1414, -3410, -3410, -3410,   381, -3410, -3410, 21869, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410,  1123, -3410, -3410,  1173, -3410, -3410, -3410,  1712,  1550,
   -3410,  1577, 33696, -3410, 39316, -3410, -3410, -3410,   943, -3410,
    1274, -3410,  1287,  1650,  1144, 10939,  1658,  1658,  1658, 39316,
    1682,  1658,  1658, 39316, -3410,  1658, -3410,  1658,  1414, -3410,
   -3410,  2885, 39316,  1544,   136,   -71, 33696,  1392, 39316, -3410,
   -3410, 10939, -3410,  1670, 21869, -3410,  1414,  1856,  1760,   904,
   39316, -3410, -3410,  1414,   182,  1356, -3410,  3333,   103, -3410,
   -3410, -3410,  1872, -3410, -3410,  5909, -3410, -3410, -3410,  1398,
   -3410, -3410, 21869, 39316,  1414,  1678, -3410, -3410,   142,   142,
     142, -3410,   142, -3410,   142, -3410,  -148,  1372, -3410, -3410,
    1379, 39316,  -115,   447, -3410, -3410,  1401,   774, -3410,  1462,
   30886, -3410, 39316, -3410, -3410, -3410, -3410,  1673, -3410, -3410,
   -3410,  1257, -3410, 21869, 39316,  1537, -3410, -3410, 21869, -3410,
     179, -3410, -3410,  1438, 39316, -3410, 21869, 21869,   857,    84,
    1017, 39316, 39316,  1853, -3410,  2023, 30886,  1624, -3410,   328,
    1327,  1517,  2025, -3410,  1550, -3410, 39316, -3410, -3410, -3410,
   35382,  1144,  1474,  1477,  1480, 14437, -3410,  1483,  1489,  1505,
   10939,  1510,  1520,  1523,  1532,  1536,  1562,  1566,  1568,  1572,
    1572,  1579,  1583,  1590,  1592,   878,  1594, -3410,  1608,  1614,
    1617, -3410, -3410,  1627,  1631,  1633, -3410,  1635,  1639,  1643,
   11522,  1651,  1655, -3410, 19035,  1669,  1672,  1681,  1685,  1688,
    1695,  1698,  1700,  1705, -3410, -3410, 10939,  1709, -3410, -3410,
    1721, -3410,  1731,  1738,  1742,  1761,  1769,  1774,  1777,  1785,
    1788,  1790,  1792,  1800,  1805,  1808,  1815,  1821, -3410,  1297,
    1828,  1836,  1347,  1845, -3410,  1869, -3410,   177,  1874,  1572,
    1572,  1572,  1887,  1894,  1898,  1911,  1915, 14437, 14437, 14437,
    8024, -3410, 39316, -3410, 39316,  1975,  3048, -3410,  2835, 14437,
     779, -3410, -3410, -3410, -3410, -3410, -3410, -3410,  1663,  1615,
   -3410, -3410, -3410, -3410, -3410,  1920,  1649,  1963, 39316, 39316,
   39316,  2066, 39316, 39316, 33696,  1941, 39316, 30886, 21869,  1658,
    1940,  2954,  2140,  2094,  1430, -3410, -3410, -3410, -3410, -3410,
    2188, -3410, -3410,  2053, -3410, -3410, -3410,   122, -3410,   135,
   -3410, -3410, -3410, -3410, -3410, -3410,  2209,  1969, -3410, -3410,
     106, -3410, -3410, 39316, -3410, -3410, -3410, -3410,  2353,  2104,
    1975,  1136,  2514,  2397, 21869, -3410,   134, -3410,   424, -3410,
   -3410,  2324, -3410, -3410, 30886, 21869, -3410, -3410, -3410, 19601,
   -3410, -3410,  2534, -3410,  2008, -3410, 21869,  2140, -3410,  2260,
    2173,    84,  2072, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410,  2029,  1872, -3410, -3410, -3410,  2459, -3410,
    2175,   656,  2103, -3410,  2050,  1028,   656, 31448,  2392,  1416,
   -3410,   125, -3410,  2470, -3410, -3410,  2171, -3410, -3410,  2176,
    2177,  2368,  2157, -3410, -3410,   298,  2351, -3410, -3410,   693,
   -3410,  -117,  2392,   656,  1416, -3410,  2394,  2509,   624,  -152,
   -3410,  1100, -3410, -3410,  2574, -3410, -3410, -3410, -3410, -3410,
   -3410,  2353, -3410, -3410, -3410,  2079, -3410,  2323,  2178, -3410,
   -3410,    53, -3410,  2085,   660,  2529, -3410,   651, 32010, -3410,
   -3410, -3410,  2561,  2577,  1572,  2090, -3410, -3410, -3410,  2672,
   -3410, -3410,  2102,  2585,  2585,  2585,  2680, -3410, -3410, -3410,
   -3410, -3410,  2255,  2133, -3410,  1537, 21869,   784, -3410, 35944,
   21869, -3410,  1470, 10939, -3410, -3410,  3566,    28,   932, -3410,
    2633,  2289, -3410, -3410, -3410, -3410,  2535, -3410, -3410,  2672,
    2593,  2585,  2501,  2126, -3410, -3410, -3410, -3410, -3410, -3410,
     210, -3410, -3410, -3410, -3410, -3410, -3410, -3410,  1582, -3410,
   -3410, -3410, -3410, -3410,  1537, -3410, 21869, -3410, 21869, -3410,
    2129, -3410,  2130, -3410, 10939, 10939,   297,  2654,  2709,  2709,
    2709,  1975,  2166, 10939, 10939, 10939, 10939, 10939, 10939, 10939,
     301,  2144, -3410, -3410,  8607, -3410,  2148, 10939, 10939,  2232,
   10939,  1615, 10939, 23001,   722,  3662, 10939,   872,  2607, 10939,
   10939, 10939,  8024,  2821, 10939, 10939, 23001,  2725,  2155, -3410,
    2151,   331, 10939, 10939,  1002, 10939, 10939, 10939, 10939, 10939,
   -3410,  8607, -3410, 10939, 10939, 10939, 10939, 14437, 10939, 10939,
   10939, 10939, 10939, 10939,  2709,  2709, 10939, 10939,  1348,  8607,
   -3410, 10939,  1615,  2419,  2419, 10939,  1615,  6858, 10939, -3410,
   -3410, -3410,  2162, -3410, -3410, -3410, 23001,  2709,  2709, 10939,
   10939,  2654,  2654,  2654, -3410,  8024,   187,  2163, 10939, 24133,
    2159, -3410, -3410, -3410, -3410, 10939, 10939, 10939, -3410, 14437,
   -3410, -3410,  1122, -3410, -3410, -3410, 12105, 14437, 14437,  2156,
   14437, 14437, 14437, 14437, 14437,  2503, 14437, 14437, 15020, 15603,
   14437, 14437, 14437, 14437,   951,  2654, 33696, 14437, 10939, -3410,
   -3410, 39316, -3410, -3410, -3410,  2164, 21869,  1941, -3410, -3410,
     -70,  2613, -3410, -3410,  2187,   120, 21869,  2172, -3410, -3410,
   -3410, -3410, -3410, -3410,  2714, -3410, -3410, -3410,  2197,  2189,
   -3410, -3410, -3410, -3410, -3410, -3410,  2281, -3410, -3410, -3410,
    2193, -3410,  2193, -3410, -3410,  2193, -3410, -3410,  2193,   790,
    3814, -3410, -3410, 39316, -3410, 39878, -3410, 19601,  -141, -3410,
    2495, -3410, -3410,  2523, -3410,  2497,   361,  2195, -3410, 21869,
   -3410, -3410, -3410,  2433,  1249, 33696, -3410, -3410,    99,  2215,
    2285,  2216, -3410,  2286, 21869, 21869, -3410, -3410, -3410, -3410,
    1356,   148,  2217,   795, -3410, 39316, -3410,  1382, -3410, -3410,
   -3410,  2219, -3410, 10939, -3410,  2221, -3410,  1018,  2556, -3410,
    -141, 10939, -3410, -3410,  2233,  1550, 39316, 39316, 39316, 21869,
   39316, 21869, -3410,   970,   970, -3410,   814, -3410, -3410, -3410,
   -3410,   656, 39316, 39316,   656, 30886, -3410, -3410, -3410,  2638,
    1416, 39316,   656, -3410,  2588,  2326, -3410, -3410, -3410,  2653,
   -3410, -3410,  2644,  2236, -3410, -3410, -3410,  1416, -3410, -3410,
   -3410, 21869, -3410, -3410,  1416, -3410, -3410,  1416,  1416,   656,
     656,  2284, -3410, -3410,  2238, -3410,  2284,  2372,  1153,   142,
    2464, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410,    94, -3410, -3410, -3410, -3410, -3410, -3410, -3410,   121,
   -3410, -3410, -3410,  1968,  2705, -3410, 33696,  1021,   789,   805,
    1021,  1178,  -141,   749, -3410,   749, -3410,  2461,  2492,   265,
   21869, -3410,  2248,  -141, 21869, -3410, -3410, -3410, -3410, -3410,
   -3410,  2251, -3410,  2253,  2254,  1975,  2689,  2706,  2711,  2716,
    2724,  2726,  2727,  2729,  2732,  2733,  2735,  2736,  2737,  2738,
    2751,  2755,  2273, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410,  2365, -3410, -3410, -3410, -3410,  2031, -3410, -3410, -3410,
     165,   232,  2340,  2367,  2863, 30886,  2734, 39316, 39316,  1550,
   39316, 39316, -3410, -3410,  1022,  2575,  2329, -3410,   751, 39316,
    2739, 26390,   139,   251,   897, -3410,  2709,  2333, -3410,  2335,
    2336,  2337, 10939,   138,  1085,   942,  -187,  1169,   962,   271,
     193, -3410,  2338,  2345, -3410,   991, -3410,   282,   325,   996,
    1007,  2343, -3410,  2349, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410,  2756, -3410,  1335, -3410, -3410, -3410,
   -3410,  2355, -3410, -3410,  1019,   336,   350,   244,  2370,   375,
    1342,  1467,  2359, 23001, 39316,  2709,  2361,  1035,  1043,  2709,
    2364,   380,  1056,  1527,  1546,  1548,  1093,  1097,  1104,   414,
    1552,   894,  1106,   418,   436,   560,   604,  1128,  2373,  2378,
     606,   249,  2709,  2382,  1139,   263, -3410,  2358, -3410,  2385,
    1145,  9190,  9773, 10356,   869,   628, -3410,  2387, -3410,  2151,
    2391,  2396,   284,  1189, -3410,  -148, -3410, 10939, -3410,   119,
     891, -3410,  2505, 39316,  2174,   151, -3410, -3410, -3410, -3410,
   -3410, -3410,   700, -3410,  2399, -3410,  2401,  2124,  2406,  8024,
     900,  2406,  2317,  1446,  1446, 14437,  2269,  2601, 11522,   927,
   11522,   927,  2406,  2406,  2406, -3410, 14437,  2405, 14437, 14437,
   -3410,  2654,  1975,  2409,  1174, 39316, -3410,   -70, -3410, -3410,
   -3410, -3410,   105, 30886, -3410, -3410, -3410,   120, 33696,  2404,
   -3410, -3410,  2600,  2954, 21869, -3410, 39316, -3410, -3410, -3410,
   -3410, 20167, 20167, -3410, 20167, -3410, -3410,   526,   663,  2846,
    2389, -3410, -3410, -3410, -3410, -3410,  2784, 21869, -3410,   -22,
   21869,  2248,  2415,  2415,  1982,  2513, -3410,  2417, -3410, 10939,
    -141, -3410, 30886, 30886, 21869, 21869,   161, -3410,  1497, -3410,
    -141,  2813, 20167, 20167, 20167, -3410, -3410, -3410, -3410, -3410,
     770, -3410,  1975, -3410,  2411, -3410, -3410, -3410, -3410, -3410,
   36506,   191, -3410, -3410,  -141,  2824, -3410,  1975,  2422, 39316,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410,  -100, -3410, -3410, -3410, -3410,
   -3410, -3410,  2558,   656, -3410, -3410, -3410, -3410, -3410,  2623,
    2392,  2351,   656,  1416, 21869,   656,   656, -3410, -3410,  1950,
   -3410,  1100, -3410, -3410, -3410, -3410, 39316,  1354,  2568, -3410,
    2429, -3410, -3410, 21869, -3410,  2431, -3410,  2850,  2977,  2392,
   -3410, -3410, -3410,   105,   105,  2712, -3410,  -141,  2560,  2563,
    2564,  2565,  2566,  2597, -3410, -3410,  -141,  -141, -3410, -3410,
     105, -3410,  1224, -3410, -3410, -3410, -3410,  -141,  -141,  -141,
    -141,  2065,  -141,  -141,  1657, -3410, -3410,   105,   105, -3410,
    1024, -3410, -3410, -3410, -3410, -3410, -3410, -3410,   237, -3410,
    2420,  2964,  2676,   105,   105,  2964,   105,  2678,  2681,   105,
     105,  2530,  2924,   105,  2817,  2557,  2380,  2820,   105, -3410,
    2567,  2930,   105,   105,   105,   105,  2964,  2695,  3009,   105,
   -3410,   105,  2697,  2703,   140,  2702,  2704,   105,   243, 39316,
     105,   105,   105, -3410, -3410,  4514, -3410, -3410, -3410, -3410,
   -3410, -3410,   654, 20735, -3410, -3410,   386, -3410,  2662, -3410,
   -3410, -3410, -3410, -3410, 37068, -3410, 10939,  2065,  -141,  -141,
     690,  -141,  2065,  -141,  -141,  -141,  -141,  -141,  2065,  2065,
    -141,  -141,  2065,  3566, -3410, -3410, -3410,   207,   105,   105,
     105,   105, -3410,   855, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, 33696,  2810,  1981,   758, -3410, 39316, -3410,  1656,
   39316,  2491,  -144,  4543,   368,   368, -3410, 21869, 21869,  2531,
    2389, -3410,  1153, -3410,  2484, -3410, 12688, -3410,  2494, -3410,
   10939, -3410, -3410, -3410,  1060, 10939, 10939,  2936,  1690, -3410,
   32572, -3410, -3410, -3410, 10939, 32572,  1690, 10939, -3410,  2496,
   -3410,  2860,  2862, -3410, -3410, -3410, -3410, 10939, -3410, 10939,
   10939, -3410, 10939, 10939, 10939, 10939, 10939, -3410, -3410, 14437,
   -3410,  2498,  2504, -3410, -3410, -3410,  2508, -3410, 10939, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, 10939, -3410, 10939, -3410,
   10939, 10939, 10939, 10939, -3410, -3410, -3410, 13271, 10939, 10939,
    2511, -3410, -3410, -3410, 10939, 10939, 10939, -3410, 10939,  1048,
   10939,  1147, 10939,  1902, 10939, -3410, 10939, -3410, -3410, -3410,
   -3410, 10939, -3410, -3410, -3410,  1662, -3410,  2507,  2515,  2516,
   33696, 10939, -3410, -3410, -3410, -3410, -3410,   722, 14437,   295,
    2518, 14437, -3410,  2317,  2821,  2821,  2213,  8024,   900,  2317,
   10939,  2521,  2502, -3410, 10939, 39316, -3410, -3410, -3410, -3410,
   -3410, -3410, 33696, -3410, -3410, -3410,  2172,  2841, -3410,  2248,
   -3410, -3410,  1675, -3410,  2517, -3410,  2519,  2598,  2602,  2605,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410,  2392,  1497,  2619,  2540, -3410, -3410,  2562,  2872,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410,  3078,  2549,  2415, 39316,  1975,
   -3410,  2620, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
     430, -3410, -3410,  2552,  2552, 17901, -3410, -3410, -3410, -3410,
    2790,  2959,  2960,  2961,   651, -3410,   287, -3410,   145,  2919,
    2392, -3410,  2967, 34258, 26952, -3410,  2559,  2921,  2571,   105,
   29200,  1095, 24698, 29762, -3410, -3410,   690, -3410,    14, -3410,
     814,   814,  2589, -3410,  2822, -3410, -3410, -3410,  2389,  1416,
   -3410, -3410, -3410,  2570, -3410, -3410,   876,  2923,  2932, -3410,
    2800,  1253,  2800,   876,   876, 23001,  1153,  2763, -3410,  2065,
    2867, -3410, -3410, -3410, 33134, 30324, -3410, -3410, -3410, -3410,
    3066, -3410,  3072,   775, -3410, -3410,  1878,   805, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410,  1178,  1878,  1878,   749, -3410,   132, -3410,
   -3410, -3410, -3410, -3410, 23567,  1470,   130,  1470, -3410,   214,
     598, 23567, -3410, -3410, 23567,   130,   690,  2065, 23567,  2065,
   37630,   130,  -141,  -141,  2214,   105,  2065, -3410, -3410,  2940,
   39316,  2950, 23567, 23567, -3410, 33696, -3410,   105,  1323,  2065,
     690,   690, 23567,   130, 23001,  1578,  1856,  -141,   130, -3410,
   -3410, -3410, -3410, 21869,   130,   130,  2467, -3410, -3410, -3410,
    2065, 33696,  2606, -3410,  5324, -3410, -3410, -3410, 17335, 39316,
     322,   422, -3410,  2599,  1413,   849,  2682,  1054,  2608, -3410,
    2609, -3410,  2611, -3410,  1975, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410,  -141,  1982,  1878,
    1878,   232, -3410,  2849,  3010,   105, -3410,  1280, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410,  2699, -3410,  2780,
    2624, -3410, -3410,   141, -3410, -3410,   744, 21869, 16769, -3410,
    2839, -3410,  3580, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410,  1153,  2854,  2389,  2630,   139, 11522,  1204, -3410,  1975,
   10939,  1975,  1368, -3410,  2626,  2626, -3410, -3410,  2629,  2626,
    2989, -3410,  2991,  2632, -3410,  2635, -3410,  1246,  2636,  2639,
    1663, -3410, 10939, 10939,  1256,  1263,   -69,   710,   739,   306,
   -3410,  1269,  3344, -3410, -3410,  1373,  1400,  1415,  1464,   763,
    1469,  1718, 11522,  1508,   853,   313, -3410,  1530,   804,   812,
    1534, 10939,  1538, 10939,  1554, 10939,  1564,  1580,  1645, -3410,
   -3410, -3410, -3410, -3410, -3410,  2634,  1975,  2640, -3410, -3410,
   10939, -3410,   779, -3410, -3410, 14437,   317,  2642, -3410,  1975,
   -3410, -3410,  2643,  1663, -3410, -3410, -3410, -3410, -3410, -3410,
   39316,  2651, 27514, 30886, 30886, 30886,  2645, 10939, -3410, -3410,
    2877, -3410, -3410, 21869,  3013, -3410, -3410, 14437,  2980,  2869,
   -3410, -3410,  2649,  2652, -3410, -3410, 30886, -3410,  1872, 23001,
   -3410,  2656, -3410,  2656,  1396,  2655,  1727, -3410, -3410, -3410,
    2657,  2072,  3063, 30886, 30886, 30886, -3410,  2389,  2389,   150,
    2707,  3019, -3410, -3410, -3410, -3410, 38192, -3410, -3410, -3410,
   -3410,  1236, 39316,  3001, 39316,  7441, -3410, -3410,  3179, 10939,
   30886,  1195,   891,   105, -3410, -3410, -3410, -3410, -3410, -3410,
    2392, -3410, -3410, -3410, -3410,  2981, -3410, -3410,   656,  1950,
     411, -3410,  1736, -3410, -3410, -3410,  3022,   876,  2800,  2800,
    3023,  2912,  1033,  2673, -3410,   105, -3410, -3410, -3410,  1872,
   -3410, -3410, 10939, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
     237, -3410, -3410, -3410, -3410, -3410, -3410, -3410, 10939,  3021,
    3024,  1470, -3410, 23567, -3410, -3410, -3410,   108, 37630, -3410,
   -3410, -3410, -3410, -3410, -3410,  2674, -3410, -3410,  1982, -3410,
   -3410, 30324,  -141, -3410, 23567,  2674, -3410, -3410,   143, -3410,
    -141, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, 37630,
    2683, -3410,   315, -3410, -3410, -3410, -3410, 37630, -3410, -3410,
   37630, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   21869,  2062,  1089, -3410,  1745, -3410, -3410, -3410, -3410, 39316,
   -3410, -3410, 21869, -3410, -3410,  5289, 39316,  2887, -3410, 10939,
   10939,  2926, 39316,  2927, -3410,  3189, 39316,  3249, -3410, 37068,
   -3410, -3410, -3410, -3410, -3410,  2690, 39316,  1878,  1981, -3410,
   -3410,   744, -3410, -3410, -3410, -3410,  2934,  2935, 39316, -3410,
   -3410, -3410, -3410,  2828, -3410, 21869,  3226, -3410,  2843,  1748,
     166,  4194, -3410,  2708,  2389,  3031, -3410, -3410,  2821, -3410,
    1975, 10939,  1186, -3410, -3410,   268,  1459, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,  2715,  2821,
    2821, -3410, -3410,  2853, -3410, 10939, 10939, -3410, 10939, -3410,
     213,  2718,  2722, -3410, -3410, -3410, -3410, 10939, -3410, -3410,
    2821, -3410, 10939, -3410, -3410, 10939, -3410, 10939, 10939, -3410,
    1660, -3410,  1665, -3410,  1725, -3410, -3410, -3410, -3410,  2720,
   39316, -3410, -3410,  1778, -3410, -3410, 10939, -3410, 34258, -3410,
   -3410, -3410, -3410, -3410,   481,   481,   481, 13854,  1975,  3151,
   -3410,    88, -3410,  3051, -3410, -3410,  2317,  1357, -3410,  1810,
   -3410, -3410, 39316, -3410,  2029,  2713, -3410,   105, 13854,  2552,
    2843, -3410, -3410,  1396, 23001, 26952, -3410, 30886,  2126,  2126,
    2126,  2392,  3115,  2619,  2619, -3410, 25263, -3410, -3410,  2861,
   -3410, -3410, 28076, -3410,  1423, -3410, -3410, 14437,  1608, -3410,
    1975, -3410, 33134, -3410,  1975,   105,  2728,  2730, -3410, -3410,
   38754, 10939, -3410,  3160, -3410, -3410,  2740,  1153, -3410,   876,
   -3410,  3077,  3079,   876, -3410, -3410, -3410, 23001,  2389, 13854,
   -3410,   235,  2029,  1975,  2743,   315, -3410,   -64,  1975, 23567,
   -3410, -3410, -3410,  2731,  3201,  3202, -3410, 23567,  2031, 39316,
   -3410,  3179, -3410, -3410, -3410, -3410,  5289, -3410, 23001, -3410,
   -3410, -3410, -3410, 39316, -3410,  2745, -3410, 17335, -3410, -3410,
   -3410,  2626,  2626,  2626, -3410, -3410, -3410, -3410, -3410,  2629,
    2949, -3410,  2629,  2629, -3410, -3410, -3410, -3410, -3410,   268,
     311, -3410, -3410,   268, -3410, -3410, -3410,   111,  1426,  2629,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410,  2626,  2626, -3410,
   -3410, -3410,   268,  2626, -3410,  2626,  2302, -3410,   388,    89,
    2626,  2626,  2626,  2747,  2741, -3410,  1975,  2821,  3244, -3410,
   -3410,  2871,  -141,  3203, -3410,  1825, -3410, -3410,  1178, -3410,
   -3410, -3410,  2880,   848, -3410,  2906,  2754,  2757, -3410, -3410,
    -141,  2759,  2760,  4514, -3410, -3410, -3410,  3319, -3410, 39316,
   -3410,   814, -3410,  1306,  1975,  2761,  2762,  2769,  2770,  3318,
     171, -3410,  3318, 32572, -3410,  1830, -3410,  2772,  2773,   142,
    2774,  1750,   831,  1839,  3056,  3125, -3410,  2979, -3410,  1765,
    1339,  1772,  1817,  1823,  1838, -3410, -3410, -3410, -3410, -3410,
   -3410,  1847, -3410,   157,  2801,  2801,  2801,  1608,  1975,  1855,
   -3410, -3410,  3143, -3410,  2783,  2785,  2792, 39316, -3410,  2869,
   -3410,  2219, 23001, 13854,  2789,  2791, -3410,   660, -3410, -3410,
    2786,  2126, -3410,  3329,  3185, -3410, -3410, 33696,  2797, -3410,
   -3410,  3080, -3410,   115,  2993, -3410, -3410, -3410,  1195,  2882,
    2888,   105,  1975,  -141,  1841,  2429,  2146,  2844,   876,   876,
    2272,  2851, 10939, 10939,  2812, -3410,  2854, -3410, -3410,   266,
    2219, 10939, -3410,  1982,  2869, -3410,  2814,  2815, 39316, -3410,
    3557,   322, -3410, -3410, -3410,  2302,   130, -3410, -3410,  2674,
     430, -3410, -3410,   696, -3410, -3410, -3410,  1064, -3410,  2816,
    1064,  1064, -3410,  2175, -3410,  2845,   268, -3410, -3410,  2848,
   -3410, -3410, -3410,  1064,  2818,   268, -3410, -3410, -3410,  1064,
   -3410, 33696,  -141,  3098, -3410,  2865, -3410,  3289,  3172, -3410,
    2302, -3410,  3182,  3085, -3410,   268, -3410, -3410,  3318, -3410,
     268,  3318,  1064,  3086, -3410,  1064, 39316, -3410, -3410, -3410,
   -3410, -3410, -3410, 39316, -3410,   933,  1861,  -141, -3410, -3410,
   -3410,  2836,  2837, -3410, -3410, -3410,   849, -3410, 39316,  5289,
   -3410, -3410, -3410,  2839, -3410,   960,  1865,   315,  2840, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, 32572, -3410,
   -3410,  3318,  3092, -3410, -3410, -3410, -3410, -3410, 10939, -3410,
   -3410,  3123,  3271, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
    2933,  2938, -3410, -3410,  2941, -3410, -3410,    86,  1664, -3410,
   -3410, -3410, -3410, 13854,  3198, -3410, -3410, -3410, -3410, 39316,
    2895, -3410, -3410,  1343, -3410, -3410, -3410, -3410, 10939, -3410,
    2854,  2214, -3410, 25263, -3410, -3410, -3410, -3410, -3410,  2852,
    2866,  7441,  3417, -3410, -3410,  2902, -3410, -3410, -3410,  2907,
    1975,  1975, 39316,  3031, -3410, -3410,  1470,  1470, -3410,   266,
    1343,   315, -3410,  1871, 39316, 39316,  1875,   -45,   -45,   -45,
     979,   979, -3410, -3410, -3410, -3410, -3410,  3238, -3410,  1069,
     229, 39316, -3410, -3410,    67, -3410, -3410, -3410, -3410, -3410,
    1064, -3410,   142, -3410, -3410, -3410, -3410, -3410,   142, -3410,
   -3410, -3410, -3410,  1572, -3410, -3410,  3132,  2913, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410,  2879, -3410, -3410,
    2996, -3410, 44936, -3410, -3410,  -148,  2903, -3410, -3410, -3410,
    1298, 39316, 21869,  2926,  3053, -3410, -3410,   660,   166,  2843,
   -3410,   815, 39316, -3410,  3140, -3410, -3410,  2892,  1850, -3410,
   -3410, -3410, -3410, -3410, -3410,   341,  3133,  2065,  2065,  2065,
    2065,  1664, -3410, -3410,  2939,  2987, 14437,  3004,  1882, -3410,
   -3410,  1502,  2154, -3410,   145, -3410,  1114,   315, 10939,  2392,
   30324, -3410, -3410, -3410, -3410, -3410,  3220, 10939,  2909, 10939,
    2942,  1884, -3410, -3410,  3339,  3339, -3410, -3410, -3410, -3410,
    1889,  1891,   815, -3410, -3410,   322,  2944, -3410, -3410, -3410,
    1207,  1207,  1927, -3410, -3410, -3410,  1943, -3410,  1947, -3410,
    1572, -3410, 10939,  3351,  2955, 39316,   777, -3410, 46060, 46060,
   39316, -3410, -3410, -3410, -3410,  4776, -3410, -3410,   674, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
    3485, -3410,  2931, -3410, -3410,  2946,  1367, -3410, -3410, -3410,
    5289,  3348,  1054, -3410, -3410, -3410, -3410,  2947,  2072,   105,
    3175, -3410,   815, -3410, -3410,   315,  2951, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, 23001, 21869, -3410,  1982,
   -3410, -3410, 39316,  2953,  3034,   105,  3414,  3418,   105,   105,
     105,   105,  2968,  2154, -3410,  3395, -3410,   110, 10939, -3410,
   -3410,  1975,  3166, -3410,  3475,  3401,  1975, 39316,  1975, 39316,
   -3410, 39316,  1133, -3410, -3410,  3155,   815, -3410, -3410,  2869,
   -3410,  3545, -3410,   822, -3410, -3410,    67, 39316,   268,   142,
     268, -3410,  1975, 10939, -3410, 10939,  2994, -3410, -3410,  3380,
   39316, -3410, -3410, -3410, -3410, 10939, -3410, 44936, 44936, -3410,
   -3410, -3410, -3410,  3528,   660,  3499,  3218,  3501,  2972, -3410,
   -3410,  3189,  5289, -3410, -3410,  2065,  1770, -3410, -3410, -3410,
    3000, -3410,   105, -3410,  2982, -3410,  3004, -3410, 14437,   561,
    -141,   105,   105,  1708,  1708,  1982, 33696,  3090, -3410, -3410,
     105, -3410, -3410,   315, 39316, -3410,   899,  3335,   690,  1952,
    1967, -3410,  3537, -3410,  3540,  3012,  3014, -3410, -3410,  1980,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,  1975,  1975,
   -3410,   189, -3410, -3410,  3369,  3459, 10939,  1975, 42126,  3016,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, 45498, 10939, -3410,   674,  3485, -3410,  3257,
   -3410,  3260, -3410, -3410, -3410,  3484, 44936, -3410,  3479, -3410,
     660, -3410, -3410, 23001, 13854,  2214, -3410, -3410,  1997, -3410,
   -3410,  2317, -3410, 16186, -3410, -3410, -3410, -3410,  -141,  -141,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,  2014,
   -3410, 33696, -3410, -3410,  3562,  3563,  3472,  3565,   899, -3410,
     902, -3410,  3596, -3410, -3410, -3410, -3410, 37068, 37068, -3410,
    3057, 10939, 44936, -3410,  3476, -3410,  3412,  1922,  3356,  3038,
   -3410,  3037,  1945,  3508, 46060, 46060, -3410, -3410, -3410, -3410,
    3492, -3410, -3410, -3410, -3410, -3410, -3410, -3410, 14437,  3047,
    3049, -3410, -3410, 33696, -3410,  3090, -3410,  3052,   142,   142,
    3582,   142, -3410,  3584,  3586,   902, -3410,  3363,  3054,  2026,
   -3410,   225, -3410,  1975, 42688,  3583, 39316, -3410, -3410, -3410,
   -3410, 10939, -3410, 34820, 43250,  3058, -3410, -3410, -3410,  3212,
   -3410,  2972,  3475, -3410, -3410, -3410,  2154, -3410, -3410,  3061,
   -3410, -3410,   142, -3410,   142,   142, -3410,  3497, -3410, -3410,
   10939, -3410,  3505,  3144, -3410,  3067, -3410, 44936,  1939, 44936,
   -3410, -3410,  3458,  3070,  1737, -3410,  3071, -3410, -3410, 44936,
    3335, -3410, 10939,  3075,  3076, -3410, -3410, -3410, -3410,  2065,
    1975,  3600, 44936, 39316, 40440,  3254, 43812,  3489, 39316,  5289,
    3490,  3491, -3410, 44936, -3410,  3462,  1975, -3410, -3410, -3410,
    3163, -3410, 41002, -3410,  2179, -3410,  3109, -3410, -3410,  3560,
    2034, -3410, -3410,  3338,  3094, -3410, -3410, 44936, 44936, -3410,
   -3410, -3410, 28638, 10939, -3410,  3128, -3410, -3410, -3410,   651,
    3429, 18467,  3240, 41564, 44374, -3410, -3410, -3410, 25828, -3410,
   -3410, -3410,  3504, -3410,  1975, -3410,  1615, -3410, -3410, -3410,
   33696,  2035, -3410, -3410, 23001, -3410, 28638, -3410, -3410, -3410,
   -3410, -3410, 21301,  3000, -3410, -3410
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3410, -3410, -3410, -3410, -3410,   137, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410,  1604, -3410, -3410, -3410, -3410, -3410,
    1791, -1651, -3410, -3410, -3410, -3410, -3410, -3410,   643,  1440,
    3087, -3410,   419, -3410,   114, -3410, -3410, -3410, -2621,     7,
    -162, -3410, -3410,   369,    42,  2775,  -161, -3409, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410,   429,   426, -3410,
   -3410,   257, -3410, -3410, -1221, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410,  -326,  -279, -3410, -3410, -3410, -3410,  -219,
     272, -3410,   273, -3410,   274, -3410,   278, -3410,   279,   280,
     283,   286, -3410,   289, -3410, -3410,  -286, -3410, -3410, -3410,
   -3410,   290, -3410, -3410, -3410, -3410, -3410, -3410, -3410,  -167,
   -3410, -3410,   -25, -3410, -3410,  -156,   294, -3410,  -126,   296,
   -3410,   299, -3410,   -38, -3410,   -36, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,  2777, -3410,
   -3410, -3410, -2028, -3410, -3410, -1990,  2377, -3410, -1608, -3410,
   -3410, -1716, -3410, -3410, -1543,  1032, -3410, -3410,  1294,  -288,
   -3410, -1262, -1735, -1734, -3410, -3410, -3410, -1819, -1818,  -722,
    2127, -1103, -2023, -3410, -3410, -3410,   291, -3410, -3410, -2313,
    2381, -3410, -3410, -3410,  1444, -3410, -3410, -3410, -3410,  1227,
   -3410, -3410,   880, -1493, -3410, -3410, -3410, -3410, -3410, -3410,
     144,   275,    51, -3410, -2991,   629, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410,  -106,   -44, -3410, -3410,  -110, -3410, -3410,
    -150, -3410,   147, -2104, -3410, -3410, -3410, -3410,  2347, -1232,
   -3410,  3286, -3410,  -510,   708,  1907, -1977, -1296,  -845,  -828,
   -2245, -3410, -3410, -3410,   393,  1029,  1383,   806,  1909, -1739,
    1453,  1516, -3410, -3410,   832, -3410, -2893, -3410, -3410, -3410,
     791, -3410,   792, -3410, -3410, -3410, -1050,   757,  -632, -3410,
     383, -2309, -2292, -3410,   605, -3410,   562, -3410,  -517, -1907,
   -2173,     6, -3410, -3410,   572,   843,   893, -3410, -2817, -1420,
   -3410, -3410,   162, -3410, -3410, -3410,   152, -3410,   405,   281,
   -3410, -3410,  -927, -1945, -3410, -3410, -3410, -2392, -3209, -3410,
    2376,   219,  1880, -2925,   354, -2136, -3410,   401, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410,  1948,  -633, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -2191,   863, -3410, -3410,  1499, -3410, -3410,
   -3410, -1710,   668, -1572, -2983, -3410, -3410, -3410, -3410, -3410,
   -3410,  1555, -3410, -3410,  2073,  2499, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410,   627,  1679, -3410, -3410,
   -3410, -3410, -3410, -3410,   874,  2418, -3410, -3410, -3410,    -3,
   -3410, -3410, -3410, -3410,  2161, -3410, -3410,  2883, -3410, -3410,
   -3410, -3410,  1315,  1719, -3410, -3410, -3410,  -903,  1693,  -536,
   -1528, -3410,  3284, -3410, -3410, -3410, -1506, -1332, -3410,  3002,
     360, -1223,  2169,  -594, -2451, -3410,  1011,  -609,  3093, -3410,
   -1065,  -985, -3410, -3410,  -589, -3410, -3410, -3410,  -556, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
    1359, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410,  1344, -3410,  1895, -3410,  -443, -3410,  2819, -3410, -3410,
   -3410, -2084, -1719,  1646,   936, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -2118, -3410, -3410, -3410, -3410, -3410,
   -3410, -1623, -3410, -1725,   349, -3410,   488, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410,    31,  1135,    37, -1619, -1016,  2793,
    1277, -3410, -3410, -1176,  2856, -1861, -3410, -3410, -3410,  1811,
   -3410, -3410, -3410, -3410, -3410,   913, -2332, -1279, -3410, -3410,
   -2836,  -838, -2063,  -812, -3410, -2098,   510, -1771, -1630, -2126,
     170, -1245, -3410, -3410, -3410, -3410, -3410,   -93, -3410, -3410,
   -3410,   533,  1722, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410,  -342,  -434, -3410,  1949,  2181, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410,  2685,  2658,  1775, -3410, -3410,
   -2299, -3410, -3410,  1740, -3410,   768, -2115, -1609,  1016, -3410,
   -3410,  1023, -2848, -3410, -3410, -3410, -3410, -3410, -3410,   965,
    -130,   112,  3358, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
    2468,  1962,  3287, -3410, -3410, -3410, -3410, -3410,  2168, -3410,
   -3410, -3410, -3410, -3410,  2637,  3375,  -523, -1204, -3410,  -611,
   -3410, -3410,  -809, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410,  2280, -3410,  1205, -3410, -3410, -3410,  2677, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410,  1053,     4, -3410,    90,   -31,
   -3410,    35, -3410, -3410, -3410,  -120, -3410,  -624,  -899, -1237,
     699, -1576,  -763,  1039,  2684, -2919,  -575, -1055, -1067, -2086,
      57, -3410,  2447,     9,  -726,  -259,    -7, -2213,  -109,  -532,
   -3410, -1804, -3410, -3410, -3410, -3410,  2239, -3410, -3410, -3410,
   -3410,  1351, -3410, -3410, -3410,  1015, -3410,   778,   577, -3410,
   -3410,  2475, -3410,  2279, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410, -3410,  2698,  3416,
    3117, -3410,  2746, -3410, -3410, -3410, -3410, -3410,   470, -3410,
     547, -3410, -2035,  2522,   662, -3410,  1439,  -211,  -466, -3410,
     467, -3410, -3410,   983,  3423,  3121, -3410, -3410, -3410, -3410,
   -3410, -2484,  -815, -3410, -2537, -3410, -3410, -3410, -3410,  1910,
    -962,  2855,  1475, -3410, -3410, -3410,    54,  3480,  3482, -3410,
   -3410,  -188, -3410,  -383, -3410, -3410, -3410, -3410, -3410, -3410,
   -3410,  3347, -3410, -3410, -3410, -3410,  3352, -3410, -3410, -3410,
   -3410, -3410,  3353, -3410, -3410, -3410, -3410, -3410,  1834, -3410,
   -3410, -3410, -3410, -3410, -3410, -3410, -3410
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2309
static const yytype_int16 yytable[] =
{
     451,   956,   877,  1139,  1334,   970,   978,  1239,   873,  1336,
     903,  1021,   567,   489,   136,  1371,   495,  1498,   490,  1548,
    2239,  1013,  1015,  1150,  2122,   508,  2033,   506,   916,  1716,
    1649,  1547,   728,   513,  1299,   519,  1268,  1262,  2838,  2508,
    2669,  2535,  2617,  2425,  1567,  2074,   536,  1611,  2428,   449,
    2579,  1575,  1759,  2916,  2565,  2569,  2571,  2876,  1052,   997,
    1268,  1855,  1463,  3185,  1300,  1072,  2699,  1341,  1076,  2402,
    2765,  2258,  1521,  2251,  2252,  2758,  1723,  2760,  1070,  1039,
     493,  3167,  2583,  2584,  1342,  2601,   556,  1784,  2192,  2665,
    1083,  1084,  1085,  1732,   986,  2373,  2374,  2554,   887,  3172,
    3029,  2264,  3464,  1735,  1736,  2268,  2335,  1762,   559,  2779,
     451,  2345,  2592,   451,   566,   572,  2283,  2351,  2352,   588,
    2602,  2355,  3237,  2775,  1191,  2646,  2292,  2780,  1659,  1134,
     556,  2208,  1577,  1578,  1101,  1102,  1581,  1582,  1583,  1584,
    2649,  1586,  1587,  1589,  1591,  1592,  1593,  1594,  1595,  1905,
     555,  1091,  1092,  1093,  2214,  2215,  1797,  1191,  2300,   561,
    2115,  2581,   563,  1135,  2676,  2677,  1101,  1102,  2633,  3209,
    1614,  2226,  3202,  3207,  2159,  2633,  3208,   892,  2647,  2370,
    2371,   576,  2651,  3373,  1183,  1395,  3345,  2362,  2244,  2245,
    1273,  3286,  2247,  1614,   582,  3217,  2667,  2668,  3384,   781,
    3711,  3236,  1101,  1102,  2266,  2267,  2678,  2269,  1101,  1102,
    2272,  2273,  1079,  2403,  2276,  1153,   972,   980,  3310,  2285,
    2631,  2627,  2628,  2288,  2289,  2290,  2291, -2213,   839,   840,
    2295,  1186,  2297,  1338,  2180,  2871,   937,  2944,  2306,  2228,
    2108,  2310,  2311,  2312,   947,   948,  1786, -1333,   839,   840,
    2069,  1192,  3371,  3376,  2943,  3084,  1935,  2743,  1608,  1101,
    1102,  1797,  -761,  1301,  1101,  1102,  1101,  1102, -1751,  3773,
     664,  2386,  1220,  1945,  2638,  3335,  1758,  1338,  1101,  1102,
     603,  2883,  1324,   545,  1192,  2301,  1101,  1102,  3069,  2357,
    2358,  2359,  2360,  3054,  3173,  1139,   807,  1101,  1102,  1101,
    1102,  3070,  1898,  3637,   959,  1345,  -478,  -394,  1911,  1435,
    1101,  1102,  2637,  1435, -1333,  3071, -1625,  2550,  2135,  1338,
    1309,  1101,  1102,  1670,  3832,   839,   840,  2587,  1101,  1102,
    2709,  3069,  1101,  1102,  2959,   893,  2732,  2733,   966,  1266,
    1101,  1102,  1780,  1435,  3070,  3520,  1139,  3389,  -479,   528,
    1139,  1101,  1102,   593,  1950,  1297,  2744,   135,  3071,   131,
    3832,  1419,   132,  1281,  2109,  1101,  1102,  2307,   839,  3203,
    1080,  3054,  1416,  1417,  1418,  1226,  3446,  2739,  1869,  1191,
    1210,   128,   526,  1211,  3311,  2639,   527,   784,  1420,  3405,
    1101,  1102,   137,  1951,  1138,  1101,  1102,  1310,  3409,  2551,
    1298,   939,  3310,  3390,  3114, -1291,  1155,   511,  3069,   517,
    1396,   951,   529,  2393,   985,  2762,  1798,  2547,  3422,  3487,
    1755,  3070,  1436,  3424,  2008,  1607,  1451,  3728,   502,  1101,
    1102,   546,  2960,  1101,  1102,  3071,  3364,  2548,  2610,  1758,
   -1291,  3453,  1780,   584,   808,   839,   840,  1780,  1461,  3510,
    3511,  1101,  1102,   688,  1147,   566,  1505,   572,  2911,   129,
    2324,  1039,  1717,  1103, -1625,  1720,  1104,  1325,  2844,  2845,
    2846,  3365,   741,  1725,  1231,  3473,   572,  2600,  1019,  2920,
    3312,  2181,  2638,   952,  1609,   779,  1870,  2710,  2951,   566,
    2929,   789,  3773,   499,  1341,  3055,  2650,   556,  2652,  2884,
    1737,  1738,  2170,   803,  1611,  2663,  1192,  2942,  2878,  2879,
    2880,  1342,  1138,  2251,  2252,  3174,   783,  1212,  2675,  1760,
    1784,  1798,   782,  1572,  2684,   556,   889,  3085,  2953,  2188,
    3712,  1103,  3638,  1615,  1104,  3508,  2308,  1103,   503,  2698,
    1104,  2110,  2766,  2136,   906,  2070,  2250,  2945,  2373,  2374,
    3177,  2171,  1361,   566,  1899,   920,  1615,  2633,  2394,  1855,
    1608,   793,  1446,  1447,  1580,  1341,   556,   451,  3311,  2582,
    1184,   556,  2591,  3055,  3128,  1101,  1102,   945,  2633,   556,
     556,  1601,  1342,  1486,   957,   920,  2640,  2135,  1103,   566,
    3337,  1104,  1500,  1103,  1362,  1103,  1104,  1274,  1104,   987,
    2053,  1422,  2936,   992,  1513,  1514,  1515,  1103,  1660,  1364,
    1104,  2056,   820,  1520,  2059,  1103,   931,  2050,  1104,  1101,
    1102,  1101,  1102, -1333,  1900,  3313,  1103,  1785,  1103,  1104,
     930,  1104,  2370,  2371,  2521,  1149,  3346,  3314,  2629,  1103,
     894,  1905,  1104,  1101,  1102,  2734, -2213,  1040,  3729,  2302,
    1103,  3620,  2369,  1104,  3052,   984,  2555,  1103,  2638,  3210,
    1104,  1103,  3194,  3195,  1104,  1762,  2662, -2147,  2772,  1103,
    2779, -2213,  1104,  2779,  2779,  1081,  2745,  3679,  2670,  1786,
    1103,  3196,  2764,  1104,  2625,  1105,  2881,  2882,  1187,  1910,
    2779, -1333,  1304,  1734,  1103,  1946,  2941,  1104,  3287,  3713,
    2137,  1364,   967,  2036,  3218,  1098,  -761,  1100,   870,  3235,
    3238,  3240,  3241,  2630,  3040,  3215,  3216,  1105,  1744,  1103,
   -1333,  3315,  1104,  3219,  1103,  1101,  1102,  1104,  2731,  1364,
    3242,  1143,   451,  1145,  1955,   920,   451,   566,  1265,   451,
     566,   556,  1364,  1721,  2641,  1699,  3740, -1333,  3041,  3688,
    -478,  -394,  3123,  1105,  1101,  1102,  2737,  1901,  1103,  1105,
     940,  1104,  1103,  1226,  3521,  1104,  2535,  1556,  1557,  -557,
    1282, -2147,  3189,  1797,  1956, -1291,  1196,  2172,  1101,  1102,
    1103,  1144,  3880,  1104,  3058,  1148,  1609,   556,  1152,  3779,
    3148,  1226,  -479,  2395,   932,  3072,   500,   566,   556,  2338,
    1911,  3157,   556,  3176, -2148,  3161,  3366,  1217,   454,   556,
    1105,  2376,  2136,  2325,  1617,  1105,  2712,  1105,  3132,  1101,
    1102,  3314,  3573,   504,  1556,  1974,  1764,  1101,  1102,  1105,
    2009,  3735,  1936,  3737,  3363,  3156,   596,  1105,  3072,  3160,
     566,   968,  3131,  2013,  2014,  1136,  1101,  1102,  1105,  3792,
    1105,  1206,  1954,  2633,  2749,   747,   498,  2339,  3204,  3014,
    2043,  1105,  1223,  1961,  2030,  2031,  1745,  1651,  1101,  1102,
    1746,  2719,  1105,  2921,  2922,  2479,  2480,  3812, -1626,  1105,
     804, -2308,  1666,  1105,  1101,  1102,  2797,  2798,  2620,  1295,
    3103,  1105,  2185,  2814,  2815,  2251,  2252,  2835,  2836,  2282,
    1250,  1337,  1105,  3060,  1103, -2271,  1962,  1104, -2148,  1920,
    3575,   949,  1101,  1102,  2183,  3072,  1105,  1972,  1268,  2373,
    2374,  2213,   135,  2187, -1333,  1898,  2190,  2191,  1980,   556,
    1873,  1973,  1367,   556,  3731,  3667,  3855,   799,  2915,  3234,
    1237,  1105,   457,  1716,  1716,  2156,  1105,  1268,  1103,  2340,
    1103,  1104,  3658,  1104,   114,   510,  1976,  1101,  1102,  1780,
    3448,  1988,  2258,  3279,  2750,  1784,  1136,  2772,  1631,  2137,
    -557,  1487,  1103,  1672,  1488,  1104,  3389,  1101,  1102,   556,
    1105,   556,  1596,  2478,  1105,  2588,  2250,  1305,  1398,  2157,
    1562, -2268,  2283,   530,  2442,  1996,  2621,   582, -1603,  2000,
    1306,  2720,  1105,  2370,  2371, -2271,  1101,  1102,  3489,  2060,
    1215,  1101,  1102,  1840,  1435,  1780,  1040,  2001,  1855,  2034,
    1118,  2341,  1101,  1102,   518,  2812, -1626,  1600,  2950,  1040,
    2044,  2607,  3390,  1798,  1101,  1102,  3351,  3814,  2483,  2484,
    3356,  3357,  2058,  1423,  2024,  1428,  3579,  3815,  1797,  2051,
    1101,  1102,  1341,  1118,  1103,  1843,   116,  1104,  1101,  1102,
    1785,  3258,  1415,  1101,  1102,  1780,  3979,  3166,   909,  1342,
    3259,  1101,  1102,  1711,  2037,  1101,  1102,  1608,  1548,  1549,
    3668,  2073,    43,  1103, -2147,  2477,  1104,   523,   637,  1399,
    2539,  1767,   566,  1400,  3684,  2487,  2954,   533,  3659,  1905,
    1101,  1102,  1768,  1948,  1401,  2369,  1658,  1103,  1101,  1102,
    1104, -2147,  1101,  1102,  1307,  1758,  1998,   579,  2377,  1101,
    1102,  1101,  1102,  1255,  1786,  1137,  1105,  1509,  -557,   566,
    2131,  2132,  2751,  1608,  1604,   531,  1308,  3768,  1548,   556,
    3793,  2002,  2038,  1101,  1102,  1712,   642,  3694,  1103,   556,
    2605,  1104,  3732,  1094,  1101,  1102,  1103,  2794,  2253,  1104,
    1101,  1102,  1101,  1102,  1632,  1296,  3291, -1603,   671,  1673,
    1105,  3450,  1105,  1597,  2173,  1103,  2723,  1899,  1104,  1256,
    1776,  1910,   800,  1608,   950,  2003,  1636,  2007,  1639,  1237,
     556,  2724,  2375,   664,  1105,  1598,  2864,  1103,  3260,  1121,
    1104,  1686,   556,  1606,  1101,  1102,  1257,  1643,   566,  2026,
    2342,   548,  1199,  1103,  1251,  2045,  1104,   556,   556,  1101,
    1102, -2148,  2752,  2461,  1402,   870,  1706,  1548,  1675,  2767,
      55,  2046,  1121,  3669,  1780,  2314,  1684,  1766,   653,  2682,
    2069,  1103,  3816,  3853,  1104,  3517,  1137,  1900, -2148,   451,
     451,   451,   556,   451,   556,  1769,  2378,  3640,  1911,  1696,
    2279,  1101,  1102,   923,  2376,  1718,   451,  2570,   566,  1687,
     910,  1101,  1102,  1787,   451,  3391,  1105,  2932,  1101,  1102,
    1707,   870,  1568,  1633,  1101,  1102,  1103,   549,  1633,  1104,
     597,  2795, -1444,  1363,   556,  3065,   911,  1369,  1700,  1701,
    1702,  1462,  1704,  1609,  1797,  1105,  1103,  1744,  1798,  1104,
     669,  1200,   924,  1777,  1403,  1719,  1703,  3623,  1705,  3722,
    2796,  1370,  2463,  1724,  1770,  3662,  3663,  2039,  2634,  1105,
    2634,   870, -1444,  1924,  1713,  1103,  1123,  1124,  1104,   566,
    1103,   954,   955,  1104,  2807,  3577,  1599,  2201,  1771,   607,
    1898,  1103,  1608,   556,  1104,  1688,  1925,   556,  1733,  1609,
    1435,  1796,  3723,  1103,  3434,  1364,  1104, -1603,  2250,  2925,
    1105,  3873,  1872,  1788,  1489,  3580,   688,  1490,  1105,  1103,
    1901,  3455,  1104,  1101,  1102,  2817,   925,  1103,  1101,  1102,
    1104,  2141,  1103,  2818,  1676,  1104,  3817,  1105,  1201,  3874,
    1103,  1019,  1258,  1104,  1103,  1772,   608,  1104,   566,  1609,
     451,   451,  3298,  1922,   451,  1101,  1102,  1871,  3675,  1105,
    2834,   551,   992, -1603,  1934,  3518,  3622,  3676,  -186,  1103,
    1101,  1102,  1104,  2813,  1780,  1105,  2361,  1103,  2365,  1656,
    1104,  1103,  1708,  2197,  1104,  3066,   954,   955,  1103,  2025,
    1103,  1104,  1569,  1104,  1689,  1745,  1197,  1020,   557,  1918,
    1919,  2281,  1548,  1105,  1126,  1127,  1128,  1129,  1130,  1131,
    1132,  1133,  1103,  1532,  2867,  1104,  2369,  1937,  3724,  1101,
    1102,  1657,  2597,  1103,  1101,  1102,  1104,  1773,  2671,  1103,
    1780,  1103,  1104,  2598,  1104,  2482,  1040,  1981,  1312,   696,
     870,  1130,  1131,  1132,  1133,  1785,   785,  1677,  1105,  2075,
    3396,  3258,  3435,  1364,  2430,  3985,  3519,  3067,  2156,  2517,
    3259,  1259,  1949,  1101,  1102,   560,   609,  2436,  1105,  1789,
    2906,   562,  2856,  1103,  3641,  2070,  1104,   573,  1790,  3449,
    1924,  1260,  1953,  3372,  1791,  1101,  1102,  3115,  1103,  1101,
    1102,  1104,  1608,  1101,  1102,  2907,  2042,  1105,  2672,  1318,
    2451,  2410,  1105,  1925,  1798,  2198,  3866,  1313,  3065,  1101,
    1102,  1960,  1118,  1105,  2926,   574,  1963,  3784,  1609,  1101,
    1102,  1261,   926,  2199,  1744,  1105,   786,  1964,  1266,  3116,
    1103,  1269,  3822,  1104,  2200,  1101,  1102,  3397,  2066,  1971,
    1103,  1105,  1899,  1104,  3383,  2246,   566,  1103,  1608,  1105,
    1104,   566,   664,  1103,  1105,  1984,  1104,   556,  3677,  2081,
    3642,  2493,  1105,  1985,  2086,  2086,  1105,  2086,  3563,  1792,
     116,  3897,  3897,  3398,   811,  2376,  1989,  1570,  1270,  1910,
     556,  3121,   927,   556,   928,  2375,  3643,  3383,  3260,  3285,
    2673,  1105,  3290,  1571,   787,   566,   566,   556,   556,  1105,
    1101,  1102,   664,  1105,  2381,  2086,  2086,  2086,  2201,  2130,
    1105,  2599,  1105,  1993,  3617,  1101,  1102,  1994,  1369,  2149,
    1101,  1102,   585,  2168,  1995,  2382,  1999,  2233,  2085,  2085,
    2683,  2085,  2179,  2908,  1105,  3618,  3591,  3592,  3593,  3594,
     870,   967,  1370,  2175,  2107,  1105,  3068,  1206,  2004,  3170,
     584,  1105,  1103,  1105,  2634,  1104,  1793,  1103,  3066,  2012,
    1104,  1223,  2134,  2414,  3603,  2017,  1239,   556,   588,  2085,
    2085,  2085,  1745,  1419,  3563,  3563,  1746,   812,  2717,  2196,
    1101,  1102,  2912,  3604,  1103,  2234,   556,  1104,  2415,  1952,
    1138,  1121,  3063,  2064,   590,  1105,   870,  2661,   595,  1103,
    1421,  2065,  1104,   592,   537,  1101,  1102,   604,  1268,  2032,
    1105,  2235,  2202,  3077,  3078,  2282,  2217,   745,  1609,  2914,
    1101,  1102,   465,  2718,  2769,  2224,  2225,  1101,  1102,  2416,
    3075,  2189,  2417,   932,  3090,   688,  2229,  2230,  2231,  2232,
    2418,  2240,  2241,  2363,   813,  2227,   538,  1548,  1103,  3143,
    2207,  1104,  1105,  1103,  3960,  2064,  1104,  2116,  3423,  2539,
    1019,  3425,  1105,  2892,  1716,  2197,  2785,  2141,  3144,  1105,
    3961,  2203,  1101,  1102,  1609,  1105,  2791,  2236,  1101,  1102,
     968,  2426,  2309,  2792,  1628,   688,  2426,  1629,  3466,  2799,
    1630,  1175,  1103,  1101,  1102,  1104,  2323,  3145,   606,  1191,
    1548,  2738,   737,  3563,  3563,  1101,  1102,  2333,   742,  2771,
    1019,  3456,  2605,   539,  1103,  2117,  1071,  1104,  1103,  1975,
   -2308,  1104,  1103,   780,   823,  1104,  3280,  2336,  2337,   792,
    2344,  1548,  2346,  2347,  2348,  2349,  2350,  2060,  1103,  2353,
    2354,  1104,   796,  2682,   131,   566,  3564,   132,  1103,  2237,
    2379,  1104,  1975,   451,  3781,  1968,  1138,  1101,  1102,  3304,
     556,   556,  1977,  1138,  1103,  1176,  1075,  1104,  2141,  3197,
   -1333,  2475,  3200,  3201,  1105,   798,  2142,  1101,  1102,  1105,
     808,  2143,  2144,   566,  3563,  3467,  3468,  2198,   566,  3213,
    3469,  3470,   904,  2803,  1101,  1102,  1354,  1355,   884,  3563,
    1101,  1102,  2384,  2496,   905,  2199,  1105,  3800,  1177,  3695,
    3685,   241,  3563,   243,  3211,  2870,  2200,  3212,  3353,  3068,
    2804,  1105, -1333,  1178,  2398,  2400,  1192,  2116,   783,  1103,
    1101,  1102,  1104,  1413,  2863,  2805,  3700,   824,   913,  3703,
    3704,  3705,  3706,   932,  1103,  1797,  2419,  1104,  3719,  1103,
    3720,  3247,  1104, -1333,   922,  2946,  2375,   943,  1128,  1129,
    1130,  1131,  1132,  1133,   960,   839,   840, -1333,  3563,   961,
    1105,   965, -1333,   566,  1763,  1105,   114,  2833,  2905,  3801,
    3563,  3563,  2143,  2144,  2806,  2117,  2957,  1978,  1503,  2808,
    2201,  1898, -1333,   994,  2962,  1548,   995,  2964,  2494,   996,
   -1333,  2426,   998,  2573,  2578,   566,   825,  2867,   999,  1103,
   -1333,  2118,  1104,  3892,  1105,  3806,  2145,  2465,  3955,  2622,
    3563, -1333,   882,   883,  1000,   886, -1333,  1398,  2811,  1003,
    3563,  2116,  3798,  3799,  1103, -1333,  1105,  1104,  2238,  1004,
    1105,  3811,  1005,   540,  1105,  2616,  2426,  1990,  1138,  1103,
    2816,  1006,  1104,   894,  2819,  1007,  1103,  1142,  2821,  1104,
    1105,  2525,  -556,  3563,   541,  3563,  1991,  1138,  1992,  1138,
    1105,  2253,  1997,  1138,  2823,  3563,  2420,  2119,  2540,  2365,
    2048,  1008,  2254,  2233,  2825,  1009,  1105,  1010,  3563,  2117,
    3563,  1011,  3563,   542,  2202, -1333,  2559,  2561,  1014,  3563,
    2826,  1103,  1016,   566,  1104,   566,   566,  1103,  3563,  1017,
    1104,  1018,  2558,  1022,  2233,  2118,  2496, -1333,  3969,  2088,
    3295,  2089,  1103,  3563,  3563,  1104, -1333,  1023,  1399,  1101,
    1102,  1780,  1400,  1024,  1103,  2421,  1025,  1104,  1549,  3563,
    3563,  2234,  2496,  1401,  3563,   543,  1026,   566,   566,  2120,
    1027,  1105,  1028,  2203,  1029, -1333,  1378,  1379,  1030,  2151,
    2152,  2153,  1031,  2422,  3605,  2827,  1105,  2235,  3802,  2485,
    1034,  1105,  2234,  -556,  1035,  2197,  1141,  2242,  2243,  2255,
    3095,  2119,  2471,  1138,  1138,  3096,  1103,  2323,  1041,  1104,
    1118,  1042,  3606,  2636,  2323,  2499,  2500,  2323,  2235, -1333,
    1043,  2323,  2648,  2657,  1044,  1798,  1103,  1045,  2658,  1104,
    1369,   839,   840,  2657,  1046,  2323,  2323,  1047,   566,  1048,
   -1333,  2659,  2660,  1103,  1049,  2323,  1104,  1549,  1051,  1103,
    2679,  1105,  1104,  2236,  1370,  2687,   556, -1603,  2809,  1138,
    1053,  2689,  2690,  1899,   566,  3097,  2686,  2873,  2874,  1608,
    1054,  2323,  2708,  2120,  3988,  3989,  1105,  1055, -1333,  1103,
    2918,  1056,  1104,  1402,  2236,  2966,  2967,  3220,  3053,  2967,
    3297,  1105,   826,   827,   828,   829,   830,   831,  1105,  1118,
    1057,   997,  1439,  1440,  1441,  3303,  1390,  1391,  1058,   832,
    1538,  1538,  3305,  1059,  1452,  3083,  1060,  2198,  3100,  1138,
    2688,  2197,  3607,  1283,  1061,  2237,  2730,  1062,  3221,  1063,
   -1333,  1064,  3222,   898,   899,  2199,   900,   114,   901,  1065,
     556,  2323, -1333,  1105,  1066,  1506,  2200,  1067,  1510,  1105,
    3118,  3119,  1284,  3101,  1068,  1118,  2237,  3306,  2121, -1333,
    1069, -1333,  1146,  3307,  1105,  3252,  3253,  1073,  1528,  1529,
    3283,  3292,  1533,  1403,  3223,  1074,  1105,   870,  3308,  3299,
    1138, -1333, -1333,  3888,  1077, -1333, -1333,  3309,  1138,  1121,
    3588,  1550,  1551,  1285,  -556,  3322,  3323,  3608,  1286,  3504,
    3505,  3437,  2243,  1118,  2754,  3451,  3452,  3763,  1078,  2253,
    3265,  3509,  3119,  1082,  3609,  3512,  3452,   870,  3804,  3804,
    2201,   115,  3601,  3602,  3630,  3631,  1086,  1810,  1105,  3635,
    3452,  3636,  3452,  1087,  1811,  1812,  3610,  1088,   133,   116,
    -556,  1157,  3354,  2198,   455,   456,  1813,  1814,  1105,  2253,
    1089,  2856,  3995,  2081,  1090,  1196,   566,   566,   566,  1140,
    2254,  2199,  2121,  3527,   505,  1105,   556,  3646,  3647,  3527,
     512,  1105,  2200,  1172,   516,  1174,  1815,  2257,  1121,   566,
    1816,  1817,  1549,  3648,  3649,  1818,  1468,  3650,  3649,  1548,
    1179,  1819,  3823,  3631,  -695,  1609,   566,   566,   566,  1820,
    2691,  1105,  2692,  1181,   117,  1189,  1821,  3824,  3631,  2891,
    1190,  2279,  2426,  3288,  2238,  2893,  1198,  2895,   118,  1822,
    3829,  3119,  1204,   566,  2202,  2890,  1123,  1124,  3403,  3404,
    2107,   118,  1205,  1338,  1121,  1287,  1823,  3857,  3858,  2693,
    1218,  3407,  1229,  1824,  1825,  2238,  2201,  3410,  1369,  1230,
    1826,  -556,  -556,  1536,  3864,  3865,  1233,  2255,  1827,  1234,
    2694,  1237,  -788,  1240,  1828,   577,  3919,  2729,  3358,  1248,
    3426,  3884,  1370,  3428,  1249,  4031,  4032,  3513,  3514,  1472,
    1253,   119,  1121,  2203,  3135,  3136,   954,   955,  1369,  1254,
     870,  1829,  3224,  2695,  3105,  3106,  2323,  1266,  3225,  3320,
    3321,  2657,  1275,  1276,  1288,  3611,  1279,  1280,  1277,  1278,
    1302,  1303,  1370,  1317,   566,  1123,  1124,  2323,   739,   740,
    1319,  1320,   743,   744,  1322,  1327,   746,  1830,   748,  1831,
    1332,  2952,  2657,  1338,  3226,  1344,  1346,  1832,  1348,  2955,
    2657,  1351,  1352,  2657,  1356,  1359,  1360,  1407,  1408,  1409,
    2202,  1412,  1833,   556,  1126,  1127,  1128,  1129,  1130,  1131,
    1132,  1133,  2968,  1414,  1289,   556,  3954,  1415,  3956,  3024,
    1429,  1123,  1124,  3791,  1473,   451,  1548,  1431,  1476,  3034,
    1136,  1435,  2333,  1442,  1454,  1477,   476,  1118,  1456,  3039,
    1081,  3972,  1492,  3476,  1502,  1579,  1503,  3227,  1504,  2280,
     120,  3049,  1546,  1558,  1834,   459,  1563,  1585,   556,  2203,
    3736,  1605,  2281,  1021,  1072,  1076,  1612,  1622,  1618,  1123,
    1124,  1835,  1621,  1239,  3030,  1836,  4003,  4004,  1613,  2969,
    1623,  1625,  1626,  1644,  1645,  1648,  1650,  3140,  1694,  2256,
    1938,  1191,   477,  1126,  1127,  1128,  1129,  1130,  1131,  1132,
    1133,  1654,  -556,  2616,  1663,  1665,  1662,  1664,  1671,  1478,
    1679,  1837,  1685,   121,  3529,  1290,  1838,  1698,  3791,   478,
    1722,  1726,  3051,  1839,  1727,  1728,  1729,  1731,  1739,  1741,
    1840,  1841,  1743,  3099,  3490,  1756,  1765,   460,  1866,  1364,
    1874,  2559,  3228,  1875,  1877,  1876,  1101,  1102,  1291,   479,
    1127,  1128,  1129,  1130,  1131,  1132,  1133,  2558,  1480,  1982,
    1842,  1878, -1333,  1986,  1893,  2525,  1879,   122,  -729,  -849,
    2696,  1880,  1843,  1844,  1845,  1846,  1117,  2540,  3130,  1881,
     566,  1882,  1883,  3791,  1884,  2257,  2010,  1885,  1886,   566,
    1887,  1888,  1889,  1890,  1847,  2494,   480,  1126,  1127,  1128,
    1129,  1130,  1131,  1132,  1133,   566,  1891,   752,   753,  3565,
    1892,  1894,  1912,  2168, -1333,   461,  1121,  1913,  1192,  1915,
    1928,  1927,  1917,  1939,  1932,  1941,  1942,  1943,  1958,  1959,
    1549,  3651,   735,  1965,  1464,  1465,  1466,  1467,  1468,  1966,
    1156,  1967,  2323, -1333,  1548, -1333,  1969,  1848,  1979,  2015,
    2323,  1983,  2657,  1975,  1987,  2041,  4023,  2101,   735, -1333,
    -556,  1549,  1849,  2005, -1333,  1850,  2657,  1548,  2006,  3615,
    2323,  1118,  2011,   749,  2426,  1548,  2016,  2027, -1333,  3910,
    3911,  2028,  3913,   754, -1333,  1481,  2029,  4023, -1054,  1851,
    2047,   795, -1333,  1133,  2057,  2076,  2077,  1483,   806, -1171,
    1852,  2090, -1333,  2104,  2113,  2125,  2128,  2150,  2164,  2176,
     -63,   755,  2178, -1333,  2184,   481,  2182,  2205, -1333,   890,
    2206,  2091,  2209,  3946,   756,  3947,  3948, -1333,  1469,  1470,
    1471,  1472,  2210,  2212,  2216,  2092,  2218,  2223,  3342,  2219,
    2220,  2221,  2222,  2253,  2093,  2265,   757,  2270,   758,  2274,
    2271,  3249,  1767,  1123,  1124,  2275,  -788,  2277,  2278,   759,
    2284,  2287,  3278,  1768,  2293,  2294,  2298,  1119,  2286,  3270,
    2299,  2304,   735,  2305,  2326,  2364,   566,   735,   482,   760,
    2385,  2404,  2401,  1159,  2408,  2413,  2431, -1333,  2432,  1120,
    2433,  2094,  2095,  2491,  2443,  2065,  3777,   462,  2444,  3775,
    3615,  2456,  3772,   761,  2472,  2498,  4017,   735,  2481, -1333,
     762,  2490,  2473,  2474,  2501,   463,  2502,  2503, -1333,  2096,
    3331,  2504,  2616,   735,  2505,  1549,  1473,  2511,  1474,  1475,
    1476,  2513,   483,  2516,  2518,  2515,   484,  1477,  2519,  2526,
     566,  2530,  2542,   616,  2543,  2544,  2545, -1333,  2157,   763,
    1121,   464,  2156,  -484,   485,   465,  2562,  2563,  2595,  2585,
    1160,  2589,  2593,  2586,   735,   735,   735,   735,  2564,   954,
     955,  2594,  3352,  2611,  2618,  1103,   735,  2097,  1104,   486,
    2619,  3278,  2664,  1128,  1129,  1130,  1131,  1132,  1133,  2426,
     466, -1333,  2666,  3386,   487,  2700,  2716,  2726,   467,  2728,
    2735,  2722,  2729,  1108,  1109,  2741,  2736,  2740,  1840,  1758,
    3377,  1478, -1333,  2742,  1933,  2772,  1769,   637,  2776,  2781,
    1161,  2782,  2783,  2849,   566,  2784,  2786,  2098,  2853,  2787,
    2832,  2830,  2837,  2840,  2847,  2842,  1210,  1110,  2858,  2861,
    1122,  3412,  1162,  2862,  3140,  2872,  1111,  2869,  2877,  3429,
   -1333,  2889,  2888,  2894,  2875,  2902,  3433,  2913,  2924,  1479,
    1480,  2919,  2923,  2939,  2927,  2949,  2940,  3025,   641,  3032,
     764,  3049,  3028,  3031,  2958,   642,  3438,  3036,  3490,  3038,
    3044,  3045,  -401,  1112,  2141,  1770,  3061,  1123,  1124,   765,
    3050,   566,  3087,  3111,  1113,   766,  3079,  3059,  1125,  3113,
    4029,   646, -1333,   767,  3122,  3076,   954,   955,  3086,  1771,
    3098,  3133,  3141, -1333, -1333,  3153,  3158,  3149,  3159,  3150,
    3178,  1114,  3775,  3179,  3180,  3942,   768,  3198,  2324,  3248,
    3154, -1333,  3480, -1333,  3171,  3191,  3243,  1163,  3246,   769,
     770,  3250,  3257,  3266,  3267,  1164,   566,  3274,  3268,  3271,
    3272,  3281,  3282, -1333, -1333,   817,   753, -1333, -1333,  3283,
    3284,  3237,  3293,  3294,  3296,  3502,  1772,   653,  3300,  3301,
    3302,  3318,  3325,  3326,  3327,  1165,  1115,  3278,  3278,  3336,
     771,  3329,  3323,  2892,  3942,  3338,  3339,  1481,  3343,  3347,
    3349,  2426,  3344,  3615,  3523, -1254,  3350,  1105,  1482,  1483,
     735,  3362, -1259,  3374,  3375,  3402,  3234,  3408,   772,  3406,
    3416,  3417,  1166,  4012,  3418,  1126,  1127,  1128,  1129,  1130,
    1131,  1132,  1133,   664,  3420,  3421,  3439,  3427,  3440,  3454,
     773,   754,   774,  3457,  3413,  3459,  1167,  3460,   668,   669,
    3474,  3461,  3493,  3496,  3570,   556,  3462,  4012,  1773,  3463,
    3481,   735,   735,  3498,  1168,  3278,  3494,   132,  3500,   755,
     735,   735,   735,   735,   735,   735,   735,  3516,  3530,  3531,
    3292,   735,   756,  3566,   735,   735,  3532,   735,  3574,   735,
    1118,  3586,  3587,   735,  3596,  3590,   735,   735,   735,   735,
    3597,   735,   735,   566,   757,  3599,   758,  3625,  3627,   735,
     735,  3653,   735,   735,   735,   735,   735,   759,   735,  3571,
     735,   735,   735,   735,   735,   735,   735,   735,   735,   735,
     735,  3632,  -271,   735,   735,  3671,   735,   760,   735,  3673,
    3680,  3629,   735,  3639,   735,   735,  3674,  3683,  3657,  3839,
    3686,  3689,  3698,  3664,  3699,  3701,   735,   735,  3710,  3702,
    3714,   761,   735,  3716,  3839,   735,  3718,  3707,   762,  2712,
    3730,  3740,   735,   735,   735,  3743,   735,  3849,  -289,  3769,
    3770,  3771,  3786,   735,   735,   735,  2800,   735,   735,   735,
     735,   735,  3808,   735,   735,   735,   735,   735,   735,   735,
     735,  3783,  3820,  3825,   735,   735,  3826,   763,  3835,  1549,
     556,  3827,   616,  3828,   790,  3480,   688,  3807,  3836,  3846,
    3378,  3840,  3847,  3379,  3848,  1813,  1814,  3851,  3868,  3869,
    3870,  3871,  3877,   694,  3880,  3885,  3887,  3889,   696,  3893,
    3502,   697,  3502,  3890,  3721, -2068,  3899,  3904,  3912,  3905,
    3914,  3909,  3915,  3917,  3918,  3924,  3938,  -681,  -681,  1816,
    3734, -1405,  3949,  3937,  3951,  3952,  -681,  3957,  3953,  1121,
    1819,  3958,  3971,  3744,  3693,  3967,  3962,  3968,  1820,  3377,
    3975,  3977,  3980,  3981,  3987,  3839,   637,  3983,  3991,  4000,
    3380,  3381,  3993,  4001,  4015,  3936,  4018,  4028,  1822,  4024,
    2497,  3256,  3666,  2626,  2356,  3443,  3681,   977,  3778,  3900,
     735,  3901,  1338,  3441,  3445,  1823,  1350,  3569,   735,   566,
    4034,  3996,  2496,  4005,  3543,  3544,  3546,  3813,   764,  3797,
    3547,  3549,  3550,  1001,  3921,  3551,  3833,   641,  3552,  3898,
    3964,  3553,  3554,  1828,   642,  3922,  3557,   765,  3558,  3845,
    3844,  3559,  1809,   766,  2068,  3839,  1411,  3839,  1853,  3576,
    2685,   767,  3120,  1033,  3982,  2857,  3697,  3787,  3332,  3860,
     646,  3598,  3903,  3839,  3907,  3908,  3941,  1897,   605,  1050,
    3709,  3273,  2313,  3507,   768,  1464,  1465,  1466,  1467,  1468,
    3042,  2759,  2320,  3192,  2713,  2642,  1549,   769,   770,  3181,
    3244,  3205,  3206,  3525,  3839,  3839,  1123,  1124,  1831,  4027,
    3385,  3856,  3419,  3411,  3184,  3147,  1832,  3727,  3733,  3524,
    1926,  3687,  3645,  1096,   566,  2397,  3585,  3861,  3862,  3528,
    2317,  1833,  3183,  2703,  2194,  1742,   653,  3388,   771,  2527,
    2333,  2333,  3182,  1368,  1895,  2133,  2514,   753,  2852,   902,
    1376,  1377,  1378,  1379,  1380,  1381,  1244,  1382,  1383,  1384,
    1385,  1386,  1387,  1388,  3616,  1389,   772,  2546,  2155,  3102,
    2839,  2429,  2606,  3155,  3634,  1501,   566,  3506,  3878,  1469,
    1470,  1471,  1472,  1834,  3037,  3879,  1453,  1539,   773,  2488,
     774,  3187,   664,  3503,  3805,  3986,  3492,  2399,  2510,  3926,
    1835,  2553,  1642,  1667,  2533,  3126,  3934,   668,   669,   735,
    3334,  3125,  3165,   891,  4033,  3854,  2405,  1931,   993,  2186,
     876,  1710,   754,  2078,  3112,  2965,  3940,  1669,  3872,  3965,
    3916,  4030,  4035,  3129,  1126,  1127,  1128,  1129,  1130,  1131,
    1132,  1133,  3415,  2910,  2165,  3151,  3348,  1683,  3495,  2112,
     755,  1674,  1839,   819,  1232,  3589,  1635,  1916,  3595,  2841,
    1841,   821,  1236,   756,  2470,  2829,  3973,   981,   599,  1554,
     600,  3978,   982,   983,     0,     0,     0,  1473,     0,  1474,
    1475,  1476,  1390,  1391,     0,   757,     0,   758,  1477,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   759,     0,
       0,     0,     0,     0,     0,  4013,     0,     0,   735,   735,
     735,     0,     0,     0,  1549,     0,     0,     0,   760,     0,
       0,     0,     0,  1847,   735,     0,     0,     0,     0,     0,
       0,     0,     0,   566,     0,     0,     0,  1549,     0,  4013,
       0,     0,   761,     0,     0,  1549,   735,     0,     0,   762,
       0,     0,   735,     0,     0,   735,  1375,   735,     0,     0,
       0,     0,  1478,   735,     0,   735,   735,     0,     0,     0,
       0,     0,     0,     0,     0,   688,  1848,     0,     0,  3378,
       0,     0,  3379,     0,     0,     0,     0,     0,   763,     0,
       0,  1849,   694,     0,  1850,     0,     0,   696,     0,     0,
     697,     0,     0,     0,     0,     0,     0,  1433,  1434,     0,
    1479,  1480,     0,     0,     0,     0,  1444,  1445,  1851,     0,
    1448,  1449,  1450,     0,     0,     0,   735,  1455,     0,  1852,
    1457,  1458,     0,  1459,     0,  1460,     0,     0,     0,     0,
       0,     0,  1494,  1495,  1496,  1497,     0,  1499,     0,  3380,
    3381,     0,     0,     0,     0,  1507,  1508,     0,  1511,  1512,
       0,     0,     0,     0,  1516,     0,  1517,  1518,  1519,     0,
       0,  1522,  1523,  1524,  1525,  1526,  1527,     0,     0,  1530,
    1531,  2761,  1534,     0,  1535,     0,     0,     0,  1540,     0,
    1544,  1545,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1552,  1553,     0,     0,     0,     0,  1096,   764,
       0,  1559,     1,     2,     0,     0,     0,     0,  1564,  1565,
    1566,     0,     0,     0,     0,     0,     0,     3,   765,     4,
       0,     0,     0,     5,   766,     0,     0,     0,  1481,  1813,
    1814,     0,   767,     0,     0,     0,     0,     6,     7,  1482,
    1483,  1602,     0,     0,     8,     0,     0,     0,     9,    10,
       0,     0,     0,     0,     0,   768,     0,     0,     0,     0,
       0,    11,     0,  1816,     0,     0,     0,     0,   769,   770,
       0,     0,     0,     0,  1819,     0,     0,    12,     0,     0,
       0,     0,  1820,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,     0,     0,
       0,     0,  1822,     0,     0,    14,    15,    16,     0,   771,
       0,     0,     0,     0,     0,     0,  1338,    17,    18,  1823,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,     0,     0,   735,     0,     0,     0,   772,     0,     0,
       0,     0,    20,     0,     0,     0,  1682,  1828,     0,     0,
       0,     0,     0,     0,  1697,     0,     0,     0,    21,   773,
       0,   774,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    22,     0,     0,     0,     0,    23,     0,
       0,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   735,     0,     0,     0,   735,     0,     0,
       0,     0,   735,   735,    25,     0,    26,     0,     0,     0,
       0,   735,  1831,     0,   735,     0,     0,     0,     0,     0,
    1832,     0,    27,     0,   735,     0,   735,   735,     0,   735,
     735,   735,   735,   735,     0,  1833,   735,     0,     0,    28,
       0,     0,     0,    29,     0,   735,     0,     0,     0,     0,
       0,     0,     0,   735,     0,   735,     0,   735,   735,   735,
     735,     0,     0,     0,   735,   735,   735,     0,     0,     0,
       0,   735,   735,   735,     0,   735,     0,   735,     0,   735,
       0,   735,     0,   735,     0,     0,     0,  1834,   735,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   735,     0,
       0,     0,     0,     0,  1835,   735,     0,     0,   735,     0,
       0,     0,     0,     0,   735,     0,     0,   735,     0,     0,
       0,   735,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1944,     0,     0,    31,  1813,
    1814,     0,     0,     0,     0,     0,  1839,     0,    32,     0,
       0,     0,     0,     0,  1841,     0,     0,     0,    33,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1813,  1814,
       0,  -681,  -681,  1816,     0,     0,     0,     0,    34,     0,
    -681,    35,     0,    36,  1819,     0,    37,     0,     0,    38,
       0,    39,  1820,     0,     0,     0,    40,     0,    41,     0,
    -681,  -681,  1816,     0,     0,    42,     0,     0,     0,  -681,
      43,     0,  1822,  1819,     0,     0,     0,  1847,    44,     0,
       0,  1820,     0,    45,     0,     0,  1338,    46,     0,  1823,
       0,     0,     0,     0,  2019,  2021,  2023,     0,     0,     0,
       0,  1822,     0,     0,     0,     0,     0,     0,     0,     0,
      47,     0,     0,     0,    48,  1338,     0,  1828,  1823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1848,     0,  2049,     0,     0,     0,     0,     0,     0,     0,
       0,  2054,     0,  2055,     0,  1849,  1828,     0,  1850,     0,
       0,     0,     0,     0,     0,    49,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    50,     0,     0,
       0,    51,  1851,     0,    52,     0,     0,     0,     0,    53,
       0,     0,  1831,  1852,     0,     0,     0,     0,     0,     0,
    1832,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    54,  1833,     0,     0,     0,     0,
       0,  1831,  2129,     0,     0,     0,     0,     0,    55,  1832,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1833,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2387,     0,     1,
       2,     0,     0,     0,     0,     0,     0,  1834,     0,     0,
       0,     0,     0,     0,     3,     0,     0,     0,     0,     0,
       5,     0,     0,     0,  1835,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     6,     7,  1834,     0,     0,     0,
       0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
       0,     0,     0,  1835,     0,     0,     0,     0,    11,     0,
       0,     0,     0,   735,     0,     0,     0,   735,     0,     0,
       0,     0,     0,     0,    12,     0,  1839,     0,     0,     0,
       0,     0,     0,     0,  1841,     0,     0,     0,     0,   735,
     735,     0,     0,     0,    13,     0,     0,     0,     0,     0,
       0,     0,    14,    15,    16,  1839,     0,     0,     0,   735,
       0,     0,     0,  1841,    17,    18,     0,     0,   735,     0,
     735,     0,   735,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   735,     0,    20,
       0,     0,   735,     0,     0,     0,     0,  1847,     0,     0,
       0,     0,     0,     0,     0,    21,     0,     0,     0,     0,
       0,     0,     0,     0,   735,     0,     0,     0,     0,     0,
      22,     0,     0,     0,   735,    23,  1847,     0,    24,  2334,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1848,    25,     0,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1849,     0,     0,  1850,    27,
       0,     0,   735,     0,     0,     0,   735,     0,     0,  1848,
       0,     0,     0,     0,     0,     0,    28,     0,     0,  2407,
      29,     0,  1851,  2409,  1849,     0,     0,  1850,  2411,  2412,
       0,     0,     0,  1852,     0,     0,     0,  2427,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   735,
    2434,  1851,  2435,     0,     0,  2437,  2438,  2439,  2440,  2441,
       0,     0,  1852,     0,     0,     0,     0,     0,     0,     0,
       0,  2445,     0,     0,     0,   735,     0,     0,     0,  2446,
       0,  2447,     0,  2448,  2449,  2450,     0,     0,     0,     0,
    2453,  2454,  2455,     0,     0,     0,     0,  2457,  2458,  2459,
       0,  2460,     0,  2462,     0,  2464,    30,  2466,     0,  2467,
       0,     0,  2388,     0,  2468,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2476,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
    2486,     0,     0,  2489,     0,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,   735,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,    35,     0,
      36,     0,     0,    37,     0,     0,    38,     0,    39,     0,
       0,     0,     0,    40,     0,    41,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,    44,     0,     0,   735,     0,
      45,     0,     0,     0,    46,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   735,   735,     0,   735,     0,    47,     0,     0,
       0,    48,     0,     0,   735,     0,     0,     0,     0,   735,
       0,     0,   735,     0,   735,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   735,     0,     0,     0,     0,     0,     0,
       0,     0,    49,     0,   735,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    50,     0,     0,     0,    51,     0,
       0,    52,     0,     0,     0,   735,    53,     0,     0,     0,
       0,  2970,  2971,     0,     0,     0,     0,  2972,     0,  2973,
    2701,  2974,  2975,     0,     0,     0,     0,  1811,     0,     0,
       0,    54,     0,     0,   735,     0,     0,  2976,     0,  1813,
    1814,     0,     0,     0,     0,    55,     0,     0,   735,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,     0,     0,  1815,
       0,     0,     0,  1816,     0,     0,     0,     0,  2977,     0,
       0,  2978,     0,     0,  1819,     0,     0,     0,     0,  2979,
       0,     0,  1820,     0,     0,     0,     0,     0,     0,  1821,
       0,     0,     0,     0,     0,     0,  2980,     0,     0,     0,
       0,     0,  1822,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2981,     0,     0,  1338,     0,     0,  1823,
       0,     0,     0,     0,     0,     0,  1824,     0,     0,     0,
       0,     0,     0,  2702,     0,  2982,     0,  2983,     0,     0,
       0,  1827,     0,     0,     0,     0,     0,  1828,     0,  2984,
    2985,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1829,     0,     0,     0,     0,  2768,
       0,     0,     0,  2770,     0,     0,     0,     0,     0,  2986,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2789,  2790,     0,     0,     0,
       0,     0,  1831,     0,     0,     0,     0,  2987,     0,     0,
    1832,     0,     0,     0,     0,  2810,  2988,  2989,     0,  2990,
       0,     0,     0,     0,  2820,  1833,  2822,     0,  2824,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     735,     0,     0,     0,     0,     0,     0,     0,  2991,  2992,
    2993,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2994,  2995,  2996,     0,
    2848,     0,  2997,     0,     0,  2998,     0,  1834,     0,   735,
     735,     0,     0,     0,     0,     0,     0,     0,   735,     0,
       0,  2999,  3000,     0,  1835,     0,     0,     0,  1836,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3001,  3002,     0,     0,     0,  2900,     0,
       0,     0,  2904,     0,     0,     0,     0,     0,     0,  1838,
       0,     0,     0,     0,     0,     0,  1839,  3003,     0,     0,
       0,     0,     0,     0,  1841,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2933,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3004,     0,  1844,     0,  3005,     0,
       0,  2938,     0,     0,     0,     0,     0,     0,  3006,     0,
       0,     0,     0,     0,     0,   735,     0,  1847,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     735,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,  3007,     0,
       0,  3008,     0,     0,  3009,  3010,  3011,  3012,   735,     0,
    1848,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3026,  3027,     0,  1849,     0,     0,  1850,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3013,  3014,     0,     0,
       0,     0,  1851,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1852,     0,     0,     0,  3015,     0,     0,
       0,     0,     0,     0,  3064,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3561,
       0,     0,     0,     0,     0,     0,     0,     0,  3081,  3082,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3089,     0,     0,     0,     0,  3091,     0,     0,  3092,     0,
    3093,  3094,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   735,     0,     0,     0,     0,     0,     0,
       0,     0,   837,     0,     0,   735,     0,     0,     0,     0,
    3108,     0,   799,   838,   735,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3108,     0,     0,     0,     0,   839,   840,     0,     0,
       0,     0,     0,     0,     0,     0,   841,     0,   842,   735,
       0,     0,     0,     0,     0,  3561,  3561,     0,     0,     0,
       0,     0,     0,   843,     0,   844,     0,   845,     0,     0,
       0,     0,     0,     0,  3152,   846,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3108,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1603,   847,     0,     0,     0,   848,     0,     0,   849,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   850,     0,   851,     0,     0,
       0,     0,   852,     0,   853,     0,     0,     0,     0,     0,
     735,     0,   735,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   735,     0,  3561,  3561,   854,   855,     0,     0,
       0,   856,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3782,     0,     0,     0,     0,     0,   857,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     858,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   859,     0,     0,
       0,     0,     0,   735,     0,  3561,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3561,   735,     0,     0,     0,     0,  3108,     0,     0,   860,
       0,     0,     0,  3561,     0,     0,     0,     0,     0,   861,
       0,   735,     0,     0,     0,     0,     0,     0,     0,     0,
     735,     0,     0,     0,     0,     0,     0,     0,   862,     0,
       0,     0,     0,     0,     0,  3360,  3361,     0,     0,     0,
       0,     0,     0,     0,  2933,     0,     0,     0,     0,     0,
       0,   863,     0,     0,     0,     0,     0,     0,   735,  3561,
       0,     0,   864,   865,     0,     0,   866,   867,     0,     0,
       0,  3561,  3561,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3561,     0,     0,     0,     0,     0,     0,   735,     0,
       0,  3561,     0,     0,     0,   868,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   869,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   735,     0,     0,
       0,     0,     0,     0,  3561,     0,  3561,     0,     0,     0,
       0, -2094,     0,     0,     0,   870,  3561,     0,     0,   735,
       0,  3458,     0,     0,     0,     0,     0,     0,     0,  3561,
       0,  3561,   871,  3561,     0,     0,     0,     0,     0,     0,
    3561,     0,     0,     0,     0,     0,  3108,     0,     0,  3561,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2933,     0,     0,  3561,  3561,     0,     0,     0,     0,
     735,     0,     0,     0,  2900,     0,     0,     0,     0,     0,
    3561,  3561,     0,     0,     0,  3561,     0,     0, -2094,     0,
       0,     0,     0,     0,   872,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3621,     0,     0,     0,     0,     0,     0,     0,     0,
    3626,     0,  3628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3652,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2933,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3738,     0,  3739,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3747,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3837,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3842,     0,     0,
       0,     0,     0,   138,     0,   612,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,  3108,   613,     0,
     146,   147,   148,   149,   150,   614,   152,     0,   153,     0,
       0,   615,   154,   616,   617,   618,   155,   619,     0,   156,
     157,   158,  1541,   159,     0,   160,   161,     0,     0,   162,
     620,   621,   163,     0,   164,   622,   623,   166,     0,   167,
     168,   169,   624,   171,  3883,   625,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   626,
     184,     0,   185,   627,   628,   186,     0,     0,   187,   629,
     630,     0,   631,   632,     0,   188,   189,   190,   633,   634,
     635,     0,     0,     0,     0,   636,   193,   637,     0,     0,
     638,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,  3928,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,   639,  3950,   217,   218,   219,   640,   641,   220,
     221,     0,   222,   223,   224,   642,     0,   225,     0,     0,
       0,   226,   227,     0,   228,  3966,   229,     0,   643,   231,
     644,   233,     0,   234,     0,   645,     0,   235,   236,     0,
     237,   646,     0,   238,   239,     0,     0,     0,   647,   241,
     242,   243,   648,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   649,   248,   249,   650,     0,     0,   250,
       0,   251,   252,     0,   253,   254,  4014,     0,     0,   255,
       0,     0,   256,   257,     0,  1542,   258,     0,   651,   259,
     260,     0,     0,     0,     0,     0,   652,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   653,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   654,   282,
     283,   284,   285,   655,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   656,   293,     0,     0,   657,   295,   658,
     296,     0,   297,   659,   660,   661,   662,   663,   302,   303,
     304,   305,     0,   664,   306,   307,     0,     0,   308,   309,
     310,   311,   665,   666,   667,   312,   313,     0,   668,   669,
       0,   314,   315,   670,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,   671,   324,   325,   326,   327,   328,   672,   330,
     331,   332,   673,   674,   335,   675,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   676,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   677,   678,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,   679,   367,   368,   369,
     370,   371,   680,   373,   374,   375,     0,   681,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,   682,   683,   399,   400,     0,   401,   684,   403,   404,
     405,   685,   686,   406,   407,   408,   409,   687,   410,   411,
       0,     0,   412,   413,   414,     0,   688,   415,   416,     0,
     689,   690,   691,   692,     0,     0,     0,     0,  1543,   421,
     422,     0,   693,   694,   695,   424,   425,   426,   696,   427,
     428,   697,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   698,   437,     0,     0,
     699,   700,   701,   702,   438,     0,     0,   439,   703,     0,
     704,   440,   441,   442,   705,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,     0,   706,     0,     0,     0,
     707,   708,     0,     0,     0,     0,   709,   710,     0,     0,
     711,   712,     0,     0,   713,   714,   138,     0,   612,   140,
     141,   142,   143,  2896,     0,     0,     0,     0,   144,     0,
       0,   613,     0,   146,   147,   148,   149,   150,   614,   152,
       0,   153,     0,     0,  2897,   154,   616,   617,   618,   155,
     619,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   620,   621,   163,     0,   164,   622,   623,
     166,     0,   167,   168,   169,   624,   171,     0,   625,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   626,   184,     0,   185,   627,   628,   186,     0,
       0,   187,   629,   630,     0,   631,   632,     0,   188,   189,
     190,   633,   634,   635,     0,     0,     0,     0,   636,   193,
     637,     0,     0,  2898,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   639,     0,   217,   218,   219,
     640,   641,   220,   221,     0,   222,   223,   224,   642,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   643,   231,   644,   233,     0,   234,     0,   645,     0,
     235,   236,     0,   237,   646,     0,   238,   239,     0,     0,
       0,   647,   241,   242,   243,   648,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   649,   248,   249,   650,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   651,   259,   260,     0,     0,     0,     0,     0,   652,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     653,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   654,   282,   283,   284,   285,   655,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   656,   293,     0,     0,
     657,   295,   658,   296,     0,   297,   659,   660,   661,   662,
     663,   302,   303,   304,   305,     0,   664,   306,   307,     0,
       0,   308,   309,   310,   311,   665,   666,   667,   312,   313,
       0,   668,   669,     0,   314,   315,   670,  2899,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   671,   324,   325,   326,   327,
     328,   672,   330,   331,   332,   673,   674,   335,   675,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   676,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,   677,   678,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,   679,
     367,   368,   369,   370,   371,   680,   373,   374,   375,     0,
     681,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,   682,   683,   399,   400,     0,   401,
     684,   403,   404,   405,   685,   686,   406,   407,   408,   409,
     687,   410,   411,     0,     0,   412,   413,   414,     0,   688,
     415,   416,     0,   689,   690,   691,   692,     0,     0,     0,
       0,     0,   421,   422,     0,   693,   694,   695,   424,   425,
     426,   696,   427,   428,   697,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   698,
     437,     0,     0,   699,   700,   701,   702,   438,     0,     0,
     439,   703,     0,   704,   440,   441,   442,   705,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   706,
       0,     0,     0,   707,   708,     0,     0,     0,     0,   709,
     710,     0,     0,   711,   712,     0,     0,   713,   714,   138,
       0,   612,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   613,     0,   146,   147,   148,   149,
     150,   614,   152,     0,   153,     0,     0,   615,   154,   616,
     617,   618,   155,   619,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   620,   621,   163,     0,
     164,   622,   623,   166,     0,   167,   168,   169,   624,   171,
       0,   625,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   626,   184,     0,   185,   627,
     628,   186,     0,     0,   187,   629,   630,     0,   631,   632,
       0,   188,   189,   190,   633,   634,   635,     0,     0,     0,
       0,   636,   193,   637,     0,     0,   638,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,   639,     0,
     217,   218,   219,   640,   641,   220,   221,     0,   222,   223,
     224,   642,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   643,   231,   644,   233,     0,   234,
       0,   645,     0,   235,   236,     0,   237,   646,     0,   238,
     239,     0,     0,     0,   647,   241,   242,   243,   648,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,   649,
     248,   249,   650,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,   651,   259,   260,     0,     0,     0,
       0,     0,   652,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,   653,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,   654,   282,   283,   284,   285,   655,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   656,
     293,     0,     0,   657,   295,   658,   296,     0,   297,   659,
     660,   661,   662,   663,   302,   303,   304,   305,     0,   664,
     306,   307,     0,     0,   308,   309,   310,   311,   665,   666,
     667,   312,   313,     0,   668,   669,     0,   314,   315,   670,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   671,   324,
     325,   326,   327,   328,   672,   330,   331,   332,   673,   674,
     335,   675,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   676,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     677,   678,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,   679,   367,   368,   369,   370,   371,   680,   373,
     374,   375,     0,   681,   377,  1094,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,   682,   683,   399,
     400,     0,   401,   684,   403,   404,   405,   685,   686,   406,
     407,   408,   409,   687,   410,   411,     0,     0,   412,   413,
     414,     0,   688,   415,   416,     0,   689,   690,   691,   692,
       0,     0,     0,     0,     0,   421,   422,     0,   693,   694,
     695,   424,   425,   426,   696,   427,   428,   697,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   698,   437,     0,     0,   699,   700,   701,   702,
     438,     0,     0,   439,   703,     0,   704,   440,   441,   442,
     705,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,     0,   706,     0,     0,     0,   707,   708,     0,     0,
       0,     0,   709,  1095,     0,     0,   711,   712,     0,     0,
     713,   714,   138,     0,   612,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   613,     0,   146,
     147,   148,   149,   150,   614,   152,     0,   153,     0,     0,
     615,   154,   616,   617,   618,   155,   619,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,   620,
     621,   163,     0,   164,   622,   623,   166,     0,   167,   168,
     169,   624,   171,     0,   625,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   626,   184,
       0,   185,   627,   628,   186,     0,     0,   187,   629,   630,
       0,   631,   632,     0,   188,   189,   190,   633,   634,   635,
       0,     0,     0,     0,   636,   193,   637,     0,     0,   638,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   639,     0,   217,   218,   219,   640,   641,   220,   221,
       0,   222,   223,   224,   642,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   643,   231,   644,
     233,     0,   234,     0,   645,     0,   235,   236,     0,   237,
     646,     0,   238,   239,     0,     0,     0,   647,   241,   242,
     243,   648,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   649,   248,   249,   650,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   651,   259,   260,
       0,     0,     0,     0,     0,   652,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   653,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   654,   282,   283,
     284,   285,   655,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   656,   293,     0,     0,   657,   295,   658,   296,
       0,   297,   659,   660,   661,   662,   663,   302,   303,   304,
     305,     0,   664,   306,   307,     0,     0,   308,   309,   310,
     311,   665,   666,   667,   312,   313,     0,   668,   669,     0,
     314,   315,   670,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,   671,   324,   325,   326,   327,   328,   672,   330,   331,
     332,   673,   674,   335,   675,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   676,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   677,   678,   361,     0,   362,   363,   364,
       0,   365,   366,     0,     0,   679,   367,   368,   369,   370,
     371,   680,   373,   374,   375,     0,   681,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,     0,     0,   395,     0,     0,   396,   397,   398,
     682,   683,   399,   400,     0,   401,   684,   403,   404,   405,
     685,   686,   406,   407,   408,   409,   687,   410,   411,     0,
       0,   412,   413,   414,     0,   688,   415,   416,     0,   689,
     690,   691,   692,     0,     0,     0,     0,     0,   421,   422,
       0,   693,   694,   695,   424,   425,   426,   696,   427,   428,
     697,   429,   430,     0,   431,   432,     0,     0,   433,     0,
       0,   434,     0,   435,     0,   698,   437,     0,     0,   699,
     700,   701,   702,   438,     0,     0,   439,   703,     0,   704,
     440,   441,   442,   705,     0,     0,     0,     0,   444,   445,
       0,   446,   447,     0,     0,   706,     0,     0,     0,   707,
     708,     0,     0,     0,     0,   709,   710,  1454,     0,   711,
     712,     0,     0,   713,   714,   138,     0,   612,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     613,     0,   146,   147,   148,   149,   150,   614,   152,     0,
     153,     0,     0,   615,   154,   616,   617,   618,   155,   619,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   620,   621,   163,     0,   164,   622,   623,   166,
       0,   167,   168,   169,   624,   171,     0,   625,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   626,   184,     0,   185,   627,   628,   186,     0,     0,
     187,   629,   630,     0,   631,   632,     0,   188,   189,   190,
     633,   634,   635,     0,     0,     0,     0,   636,   193,   637,
       0,     0,   638,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   639,     0,   217,   218,   219,   640,
     641,   220,   221,     0,   222,   223,   224,   642,     0,   225,
       0,     0,     0,   226,   227,  2018,   228,     0,   229,     0,
     643,   231,   644,   233,     0,   234,     0,   645,     0,   235,
     236,     0,   237,   646,     0,   238,   239,     0,     0,     0,
     647,   241,   242,   243,   648,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,   649,   248,   249,   650,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
     651,   259,   260,     0,     0,     0,     0,     0,   652,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,   653,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
     654,   282,   283,   284,   285,   655,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   656,   293,     0,     0,   657,
     295,   658,   296,     0,   297,   659,   660,   661,   662,   663,
     302,   303,   304,   305,     0,   664,   306,   307,     0,     0,
     308,   309,   310,   311,   665,   666,   667,   312,   313,     0,
     668,   669,     0,   314,   315,   670,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   671,   324,   325,   326,   327,   328,
     672,   330,   331,   332,   673,   674,   335,   675,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     676,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,   677,   678,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,   679,   367,
     368,   369,   370,   371,   680,   373,   374,   375,     0,   681,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,   682,   683,   399,   400,     0,   401,   684,
     403,   404,   405,   685,   686,   406,   407,   408,   409,   687,
     410,   411,     0,     0,   412,   413,   414,     0,   688,   415,
     416,     0,   689,   690,   691,   692,     0,     0,     0,     0,
       0,   421,   422,     0,   693,   694,   695,   424,   425,   426,
     696,   427,   428,   697,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   698,   437,
       0,     0,   699,   700,   701,   702,   438,     0,     0,   439,
     703,     0,   704,   440,   441,   442,   705,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,     0,   706,     0,
       0,     0,   707,   708,     0,     0,     0,     0,   709,   710,
       0,     0,   711,   712,     0,     0,   713,   714,   138,     0,
     612,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   613,     0,   146,   147,   148,   149,   150,
     614,   152,     0,   153,     0,     0,   615,   154,   616,   617,
     618,   155,   619,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,   620,   621,   163,     0,   164,
     622,   623,   166,     0,   167,   168,   169,   624,   171,     0,
     625,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   626,   184,     0,   185,   627,   628,
     186,     0,     0,   187,   629,   630,     0,   631,   632,     0,
     188,   189,   190,   633,   634,   635,     0,     0,     0,     0,
     636,   193,   637,     0,     0,   638,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,   639,     0,   217,
     218,   219,   640,   641,   220,   221,     0,   222,   223,   224,
     642,     0,   225,     0,     0,     0,   226,   227,  2020,   228,
       0,   229,     0,   643,   231,   644,   233,     0,   234,     0,
     645,     0,   235,   236,     0,   237,   646,     0,   238,   239,
       0,     0,     0,   647,   241,   242,   243,   648,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   649,   248,
     249,   650,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   651,   259,   260,     0,     0,     0,     0,
       0,   652,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   653,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   654,   282,   283,   284,   285,   655,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   656,   293,
       0,     0,   657,   295,   658,   296,     0,   297,   659,   660,
     661,   662,   663,   302,   303,   304,   305,     0,   664,   306,
     307,     0,     0,   308,   309,   310,   311,   665,   666,   667,
     312,   313,     0,   668,   669,     0,   314,   315,   670,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,   671,   324,   325,
     326,   327,   328,   672,   330,   331,   332,   673,   674,   335,
     675,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   676,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   677,
     678,   361,     0,   362,   363,   364,     0,   365,   366,     0,
       0,   679,   367,   368,   369,   370,   371,   680,   373,   374,
     375,     0,   681,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,     0,     0,
     395,     0,     0,   396,   397,   398,   682,   683,   399,   400,
       0,   401,   684,   403,   404,   405,   685,   686,   406,   407,
     408,   409,   687,   410,   411,     0,     0,   412,   413,   414,
       0,   688,   415,   416,     0,   689,   690,   691,   692,     0,
       0,     0,     0,     0,   421,   422,     0,   693,   694,   695,
     424,   425,   426,   696,   427,   428,   697,   429,   430,     0,
     431,   432,     0,     0,   433,     0,     0,   434,     0,   435,
       0,   698,   437,     0,     0,   699,   700,   701,   702,   438,
       0,     0,   439,   703,     0,   704,   440,   441,   442,   705,
       0,     0,     0,     0,   444,   445,     0,   446,   447,     0,
       0,   706,     0,     0,     0,   707,   708,     0,     0,     0,
       0,   709,   710,     0,     0,   711,   712,     0,     0,   713,
     714,   138,     0,   612,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   613,     0,   146,   147,
     148,   149,   150,   614,   152,     0,   153,     0,     0,   615,
     154,   616,   617,   618,   155,   619,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   620,   621,
     163,     0,   164,   622,   623,   166,     0,   167,   168,   169,
     624,   171,     0,   625,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   626,   184,     0,
     185,   627,   628,   186,     0,     0,   187,   629,   630,     0,
     631,   632,     0,   188,   189,   190,   633,   634,   635,     0,
       0,     0,     0,   636,   193,   637,     0,     0,   638,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     639,     0,   217,   218,   219,   640,   641,   220,   221,     0,
     222,   223,   224,   642,     0,   225,     0,     0,     0,   226,
     227,  2022,   228,     0,   229,     0,   643,   231,   644,   233,
       0,   234,     0,   645,     0,   235,   236,     0,   237,   646,
       0,   238,   239,     0,     0,     0,   647,   241,   242,   243,
     648,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   649,   248,   249,   650,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   651,   259,   260,     0,
       0,     0,     0,     0,   652,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   653,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   654,   282,   283,   284,
     285,   655,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   656,   293,     0,     0,   657,   295,   658,   296,     0,
     297,   659,   660,   661,   662,   663,   302,   303,   304,   305,
       0,   664,   306,   307,     0,     0,   308,   309,   310,   311,
     665,   666,   667,   312,   313,     0,   668,   669,     0,   314,
     315,   670,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     671,   324,   325,   326,   327,   328,   672,   330,   331,   332,
     673,   674,   335,   675,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   676,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,   677,   678,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,   679,   367,   368,   369,   370,   371,
     680,   373,   374,   375,     0,   681,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,   682,
     683,   399,   400,     0,   401,   684,   403,   404,   405,   685,
     686,   406,   407,   408,   409,   687,   410,   411,     0,     0,
     412,   413,   414,     0,   688,   415,   416,     0,   689,   690,
     691,   692,     0,     0,     0,     0,     0,   421,   422,     0,
     693,   694,   695,   424,   425,   426,   696,   427,   428,   697,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   698,   437,     0,     0,   699,   700,
     701,   702,   438,     0,     0,   439,   703,     0,   704,   440,
     441,   442,   705,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,     0,   706,     0,     0,     0,   707,   708,
       0,     0,     0,     0,   709,   710,     0,     0,   711,   712,
       0,     0,   713,   714,   138,     0,   612,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   613,
       0,   146,   147,   148,   149,   150,   614,   152,     0,   153,
       0,     0,   615,   154,   616,   617,   618,   155,   619,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   620,   621,   163,     0,   164,   622,   623,   166,     0,
     167,   168,   169,   624,   171,     0,   625,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     626,   184,     0,   185,   627,   628,   186,     0,     0,   187,
     629,   630,     0,   631,   632,     0,   188,   189,   190,   633,
     634,   635,     0,     0,     0,     0,   636,   193,   637,     0,
       0,   638,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,   639,     0,   217,   218,   219,   640,   641,
     220,   221,     0,   222,   223,   224,   642,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   643,
     231,   644,   233,     0,   234,     0,   645,     0,   235,   236,
       0,   237,   646,     0,   238,   239,     0,     0,     0,   647,
     241,   242,   243,   648,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,   649,   248,   249,   650,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,   651,
     259,   260,     0,     0,     0,     0,     0,   652,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,   653,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,   654,
     282,   283,   284,   285,   655,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   656,   293,     0,     0,   657,   295,
     658,   296,     0,   297,   659,   660,   661,   662,   663,   302,
     303,   304,   305,     0,   664,   306,   307,     0,     0,   308,
     309,   310,   311,   665,   666,   667,   312,   313,     0,   668,
     669,     0,   314,   315,   670,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   671,   324,   325,   326,   327,   328,   672,
     330,   331,   332,   673,   674,   335,   675,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   676,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   677,   678,   361,     0,   362,
     363,   364,     0,   365,   366,     0,     0,   679,   367,   368,
     369,   370,   371,   680,   373,   374,   375,     0,   681,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,     0,     0,   395,     0,     0,   396,
     397,   398,   682,   683,   399,   400,     0,   401,   684,   403,
     404,   405,   685,   686,   406,   407,   408,   409,   687,   410,
     411,     0,     0,   412,   413,   414,     0,   688,   415,   416,
       0,   689,   690,   691,   692,     0,     0,     0,     0,     0,
     421,   422,     0,   693,   694,   695,   424,   425,   426,   696,
     427,   428,   697,   429,   430,     0,   431,   432,     0,     0,
     433,     0,     0,   434,     0,   435,     0,   698,   437,     0,
       0,   699,   700,   701,   702,   438,     0,     0,   439,   703,
       0,   704,   440,   441,   442,   705,     0,     0,     0,     0,
     444,   445,     0,   446,   447,     0,     0,   706,     0,     0,
       0,   707,   708,     0,     0,     0,     0,   709,   710,     0,
       0,   711,   712,     0,     0,   713,   714,   138,     0,   612,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   613,     0,   146,   147,   148,   149,   150,   614,
     152,     0,   153,     0,     0,   615,   154,   616,   617,   618,
     155,   619,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,   620,   621,   163,     0,   164,   622,
     623,   166,     0,   167,   168,   169,   624,   171,     0,   625,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   626,   184,     0,   185,   627,   628,   186,
       0,     0,   187,   629,   630,     0,   631,   632,     0,   188,
     189,   190,   633,   634,   635,     0,     0,     0,     0,   636,
     193,   637,     0,     0,   638,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   639,     0,   217,   218,
     219,   640,   641,   220,   221,     0,   222,   223,   224,   642,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   643,   231,   644,   233,     0,   234,     0,   645,
       0,   235,   236,     0,   237,   646,     0,   238,   239,     0,
       0,     0,   647,   241,   242,   243,   648,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   649,   248,   249,
     650,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   651,   259,   260,     0,     0,     0,     0,     0,
     652,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   653,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   654,   282,   283,   284,   285,   655,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   656,   293,     0,
       0,   657,   295,   658,   296,     0,   297,   659,   660,   661,
     662,   663,   302,   303,   304,   305,     0,   664,   306,   307,
       0,     0,   308,   309,   310,   311,   665,   666,   667,   312,
     313,     0,   668,   669,     0,   314,   315,   670,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,   671,   324,   325,   326,
     327,   328,   672,   330,   331,   332,   673,   674,   335,   675,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   676,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   677,   678,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
     679,   367,   368,   369,   370,   371,   680,   373,   374,   375,
       0,   681,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,   682,   683,   399,   400,     0,
     401,   684,   403,   404,   405,   685,   686,   406,   407,   408,
     409,   687,   410,   411,     0,     0,   412,   413,   414,     0,
     688,   415,   416,     0,   689,   690,   691,   692,     0,     0,
       0,     0,     0,   421,   422,     0,   693,   694,   695,   424,
     425,   426,   696,   427,   428,   697,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     698,   437,     0,     0,   699,   700,   701,   702,   438,     0,
       0,   439,   703,     0,   704,   440,   441,   442,   705,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,     0,
     706,     0,     0,     0,   707,   708,     0,     0,     0,     0,
     709,  1032,     0,     0,   711,   712,     0,     0,   713,   714,
     138,     0,   612,   140,   141,   142,   143,  1573,     0,     0,
       0,     0,  1574,     0,     0,   613,     0,   146,   147,   148,
     149,   150,   614,   152,     0,   153,     0,     0,   615,   154,
     616,   617,   618,   155,   619,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   620,   621,   163,
       0,   164,   622,   623,   166,     0,   167,   168,   169,   624,
     171,     0,   625,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   626,   184,     0,   185,
     627,   628,   186,     0,     0,   187,   629,   630,     0,   631,
     632,     0,   188,   189,   190,   633,   634,   635,     0,     0,
       0,     0,   636,   193,   637,     0,     0,   638,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   639,
       0,   217,   218,   219,   640,   641,   220,   221,     0,   222,
     223,   224,   642,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   643,   231,   644,   233,     0,
     234,     0,   645,     0,   235,   236,     0,   237,   646,     0,
     238,   239,     0,     0,     0,   647,   241,   242,   243,   648,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
     649,   248,   249,   650,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,   651,   259,   260,     0,     0,
       0,     0,     0,   652,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,   653,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,   654,   282,   283,   284,   285,
     655,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     656,   293,     0,     0,   657,   295,   658,   296,     0,   297,
     659,   660,   661,   662,   663,   302,   303,   304,   305,     0,
     664,   306,   307,     0,     0,   308,   309,   310,   311,   665,
       0,   667,   312,   313,     0,   668,   669,     0,   314,   315,
     670,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   671,
     324,   325,   326,   327,   328,   672,   330,   331,   332,   673,
     674,   335,   675,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   676,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,   677,   678,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,   679,   367,   368,   369,   370,   371,   680,
     373,   374,   375,     0,   681,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,   682,   683,
     399,   400,     0,   401,   684,   403,   404,   405,   685,   686,
     406,   407,   408,   409,   687,   410,   411,     0,     0,   412,
     413,   414,     0,   688,   415,   416,     0,   689,   690,   691,
     692,     0,     0,     0,     0,     0,   421,   422,     0,   693,
     694,   695,   424,   425,   426,   696,   427,   428,   697,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   698,   437,     0,     0,   699,   700,   701,
     702,   438,     0,     0,   439,   703,     0,   704,   440,   441,
     442,   705,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   706,     0,     0,     0,   707,   708,     0,
       0,     0,     0,   709,   710,     0,     0,   711,   712,     0,
       0,   713,   714,   138,     0,   612,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   613,     0,
     146,   147,   148,   149,   150,   614,   152,     0,   153,     0,
       0,   615,   154,   616,   617,   618,   155,   619,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
     620,   621,   163,     0,   164,   622,   623,   166,     0,   167,
     168,   169,   624,   171,     0,   625,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   626,
     184,     0,   185,   627,   628,   186,     0,     0,   187,   629,
     630,     0,   631,   632,     0,   188,   189,   190,   633,   634,
     635,     0,     0,     0,     0,   636,   193,   637,     0,     0,
     638,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,   639,     0,   217,   218,   219,   640,   641,   220,
     221,     0,   222,   223,   224,   642,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   643,   231,
     644,   233,     0,   234,     0,   645,     0,   235,   236,     0,
     237,   646,     0,   238,   239,     0,     0,     0,   647,   241,
     242,   243,   648,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   649,   248,   249,  2406,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   651,   259,
     260,     0,     0,     0,     0,     0,   652,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   653,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   654,   282,
     283,   284,   285,   655,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   656,   293,     0,     0,   657,   295,   658,
     296,     0,   297,   659,   660,   661,   662,   663,   302,   303,
     304,   305,     0,   664,   306,   307,     0,     0,   308,   309,
     310,   311,   665,   666,   667,   312,   313,     0,   668,   669,
       0,   314,   315,   670,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,   671,   324,   325,   326,   327,   328,   672,   330,
     331,   332,   673,   674,   335,   675,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   676,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   677,   678,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,   679,   367,   368,   369,
     370,   371,   680,   373,   374,   375,     0,   681,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,   682,   683,   399,   400,     0,   401,   684,   403,   404,
     405,   685,   686,   406,   407,   408,   409,   687,   410,   411,
       0,     0,   412,   413,   414,     0,   688,   415,   416,     0,
     689,   690,   691,   692,     0,     0,     0,     0,     0,   421,
     422,     0,   693,   694,   695,   424,   425,   426,   696,   427,
     428,   697,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   698,   437,     0,     0,
     699,   700,   701,   702,   438,     0,     0,   439,   703,     0,
     704,   440,   441,   442,   705,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,     0,   706,     0,     0,     0,
     707,   708,     0,     0,     0,     0,   709,   710,     0,     0,
     711,   712,     0,     0,   713,   714,   138,     0,   612,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   613,     0,   146,   147,   148,   149,   150,   614,   152,
       0,   153,     0,     0,   615,   154,   616,   617,   618,   155,
     619,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   620,   621,   163,     0,   164,   622,   623,
     166,     0,   167,   168,   169,   624,   171,     0,   625,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   626,   184,     0,   185,   627,   628,   186,     0,
       0,   187,   629,   630,     0,   631,   632,     0,   188,   189,
     190,   633,   634,   635,     0,     0,     0,     0,   636,   193,
     637,     0,     0,   638,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   639,     0,   217,   218,   219,
     640,   641,   220,   221,     0,   222,   223,   224,   642,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   643,   231,   644,   233,     0,   234,     0,   645,     0,
     235,   236,     0,   237,   646,     0,   238,   239,     0,     0,
       0,   647,   241,   242,   243,   648,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   649,   248,   249,  2452,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   651,   259,   260,     0,     0,     0,     0,     0,   652,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     653,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   654,   282,   283,   284,   285,   655,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   656,   293,     0,     0,
     657,   295,   658,   296,     0,   297,   659,   660,   661,   662,
     663,   302,   303,   304,   305,     0,   664,   306,   307,     0,
       0,   308,   309,   310,   311,   665,   666,   667,   312,   313,
       0,   668,   669,     0,   314,   315,   670,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   671,   324,   325,   326,   327,
     328,   672,   330,   331,   332,   673,   674,   335,   675,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   676,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,   677,   678,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,   679,
     367,   368,   369,   370,   371,   680,   373,   374,   375,     0,
     681,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,   682,   683,   399,   400,     0,   401,
     684,   403,   404,   405,   685,   686,   406,   407,   408,   409,
     687,   410,   411,     0,     0,   412,   413,   414,     0,   688,
     415,   416,     0,   689,   690,   691,   692,     0,     0,     0,
       0,     0,   421,   422,     0,   693,   694,   695,   424,   425,
     426,   696,   427,   428,   697,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   698,
     437,     0,     0,   699,   700,   701,   702,   438,     0,     0,
     439,   703,     0,   704,   440,   441,   442,   705,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   706,
       0,     0,     0,   707,   708,     0,     0,     0,     0,   709,
     710,     0,     0,   711,   712,     0,     0,   713,   714,   138,
       0,   612,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   613,     0,   146,   147,   148,   149,
     150,   614,   152,     0,   153,     0,     0,   615,   154,   616,
     617,   618,   155,   619,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   620,   621,   163,     0,
     164,   622,   623,   166,     0,   167,   168,   169,   624,   171,
       0,   625,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   626,   184,     0,   185,   627,
     628,   186,     0,     0,   187,   629,   630,     0,   631,   632,
       0,   188,   189,   190,   633,   634,   635,     0,     0,     0,
       0,   636,   193,   637,     0,     0,  3107,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,   639,     0,
     217,   218,   219,   640,   641,   220,   221,     0,   222,   223,
     224,   642,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   643,   231,   644,   233,     0,   234,
       0,   645,     0,   235,   236,     0,   237,   646,     0,   238,
     239,     0,     0,     0,   647,   241,   242,   243,   648,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,   649,
     248,   249,   650,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,   651,   259,   260,     0,     0,     0,
       0,     0,   652,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,   653,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,   654,   282,   283,   284,   285,   655,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   656,
     293,     0,     0,   657,   295,   658,   296,     0,   297,   659,
     660,   661,   662,   663,   302,   303,   304,   305,     0,   664,
     306,   307,     0,     0,   308,   309,   310,   311,   665,   666,
     667,   312,   313,     0,   668,   669,     0,   314,   315,   670,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   671,   324,
     325,   326,   327,   328,   672,   330,   331,   332,   673,   674,
     335,   675,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   676,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     677,   678,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,   679,   367,   368,   369,   370,   371,   680,   373,
     374,   375,     0,   681,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,   682,   683,   399,
     400,     0,   401,   684,   403,   404,   405,   685,   686,   406,
     407,   408,   409,   687,   410,   411,     0,     0,   412,   413,
     414,     0,   688,   415,   416,     0,   689,   690,   691,   692,
       0,     0,     0,     0,     0,   421,   422,     0,   693,   694,
     695,   424,   425,   426,   696,   427,   428,   697,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   698,   437,     0,     0,   699,   700,   701,   702,
     438,     0,     0,   439,   703,     0,   704,   440,   441,   442,
     705,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,     0,   706,     0,     0,     0,   707,   708,     0,     0,
       0,     0,   709,   710,     0,     0,   711,   712,     0,     0,
     713,   714,   138,     0,   612,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   613,     0,   146,
     147,   148,   149,   150,   614,   152,     0,   153,     0,     0,
     615,   154,   616,   617,   618,   155,   619,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,   620,
     621,   163,     0,   164,   622,   623,   166,     0,   167,   168,
     169,   624,   171,     0,   625,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   626,   184,
       0,   185,   627,   628,   186,     0,     0,   187,   629,   630,
       0,   631,   632,     0,   188,   189,   190,   633,   634,   635,
       0,     0,     0,     0,   636,   193,   637,     0,     0,   638,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   639,     0,   217,   218,   219,   640,   641,   220,   221,
       0,   222,   223,   224,   642,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   643,   231,   644,
     233,     0,   234,     0,   645,     0,   235,   236,     0,   237,
     646,     0,   238,   239,     0,     0,     0,   647,   241,   242,
     243,   648,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   649,   248,   249,   650,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   651,   259,   260,
       0,     0,     0,     0,     0,   652,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   653,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   654,   282,   283,
     284,   285,   655,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   656,   293,     0,     0,   657,   295,   658,   296,
       0,   297,   659,   660,   661,   662,   663,   302,   303,   304,
     305,     0,   664,   306,   307,     0,     0,   308,   309,   310,
     311,   665,     0,   667,   312,   313,     0,   668,   669,     0,
     314,   315,   670,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,   671,   324,   325,   326,   327,   328,   672,   330,   331,
     332,   673,   674,   335,   675,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   676,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   677,   678,   361,     0,   362,   363,   364,
       0,   365,   366,     0,     0,   679,   367,   368,   369,   370,
     371,   680,   373,   374,   375,     0,   681,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,     0,     0,   395,     0,     0,   396,   397,   398,
     682,   683,   399,   400,     0,   401,   684,   403,   404,   405,
     685,   686,   406,   407,   408,   409,   687,   410,   411,     0,
       0,   412,   413,   414,     0,   688,   415,   416,     0,   689,
     690,   691,   692,     0,     0,     0,     0,     0,   421,   422,
       0,   693,   694,   695,   424,   425,   426,   696,   427,   428,
     697,   429,   430,     0,   431,   432,     0,     0,   433,     0,
       0,   434,     0,   435,     0,   698,   437,     0,     0,   699,
     700,   701,   702,   438,     0,     0,   439,   703,     0,   704,
     440,   441,   442,   705,     0,     0,     0,     0,   444,   445,
       0,   446,   447,     0,     0,   706,     0,     0,     0,   707,
     708,     0,     0,     0,     0,   709,   710,     0,     0,   711,
     712,     0,     0,   713,   714,   138,     0,   612,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     613,     0,   146,   147,   148,   149,   150,   614,   152,     0,
     153,     0,     0,   615,   154,   616,   617,   618,   155,   619,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   620,   621,   163,     0,   164,   622,   623,   166,
       0,   167,   168,   169,   624,   171,     0,   625,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   626,   184,     0,   185,   627,   628,   186,     0,     0,
     187,   629,   630,     0,   631,   632,     0,   188,   189,   190,
     633,   634,   635,     0,     0,     0,     0,   636,   193,   637,
       0,     0,   638,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   639,     0,   217,   218,   219,   640,
     641,   220,   221,     0,   222,   223,   224,   642,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     643,   231,   644,   233,     0,   234,     0,   645,     0,   235,
     236,     0,   237,   646,     0,   238,   239,     0,     0,     0,
     647,   241,   242,   243,   648,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,   649,   248,   249,  1588,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
     651,   259,   260,     0,     0,     0,     0,     0,   652,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,   653,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
     654,   282,   283,   284,   285,   655,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   656,   293,     0,     0,   657,
     295,   658,   296,     0,   297,   659,   660,   661,   662,   663,
     302,   303,   304,   305,     0,   664,   306,   307,     0,     0,
     308,   309,   310,   311,   665,     0,   667,   312,   313,     0,
     668,   669,     0,   314,   315,   670,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   671,   324,   325,   326,   327,   328,
     672,   330,   331,   332,   673,   674,   335,   675,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     676,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,   677,   678,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,   679,   367,
     368,   369,   370,   371,   680,   373,   374,   375,     0,   681,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,   682,   683,   399,   400,     0,   401,   684,
     403,   404,   405,   685,   686,   406,   407,   408,   409,   687,
     410,   411,     0,     0,   412,   413,   414,     0,   688,   415,
     416,     0,   689,   690,   691,   692,     0,     0,     0,     0,
       0,   421,   422,     0,   693,   694,   695,   424,   425,   426,
     696,   427,   428,   697,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   698,   437,
       0,     0,   699,   700,   701,   702,   438,     0,     0,   439,
     703,     0,   704,   440,   441,   442,   705,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,     0,   706,     0,
       0,     0,   707,   708,     0,     0,     0,     0,   709,   710,
       0,     0,   711,   712,     0,     0,   713,   714,   138,     0,
     612,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   613,     0,   146,   147,   148,   149,   150,
     614,   152,     0,   153,     0,     0,   615,   154,   616,   617,
     618,   155,   619,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,   620,   621,   163,     0,   164,
     622,   623,   166,     0,   167,   168,   169,   624,   171,     0,
     625,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   626,   184,     0,   185,   627,   628,
     186,     0,     0,   187,   629,   630,     0,   631,   632,     0,
     188,   189,   190,   633,   634,   635,     0,     0,     0,     0,
     636,   193,   637,     0,     0,   638,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,   639,     0,   217,
     218,   219,   640,   641,   220,   221,     0,   222,   223,   224,
     642,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   643,   231,   644,   233,     0,   234,     0,
     645,     0,   235,   236,     0,   237,   646,     0,   238,   239,
       0,     0,     0,   647,   241,   242,   243,   648,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   649,   248,
     249,  1590,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   651,   259,   260,     0,     0,     0,     0,
       0,   652,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   653,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   654,   282,   283,   284,   285,   655,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   656,   293,
       0,     0,   657,   295,   658,   296,     0,   297,   659,   660,
     661,   662,   663,   302,   303,   304,   305,     0,   664,   306,
     307,     0,     0,   308,   309,   310,   311,   665,     0,   667,
     312,   313,     0,   668,   669,     0,   314,   315,   670,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,   671,   324,   325,
     326,   327,   328,   672,   330,   331,   332,   673,   674,   335,
     675,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   676,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   677,
     678,   361,     0,   362,   363,   364,     0,   365,   366,     0,
       0,   679,   367,   368,   369,   370,   371,   680,   373,   374,
     375,     0,   681,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,     0,     0,
     395,     0,     0,   396,   397,   398,   682,   683,   399,   400,
       0,   401,   684,   403,   404,   405,   685,   686,   406,   407,
     408,   409,   687,   410,   411,     0,     0,   412,   413,   414,
       0,   688,   415,   416,     0,   689,   690,   691,   692,     0,
       0,     0,     0,     0,   421,   422,     0,   693,   694,   695,
     424,   425,   426,   696,   427,   428,   697,   429,   430,     0,
     431,   432,     0,     0,   433,     0,     0,   434,     0,   435,
       0,   698,   437,     0,     0,   699,   700,   701,   702,   438,
       0,     0,   439,   703,     0,   704,   440,   441,   442,   705,
       0,     0,     0,     0,   444,   445,     0,   446,   447,     0,
       0,   706,     0,     0,     0,   707,   708,     0,     0,     0,
       0,   709,   710,     0,     0,   711,   712,     0,     0,   713,
     714,   138,     0,   612,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   613,     0,   146,   147,
     148,   149,   150,   614,   152,     0,   153,     0,     0,   615,
     154,   616,   617,   618,   155,   619,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   620,   621,
     163,     0,   164,   622,   623,   166,     0,   167,   168,   169,
     624,   171,     0,   625,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   626,   184,     0,
     185,   627,   628,   186,     0,     0,   187,   629,   630,     0,
     631,   632,     0,   188,   189,   190,   633,   634,   635,     0,
       0,     0,     0,   636,   193,   637,     0,     0,   638,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     639,     0,   217,   218,   219,   640,   641,   220,   221,     0,
     222,   223,   224,   642,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   643,   231,   644,   233,
       0,   234,     0,   645,     0,   235,   236,     0,   237,   646,
       0,   238,   239,     0,     0,     0,   647,   241,   242,   243,
     648,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   649,   248,   249,   650,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   651,   259,   260,     0,
       0,     0,     0,     0,   652,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   653,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   654,   282,   283,   284,
     285,   655,   286,   287,  3859,     0,     0,     0,   289,   290,
     291,   656,   293,     0,     0,   657,   295,   658,   296,     0,
     297,   659,   660,   661,   662,   663,   302,   303,   304,   305,
       0,   664,   306,   307,     0,     0,   308,   309,   310,   311,
     665,     0,   667,   312,   313,     0,   668,   669,     0,   314,
     315,   670,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     671,   324,   325,   326,   327,   328,   672,   330,   331,   332,
     673,   674,   335,   675,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   676,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,   677,   678,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,   679,   367,   368,   369,   370,   371,
     680,   373,   374,   375,     0,   681,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,   682,
     683,   399,   400,     0,   401,   684,   403,   404,   405,   685,
     686,   406,   407,   408,   409,   687,   410,   411,     0,     0,
     412,   413,   414,     0,   688,   415,   416,     0,   689,   690,
     691,   692,     0,     0,     0,     0,     0,   421,   422,     0,
     693,   694,   695,   424,   425,   426,   696,   427,   428,   697,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   698,   437,     0,     0,   699,   700,
     701,   702,   438,     0,     0,   439,   703,     0,   704,   440,
     441,   442,   705,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,     0,   706,     0,     0,     0,   707,   708,
       0,     0,     0,     0,   709,   710,     0,     0,   711,   712,
       0,     0,   713,   714,   138,     0,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,  2254,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,  2255,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,  1369,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,  1370,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,  2755,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,  2756,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
    -399,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,  2257,     0,     0,     0,     0,     0,
     392,   393,     0,   394,     0,     0,   395,     0,     0,   396,
     397,   398,     0,     0,   399,   400,     0,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,     0,   410,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,     0,     0,     0,     0,     0,
     421,   422,     0,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,   429,   430,     0,   431,   432,     0,     0,
     433,     0,     0,   434,     0,   435,     0,   436,   437,     0,
       0,     0,     0,     0,     0,   438,     0,     0,   439,     0,
       0,     0,   440,   441,   442,   443,     0,     0,     0,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     138,     0,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,  2319,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,  2254,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,  2255,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,  1369,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,  1370,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
    2257,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,     0,     0,
     399,   400,     0,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,     0,   410,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,     0,     0,     0,     0,     0,   421,   422,     0,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   436,   437,     0,     0,     0,     0,     0,
       0,   438,     0,     0,   439,     0,     0,     0,   440,   441,
     442,   443,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   138,     0,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,  2319,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,  2141,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,     0,     0,   399,   400,     0,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
       0,   410,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,     0,     0,     0,
       0,     0,   421,   422,     0,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   436,
     437,     0,     0,     0,     0,     0,     0,   438,     0,     0,
     439,     0,     0,     0,   440,   441,   442,   443,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,  2534,     0,     0,   144,     0,     0,   145,   714,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,     0,     0,   395,     0,     0,   396,   397,   398,
       0,     0,   399,   400,     0,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,     0,   410,   411,     0,
       0,   412,   413,   414,     0,     0,   415,   416,     0,   417,
     418,   419,   420,     0,     0,     0,     0,     0,   421,   422,
       0,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,   429,   430,     0,   431,   432,     0,     0,   433,     0,
       0,   434,     0,   435,     0,   436,   437,     0,     0,     0,
       0,     0,     0,   438,     0,     0,   439,     0,     0,     0,
     440,   441,   442,   443,     0,     0,     0,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,     0,     0,
     138,     0,   139,   140,   141,   142,   143,  4019,     0,     0,
       0,     0,   144,  4020,   714,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,     0,     0,
     399,   400,     0,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,     0,   410,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,     0,     0,     0,     0,     0,   421,   422,     0,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   436,   437,     0,     0,     0,     0,     0,
       0,   438,     0,     0,   439,     0,     0,     0,   440,   441,
     442,   443,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   138,     0,   139,   140,
     141,   142,   143,     0,  1036,     0,     0,     0,   144,     0,
       0,   145,   714,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
    1225,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,     0,     0,   399,   400,     0,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
       0,   410,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,     0,     0,     0,
       0,     0,   421,   422,     0,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   436,
     437,     0,     0,     0,     0,     0,     0,   438,     0,     0,
     439,     0,     0,     0,   440,   441,   442,   443,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,   492,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,     0,     0,   395,     0,     0,   396,   397,   398,
       0,     0,   399,   400,     0,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,     0,   410,   411,     0,
       0,   412,   413,   414,     0,     0,   415,   416,     0,   417,
     418,   419,   420,     0,     0,     0,     0,     0,   421,   422,
       0,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,   429,   430,     0,   431,   432,     0,     0,   433,     0,
       0,   434,     0,   435,     0,   436,   437,     0,     0,     0,
       0,     0,     0,   438,     0,     0,   439,     0,     0,     0,
     440,   441,   442,   443,     0,     0,     0,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,     0,     0,
     138,  2084,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,   492,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,     0,     0,
     399,   400,     0,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,     0,   410,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,     0,     0,     0,     0,     0,   421,   422,     0,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   436,   437,     0,     0,     0,     0,     0,
       0,   438,     0,     0,   439,     0,     0,     0,   440,   441,
     442,   443,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   138,     0,   139,   140,
     141,   142,   143,     0,  2318,     0,     0,     0,   144,     0,
       0,   145,  2319,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,     0,     0,   399,   400,     0,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
       0,   410,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,     0,     0,     0,
       0,     0,   421,   422,     0,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   436,
     437,     0,     0,     0,     0,     0,     0,   438,     0,     0,
     439,     0,     0,     0,   440,   441,   442,   443,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,     0,     0,   138,     0,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,  4020,   714,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,     0,     0,   395,     0,     0,   396,
     397,   398,     0,     0,   399,   400,     0,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,     0,   410,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,     0,     0,     0,     0,     0,
     421,   422,     0,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,   429,   430,     0,   431,   432,     0,     0,
     433,     0,     0,   434,     0,   435,     0,   436,   437,     0,
       0,     0,     0,     0,     0,   438,     0,     0,   439,     0,
       0,     0,   440,   441,   442,   443,     0,     0,     0,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     138,     0,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,   492,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   552,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   553,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,     0,     0,
     399,   400,     0,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,     0,   410,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,     0,     0,     0,     0,     0,   421,   422,     0,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   436,   437,     0,     0,     0,     0,     0,
       0,   438,     0,     0,   439,     0,     0,     0,   440,   441,
     442,   443,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   138,     0,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,   492,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,     0,     0,   399,   400,     0,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
       0,   410,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,     0,     0,     0,
       0,     0,   421,   422,     0,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   436,
     437,     0,     0,     0,     0,     0,     0,   438,     0,     0,
     439,     0,     0,     0,   440,   441,   442,   443,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,   714,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,     0,     0,   395,     0,     0,   396,   397,   398,
       0,     0,   399,   400,     0,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,     0,   410,   411,     0,
       0,   412,   413,   414,     0,     0,   415,   416,     0,   417,
     418,   419,   420,     0,     0,     0,     0,     0,   421,   422,
       0,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,   429,   430,     0,   431,   432,     0,     0,   433,     0,
       0,   434,     0,   435,     0,   436,   437,     0,     0,     0,
       0,     0,     0,   438,     0,     0,   439,     0,     0,     0,
     440,   441,   442,   443,     0,     0,     0,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,   138,     0,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,  2319,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   564,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,     0,     0,
     395,     0,     0,   396,   397,   398,     0,     0,   399,   400,
       0,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,     0,   410,   411,     0,     0,   412,   413,   414,
       0,   135,   415,   416,     0,   417,   418,   419,   420,     0,
       0,     0,     0,     0,   421,   422,     0,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,   429,   430,     0,
     431,   432,     0,     0,   433,     0,     0,   434,     0,   435,
       0,   436,   437,     0,     0,     0,     0,     0,     0,   438,
       0,     0,   439,     0,     0,     0,   440,   441,   442,   443,
       0,     0,     0,     0,   444,   445,     0,   446,   447,     0,
       0,   448,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,  1560,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,   564,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,   135,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,     0,   448,     0,   138,     0,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,  2572,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   564,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,     0,     0,
     395,     0,     0,   396,   397,   398,     0,     0,   399,   400,
       0,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,     0,   410,   411,     0,     0,   412,   413,   414,
       0,   135,   415,   416,     0,   417,   418,   419,   420,     0,
       0,     0,     0,     0,   421,   422,     0,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,   429,   430,     0,
     431,   432,     0,     0,   433,     0,     0,   434,     0,   435,
       0,   436,   437,     0,     0,     0,     0,     0,     0,   438,
       0,     0,   439,     0,     0,     0,   440,   441,   442,   443,
       0,     0,     0,     0,   444,   445,     0,   446,   447,     0,
       0,   448,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,     0,  3137,
     146,   147,   148,   149,   150,   151,     0,     0,  -291,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3534,     0,   163,     0,   164,     0,     0,     0,     0,   167,
     168,  3535,   170,   171,     0,   172,   173,     0,     0,   175,
       0,   177,   178,   179,   180,     0,   181,   182,     0,     0,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,     0,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,     0,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,     0,     0,     0,   217,   218,   219,     0,     0,   220,
     221,  3536,   222,   223,   224,     0,     0,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,     0,   236,     0,
       0,     0,     0,     0,   239,     0,     0,     0,   240,   241,
     242,   243,  3537,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,     0,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,  3538,     0,     0,   255,
       0,     0,     0,   257,     0,     0,   258,  3539,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,  -246,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,     0,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,  3540,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   325,   326,   327,     0,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     0,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,     0,
       0,   358,     0,   360,  -246,     0,   361,     0,     0,   363,
       0,     0,   365,   366,  3541,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,     0,
     398,     0,     0,     0,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,     0,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,     0,     0,     0,     0,   433,
       0,     0,   434,     0,     0,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,  -246,     0,   444,
       0,     0,   446,     0,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,  4026,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,  1933,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,  2560,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,  2843,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
    3142,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,  2233,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,  2234,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,  2235,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,  2236,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,   954,   955,     0,   312,   313,     0,     0,  2237,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,  4006,  3995,  4007,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,  2238,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,  2424,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,  2566,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,  2069,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,   564,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
    2070,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,   135,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,  2574,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,  2575,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,   564,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
     135,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,  2424,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  2566,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,   564,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,   135,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,   914,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,   564,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,   135,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
    1263,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,   564,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,   135,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,   892,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,   893,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,   894,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,  2424,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,   564,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
     135,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  2613,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,   564,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,   135,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,   564,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,   135,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,  2556,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,   135,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,  3930,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,  3931,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,   988,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  1365,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  2166,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,  2167,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
    2329,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,  2653,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
     135,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  2166,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,  1637,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,  1638,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,     0,
    -291,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,     0,     0,     0,
       0,   162,  3534,     0,   163,     0,   164,     0,     0,     0,
       0,   167,   168,  3535,   170,   171,     0,   172,   173,     0,
       0,   175,     0,   177,   178,   179,   180,     0,   181,   182,
       0,     0,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,  -261,  -261,   205,     0,  -261,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,  3536,   222,   223,   224,     0,     0,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,     0,
     236,     0,     0,     0,     0,     0,   239,     0,     0,     0,
     240,   241,   242,   243,  3537,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,     0,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,  3538,     0,
       0,   255,     0,     0,     0,   257,     0,     0,   258,  3539,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,  -246,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,     0,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,  3540,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     0,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,     0,     0,   358,     0,   360,  -246,     0,   361,     0,
       0,   363,     0,     0,   365,   366,  3541,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,     0,   398,     0,     0,     0,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,     0,     0,     0,
       0,   433,     0,     0,   434,     0,     0,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,  -246,
       0,   444,     0,     0,   446,     0,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,     0,  -291,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  3534,     0,   163,     0,   164,     0,
       0,     0,     0,   167,   168,  3535,   170,   171,     0,   172,
     173,     0,     0,   175,     0,   177,   178,   179,   180,     0,
     181,   182,     0,     0,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,  -282,     0,   205,
       0,  -282,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3536,   222,   223,   224,     0,
       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,     0,   236,     0,     0,     0,     0,     0,   239,     0,
       0,     0,   240,   241,   242,   243,  3537,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,     0,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
    3538,     0,     0,   255,     0,     0,     0,   257,     0,     0,
     258,  3539,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,  -246,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,     0,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,  3540,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   325,   326,
     327,     0,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     0,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,     0,     0,   358,     0,   360,  -246,     0,
     361,     0,     0,   363,     0,     0,   365,   366,  3541,     0,
       0,     0,   368,   369,   370,   371,   372,   373,     0,   375,
       0,   376,     0,     0,     0,     0,   378,   379,   380,     0,
       0,     0,     0,   382,     0,     0,     0,   383,     0,   385,
       0,     0,   387,     0,     0,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,     0,   398,     0,     0,     0,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,     0,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,     0,
       0,     0,     0,   433,     0,     0,   434,     0,     0,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,  -282,
       0,  -246,     0,   444,     0,     0,   446,     0,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,     0,  -291,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,     0,     0,     0,     0,   162,  3534,     0,   163,     0,
     164,     0,     0,     0,     0,   167,   168,  3535,   170,   171,
       0,   172,   173,     0,     0,   175,     0,   177,   178,   179,
     180,     0,   181,   182,     0,     0,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,     0,     0,     0,   202,   203,   204,     0,  -279,
       0,   205,     0,  -279,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,     0,     0,     0,
     217,   218,   219,     0,     0,   220,   221,  3536,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,     0,   236,     0,     0,     0,     0,     0,
     239,     0,     0,     0,   240,   241,   242,   243,  3537,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,     0,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,  3538,     0,     0,   255,     0,     0,     0,   257,
       0,     0,   258,  3539,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,  -246,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,     0,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,  3540,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     0,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,     0,     0,   358,     0,   360,
    -246,     0,   361,     0,     0,   363,     0,     0,   365,   366,
    3541,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,     0,   398,     0,     0,     0,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
       0,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,     0,     0,     0,     0,   433,     0,     0,   434,     0,
       0,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,  -279,     0,  -246,     0,   444,     0,     0,   446,     0,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,     0,  -291,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,     0,     0,     0,     0,   162,  3534,     0,
     163,     0,   164,     0,     0,     0,     0,   167,   168,  3535,
     170,   171,     0,   172,   173,     0,     0,   175,     0,   177,
     178,   179,   180,     0,   181,   182,     0,     0,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,  3838,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,  3536,
     222,   223,   224,     0,     0,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,     0,   236,     0,     0,     0,
       0,     0,   239,     0,     0,     0,   240,   241,   242,   243,
    3537,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,     0,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,  3538,     0,     0,   255,     0,     0,
       0,   257,     0,     0,   258,  3539,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,  -246,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,     0,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,  3540,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   325,   326,   327,     0,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     0,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,     0,     0,   358,
       0,   360,  -246,     0,   361,     0,     0,   363,     0,     0,
     365,   366,  3541,     0,     0,     0,   368,   369,   370,   371,
     372,   373,     0,   375,     0,   376,     0,     0,     0,     0,
     378,   379,   380,     0,     0,     0,     0,   382,     0,     0,
       0,   383,     0,   385,     0,     0,   387,     0,     0,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,     0,   398,     0,
       0,     0,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,     0,     0,     0,     0,   433,     0,     0,
     434,     0,     0,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,  -246,     0,   444,     0,     0,
     446,     0,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -291,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3534,     0,   163,     0,   164,     0,     0,     0,     0,   167,
     168,  3535,   170,   171,     0,   172,   173,     0,     0,   175,
       0,   177,   178,   179,   180,     0,   181,   182,     0,     0,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,     0,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,     0,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,  -284,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,     0,     0,     0,   217,   218,   219,     0,     0,   220,
     221,  3536,   222,   223,   224,     0,     0,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,     0,   236,     0,
       0,     0,     0,     0,   239,     0,     0,     0,   240,   241,
     242,   243,  3537,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,     0,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,  3538,     0,     0,   255,
       0,     0,     0,   257,     0,     0,   258,  3539,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,  -246,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,     0,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,  3540,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   325,   326,   327,     0,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     0,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,     0,
       0,   358,     0,   360,  -246,     0,   361,     0,     0,   363,
       0,     0,   365,   366,  3541,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,     0,
     398,     0,     0,     0,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,     0,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,     0,     0,     0,     0,   433,
       0,     0,   434,     0,     0,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,  -246,     0,   444,
       0,     0,   446,     0,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,     0,
    -291,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,     0,     0,     0,
       0,   162,  3534,     0,   163,     0,   164,     0,     0,     0,
       0,   167,   168,  3535,   170,   171,     0,   172,   173,     0,
       0,   175,     0,   177,   178,   179,   180,     0,   181,   182,
       0,     0,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,  3935,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,  3536,   222,   223,   224,     0,     0,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,     0,
     236,     0,     0,     0,     0,     0,   239,     0,     0,     0,
     240,   241,   242,   243,  3537,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,     0,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,  3538,     0,
       0,   255,     0,     0,     0,   257,     0,     0,   258,  3539,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,  -246,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,     0,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,  3540,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     0,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,     0,     0,   358,     0,   360,  -246,     0,   361,     0,
       0,   363,     0,     0,   365,   366,  3541,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,     0,   398,     0,     0,     0,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,     0,     0,     0,
       0,   433,     0,     0,   434,     0,     0,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,  -246,
       0,   444,     0,     0,   446,     0,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,     0,  -291,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  3534,     0,   163,     0,   164,     0,
       0,     0,     0,   167,   168,  3535,   170,   171,     0,   172,
     173,     0,     0,   175,     0,   177,   178,   179,   180,     0,
     181,   182,     0,     0,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,  3976,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3536,   222,   223,   224,     0,
       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,     0,   236,     0,     0,     0,     0,     0,   239,     0,
       0,     0,   240,   241,   242,   243,  3537,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,     0,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
    3538,     0,     0,   255,     0,     0,     0,   257,     0,     0,
     258,  3539,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,  -246,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,     0,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,  3540,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   325,   326,
     327,     0,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     0,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,     0,     0,   358,     0,   360,  -246,     0,
     361,     0,     0,   363,     0,     0,   365,   366,  3541,     0,
       0,     0,   368,   369,   370,   371,   372,   373,     0,   375,
       0,   376,     0,     0,     0,     0,   378,   379,   380,     0,
       0,     0,     0,   382,     0,     0,     0,   383,     0,   385,
       0,     0,   387,     0,     0,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,     0,   398,     0,     0,     0,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,     0,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,     0,
       0,     0,     0,   433,     0,     0,   434,     0,     0,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,  -246,     0,   444,     0,     0,   446,     0,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,     0,  -291,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,     0,     0,     0,     0,   162,  3534,     0,   163,     0,
     164,     0,     0,     0,     0,   167,   168,  3535,   170,   171,
       0,   172,   173,     0,     0,   175,     0,   177,   178,   179,
     180,     0,   181,   182,     0,     0,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,     0,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,  -265,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,     0,     0,     0,
     217,   218,   219,     0,     0,   220,   221,  3536,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,     0,   236,     0,     0,     0,     0,     0,
     239,     0,     0,     0,   240,   241,   242,   243,  3537,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,     0,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,  3538,     0,     0,   255,     0,     0,     0,   257,
       0,     0,   258,  3539,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,  -246,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,     0,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,  3540,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     0,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,     0,     0,   358,     0,   360,
    -246,     0,   361,     0,     0,   363,     0,     0,   365,   366,
    3541,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,     0,   398,     0,     0,     0,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
       0,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,     0,     0,     0,     0,   433,     0,     0,   434,     0,
       0,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,  -246,     0,   444,     0,     0,   446,     0,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,     0,  -291,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,     0,     0,     0,     0,   162,  3534,     0,
     163,     0,   164,     0,     0,     0,     0,   167,   168,  3535,
     170,   171,     0,   172,   173,     0,     0,   175,     0,   177,
     178,   179,   180,     0,   181,   182,     0,     0,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,  3536,
     222,   223,   224,     0,     0,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,     0,   236,     0,     0,     0,
       0,     0,   239,     0,     0,     0,   240,   241,   242,   243,
    3537,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,     0,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,  3538,     0,     0,   255,     0,     0,
       0,   257,     0,     0,   258,  3539,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,  -246,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,     0,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,  3540,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   325,   326,   327,     0,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     0,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,     0,     0,   358,
       0,   360,  -246,     0,   361,     0,     0,   363,     0,     0,
     365,   366,  3541,     0,     0,     0,   368,   369,   370,   371,
     372,   373,     0,   375,     0,   376,     0,     0,     0,     0,
     378,   379,   380,     0,     0,     0,     0,   382,     0,     0,
       0,   383,     0,   385,     0,     0,   387,     0,     0,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,     0,   398,     0,
       0,     0,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,     0,     0,     0,     0,   433,     0,     0,
     434,     0,     0,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,  -246,     0,   444,     0,     0,
     446,     0,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -291,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3534,     0,   163,     0,   164,     0,     0,     0,     0,   167,
     168,  3535,   170,   171,     0,   172,   173,     0,     0,   175,
       0,   177,   178,   179,   180,     0,   181,   182,     0,     0,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,     0,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,     0,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,     0,     0,     0,   217,   218,   219,     0,     0,   220,
     221,  3536,   222,   223,   224,     0,     0,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,     0,   236,     0,
       0,     0,     0,     0,   239,     0,     0,     0,   240,   241,
     242,   243,  3537,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,     0,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,  3538,     0,     0,   255,
       0,     0,     0,   257,     0,     0,   258,  3539,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,  -246,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,     0,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,  3540,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   325,   326,   327,     0,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     0,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,     0,
       0,   358,     0,   360,  -246,     0,   361,     0,     0,   363,
       0,     0,   365,   366,  3541,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,     0,
     398,     0,     0,     0,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,     0,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,     0,     0,     0,     0,   433,
       0,     0,  3841,     0,     0,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,  -246,     0,   444,
       0,     0,   446,     0,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,     0,
       0,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,     0,     0,     0,
       0,   162,     0,     0,   163,     0,   164,     0,     0,     0,
       0,   167,   168,     0,   170,   171,     0,   172,   173,     0,
       0,   175,     0,   177,   178,   179,   180,     0,   181,   182,
       0,     0,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,     0,
     236,     0,     0,     0,     0,     0,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,     0,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,     0,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,     0,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     0,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,     0,     0,   358,     0,   360,     0,     0,   361,     0,
       0,   363,     0,     0,   365,   366,     0,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,     0,   398,     0,     0,     0,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,     0,     0,     0,
       0,   433,     0,     0,   434,     0,     0,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,     0,     0,   446,     0,     0,     0,   448
};

static const yytype_int16 yycheck[] =
{
       7,   590,   525,   729,   907,   599,   600,   822,   525,   908,
     546,   635,   121,    20,     5,   942,    23,  1033,    21,  1086,
    1791,   630,   631,   745,  1654,    32,  1554,    30,   560,  1266,
    1206,  1086,   475,    36,   872,    42,   848,   846,  2489,  2102,
    2285,  2145,  2215,  1950,  1109,  1617,    53,  1150,  1955,     7,
    2176,  1116,  1331,  2590,  2169,  2170,  2171,  2541,   667,   615,
     872,  1357,  1024,  2956,   873,   689,  2311,   912,   692,  1930,
    2402,  1810,  1057,  1808,  1808,  2388,  1280,  2390,   687,   654,
      23,  2929,  2180,  2181,   912,  2203,    93,  1349,  1739,  2280,
     699,   700,   701,  1297,   604,  1914,  1914,  2160,   532,  2935,
    2721,  1811,    16,  1307,  1308,  1815,  1877,  1339,   115,  2418,
     117,  1882,  2196,   120,   121,   122,  1826,  1888,  1889,    16,
    2204,  1892,    33,  2415,    18,  2261,  1836,  2419,    29,   718,
     137,  1754,  1117,  1118,    15,    16,  1121,  1122,  1123,  1124,
    2266,  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1411,
      93,   707,   708,   709,  1763,  1764,    24,    18,    18,   117,
    1653,   147,   120,   719,  2290,  2291,    15,    16,  2254,    58,
      50,  1780,  2989,  2990,  1680,  2261,  2993,    35,  2264,  1914,
    1914,   127,  2268,  3174,    62,   157,    71,  1903,  1797,  1798,
      65,    20,  1800,    50,   137,  3012,  2282,  2283,  3181,    63,
      90,  3018,    15,    16,  1813,  1814,  2292,  1816,    15,    16,
    1819,  1820,    35,  1932,  1823,   747,   599,   600,    61,  1828,
    2248,  2244,  2245,  1832,  1833,  1834,  1835,   141,    57,    58,
    1839,    96,  1841,   112,   334,  2534,   578,   129,  1847,  1782,
     262,  1850,  1851,  1852,   586,   587,  1349,   141,    57,    58,
     145,   145,  3171,  3178,  2646,    42,  1432,   116,   328,    15,
      16,    24,   141,   874,    15,    16,    15,    16,   339,  3678,
     315,   415,   804,   135,    60,  3123,   345,   112,    15,    16,
     468,   131,   229,   431,   145,   145,    15,    16,    20,  1898,
    1899,  1900,  1901,   205,   358,  1021,   114,    15,    16,    15,
      16,    33,    70,  3512,   592,   914,   141,   141,  1411,    12,
      15,    16,  2257,    12,   175,    47,   431,   172,   157,   112,
     472,    15,    16,   175,   135,    57,    58,  2188,    15,    16,
       8,    20,    15,    16,    19,   193,  2359,  2360,    10,   245,
      15,    16,   210,    12,    33,   116,  1072,   280,   141,   448,
    1076,    15,    16,   462,   541,   472,   215,   498,    47,   490,
     135,   151,   493,    65,   386,    15,    16,   124,    57,    58,
     193,   205,   966,   967,   968,   809,  3269,  2367,   113,    18,
     246,   251,   471,   249,   227,   171,   475,   496,   178,  3206,
      15,    16,   208,   580,   581,    15,    16,   549,  3215,   254,
     517,   222,    61,   336,  2855,   170,   748,   538,    20,    40,
     382,   327,   511,    45,   602,  2392,   284,   130,  3235,  3338,
    1319,    33,   125,  3240,   175,  1147,   125,  3636,    98,    15,
      16,   579,   117,    15,    16,    47,   170,  2156,  2209,   345,
     205,  3277,   210,   587,   262,    57,    58,   210,  1023,  3374,
    3375,    15,    16,   498,   742,   462,   125,   464,  2573,   329,
      74,  1036,  1271,   344,   579,  1274,   347,   414,  2503,  2504,
    2505,   205,   479,  1282,   816,  3323,   483,  2202,   523,  2597,
     323,   581,    60,   399,   554,   492,   221,   165,  2661,   496,
    2605,   498,  3901,    78,  1339,   407,  2267,   504,  2269,   349,
    1309,  1310,   311,   510,  1607,  2276,   145,  2643,  2543,  2544,
    2545,  1339,   581,  2248,  2248,   579,   587,   383,  2289,  1331,
    1782,   284,   386,  1112,  2295,   532,   533,   314,  2664,  1733,
     420,   344,  3515,   413,   347,  3371,   293,   344,   208,  2310,
     347,   563,  2403,   382,   551,   440,  1808,   439,  2367,  2367,
    2942,   360,   935,   560,   322,   562,   413,  2643,   190,  1855,
     328,   504,  1005,  1006,  1120,  1410,   573,   574,   227,   555,
     448,   578,  2195,   407,  2873,    15,    16,   584,  2664,   586,
     587,  1137,  1410,  1026,   591,   592,   372,   157,   344,   596,
    3127,   347,  1035,   344,   936,   344,   347,   472,   347,   606,
    1585,   984,  2630,   610,  1047,  1048,  1049,   344,   509,   581,
     347,  1596,   509,  1056,  1599,   344,   574,  1579,   347,    15,
      16,    15,    16,   262,   392,   468,   344,  1349,   344,   347,
     573,   347,  2367,  2367,  2127,   744,   521,   480,  2246,   344,
     498,  1903,   347,    15,    16,  2361,   560,   654,  3639,   509,
     344,  3487,  1914,   347,  2758,   601,  2162,   344,    60,   548,
     347,   344,  2971,  2972,   347,  1897,  2275,   141,   579,   344,
    2979,   585,   347,  2982,  2983,   498,   535,  3570,  2287,  1782,
     344,  2973,  2401,   347,  2227,   566,  2547,  2548,   553,  1411,
    2999,   585,    68,  1304,   344,   557,  2641,   347,   527,  3618,
     539,   581,   374,   584,  3013,   712,   585,   714,   476,  3018,
    3019,  3020,  3021,   581,  2737,  3007,  3008,   566,   431,   344,
     581,   564,   347,  3015,   344,    15,    16,   347,  2358,   581,
    3022,   738,   739,   740,   541,   742,   743,   744,   847,   746,
     747,   748,   581,  1275,   530,  1255,   557,   386,  2738,  3585,
     585,   585,  2867,   566,    15,    16,  2365,   525,   344,   566,
     581,   347,   344,  1197,   535,   347,  2870,   580,   581,   171,
     472,   245,  2963,    24,   581,   540,   783,   586,    15,    16,
     344,   739,   557,   347,  2761,   743,   554,   794,   746,  3682,
    2905,  1225,   585,   425,   466,   527,   381,   804,   805,   109,
    1903,  2919,   809,  2939,   141,  2923,   540,   798,   278,   816,
     566,  1914,   382,   427,  1156,   566,   394,   566,  2881,    15,
      16,   480,  3443,   493,   580,   581,  1343,    15,    16,   566,
     581,  3648,   581,  3650,  3166,  2919,   467,   566,   527,  2923,
     847,   513,  2877,   580,   581,    66,    15,    16,   566,   288,
     566,   794,   581,  2939,   110,   486,   363,   167,   547,   548,
     160,   566,   805,   581,   580,   581,   579,  1209,    15,    16,
     583,    22,   566,  2598,  2599,   580,   581,  3713,   431,   566,
     511,   553,  1224,   566,    15,    16,   580,   581,   113,   196,
     409,   566,  1730,   580,   581,  2630,  2630,   580,   581,  1826,
     244,   908,   566,  2764,   344,   245,   581,   347,   245,  1419,
    3447,    54,    15,    16,  1723,   527,   566,   581,  1730,  2738,
    2738,  1759,   498,  1732,   563,    70,  1735,  1736,  1503,   936,
    1364,   581,   939,   940,   112,   261,  3784,    33,  2589,   551,
     529,   566,   561,  2180,  2181,   175,   566,  1759,   344,   259,
     344,   347,   175,   347,    11,   426,   581,    15,    16,   210,
    3273,   581,  2701,  3061,   220,  2227,    66,   579,   178,   539,
     372,    99,   344,   178,   102,   347,   280,    15,    16,   986,
     566,   988,    31,  2048,   566,  2189,  2248,   363,    56,   219,
    1099,   580,  2702,   448,  1979,   581,   221,   940,   143,   581,
     376,   152,   566,  2738,  2738,   345,    15,    16,  3340,  1603,
     586,    15,    16,   359,    12,   210,  1023,   581,  2314,  1555,
     126,   331,    15,    16,    41,   172,   579,  1136,  2658,  1036,
     330,  2207,   336,   284,    15,    16,  3151,   138,  2054,  2055,
    3158,  3159,  1598,   986,   175,   988,   231,   148,    24,   149,
      15,    16,  1897,   126,   344,   401,   113,   347,    15,    16,
    1782,   213,   581,    15,    16,   210,  3959,  2928,   294,  1897,
     222,    15,    16,   259,   183,    15,    16,   328,  2145,  1086,
     406,  1613,   431,   344,   558,  2047,   347,   342,   109,   157,
    2145,    70,  1099,   161,  3578,  2057,  2668,   363,   321,  2361,
      15,    16,    81,    18,   172,  2367,  1215,   344,    15,    16,
     347,   585,    15,    16,   490,   345,   222,   134,   360,    15,
      16,    15,    16,    95,  2227,   346,   566,   125,   530,  1136,
    1662,  1663,   388,   328,  1141,   493,   512,  3674,  2205,  1146,
     579,   581,   251,    15,    16,   331,   167,  3598,   344,  1156,
    2205,   347,   330,   431,    15,    16,   344,  2436,    69,   347,
      15,    16,    15,    16,   374,   472,  3073,   143,   354,   374,
     566,  3275,   566,   222,  1691,   344,   122,   322,   347,   151,
     391,  1903,   278,   328,   327,   581,  1193,   581,  1195,   529,
    1197,   137,  1914,   315,   566,   244,  2528,   344,   350,   305,
     347,   183,  1209,  1146,    15,    16,   178,  1198,  1215,   581,
     520,     0,    76,   344,   558,   515,   347,  1224,  1225,    15,
      16,   558,   478,   175,   292,   476,   256,  2294,  1235,  2405,
     579,   531,   305,   559,   210,   581,  1243,  1346,   259,  2294,
     145,   344,   343,  3780,   347,   176,   346,   392,   585,  1256,
    1257,  1258,  1259,  1260,  1261,   234,   498,    50,  2361,  1250,
     171,    15,    16,     6,  2367,  1272,  1273,   172,  1275,   251,
     496,    15,    16,    95,  1281,   579,   566,  2609,    15,    16,
     310,   476,   160,   493,    15,    16,   344,   141,   493,   347,
     347,   581,   541,   509,  1301,   109,   522,   208,  1256,  1257,
    1258,   579,  1260,   554,    24,   566,   344,   431,   284,   347,
     331,   175,    55,   524,   382,  1273,  1259,  3490,  1261,   186,
     581,   232,   175,  1281,   303,  3538,  3539,   436,  2255,   566,
    2257,   476,   581,   518,   520,   344,   442,   443,   347,  1346,
     344,   324,   325,   347,   581,  3449,   395,   314,   327,   205,
      70,   344,   328,  1360,   347,   337,   541,  1364,  1301,   554,
      12,  1352,   229,   344,   431,   581,   347,   143,  2630,   336,
     566,   469,  1363,   195,   502,   560,   498,   505,   566,   344,
     525,  3288,   347,    15,    16,   581,   129,   344,    15,    16,
     347,   431,   344,   581,    12,   347,   497,   566,   262,   497,
     344,   523,   374,   347,   344,   384,   262,   347,  1415,   554,
    1417,  1418,   581,  1420,  1421,    15,    16,  1360,    51,   566,
    2485,   369,  1429,   143,  1431,   356,  3489,    60,   580,   344,
      15,    16,   347,   580,   210,   566,   581,   344,   158,   190,
     347,   344,   472,    89,   347,   259,   324,   325,   344,   580,
     344,   347,   330,   347,   436,   579,   788,   579,   145,  1417,
    1418,   372,  2529,   566,   570,   571,   572,   573,   574,   575,
     576,   577,   344,   125,  2529,   347,  2738,   580,   345,    15,
      16,   232,   229,   344,    15,    16,   347,   466,   165,   344,
     210,   344,   347,   240,   347,  2051,  1503,  1504,   398,   520,
     476,   574,   575,   576,   577,  2227,   114,   125,   566,  1618,
     446,   213,   579,   581,  1957,  3966,   447,   331,   175,  2113,
     222,   493,   580,    15,    16,   145,   382,  1970,   566,   351,
     335,   186,  2517,   344,   327,   440,   347,   493,   360,   579,
     518,   513,   580,  3173,   366,    15,    16,   190,   344,    15,
      16,   347,   328,    15,    16,   360,  1563,   566,   235,   891,
    2003,   501,   566,   541,   284,   211,  3811,   467,   109,    15,
      16,   580,   126,   566,   541,   151,   580,  3692,   554,    15,
      16,   553,   325,   229,   431,   566,   194,   580,   245,   232,
     344,   175,  3718,   347,   240,    15,    16,   533,  1605,   580,
     344,   566,   322,   347,  3180,   581,  1613,   344,   328,   566,
     347,  1618,   315,   344,   566,   580,   347,  1624,   251,  1626,
     413,  2064,   566,   580,  1631,  1632,   566,  1634,  3432,   451,
     113,  3844,  3845,   569,   278,  2738,   580,   515,   222,  2361,
    1647,  2864,   385,  1650,   387,  2367,   439,  3223,   350,  3069,
     327,   566,  3072,   531,   262,  1662,  1663,  1664,  1665,   566,
      15,    16,   315,   566,     8,  1672,  1673,  1674,   314,  1660,
     566,   418,   566,   580,   560,    15,    16,   580,   208,  1670,
      15,    16,   509,  1690,   580,    29,   580,   109,  1631,  1632,
     112,  1634,  1699,   498,   566,   581,  3467,  3468,  3469,  3470,
     476,   374,   232,  1694,  1647,   566,   520,  1650,   580,  2932,
     587,   566,   344,   566,  2641,   347,   538,   344,   259,   580,
     347,  1664,  1665,    33,   222,   580,  2541,  1734,    16,  1672,
    1673,  1674,   579,   151,  3538,  3539,   583,   381,   325,  1746,
      15,    16,  2580,   241,   344,   167,  1753,   347,    58,   580,
     581,   305,  2768,   579,   204,   566,   476,  2274,   464,   344,
     178,   587,   347,   186,    30,    15,    16,   493,  2580,   580,
     566,   193,   418,  2789,  2790,  2702,  1767,   483,   554,  2588,
      15,    16,   495,   370,   580,  1776,  1777,    15,    16,    99,
     331,  1734,   102,   466,  2810,   498,  1787,  1788,  1789,  1790,
     110,  1792,  1793,  1912,   448,   581,    72,  2874,   344,   386,
    1753,   347,   566,   344,    77,   579,   347,   109,  3238,  2874,
     523,  3241,   566,   587,  3061,    89,   580,   431,   405,   566,
      93,   477,    15,    16,   554,   566,   580,   259,    15,    16,
     513,  1950,  1849,   580,  1182,   498,  1955,  1185,   184,   580,
    1188,   421,   344,    15,    16,   347,  1863,   434,   208,    18,
    2927,   581,   204,  3667,  3668,    15,    16,  1874,   186,   501,
     523,  3291,  2927,   139,   344,   167,   579,   347,   344,   573,
     553,   347,   344,   339,    12,   347,   580,  1878,  1879,   219,
    1881,  2958,  1883,  1884,  1885,  1886,  1887,  2491,   344,  1890,
    1891,   347,    46,  2958,   490,  1912,  3434,   493,   344,   331,
    1917,   347,   573,  1920,  3685,   580,   581,    15,    16,   580,
    1927,  1928,   580,   581,   344,   495,   579,   347,   431,  2979,
      89,  2040,  2982,  2983,   566,   175,   439,    15,    16,   566,
     262,   545,   546,  1950,  3748,   281,   282,   211,  1955,  2999,
     286,   287,   580,   580,    15,    16,   924,   925,   560,  3763,
      15,    16,  1920,  2072,   585,   229,   566,   259,   538,  3599,
    3579,   201,  3776,   203,   548,   579,   240,   551,  3154,   520,
     580,   566,   141,   553,  1927,  1928,   145,   109,   587,   344,
      15,    16,   347,   961,  2526,   580,  3605,   125,   536,  3608,
    3609,  3610,  3611,   466,   344,    24,   316,   347,  3627,   344,
    3629,  3027,   347,   172,   341,  2648,  2738,   579,   572,   573,
     574,   575,   576,   577,   171,    57,    58,   186,  3832,     6,
     566,   407,   191,  2040,    66,   566,    11,  2480,  2570,   331,
    3844,  3845,   545,   546,   580,   167,  2679,   580,   581,   580,
     314,    70,   211,   579,  2687,  3122,   579,  2690,  2065,   579,
     219,  2170,   579,  2172,  2173,  2072,   194,  3122,   579,   344,
     229,   193,   347,   128,   566,  3705,   579,   175,   139,   201,
    3884,   240,   527,   528,   579,   530,   245,    56,   580,   579,
    3894,   109,  3701,  3702,   344,   254,   566,   347,   520,   579,
     566,  3710,   579,   369,   566,  2214,  2215,   580,   581,   344,
     580,   579,   347,   498,   580,   579,   344,   154,   580,   347,
     566,  2128,    60,  3927,   390,  3929,   580,   581,   580,   581,
     566,    69,   580,   581,   580,  3939,   446,   259,  2145,   158,
      16,   579,    80,   109,   580,   579,   566,   579,  3952,   167,
    3954,   579,  3956,   419,   418,   314,  2163,  2164,   579,  3963,
     580,   344,   579,  2170,   347,  2172,  2173,   344,  3972,   579,
     347,   579,  2163,   579,   109,   193,  2285,   336,  3949,  1632,
    3079,  1634,   344,  3987,  3988,   347,   345,   579,   157,    15,
      16,   210,   161,   579,   344,   505,   579,   347,  2205,  4003,
    4004,   167,  2311,   172,  4008,   471,   579,  2214,  2215,   331,
     579,   566,   579,   477,   579,   374,   266,   267,   579,  1672,
    1673,  1674,   579,   533,    70,   580,   566,   193,   520,    16,
     579,   566,   167,   171,   579,    89,   587,   580,   581,   177,
     580,   259,   580,   581,   581,   580,   344,  2254,   579,   347,
     126,   579,    98,  2256,  2261,   580,   581,  2264,   193,   418,
     579,  2268,  2265,  2270,   579,   284,   344,   579,  2271,   347,
     208,    57,    58,  2280,   579,  2282,  2283,   579,  2285,   579,
     439,  2272,  2273,   344,   579,  2292,   347,  2294,   579,   344,
    2293,   566,   347,   259,   232,  2298,  2303,   143,   580,   581,
     579,  2304,  2305,   322,  2311,   580,  2297,   580,   581,   328,
     579,  2318,  2319,   331,   135,   136,   566,   579,   477,   344,
     584,   579,   347,   292,   259,   580,   581,    25,   580,   581,
     580,   566,   460,   461,   462,   463,   464,   465,   566,   126,
     579,  2897,   998,   999,  1000,   580,   396,   397,   579,   477,
    1073,  1074,   580,   579,  1010,  2798,   579,   211,   580,   581,
    2303,    89,   208,    12,   579,   331,  2357,   579,    66,   579,
     529,   579,    70,   539,   540,   229,   542,    11,   544,   579,
    2387,  2388,   541,   566,   579,  1041,   240,   579,  1044,   566,
     580,   581,    41,  2836,   579,   126,   331,   580,   520,   558,
     579,   560,   336,   580,   566,   580,   581,   579,  1064,  1065,
     580,   581,  1068,   382,   112,   579,   566,   476,   580,   580,
     581,   580,   581,   501,   579,   584,   585,   580,   581,   305,
     580,  1087,  1088,    82,   372,   580,   581,   283,    87,  3366,
    3367,   580,   581,   126,  2387,   580,   581,  3668,   579,    69,
    3044,   580,   581,   579,   300,   580,   581,   476,  3703,  3704,
     314,    95,   580,   581,   580,   581,   579,     6,   566,   580,
     581,   580,   581,   579,    13,    14,   322,   579,     3,   113,
      60,   541,   336,   211,     9,    10,    25,    26,   566,    69,
     579,  3476,   458,  2500,   579,  2502,  2503,  2504,  2505,   579,
      80,   229,   520,  3402,    29,   566,  2513,   580,   581,  3408,
      35,   566,   240,   373,    39,   421,    55,   455,   305,  2526,
      59,    60,  2529,   580,   581,    64,   107,   580,   581,  3596,
     342,    70,   580,   581,   232,   554,  2543,  2544,  2545,    78,
      73,   566,    75,   490,   178,   336,    85,   580,   581,  2556,
     581,   171,  2661,  3070,   520,  2562,   452,  2564,   205,    98,
     580,   581,    48,  2570,   418,  2556,   442,   443,  3200,  3201,
    2513,   205,   175,   112,   305,   224,   115,   580,   581,   112,
     256,  3213,    48,   122,   123,   520,   314,  3219,   208,   581,
     129,   171,   530,   174,   580,   581,   336,   177,   137,   426,
     133,   529,   141,   574,   143,   130,   580,   581,   336,   150,
    3242,  3832,   232,  3245,   439,   580,   581,  3380,  3381,   200,
     517,   255,   305,   477,  2883,  2884,   324,   325,   208,   579,
     476,   170,   330,   166,  2845,  2846,  2643,   245,   336,  3105,
    3106,  2648,   172,   472,   293,   491,   278,   490,   472,   472,
     256,   142,   232,    79,  2661,   442,   443,  2664,   477,   478,
     581,   338,   481,   482,   486,   580,   485,   206,   487,   208,
     141,  2662,  2679,   112,   372,    98,   586,   216,     6,  2670,
    2687,   579,    97,  2690,     4,   430,   553,    54,   399,   154,
     418,    98,   231,  2700,   570,   571,   572,   573,   574,   575,
     576,   577,  2709,   202,   353,  2712,  3927,   581,  3929,  2716,
     581,   442,   443,  3698,   295,  2722,  3783,   587,   299,  2726,
      66,    12,  2729,   557,   580,   306,    95,   126,   580,  2736,
     498,  3952,   125,  3327,     9,   579,   581,   435,   587,   359,
     374,  2748,   580,   580,   283,    95,   587,   244,  2755,   477,
    3649,   587,   372,  3377,  3378,  3379,   143,   560,   586,   442,
     443,   300,    48,  3578,  2722,   304,  3987,  3988,   581,  2712,
     581,   490,   579,   278,   251,   278,   581,  2886,   222,   359,
    1436,    18,   151,   570,   571,   572,   573,   574,   575,   576,
     577,   358,   372,  2902,   509,   509,   581,   581,   581,   380,
     581,   340,   581,   437,  3413,   454,   345,   574,  3793,   178,
     172,   223,  2755,   352,   488,   162,   172,   581,   534,   581,
     359,   360,   450,  2830,  3341,   361,   121,   177,   336,   581,
     579,  2838,   530,   580,   145,   581,    15,    16,   487,   208,
     571,   572,   573,   574,   575,   576,   577,  2838,   429,  1505,
     389,   145,    89,  1509,   581,  2862,   145,   491,   208,   493,
     393,   145,   401,   402,   403,   404,    31,  2874,  2875,   145,
    2877,   145,   145,  3858,   145,   455,  1532,   145,   145,  2886,
     145,   145,   145,   145,   423,  2892,   255,   570,   571,   572,
     573,   574,   575,   576,   577,  2902,   145,    12,    13,  3435,
     145,   536,   562,  2910,   141,   255,   305,   540,   145,    46,
     581,   336,   178,   580,   175,   580,   580,   580,   580,   574,
    2927,  3530,   475,   580,   103,   104,   105,   106,   107,   580,
     749,   175,  2939,   170,  4001,   172,   581,   476,   579,   581,
    2947,   580,  2949,   573,   580,   440,  4001,   558,   501,   186,
     530,  2958,   491,   580,   191,   494,  2963,  4024,   580,  3482,
    2967,   126,   580,   488,  3073,  4032,   581,   580,   205,  3868,
    3869,   580,  3871,    88,   211,   556,   580,  4032,   579,   518,
     579,   506,   219,   577,   579,   581,   386,   568,   513,   580,
     529,   145,   229,   209,   579,   482,   579,   184,   587,   175,
     369,   116,   580,   240,   381,   374,   448,   439,   245,   534,
     581,   165,   581,  3912,   129,  3914,  3915,   254,   197,   198,
     199,   200,   172,    46,   312,   179,   466,   430,  3137,   466,
     466,   466,   466,    69,   188,   359,   151,   359,   153,   509,
     359,  3032,    70,   442,   443,   121,   585,   230,   491,   164,
     230,   121,  3059,    81,   359,    46,   359,   222,   491,  3050,
     357,   359,   615,   359,   402,   255,  3073,   620,   437,   184,
     579,   587,   541,   119,   580,   139,   580,   314,   218,   244,
     218,   235,   236,   581,   580,   587,  3680,   437,   580,  3678,
    3613,   580,   120,   208,   587,   254,  3999,   650,   580,   336,
     215,   580,   587,   587,   587,   455,   587,   509,   345,   263,
    3117,   509,  3221,   666,   509,  3122,   295,   498,   297,   298,
     299,   581,   491,   251,    46,   563,   495,   306,   579,   509,
    3137,   579,   342,    35,   175,   175,   175,   374,   219,   254,
     305,   491,   175,   493,   513,   495,   587,   226,   348,   560,
     196,   581,   229,   331,   707,   708,   709,   710,   587,   324,
     325,   229,  3153,   296,    98,   344,   719,   321,   347,   538,
      98,  3178,   232,   572,   573,   574,   575,   576,   577,  3288,
     530,   418,   232,  3186,   553,   579,   587,   579,   538,   580,
     341,   509,   581,   145,   146,   415,   186,   498,   359,   345,
     102,   380,   439,   579,   574,   579,   234,   109,   579,   220,
     256,   220,   580,   336,  3221,   580,   580,   371,   205,   580,
     580,   587,   580,   580,   579,   574,   246,   179,   359,   580,
     395,  3222,   278,   581,  3343,   580,   188,   581,   175,  3246,
     477,   222,   535,   242,   587,    66,  3253,   266,   336,   428,
     429,   229,   229,   232,   581,   581,   232,   370,   160,    70,
     375,  3268,   336,   336,   581,   167,  3257,    18,  3785,   579,
     336,   336,    46,   225,   431,   303,   245,   442,   443,   394,
     452,  3288,   560,   132,   236,   400,   433,   579,   453,   238,
    4016,   193,   529,   408,   581,   580,   324,   325,   580,   327,
     580,   186,   441,   540,   541,   145,   229,   579,   229,   579,
     579,   263,  3901,   112,   112,  3909,   431,   368,    74,   448,
     580,   558,  3329,   560,   581,   580,   579,   373,   587,   444,
     445,   128,   452,   427,   580,   381,  3343,    18,   581,   580,
     580,   580,   580,   580,   581,    12,    13,   584,   585,   580,
     580,    33,   580,   580,   580,  3362,   384,   259,   302,   234,
     381,   560,   219,   580,   579,   411,   318,  3374,  3375,   580,
     485,   579,   581,   587,  3968,    46,   191,   556,   581,   386,
     498,  3490,   302,  3906,  3391,   541,   498,   566,   567,   568,
     943,   579,   541,   579,   579,   579,   551,   579,   513,   551,
     535,   112,   448,  3992,   232,   570,   571,   572,   573,   574,
     575,   576,   577,   315,   232,   330,   580,   331,   581,   579,
     535,    88,   537,   331,   326,   302,   472,   156,   330,   331,
     232,   498,   580,    16,  3441,  3442,   498,  4026,   466,   498,
     545,   994,   995,   541,   490,  3452,   580,   493,   541,   116,
    1003,  1004,  1005,  1006,  1007,  1008,  1009,   219,   326,   546,
     581,  1014,   129,   560,  1017,  1018,   470,  1020,   415,  1022,
     126,   331,   580,  1026,   535,   342,  1029,  1030,  1031,  1032,
     493,  1034,  1035,  3490,   151,   481,   153,   267,   579,  1042,
    1043,   140,  1045,  1046,  1047,  1048,  1049,   164,  1051,  3442,
    1053,  1054,  1055,  1056,  1057,  1058,  1059,  1060,  1061,  1062,
    1063,   172,   557,  1066,  1067,    30,  1069,   184,  1071,   588,
     172,   579,  1075,   579,  1077,  1078,   580,   580,  3535,  3748,
     355,   580,   579,  3540,   500,   121,  1089,  1090,   143,   121,
     374,   208,  1095,    68,  3763,  1098,   145,   579,   215,   394,
       5,   557,  1105,  1106,  1107,   175,  1109,  3776,    30,    60,
     342,    60,   580,  1116,  1117,  1118,   222,  1120,  1121,  1122,
    1123,  1124,   482,  1126,  1127,  1128,  1129,  1130,  1131,  1132,
    1133,   581,   247,    46,  1137,  1138,    46,   254,   219,  3596,
    3597,   579,    35,   579,   501,  3602,   498,  3706,   139,   342,
     502,   585,   342,   505,   120,    25,    26,   128,    46,    46,
     138,    46,    16,   515,   557,   139,   204,   261,   520,   111,
    3627,   523,  3629,   585,  3631,   588,   134,   580,    46,   580,
      46,   579,    46,   270,   580,    52,   424,    57,    58,    59,
    3647,   580,   145,   585,   139,   501,    66,   189,   581,   305,
      70,   581,    52,  3660,  3597,   580,   585,   581,    78,   102,
     406,   172,   172,   172,   501,  3884,   109,   205,   559,   331,
     572,   573,   112,   579,   546,  3894,   247,   173,    98,   439,
    2076,  3038,  3545,  2243,  1893,  3266,  3572,   600,  3681,  3851,
    1243,  3852,   112,  3264,  3268,   115,   921,  3440,  1251,  3706,
    4026,  3980,  3811,  3989,  3432,  3432,  3432,  3714,   375,  3700,
    3432,  3432,  3432,   620,  3881,  3432,  3741,   160,  3432,  3845,
    3939,  3432,  3432,   143,   167,  3881,  3432,   394,  3432,  3767,
    3766,  3432,  1355,   400,  1607,  3954,   959,  3956,  1357,  3448,
    2296,   408,  2862,   650,  3963,  2518,  3602,  3696,  3119,  3793,
     193,  3476,  3858,  3972,  3863,  3865,  3906,  1410,   472,   666,
    3613,  3053,  1855,  3370,   431,   103,   104,   105,   106,   107,
    2741,  2388,  1863,  2967,  2321,  2259,  3783,   444,   445,  2947,
    3023,  2990,  2990,  3400,  4003,  4004,   442,   443,   208,  4008,
    3185,  3785,  3230,  3221,  2951,  2902,   216,  3635,  3646,  3394,
    1424,  3582,  3521,   710,  3811,  1925,  3452,  3798,  3799,  3408,
    1862,   231,  2949,  2314,  1741,  1316,   259,  3190,   485,  2140,
    3827,  3828,  2948,   940,  1406,  1664,  2107,    13,  2513,   545,
     264,   265,   266,   267,   268,   269,   834,   271,   272,   273,
     274,   275,   276,   277,  3484,   279,   513,  2154,  1679,  2838,
    2491,  1956,  2206,  2917,  3505,  1036,  3863,  3369,  3827,   197,
     198,   199,   200,   283,  2729,  3828,  1010,  1074,   535,  2058,
     537,  2958,   315,  3363,  3704,  3968,  3343,  1928,  2103,  3886,
     300,  2159,  1197,  1225,  2144,  2869,  3893,   330,   331,  1442,
    3122,  2868,  2927,   535,  4024,  3783,  1934,  1429,   611,  1731,
     525,  1264,    88,  1623,  2851,  2700,  3902,  1230,  3818,  3940,
    3875,  4020,  4032,  2874,   570,   571,   572,   573,   574,   575,
     576,   577,  3223,  2572,  1685,  2910,  3148,  1243,  3351,  1650,
     116,  1233,   352,   517,   817,  3465,  1190,  1415,  3471,  2500,
     360,   518,   821,   129,  2034,  2470,  3953,   600,   468,  1094,
     468,  3958,   600,   600,    -1,    -1,    -1,   295,    -1,   297,
     298,   299,   396,   397,    -1,   151,    -1,   153,   306,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   164,    -1,
      -1,    -1,    -1,    -1,    -1,  3992,    -1,    -1,  1541,  1542,
    1543,    -1,    -1,    -1,  4001,    -1,    -1,    -1,   184,    -1,
      -1,    -1,    -1,   423,  1557,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4020,    -1,    -1,    -1,  4024,    -1,  4026,
      -1,    -1,   208,    -1,    -1,  4032,  1579,    -1,    -1,   215,
      -1,    -1,  1585,    -1,    -1,  1588,   943,  1590,    -1,    -1,
      -1,    -1,   380,  1596,    -1,  1598,  1599,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   498,   476,    -1,    -1,   502,
      -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,   254,    -1,
      -1,   491,   515,    -1,   494,    -1,    -1,   520,    -1,    -1,
     523,    -1,    -1,    -1,    -1,    -1,    -1,   994,   995,    -1,
     428,   429,    -1,    -1,    -1,    -1,  1003,  1004,   518,    -1,
    1007,  1008,  1009,    -1,    -1,    -1,  1659,  1014,    -1,   529,
    1017,  1018,    -1,  1020,    -1,  1022,    -1,    -1,    -1,    -1,
      -1,    -1,  1029,  1030,  1031,  1032,    -1,  1034,    -1,   572,
     573,    -1,    -1,    -1,    -1,  1042,  1043,    -1,  1045,  1046,
      -1,    -1,    -1,    -1,  1051,    -1,  1053,  1054,  1055,    -1,
      -1,  1058,  1059,  1060,  1061,  1062,  1063,    -1,    -1,  1066,
    1067,   581,  1069,    -1,  1071,    -1,    -1,    -1,  1075,    -1,
    1077,  1078,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1089,  1090,    -1,    -1,    -1,    -1,  1095,   375,
      -1,  1098,    13,    14,    -1,    -1,    -1,    -1,  1105,  1106,
    1107,    -1,    -1,    -1,    -1,    -1,    -1,    28,   394,    30,
      -1,    -1,    -1,    34,   400,    -1,    -1,    -1,   556,    25,
      26,    -1,   408,    -1,    -1,    -1,    -1,    48,    49,   567,
     568,  1138,    -1,    -1,    55,    -1,    -1,    -1,    59,    60,
      -1,    -1,    -1,    -1,    -1,   431,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    59,    -1,    -1,    -1,    -1,   444,   445,
      -1,    -1,    -1,    -1,    70,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    98,    -1,    -1,   116,   117,   118,    -1,   485,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   128,   129,   115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     141,    -1,    -1,  1876,    -1,    -1,    -1,   513,    -1,    -1,
      -1,    -1,   153,    -1,    -1,    -1,  1243,   143,    -1,    -1,
      -1,    -1,    -1,    -1,  1251,    -1,    -1,    -1,   169,   535,
      -1,   537,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,   189,    -1,
      -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1936,    -1,    -1,    -1,  1940,    -1,    -1,
      -1,    -1,  1945,  1946,   215,    -1,   217,    -1,    -1,    -1,
      -1,  1954,   208,    -1,  1957,    -1,    -1,    -1,    -1,    -1,
     216,    -1,   233,    -1,  1967,    -1,  1969,  1970,    -1,  1972,
    1973,  1974,  1975,  1976,    -1,   231,  1979,    -1,    -1,   250,
      -1,    -1,    -1,   254,    -1,  1988,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1996,    -1,  1998,    -1,  2000,  2001,  2002,
    2003,    -1,    -1,    -1,  2007,  2008,  2009,    -1,    -1,    -1,
      -1,  2014,  2015,  2016,    -1,  2018,    -1,  2020,    -1,  2022,
      -1,  2024,    -1,  2026,    -1,    -1,    -1,   283,  2031,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2041,    -1,
      -1,    -1,    -1,    -1,   300,  2048,    -1,    -1,  2051,    -1,
      -1,    -1,    -1,    -1,  2057,    -1,    -1,  2060,    -1,    -1,
      -1,  2064,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1442,    -1,    -1,   359,    25,
      26,    -1,    -1,    -1,    -1,    -1,   352,    -1,   369,    -1,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    26,
      -1,    57,    58,    59,    -1,    -1,    -1,    -1,   399,    -1,
      66,   402,    -1,   404,    70,    -1,   407,    -1,    -1,   410,
      -1,   412,    78,    -1,    -1,    -1,   417,    -1,   419,    -1,
      57,    58,    59,    -1,    -1,   426,    -1,    -1,    -1,    66,
     431,    -1,    98,    70,    -1,    -1,    -1,   423,   439,    -1,
      -1,    78,    -1,   444,    -1,    -1,   112,   448,    -1,   115,
      -1,    -1,    -1,    -1,  1541,  1542,  1543,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     471,    -1,    -1,    -1,   475,   112,    -1,   143,   115,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     476,    -1,  1579,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1588,    -1,  1590,    -1,   491,   143,    -1,   494,    -1,
      -1,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,
      -1,   532,   518,    -1,   535,    -1,    -1,    -1,    -1,   540,
      -1,    -1,   208,   529,    -1,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   565,   231,    -1,    -1,    -1,    -1,
      -1,   208,  1659,    -1,    -1,    -1,    -1,    -1,   579,   216,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,    -1,    13,
      14,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    49,   283,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    59,    60,    -1,    -1,    -1,
      -1,    -1,    -1,   300,    -1,    -1,    -1,    -1,    72,    -1,
      -1,    -1,    -1,  2406,    -1,    -1,    -1,  2410,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,   352,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,  2432,
    2433,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   116,   117,   118,   352,    -1,    -1,    -1,  2452,
      -1,    -1,    -1,   360,   128,   129,    -1,    -1,  2461,    -1,
    2463,    -1,  2465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2480,    -1,   153,
      -1,    -1,  2485,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2507,    -1,    -1,    -1,    -1,    -1,
     184,    -1,    -1,    -1,  2517,   189,   423,    -1,   192,  1876,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     476,   215,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   491,    -1,    -1,   494,   233,
      -1,    -1,  2565,    -1,    -1,    -1,  2569,    -1,    -1,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   250,    -1,    -1,  1936,
     254,    -1,   518,  1940,   491,    -1,    -1,   494,  1945,  1946,
      -1,    -1,    -1,   529,    -1,    -1,    -1,  1954,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2612,
    1967,   518,  1969,    -1,    -1,  1972,  1973,  1974,  1975,  1976,
      -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1988,    -1,    -1,    -1,  2638,    -1,    -1,    -1,  1996,
      -1,  1998,    -1,  2000,  2001,  2002,    -1,    -1,    -1,    -1,
    2007,  2008,  2009,    -1,    -1,    -1,    -1,  2014,  2015,  2016,
      -1,  2018,    -1,  2020,    -1,  2022,   340,  2024,    -1,  2026,
      -1,    -1,   579,    -1,  2031,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2041,   359,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,    -1,
    2057,    -1,    -1,  2060,    -1,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2719,  2720,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,   402,    -1,
     404,    -1,    -1,   407,    -1,    -1,   410,    -1,   412,    -1,
      -1,    -1,    -1,   417,    -1,   419,    -1,    -1,    -1,    -1,
      -1,    -1,   426,    -1,    -1,    -1,    -1,   431,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   439,    -1,    -1,  2771,    -1,
     444,    -1,    -1,    -1,   448,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2795,  2796,    -1,  2798,    -1,   471,    -1,    -1,
      -1,   475,    -1,    -1,  2807,    -1,    -1,    -1,    -1,  2812,
      -1,    -1,  2815,    -1,  2817,  2818,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2836,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   516,    -1,  2847,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,   532,    -1,
      -1,   535,    -1,    -1,    -1,  2868,   540,    -1,    -1,    -1,
      -1,    32,    33,    -1,    -1,    -1,    -1,    38,    -1,    40,
       6,    42,    43,    -1,    -1,    -1,    -1,    13,    -1,    -1,
      -1,   565,    -1,    -1,  2897,    -1,    -1,    58,    -1,    25,
      26,    -1,    -1,    -1,    -1,   579,    -1,    -1,  2911,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2929,    -1,    -1,    55,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    99,    -1,
      -1,   102,    -1,    -1,    70,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    85,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   144,    -1,    -1,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,
      -1,    -1,    -1,   129,    -1,   166,    -1,   168,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,    -1,   143,    -1,   180,
     181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,  2406,
      -1,    -1,    -1,  2410,    -1,    -1,    -1,    -1,    -1,   220,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2432,  2433,    -1,    -1,    -1,
      -1,    -1,   208,    -1,    -1,    -1,    -1,   248,    -1,    -1,
     216,    -1,    -1,    -1,    -1,  2452,   257,   258,    -1,   260,
      -1,    -1,    -1,    -1,  2461,   231,  2463,    -1,  2465,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,   290,
     291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   307,   308,   309,    -1,
    2507,    -1,   313,    -1,    -1,   316,    -1,   283,    -1,  3162,
    3163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3171,    -1,
      -1,   332,   333,    -1,   300,    -1,    -1,    -1,   304,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   364,   365,    -1,    -1,    -1,  2565,    -1,
      -1,    -1,  2569,    -1,    -1,    -1,    -1,    -1,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,   352,   388,    -1,    -1,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2612,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,   402,    -1,   439,    -1,
      -1,  2638,    -1,    -1,    -1,    -1,    -1,    -1,   449,    -1,
      -1,    -1,    -1,    -1,    -1,  3298,    -1,   423,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3338,    -1,    -1,   499,    -1,
      -1,   502,    -1,    -1,   505,   506,   507,   508,  3351,    -1,
     476,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2719,  2720,    -1,   491,    -1,    -1,   494,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   547,   548,    -1,    -1,
      -1,    -1,   518,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   529,    -1,    -1,    -1,   568,    -1,    -1,
      -1,    -1,    -1,    -1,  2771,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3432,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2795,  2796,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2807,    -1,    -1,    -1,    -1,  2812,    -1,    -1,  2815,    -1,
    2817,  2818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3476,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    -1,    -1,  3488,    -1,    -1,    -1,    -1,
    2847,    -1,    33,    34,  3497,    -1,  3499,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2868,    -1,    -1,    -1,    -1,    57,    58,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    69,  3532,
      -1,    -1,    -1,    -1,    -1,  3538,  3539,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    -1,    86,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    -1,  2911,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2929,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
      -1,    -1,    -1,    -1,    -1,  3618,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   176,    -1,   178,    -1,    -1,
      -1,    -1,   183,    -1,   185,    -1,    -1,    -1,    -1,    -1,
    3653,    -1,  3655,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3665,    -1,  3667,  3668,   207,   208,    -1,    -1,
      -1,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3686,    -1,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,  3698,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,  3746,    -1,  3748,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3763,  3764,    -1,    -1,    -1,    -1,  3123,    -1,    -1,   310,
      -1,    -1,    -1,  3776,    -1,    -1,    -1,    -1,    -1,   320,
      -1,  3784,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3793,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,
      -1,    -1,    -1,    -1,    -1,  3162,  3163,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3171,    -1,    -1,    -1,    -1,    -1,
      -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,  3831,  3832,
      -1,    -1,   373,   374,    -1,    -1,   377,   378,    -1,    -1,
      -1,  3844,  3845,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3858,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3884,    -1,    -1,    -1,    -1,    -1,    -1,  3891,    -1,
      -1,  3894,    -1,    -1,    -1,   436,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   448,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3920,    -1,    -1,
      -1,    -1,    -1,    -1,  3927,    -1,  3929,    -1,    -1,    -1,
      -1,   472,    -1,    -1,    -1,   476,  3939,    -1,    -1,  3942,
      -1,  3298,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3952,
      -1,  3954,   493,  3956,    -1,    -1,    -1,    -1,    -1,    -1,
    3963,    -1,    -1,    -1,    -1,    -1,  3323,    -1,    -1,  3972,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3338,    -1,    -1,  3987,  3988,    -1,    -1,    -1,    -1,
    3993,    -1,    -1,    -1,  3351,    -1,    -1,    -1,    -1,    -1,
    4003,  4004,    -1,    -1,    -1,  4008,    -1,    -1,   549,    -1,
      -1,    -1,    -1,    -1,   555,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3497,    -1,  3499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3532,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3618,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3653,    -1,  3655,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3665,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3746,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3764,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,  3784,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    44,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,  3831,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    -1,    -1,    90,    91,
      92,    -1,    94,    95,    -1,    97,    98,    99,   100,   101,
     102,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,  3891,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,   154,  3920,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,  3942,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,   187,    -1,   189,   190,    -1,
     192,   193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,   215,   216,   217,   218,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,  3993,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,   237,   238,    -1,   240,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
      -1,    -1,   494,   495,   496,    -1,   498,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,   510,   511,
     512,    -1,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,
     572,   573,    -1,    -1,    -1,    -1,   578,   579,    -1,    -1,
     582,   583,    -1,    -1,   586,   587,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,    -1,    -1,   494,   495,   496,    -1,   498,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,    -1,   552,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,    -1,   572,   573,    -1,    -1,    -1,    -1,   578,
     579,    -1,    -1,   582,   583,    -1,    -1,   586,   587,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    92,    -1,    94,    95,
      -1,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,   167,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,   187,    -1,   189,   190,    -1,   192,   193,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,   215,
     216,   217,   218,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,   240,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,    -1,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,    -1,    -1,   494,   495,
     496,    -1,   498,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,    -1,   568,    -1,    -1,    -1,   572,   573,    -1,    -1,
      -1,    -1,   578,   579,    -1,    -1,   582,   583,    -1,    -1,
     586,   587,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    85,    86,    87,    -1,    -1,    90,    91,    92,
      -1,    94,    95,    -1,    97,    98,    99,   100,   101,   102,
      -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,
     193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,   240,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,    -1,    -1,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,    -1,
      -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,
      -1,    -1,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,
     473,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,    -1,
      -1,   494,   495,   496,    -1,   498,   499,   500,    -1,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,
      -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,    -1,   552,
     553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,   572,
     573,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,
     583,    -1,    -1,   586,   587,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    92,    -1,    94,    95,    -1,    97,    98,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,   154,    -1,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,   165,   166,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,   187,    -1,   189,
     190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,   204,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,   215,   216,   217,   218,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
     240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,    -1,    -1,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,    -1,    -1,   494,   495,   496,    -1,   498,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,
      -1,    -1,   572,   573,    -1,    -1,    -1,    -1,   578,   579,
      -1,    -1,   582,   583,    -1,    -1,   586,   587,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    85,    86,
      87,    -1,    -1,    90,    91,    92,    -1,    94,    95,    -1,
      97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
     187,    -1,   189,   190,    -1,   192,   193,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,   215,   216,
     217,   218,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,   240,   241,   242,    -1,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,    -1,    -1,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
      -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,
     437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,    -1,    -1,
      -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,
     467,    -1,    -1,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,    -1,    -1,   494,   495,   496,
      -1,   498,   499,   500,    -1,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,    -1,
     527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,
      -1,   538,   539,    -1,    -1,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,    -1,   552,   553,   554,   555,   556,
      -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,
      -1,   568,    -1,    -1,    -1,   572,   573,    -1,    -1,    -1,
      -1,   578,   579,    -1,    -1,   582,   583,    -1,    -1,   586,
     587,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,    -1,    -1,
     494,   495,   496,    -1,   498,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,    -1,   568,    -1,    -1,    -1,   572,   573,
      -1,    -1,    -1,    -1,   578,   579,    -1,    -1,   582,   583,
      -1,    -1,   586,   587,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    92,    -1,    94,    95,    -1,    97,    98,    99,   100,
     101,   102,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,
      -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,   187,    -1,   189,   190,
      -1,   192,   193,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,   204,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,   215,   216,   217,   218,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,   240,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,    -1,    -1,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,
     441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,    -1,    -1,   494,   495,   496,    -1,   498,   499,   500,
      -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,    -1,   527,   528,    -1,    -1,
     531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,
      -1,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
      -1,   552,   553,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,
      -1,   572,   573,    -1,    -1,    -1,    -1,   578,   579,    -1,
      -1,   582,   583,    -1,    -1,   586,   587,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      -1,    -1,    90,    91,    92,    -1,    94,    95,    -1,    97,
      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,   154,    -1,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,   187,
      -1,   189,   190,    -1,   192,   193,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,   204,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,
     218,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,    -1,    -1,   494,   495,   496,    -1,
     498,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,
     568,    -1,    -1,    -1,   572,   573,    -1,    -1,    -1,    -1,
     578,   579,    -1,    -1,   582,   583,    -1,    -1,   586,   587,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    92,    -1,    94,
      95,    -1,    97,    98,    99,   100,   101,   102,    -1,    -1,
      -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
     165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,   187,    -1,   189,   190,    -1,   192,   193,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,   204,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
     215,   216,   217,   218,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,    -1,    -1,   320,   321,   322,   323,   324,
      -1,   326,   327,   328,    -1,   330,   331,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,    -1,    -1,   494,
     495,   496,    -1,   498,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,    -1,   552,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,    -1,   572,   573,    -1,
      -1,    -1,    -1,   578,   579,    -1,    -1,   582,   583,    -1,
      -1,   586,   587,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    -1,    -1,    90,    91,
      92,    -1,    94,    95,    -1,    97,    98,    99,   100,   101,
     102,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,   154,    -1,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,   187,    -1,   189,   190,    -1,
     192,   193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,   215,   216,   217,   218,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,   240,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
      -1,    -1,   494,   495,   496,    -1,   498,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,
     572,   573,    -1,    -1,    -1,    -1,   578,   579,    -1,    -1,
     582,   583,    -1,    -1,   586,   587,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,    -1,    -1,   494,   495,   496,    -1,   498,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,    -1,   552,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,    -1,   572,   573,    -1,    -1,    -1,    -1,   578,
     579,    -1,    -1,   582,   583,    -1,    -1,   586,   587,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    92,    -1,    94,    95,
      -1,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,   167,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,   187,    -1,   189,   190,    -1,   192,   193,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,   215,
     216,   217,   218,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,   240,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,    -1,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,    -1,    -1,   494,   495,
     496,    -1,   498,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,    -1,   568,    -1,    -1,    -1,   572,   573,    -1,    -1,
      -1,    -1,   578,   579,    -1,    -1,   582,   583,    -1,    -1,
     586,   587,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    85,    86,    87,    -1,    -1,    90,    91,    92,
      -1,    94,    95,    -1,    97,    98,    99,   100,   101,   102,
      -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,
     193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,   240,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,    -1,    -1,   320,   321,   322,
     323,   324,    -1,   326,   327,   328,    -1,   330,   331,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,    -1,
      -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,
      -1,    -1,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,
     473,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,    -1,
      -1,   494,   495,   496,    -1,   498,   499,   500,    -1,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,
      -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,    -1,   552,
     553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,   572,
     573,    -1,    -1,    -1,    -1,   578,   579,    -1,    -1,   582,
     583,    -1,    -1,   586,   587,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    92,    -1,    94,    95,    -1,    97,    98,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,   154,    -1,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,   165,   166,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,   187,    -1,   189,
     190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,   204,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,   215,   216,   217,   218,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
     240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,    -1,    -1,
     320,   321,   322,   323,   324,    -1,   326,   327,   328,    -1,
     330,   331,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,    -1,    -1,   494,   495,   496,    -1,   498,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,
      -1,    -1,   572,   573,    -1,    -1,    -1,    -1,   578,   579,
      -1,    -1,   582,   583,    -1,    -1,   586,   587,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    85,    86,
      87,    -1,    -1,    90,    91,    92,    -1,    94,    95,    -1,
      97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
     187,    -1,   189,   190,    -1,   192,   193,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,   215,   216,
     217,   218,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,   240,   241,   242,    -1,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,    -1,    -1,   320,   321,   322,   323,   324,    -1,   326,
     327,   328,    -1,   330,   331,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
      -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,
     437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,    -1,    -1,
      -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,
     467,    -1,    -1,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,    -1,    -1,   494,   495,   496,
      -1,   498,   499,   500,    -1,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,    -1,
     527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,
      -1,   538,   539,    -1,    -1,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,    -1,   552,   553,   554,   555,   556,
      -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,
      -1,   568,    -1,    -1,    -1,   572,   573,    -1,    -1,    -1,
      -1,   578,   579,    -1,    -1,   582,   583,    -1,    -1,   586,
     587,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,    -1,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,    -1,    -1,
     494,   495,   496,    -1,   498,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,    -1,   568,    -1,    -1,    -1,   572,   573,
      -1,    -1,    -1,    -1,   578,   579,    -1,    -1,   582,   583,
      -1,    -1,   586,   587,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,   177,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,   208,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,   232,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,    -1,   369,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,
     411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,
     441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,
     471,   472,    -1,    -1,   475,   476,    -1,   478,   479,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
     491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,
     521,   522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,
     531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,
      -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,
      -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   587,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    80,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,   177,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,   232,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,
     475,   476,    -1,   478,   479,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,    -1,   490,   491,    -1,    -1,   494,
     495,   496,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,
      -1,   516,   517,   518,   519,    -1,   521,   522,    -1,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,
      -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,   587,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,   478,
     479,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
      -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,
     519,    -1,   521,   522,    -1,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,
     549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,   580,    -1,    -1,    17,    -1,    -1,    20,   587,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,    -1,   369,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,    -1,    -1,   408,    -1,   410,   411,   412,
      -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,    -1,
      -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,
      -1,    -1,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,
      -1,    -1,   475,   476,    -1,   478,   479,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,    -1,   490,   491,    -1,
      -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,   522,
      -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,
      -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,
      -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,
     553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,   580,    -1,    -1,
      -1,    -1,    17,   586,   587,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,
     475,   476,    -1,   478,   479,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,    -1,   490,   491,    -1,    -1,   494,
     495,   496,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,
      -1,   516,   517,   518,   519,    -1,   521,   522,    -1,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,
      -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,   579,    -1,    -1,    -1,    17,    -1,
      -1,    20,   587,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
     219,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,   478,
     479,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
      -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,
     519,    -1,   521,   522,    -1,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,
     549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   587,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,    -1,   369,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,    -1,    -1,   408,    -1,   410,   411,   412,
      -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,    -1,
      -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,
      -1,    -1,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,
      -1,    -1,   475,   476,    -1,   478,   479,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,    -1,   490,   491,    -1,
      -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,   522,
      -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,
      -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,
      -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,
     553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,    -1,
       5,   574,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,   587,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,
     475,   476,    -1,   478,   479,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,    -1,   490,   491,    -1,    -1,   494,
     495,   496,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,
      -1,   516,   517,   518,   519,    -1,   521,   522,    -1,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,
      -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,   579,    -1,    -1,    -1,    17,    -1,
      -1,    20,   587,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,   478,
     479,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
      -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,
     519,    -1,   521,   522,    -1,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,
     549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,   586,   587,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,    -1,   369,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,
     411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,
     441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,
     471,   472,    -1,    -1,   475,   476,    -1,   478,   479,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
     491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,
     521,   522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,
     531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,
      -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,
      -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   587,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,
     475,   476,    -1,   478,   479,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,    -1,   490,   491,    -1,    -1,   494,
     495,   496,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,
      -1,   516,   517,   518,   519,    -1,   521,   522,    -1,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,
      -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,   587,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,   478,
     479,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
      -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,
     519,    -1,   521,   522,    -1,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,
     549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   587,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,    -1,   369,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,    -1,    -1,   408,    -1,   410,   411,   412,
      -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,    -1,
      -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,
      -1,    -1,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,
      -1,    -1,   475,   476,    -1,   478,   479,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,    -1,   490,   491,    -1,
      -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,   522,
      -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,
      -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,
      -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,
     553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,   568,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,   587,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
      -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,    -1,
      -1,   408,    -1,   410,   411,   412,    -1,   414,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,
     437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,    -1,    -1,
      -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,
     467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,
      -1,   478,   479,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,    -1,   490,   491,    -1,    -1,   494,   495,   496,
      -1,   498,   499,   500,    -1,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,
     517,   518,   519,    -1,   521,   522,    -1,   524,   525,    -1,
     527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,
      -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,
      -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,
      -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,
      -1,   568,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   586,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,   498,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,    -1,   568,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,   586,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
      -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,    -1,
      -1,   408,    -1,   410,   411,   412,    -1,   414,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,
     437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,    -1,    -1,
      -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,
     467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,
      -1,   478,   479,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,    -1,   490,   491,    -1,    -1,   494,   495,   496,
      -1,   498,   499,   500,    -1,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,
     517,   518,   519,    -1,   521,   522,    -1,   524,   525,    -1,
     527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,
      -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,
      -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,
      -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,
      -1,   568,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,   586,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    -1,    71,
      -1,    73,    74,    75,    76,    -1,    78,    79,    -1,    -1,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,   228,    -1,    -1,   231,
      -1,    -1,    -1,   235,    -1,    -1,   238,   239,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     352,   353,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
      -1,   403,    -1,   405,   406,    -1,   408,    -1,    -1,   411,
      -1,    -1,   414,   415,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,   425,    -1,   427,    -1,   429,    -1,    -1,
      -1,    -1,   434,   435,   436,    -1,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,    -1,   447,    -1,    -1,   450,    -1,
      -1,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,    -1,
     472,    -1,    -1,    -1,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,    -1,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,    -1,    -1,    -1,    -1,   531,
      -1,    -1,   534,    -1,    -1,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,   559,    -1,   561,
      -1,    -1,   564,    -1,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,   581,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,   574,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,   574,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,   574,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
     574,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,   193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,    -1,    -1,   331,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,   457,   458,   459,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,   520,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,   145,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
     440,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,   498,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
     498,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,   498,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    92,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,   498,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
      12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,   498,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,   498,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
     498,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,   498,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,   498,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,   498,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    83,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,   155,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
     498,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      -1,    71,    -1,    73,    74,    75,    76,    -1,    78,    79,
      -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
      -1,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,    -1,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,    -1,
     190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
     200,   201,   202,   203,   204,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,    -1,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,   228,    -1,
      -1,   231,    -1,    -1,    -1,   235,    -1,    -1,   238,   239,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   352,   353,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,    -1,    -1,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,    -1,    -1,   403,    -1,   405,   406,    -1,   408,    -1,
      -1,   411,    -1,    -1,   414,   415,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,   425,    -1,   427,    -1,   429,
      -1,    -1,    -1,    -1,   434,   435,   436,    -1,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,    -1,   447,    -1,    -1,
     450,    -1,    -1,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,    -1,   472,    -1,    -1,    -1,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,    -1,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,    -1,    -1,    -1,
      -1,   531,    -1,    -1,   534,    -1,    -1,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,   559,
      -1,   561,    -1,    -1,   564,    -1,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,
      78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,   133,    -1,   135,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,    -1,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,    -1,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,   200,   201,   202,   203,   204,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,    -1,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
     228,    -1,    -1,   231,    -1,    -1,    -1,   235,    -1,    -1,
     238,   239,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   352,   353,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,    -1,   403,    -1,   405,   406,    -1,
     408,    -1,    -1,   411,    -1,    -1,   414,   415,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,   425,    -1,   427,
      -1,   429,    -1,    -1,    -1,    -1,   434,   435,   436,    -1,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,    -1,   447,
      -1,    -1,   450,    -1,    -1,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,    -1,   472,    -1,    -1,    -1,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,    -1,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,    -1,
      -1,    -1,    -1,   531,    -1,    -1,   534,    -1,    -1,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,   557,
      -1,   559,    -1,   561,    -1,    -1,   564,    -1,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,
      56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,    75,
      76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,   133,    -1,   135,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,    -1,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,   228,    -1,    -1,   231,    -1,    -1,    -1,   235,
      -1,    -1,   238,   239,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   352,   353,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,    -1,    -1,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,    -1,    -1,   403,    -1,   405,
     406,    -1,   408,    -1,    -1,   411,    -1,    -1,   414,   415,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,   425,
      -1,   427,    -1,   429,    -1,    -1,    -1,    -1,   434,   435,
     436,    -1,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
      -1,   447,    -1,    -1,   450,    -1,    -1,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,    -1,   472,    -1,    -1,    -1,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
      -1,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,   534,    -1,
      -1,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,   557,    -1,   559,    -1,   561,    -1,    -1,   564,    -1,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,
      74,    75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,    -1,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,   228,    -1,    -1,   231,    -1,    -1,
      -1,   235,    -1,    -1,   238,   239,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,   353,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
      -1,   405,   406,    -1,   408,    -1,    -1,   411,    -1,    -1,
     414,   415,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,   425,    -1,   427,    -1,   429,    -1,    -1,    -1,    -1,
     434,   435,   436,    -1,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,    -1,   447,    -1,    -1,   450,    -1,    -1,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,    -1,   472,    -1,
      -1,    -1,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,
     534,    -1,    -1,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,   559,    -1,   561,    -1,    -1,
     564,    -1,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    -1,    71,
      -1,    73,    74,    75,    76,    -1,    78,    79,    -1,    -1,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,   228,    -1,    -1,   231,
      -1,    -1,    -1,   235,    -1,    -1,   238,   239,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     352,   353,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
      -1,   403,    -1,   405,   406,    -1,   408,    -1,    -1,   411,
      -1,    -1,   414,   415,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,   425,    -1,   427,    -1,   429,    -1,    -1,
      -1,    -1,   434,   435,   436,    -1,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,    -1,   447,    -1,    -1,   450,    -1,
      -1,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,    -1,
     472,    -1,    -1,    -1,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,    -1,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,    -1,    -1,    -1,    -1,   531,
      -1,    -1,   534,    -1,    -1,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,   559,    -1,   561,
      -1,    -1,   564,    -1,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      -1,    71,    -1,    73,    74,    75,    76,    -1,    78,    79,
      -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,    -1,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,    -1,
     190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
     200,   201,   202,   203,   204,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,    -1,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,   228,    -1,
      -1,   231,    -1,    -1,    -1,   235,    -1,    -1,   238,   239,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   352,   353,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,    -1,    -1,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,    -1,    -1,   403,    -1,   405,   406,    -1,   408,    -1,
      -1,   411,    -1,    -1,   414,   415,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,   425,    -1,   427,    -1,   429,
      -1,    -1,    -1,    -1,   434,   435,   436,    -1,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,    -1,   447,    -1,    -1,
     450,    -1,    -1,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,    -1,   472,    -1,    -1,    -1,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,    -1,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,    -1,    -1,    -1,
      -1,   531,    -1,    -1,   534,    -1,    -1,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,   559,
      -1,   561,    -1,    -1,   564,    -1,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,
      78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,    -1,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,    -1,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,   200,   201,   202,   203,   204,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,    -1,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
     228,    -1,    -1,   231,    -1,    -1,    -1,   235,    -1,    -1,
     238,   239,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   352,   353,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,    -1,   403,    -1,   405,   406,    -1,
     408,    -1,    -1,   411,    -1,    -1,   414,   415,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,   425,    -1,   427,
      -1,   429,    -1,    -1,    -1,    -1,   434,   435,   436,    -1,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,    -1,   447,
      -1,    -1,   450,    -1,    -1,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,    -1,   472,    -1,    -1,    -1,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,    -1,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,    -1,
      -1,    -1,    -1,   531,    -1,    -1,   534,    -1,    -1,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,   559,    -1,   561,    -1,    -1,   564,    -1,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,
      56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,    75,
      76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,    -1,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,   228,    -1,    -1,   231,    -1,    -1,    -1,   235,
      -1,    -1,   238,   239,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   352,   353,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,    -1,    -1,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,    -1,    -1,   403,    -1,   405,
     406,    -1,   408,    -1,    -1,   411,    -1,    -1,   414,   415,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,   425,
      -1,   427,    -1,   429,    -1,    -1,    -1,    -1,   434,   435,
     436,    -1,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
      -1,   447,    -1,    -1,   450,    -1,    -1,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,    -1,   472,    -1,    -1,    -1,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
      -1,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,   534,    -1,
      -1,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,   559,    -1,   561,    -1,    -1,   564,    -1,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,
      74,    75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,    -1,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,   228,    -1,    -1,   231,    -1,    -1,
      -1,   235,    -1,    -1,   238,   239,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,   353,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
      -1,   405,   406,    -1,   408,    -1,    -1,   411,    -1,    -1,
     414,   415,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,   425,    -1,   427,    -1,   429,    -1,    -1,    -1,    -1,
     434,   435,   436,    -1,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,    -1,   447,    -1,    -1,   450,    -1,    -1,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,    -1,   472,    -1,
      -1,    -1,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,
     534,    -1,    -1,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,   559,    -1,   561,    -1,    -1,
     564,    -1,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    -1,    71,
      -1,    73,    74,    75,    76,    -1,    78,    79,    -1,    -1,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,   228,    -1,    -1,   231,
      -1,    -1,    -1,   235,    -1,    -1,   238,   239,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     352,   353,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
      -1,   403,    -1,   405,   406,    -1,   408,    -1,    -1,   411,
      -1,    -1,   414,   415,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,   425,    -1,   427,    -1,   429,    -1,    -1,
      -1,    -1,   434,   435,   436,    -1,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,    -1,   447,    -1,    -1,   450,    -1,
      -1,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,    -1,
     472,    -1,    -1,    -1,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,    -1,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,    -1,    -1,    -1,    -1,   531,
      -1,    -1,   534,    -1,    -1,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,   559,    -1,   561,
      -1,    -1,   564,    -1,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    -1,    -1,    -1,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    -1,
      -1,    71,    -1,    73,    74,    75,    76,    -1,    78,    79,
      -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,    -1,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,    -1,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,    -1,
     190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,    -1,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,    -1,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   352,   353,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,    -1,    -1,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,    -1,    -1,   403,    -1,   405,    -1,    -1,   408,    -1,
      -1,   411,    -1,    -1,   414,   415,    -1,    -1,    -1,    -1,
     420,   421,   422,   423,   424,   425,    -1,   427,    -1,   429,
      -1,    -1,    -1,    -1,   434,   435,   436,    -1,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,    -1,   447,    -1,    -1,
     450,    -1,    -1,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,    -1,   472,    -1,    -1,    -1,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,    -1,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,    -1,    -1,    -1,
      -1,   531,    -1,    -1,   534,    -1,    -1,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,    -1,    -1,   564,    -1,    -1,    -1,   568
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    28,    30,    34,    48,    49,    55,    59,
      60,    72,    88,   108,   116,   117,   118,   128,   129,   141,
     153,   169,   184,   189,   192,   215,   217,   233,   250,   254,
     340,   359,   369,   379,   399,   402,   404,   407,   410,   412,
     417,   419,   426,   431,   439,   444,   448,   471,   475,   516,
     528,   532,   535,   540,   565,   579,   590,   593,   594,   595,
     596,   597,   599,   604,   606,   611,   639,   771,   907,   945,
     948,   956,   958,   960,   963,   968,   970,   971,   976,   979,
     984,   988,   996,   997,  1146,  1148,  1156,  1159,  1184,  1192,
    1203,  1209,  1222,  1225,  1228,  1234,  1238,  1242,  1244,  1245,
    1291,  1308,  1314,  1316,  1323,  1325,  1350,  1356,  1357,  1358,
    1359,  1406,  1414,  1415,    11,    95,   113,   178,   205,   255,
     374,   437,   491,   941,  1375,  1376,  1377,  1380,   251,   329,
     978,   490,   493,  1310,  1351,   498,  1282,   208,     5,     7,
       8,     9,    10,    11,    17,    20,    22,    23,    24,    25,
      26,    27,    28,    30,    34,    38,    41,    42,    43,    45,
      47,    48,    51,    54,    56,    57,    59,    61,    62,    63,
      64,    65,    67,    68,    70,    71,    72,    73,    74,    75,
      76,    78,    79,    81,    82,    84,    87,    90,    97,    98,
      99,   102,   107,   108,   113,   115,   119,   121,   122,   123,
     124,   128,   131,   132,   133,   137,   139,   140,   142,   143,
     144,   147,   149,   150,   151,   152,   153,   156,   157,   158,
     161,   162,   164,   165,   166,   169,   173,   174,   176,   178,
     180,   181,   182,   183,   185,   189,   190,   192,   195,   196,
     200,   201,   202,   203,   206,   207,   210,   212,   216,   217,
     221,   223,   224,   226,   227,   231,   234,   235,   238,   241,
     242,   248,   249,   251,   253,   255,   256,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     278,   279,   281,   282,   283,   284,   286,   287,   288,   292,
     293,   294,   295,   296,   299,   300,   302,   304,   306,   307,
     308,   309,   310,   311,   312,   313,   316,   317,   320,   321,
     322,   323,   327,   328,   333,   334,   335,   337,   338,   339,
     341,   351,   352,   353,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   369,   370,   371,   373,
     375,   376,   377,   378,   380,   381,   382,   385,   389,   390,
     391,   392,   393,   396,   397,   398,   400,   401,   403,   404,
     405,   408,   410,   411,   412,   414,   415,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   429,   430,   434,   435,
     436,   437,   441,   445,   446,   447,   448,   450,   451,   452,
     453,   454,   461,   462,   464,   467,   470,   471,   472,   475,
     476,   478,   479,   480,   481,   482,   485,   486,   487,   488,
     490,   491,   494,   495,   496,   499,   500,   502,   503,   504,
     505,   511,   512,   516,   517,   518,   519,   521,   522,   524,
     525,   527,   528,   531,   534,   536,   538,   539,   546,   549,
     553,   554,   555,   556,   561,   562,   564,   565,   568,   633,
    1281,  1285,  1289,  1290,   278,  1310,  1310,   561,  1352,    95,
     177,   255,   437,   455,   491,   495,   530,   538,   615,   616,
     819,   820,   821,   894,  1193,  1147,    95,   151,   178,   208,
     255,   374,   437,   491,   495,   513,   538,   553,  1155,  1285,
     978,   632,   587,  1279,  1280,  1285,   605,  1157,   363,    78,
     381,  1243,    98,   208,   493,  1310,   978,   772,  1285,  1239,
     426,   538,  1310,   978,  1160,  1235,  1310,   632,  1352,  1285,
     999,  1001,  1002,   342,  1293,  1210,   471,   475,   448,   511,
     448,   493,  1204,   363,  1315,  1185,  1285,    30,    72,   139,
     369,   390,   419,   471,  1408,   431,   579,   998,     0,   141,
     591,   369,   157,   358,  1226,  1279,  1285,   145,   918,  1285,
     145,   633,   186,   633,   243,  1282,  1285,  1287,   720,   721,
     724,   747,  1285,   493,   151,   913,  1375,  1310,   959,  1352,
     985,   986,  1279,   640,   587,   509,   961,   972,    16,  1353,
     204,   822,   186,  1287,   722,   747,   632,   347,  1372,  1376,
    1377,  1378,  1379,  1380,   493,   820,   208,   205,   262,   382,
    1201,  1202,     7,    20,    27,    33,    35,    36,    37,    39,
      52,    53,    57,    58,    64,    67,    81,    85,    86,    91,
      92,    94,    95,   100,   101,   102,   107,   109,   112,   154,
     159,   160,   167,   180,   182,   187,   193,   200,   204,   215,
     218,   240,   248,   259,   280,   285,   295,   299,   301,   305,
     306,   307,   308,   309,   315,   324,   325,   326,   330,   331,
     335,   354,   360,   364,   365,   367,   380,   406,   407,   418,
     424,   429,   473,   474,   479,   483,   484,   489,   498,   502,
     503,   504,   505,   514,   515,   516,   520,   523,   538,   542,
     543,   544,   545,   550,   552,   556,   568,   572,   573,   578,
     579,   582,   583,   586,   587,  1017,  1018,  1019,  1020,  1024,
    1027,  1028,  1029,  1030,  1031,  1032,  1040,  1044,  1054,  1266,
    1268,  1270,  1271,  1275,  1277,  1281,  1285,   204,  1154,  1154,
    1154,  1285,   186,  1154,  1154,   747,  1154,   632,  1154,  1310,
     600,  1229,    12,    13,    88,   116,   129,   151,   153,   164,
     184,   208,   215,   254,   375,   394,   400,   408,   431,   444,
     445,   485,   513,   535,   537,  1326,  1328,  1330,  1331,  1285,
     339,    63,   386,   587,  1287,   114,   194,   262,  1162,  1285,
    1017,  1246,   219,  1279,  1309,  1310,    46,   773,   175,    33,
     278,  1214,  1240,  1285,   632,   980,  1310,   114,   262,  1163,
    1191,   278,   381,   448,  1236,  1237,   957,    12,  1324,  1328,
     509,  1353,  1000,    12,   125,   194,   460,   461,   462,   463,
     464,   465,   477,  1006,  1007,  1008,  1292,    23,    34,    57,
      58,    67,    69,    84,    86,    88,    96,   143,   147,   150,
     176,   178,   183,   185,   207,   208,   212,   230,   251,   278,
     310,   320,   339,   362,   373,   374,   377,   378,   436,   448,
     476,   493,   555,   867,   893,  1211,  1214,  1215,  1217,  1299,
     950,   951,   950,   950,   560,   949,   950,  1151,  1279,  1285,
    1310,  1191,    35,   193,   498,  1267,  1283,  1407,  1407,  1407,
    1407,  1407,  1001,   998,   580,   585,  1285,  1224,  1223,   294,
     496,   522,   909,   536,    92,  1287,  1288,   911,   726,   748,
    1285,   910,   341,     6,    55,   129,   325,   385,   387,   749,
    1279,   633,   466,  1381,  1382,   912,   969,  1150,  1151,   222,
     581,   992,   993,   579,   641,  1285,   607,  1150,  1150,    54,
     327,   327,   399,  1354,   324,   325,  1023,  1285,   725,   748,
     171,     6,  1288,  1341,  1342,   407,    10,   374,   513,   619,
    1012,  1374,  1382,  1390,  1394,  1395,  1401,   619,  1012,  1373,
    1382,  1390,  1395,  1401,  1375,  1380,   822,  1285,   175,  1194,
    1198,  1199,  1285,  1201,   579,   579,   579,  1027,   579,   579,
     579,  1017,  1057,   579,   579,   579,   579,   579,   579,   579,
     579,   579,  1016,  1016,   579,  1016,   579,   579,   579,   523,
     579,  1266,   579,   579,   579,   579,   579,   579,   579,   579,
     579,   579,   579,  1017,   579,   579,   579,  1055,  1056,  1275,
    1285,   579,   579,   579,   579,   579,   579,   579,   579,   579,
    1017,   579,  1016,   579,   579,   579,   579,   579,   579,   579,
     579,   579,   579,   579,   579,   579,   579,   579,   579,   579,
    1016,   579,  1266,   579,   579,   579,  1266,   579,   579,    35,
     193,   498,   579,  1016,  1016,  1016,   579,   579,   579,   579,
     579,  1027,  1027,  1027,   431,   579,  1017,  1369,  1285,  1045,
    1285,    15,    16,   344,   347,   566,  1021,  1022,   145,   146,
     179,   188,   225,   236,   263,   318,  1025,    31,   126,   222,
     244,   305,   395,   442,   443,   453,   570,   571,   572,   573,
     574,   575,   576,   577,  1023,  1027,    66,   346,   581,  1283,
     579,   587,   154,  1285,   633,  1285,   336,   748,   633,  1287,
     758,  1215,   633,  1288,  1340,  1150,  1154,   541,   601,   119,
     196,   256,   278,   373,   381,   411,   448,   472,   490,  1230,
    1231,  1310,   373,  1329,   421,   421,   495,   538,   553,   342,
    1333,   490,  1335,    62,   448,  1332,    96,   553,  1334,   336,
     581,    18,   145,  1101,  1102,  1317,  1285,   941,   452,    76,
     175,   262,  1247,  1253,    48,   175,  1279,  1311,  1312,   977,
     246,   249,   383,   774,   778,   586,   598,  1282,   256,   981,
    1288,   982,   983,  1279,   964,   219,  1151,  1164,  1165,    48,
     581,  1150,  1329,   336,   426,  1355,  1354,   529,  1360,  1361,
     574,  1010,  1011,  1012,  1008,  1294,  1295,  1296,   150,   439,
     244,   558,  1221,   517,   579,    95,   151,   178,   374,   493,
     513,   553,  1221,    12,   830,  1287,   245,  1120,  1122,   175,
     222,  1216,  1218,    65,   472,   172,   472,   472,   472,   278,
     490,    65,   472,    12,    41,    82,    87,   224,   293,   353,
     454,   487,  1205,  1206,  1207,   196,   472,   472,   517,  1120,
    1221,  1218,   256,   142,    68,   363,   376,   490,   512,   472,
     549,   947,   398,   467,   952,   953,   946,    79,   941,   581,
     338,  1410,   486,  1411,   229,   414,  1409,   580,  1361,  1363,
    1364,  1365,   141,   592,   996,  1227,  1267,  1285,   112,   817,
     818,   827,   828,   876,    98,  1016,   586,   634,     6,   727,
     634,   579,    97,   744,   744,   744,     4,   908,   914,   430,
     553,  1382,  1150,   509,   581,   112,   987,  1285,   986,   208,
     232,   891,   994,   642,   643,  1017,   264,   265,   266,   267,
     268,   269,   271,   272,   273,   274,   275,   276,   277,   279,
     396,   397,   608,   609,   610,   157,   382,   962,    56,   157,
     161,   172,   292,   382,   973,   974,   975,    54,   399,   154,
     614,   727,    98,   744,   202,   581,  1012,  1012,  1012,   151,
     178,   178,  1382,  1279,   895,   896,  1152,  1153,  1279,   581,
    1196,   587,  1200,  1017,  1017,    12,   125,  1050,  1103,  1050,
    1050,  1050,   557,  1059,  1017,  1017,  1054,  1054,  1017,  1017,
    1017,   125,  1050,  1103,   580,  1017,   580,  1017,  1017,  1017,
    1017,  1275,   579,  1369,   103,   104,   105,   106,   107,   197,
     198,   199,   200,   295,   297,   298,   299,   306,   380,   428,
     429,   556,   567,   568,  1097,  1099,  1054,    99,   102,   502,
     505,  1100,   125,  1047,  1017,  1017,  1017,  1017,  1097,  1017,
    1054,  1056,     9,   581,   587,   125,  1050,  1017,  1017,   125,
    1050,  1017,  1017,  1054,  1054,  1054,  1017,  1017,  1017,  1017,
    1054,  1020,  1017,  1017,  1017,  1017,  1017,  1017,  1050,  1050,
    1017,  1017,   125,  1050,  1017,  1017,   174,  1098,  1099,  1098,
    1017,    44,   237,   510,  1017,  1017,   580,  1276,  1277,  1285,
    1050,  1050,  1017,  1017,  1370,  1370,   580,   581,   580,  1017,
     586,  1046,  1287,   587,  1017,  1017,  1017,  1019,   160,   330,
     515,   531,  1023,    12,    17,  1019,  1026,  1020,  1020,   579,
    1027,  1020,  1020,  1020,  1020,   244,  1020,  1020,   218,  1020,
     218,  1020,  1020,  1020,  1020,  1020,    31,   222,   244,   395,
    1287,  1027,  1017,  1033,  1285,   587,  1279,   758,   328,   554,
     759,   760,   143,   581,    50,   413,   942,  1150,   586,   602,
     603,    48,   560,   581,  1232,   490,   579,  1343,  1343,  1343,
    1343,   178,   374,   493,  1327,  1331,  1285,   165,   321,  1285,
    1318,  1319,  1164,  1282,   278,   251,  1252,   989,   278,  1102,
     581,  1150,   777,   776,   358,   784,   190,   232,  1287,    29,
     509,  1241,   581,   509,   581,   509,  1150,  1165,  1161,  1237,
     175,   581,   178,   374,  1327,  1285,    12,   125,  1367,   581,
    1003,  1014,  1017,  1273,  1285,   581,   183,   251,   337,   436,
    1297,  1298,  1301,  1302,   222,  1219,  1282,  1017,   574,   822,
     633,   633,   633,  1279,   633,  1279,   256,   310,   472,  1213,
    1213,   259,   331,   520,  1123,  1124,  1268,  1221,  1285,   633,
    1221,  1288,   172,  1216,   633,  1221,   223,   488,   162,   172,
    1208,   581,  1216,  1279,  1218,  1216,  1216,  1221,  1221,   534,
     954,   581,   954,   450,   431,   579,   583,  1060,  1061,  1062,
    1063,  1064,  1073,  1074,  1081,  1267,   361,  1412,   345,  1116,
    1122,  1366,   818,    66,   867,   121,  1287,    70,    81,   234,
     303,   327,   384,   466,   636,   638,   391,   524,   745,   746,
     210,   741,   742,   743,   750,   758,   760,    95,   195,   351,
     360,   366,   451,   538,   617,   618,  1282,    24,   284,   735,
     736,   737,   750,   751,   752,   758,   760,   728,   729,   735,
       6,    13,    14,    25,    26,    55,    59,    60,    64,    70,
      78,    85,    98,   115,   122,   123,   129,   137,   143,   170,
     206,   208,   216,   231,   283,   300,   304,   340,   345,   352,
     359,   360,   389,   401,   402,   403,   404,   423,   476,   491,
     494,   518,   529,   769,   824,   826,   827,   828,   919,   923,
     925,   928,   934,   935,   936,  1112,   336,   627,   915,   113,
     221,  1279,  1282,  1151,   579,   580,   581,   145,   145,   145,
     145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
     145,   145,   145,   581,   536,   974,   816,   817,    70,   322,
     392,   525,   738,   739,   740,   750,   754,   755,   756,   757,
     758,   760,   562,   540,   723,    46,  1342,   178,   633,   633,
     822,   633,  1285,   612,   518,   541,   899,   336,   581,  1197,
    1195,  1199,   175,   574,  1285,  1102,   581,   580,  1050,   580,
    1051,   580,   580,   580,  1017,   135,   557,  1058,    18,   580,
     541,   580,   580,   580,   581,   541,   581,  1041,   580,   574,
     580,   581,   581,   580,   580,   580,   580,   175,   580,   581,
    1043,   580,   581,   581,   581,   573,   581,   580,   580,   579,
    1275,  1285,  1050,   580,   580,   580,  1050,   580,   581,   580,
     580,   580,   580,   580,   580,   580,   581,   580,   222,   580,
     581,   581,   581,   581,   580,   580,   580,   581,   175,   581,
    1050,   580,   580,   580,   581,   581,   581,   580,   175,  1017,
     175,  1017,   175,  1017,   175,   580,   581,   580,   580,   580,
     580,   581,   580,   999,   998,  1054,   584,   183,   251,   436,
    1300,   440,  1285,   160,   330,   515,   531,   579,    16,  1017,
    1369,   149,  1108,  1020,  1017,  1017,  1020,   579,  1027,  1020,
    1012,  1037,  1038,  1039,   579,   587,  1285,  1149,   759,   145,
     440,  1175,  1176,  1288,   942,  1287,   581,   386,  1231,  1150,
    1233,  1285,  1344,  1345,   574,  1279,  1285,  1339,  1339,  1339,
     145,   165,   179,   188,   235,   236,   263,   321,   371,  1320,
    1322,   558,  1104,  1158,   209,   990,   991,  1279,   262,   386,
     563,  1313,  1312,   579,   782,   782,   109,   167,   193,   259,
     331,   520,  1127,  1130,  1131,   482,   785,   775,   579,  1017,
    1282,  1288,  1288,   983,  1279,   157,   382,   539,   965,   966,
     967,   431,   439,   545,   546,   579,   812,  1166,  1169,  1282,
     184,  1339,  1339,  1339,  1362,  1011,   175,   219,  1004,  1005,
    1115,  1116,  1141,  1013,   587,  1295,   112,   511,  1285,  1304,
     311,   360,   586,   867,  1303,  1282,   175,  1220,   580,  1285,
     334,   581,   448,  1221,   381,  1120,  1207,  1221,  1216,  1279,
    1221,  1221,   610,   955,   953,  1080,  1285,    89,   211,   229,
     240,   314,   418,   477,  1072,   439,   581,  1279,  1080,   581,
     172,  1413,    46,  1120,  1176,  1176,   312,  1282,   466,   466,
     466,   466,   466,   430,  1282,  1282,  1176,   581,   743,  1282,
    1282,  1282,  1282,   109,   167,   193,   259,   331,   520,  1126,
    1282,  1282,   580,   581,  1176,  1176,   581,   737,   730,   731,
     750,   751,   752,    69,    80,   177,   359,   455,   838,   841,
     842,   889,   891,   940,   940,   359,  1176,  1176,   940,  1176,
     359,   359,  1176,  1176,   509,   121,  1176,   230,   491,   171,
     359,   372,   891,   940,   230,  1176,   491,   121,  1176,  1176,
    1176,  1176,   940,   359,    46,  1176,   770,  1176,   359,   357,
      18,   145,   509,   944,   359,   359,  1176,   124,   293,  1285,
    1176,  1176,  1176,   824,   581,   768,   769,   923,   579,   587,
     837,   843,  1278,  1285,    74,   427,   402,   916,  1383,   372,
    1093,  1094,  1095,  1285,  1017,  1126,  1282,  1282,   109,   167,
     259,   331,   520,  1128,  1282,  1126,  1282,  1282,  1282,  1282,
    1282,  1126,  1126,  1282,  1282,  1126,   609,  1176,  1176,  1176,
    1176,   581,   740,  1287,   255,   158,   732,   733,   734,   750,
     751,   752,   753,   756,   757,   758,   760,   360,   498,  1285,
    1402,     8,    29,   718,   633,   579,   415,   244,   579,   762,
     823,   825,   826,    45,   190,   425,   901,   901,  1279,  1153,
    1279,   541,  1104,  1061,   587,  1200,   218,  1017,   580,  1017,
     501,  1017,  1017,   139,    33,    58,    99,   102,   110,   316,
     446,   505,   533,  1052,    33,   868,  1287,  1017,   868,  1052,
    1054,   580,   218,   218,  1017,  1017,  1054,  1017,  1017,  1017,
    1017,  1017,  1020,   580,   580,  1017,  1017,  1017,  1017,  1017,
    1017,  1054,   218,  1017,  1017,  1017,   580,  1017,  1017,  1017,
    1017,   175,  1017,   175,  1017,   175,  1017,  1017,  1017,  1368,
    1368,   580,   587,   587,   587,  1287,  1017,  1369,  1019,   580,
     581,   580,  1027,  1097,  1097,    16,  1017,  1369,  1108,  1017,
     580,   581,  1053,  1054,  1285,   829,  1287,   603,   254,   580,
     581,   587,   587,   509,   509,   509,  1321,  1105,  1121,  1122,
    1166,   498,  1284,   581,   992,   563,   251,  1012,    46,   579,
     792,   782,   779,   780,   781,  1285,   509,   966,   813,  1167,
     579,  1172,  1177,  1172,   580,   812,  1168,  1272,  1273,  1276,
    1285,  1170,   342,   175,   175,   175,   997,   130,  1061,  1142,
     172,   254,  1009,  1141,  1121,  1005,    18,  1015,  1282,  1285,
     574,  1285,   587,   226,   587,  1175,   112,   868,   869,  1175,
     172,  1175,   586,  1287,    33,   112,   871,   872,  1287,  1128,
    1212,   147,   555,  1124,  1124,   560,   331,  1104,  1216,   581,
    1075,  1080,  1060,   229,   229,   348,  1082,   229,   240,   418,
    1082,  1073,  1060,  1187,  1188,  1276,  1062,  1102,  1077,  1078,
    1126,   296,  1117,   112,   873,   875,  1287,   869,    98,    98,
     113,   221,   201,   761,  1127,   743,   618,   761,   761,   737,
     581,   731,   904,  1278,   891,   892,   978,   892,    60,   171,
     372,   530,   840,   890,   839,   840,   904,  1278,   978,  1128,
    1126,  1278,  1126,    12,   924,   932,   933,  1285,   978,  1282,
    1282,   867,  1176,  1126,   232,   932,   232,  1278,  1278,   829,
    1176,   165,   235,   327,   832,  1126,  1128,  1128,  1278,   978,
    1113,  1114,  1276,   112,  1126,   773,  1282,   978,  1279,   978,
     978,    73,    75,   112,   133,   166,   393,   831,  1126,   829,
     579,     6,   129,   936,   835,   836,   837,   838,  1285,     8,
     165,   943,   394,   839,   881,   844,   587,   325,   370,    22,
     152,   621,   509,   122,   137,   623,   579,  1384,   580,   581,
    1282,  1127,   761,   761,   740,   341,   186,  1176,   581,   734,
     498,   415,   579,   116,   215,   535,   719,   620,  1396,   110,
     220,   388,   478,   834,  1279,   244,   359,   763,   768,   835,
     768,   581,   825,   613,  1061,  1115,  1104,  1102,  1017,   580,
    1017,   501,   579,   860,   861,   861,   579,   855,   856,   860,
     861,   220,   220,   580,   580,   580,   580,   580,  1042,  1017,
    1017,   580,   580,  1049,  1116,   581,   581,   580,   581,   580,
     222,  1034,  1035,   580,   580,   580,   580,   581,   580,   580,
    1017,   580,   172,   580,   580,   581,   580,   581,   581,   580,
    1017,   580,  1017,   580,  1017,   580,   580,   580,  1371,  1371,
     587,   905,   580,  1054,  1019,   580,   581,   580,  1013,  1039,
     580,  1345,   574,   574,  1341,  1341,  1341,   579,  1017,   336,
    1182,  1248,   991,   205,   995,   790,  1020,   778,   359,   793,
     794,   580,   581,  1288,  1006,  1173,  1174,  1276,  1178,   581,
     579,  1169,   580,   580,   581,   587,  1360,   175,  1341,  1341,
    1341,  1104,  1104,   131,   349,  1137,  1138,  1143,   535,   222,
    1282,  1285,   587,  1285,   242,  1285,    12,    33,   112,   336,
    1017,  1307,    66,   874,  1017,  1288,   335,   360,   498,  1306,
    1300,  1175,  1120,   266,  1221,   610,  1363,  1076,   584,   229,
    1073,  1082,  1082,   229,   336,   336,   541,   581,  1186,  1175,
    1091,  1092,  1006,  1017,  1118,  1274,   731,   926,  1017,   232,
     232,   892,   904,   896,   129,   439,   924,   937,   921,   581,
    1127,   869,  1282,   904,   942,  1282,   938,   924,   581,    19,
     117,  1119,   924,   929,   924,  1233,   580,   581,  1285,  1279,
      32,    33,    38,    40,    42,    43,    58,    99,   102,   110,
     127,   144,   166,   168,   180,   181,   220,   248,   257,   258,
     260,   289,   290,   291,   307,   308,   309,   313,   316,   332,
     333,   364,   365,   388,   435,   439,   449,   499,   502,   505,
     506,   507,   508,   547,   548,   568,   845,   848,   849,   850,
     851,   852,   853,   854,  1285,   370,  1017,  1017,   336,   627,
     633,   336,    70,   628,  1285,  1385,    18,  1094,   579,  1285,
     761,   734,   834,  1403,   336,   336,   644,   645,   647,  1285,
     452,  1279,   812,   580,   205,   407,   765,  1254,   825,   579,
    1104,   245,  1125,  1097,  1017,   109,   259,   331,   520,    20,
      33,    47,   527,   867,   877,   331,   580,  1097,  1097,   433,
    1048,  1017,  1017,  1054,    42,   314,   580,   560,  1036,  1017,
    1097,  1017,  1017,  1017,  1017,   580,   580,   580,   580,  1285,
     580,  1054,  1015,   409,  1346,  1346,  1346,   112,  1017,  1180,
    1181,   132,  1254,   238,  1013,   190,   232,   795,   580,   581,
     781,  1010,   581,  1175,  1179,  1180,  1177,  1171,  1169,  1272,
    1285,  1341,  1121,   186,  1109,  1284,  1284,   586,  1139,  1140,
    1287,   441,   574,   386,   405,   434,  1305,   875,  1175,   579,
     579,  1304,  1017,   145,   580,  1063,  1060,  1073,   229,   229,
    1060,  1073,  1066,  1065,  1067,  1188,  1104,  1181,  1089,  1090,
    1010,   581,  1119,   358,   579,   927,   904,   896,   579,   112,
     112,   843,   973,   933,   874,   845,   920,  1114,   930,   932,
     922,   580,   836,   882,   860,   860,   861,   855,   368,   846,
     855,   855,   877,    58,   547,   849,   851,   877,   877,    58,
     548,   548,   551,   855,   847,   861,   861,   877,   860,   861,
      25,    66,    70,   112,   330,   336,   372,   435,   530,   863,
     864,   865,   880,  1023,   551,   860,   877,    33,   860,   878,
     860,   860,   861,   579,   856,   862,   587,  1097,   448,  1282,
     128,   917,   580,   581,  1386,  1387,   617,   452,   213,   222,
     350,   648,   649,   650,   651,  1012,   427,   580,   581,   646,
    1282,   580,   580,   823,    18,   815,   902,   903,  1285,  1124,
     580,   580,   580,   580,   580,   878,    20,   527,   867,   879,
     878,   868,   581,   580,   580,  1267,   580,   580,   581,   580,
     302,   234,   381,   580,   580,   580,   580,   580,   580,   580,
      61,   227,   323,   468,   480,   564,  1337,  1338,   560,  1347,
    1347,  1347,   580,   581,  1183,   219,   580,   579,   783,   579,
     796,  1285,   794,   814,  1174,  1181,   580,  1363,    46,   191,
    1106,  1144,  1287,   581,   302,    71,   521,   386,  1306,   498,
     498,  1175,  1282,  1102,   336,  1069,  1073,  1073,   336,  1071,
    1017,  1017,   579,  1115,   170,   205,   540,  1084,  1085,  1088,
    1079,  1274,  1127,   793,   579,   579,   902,   102,   502,   505,
     572,   573,  1269,  1270,   943,   863,   978,   931,   965,   280,
     336,   579,   883,   885,   886,   887,   446,   533,   569,   857,
     858,   859,   579,   857,   857,   877,   551,   857,   579,   877,
     857,   873,  1282,   326,   866,  1269,   535,   112,   232,   865,
     232,   330,   877,   878,   877,   878,   857,   331,   857,  1285,
     622,   629,   630,  1285,   431,   579,  1388,   580,  1282,   580,
     581,   646,  1391,   621,  1397,   647,   845,   764,   768,   579,
     812,   580,   581,  1119,   579,   868,   878,   331,  1017,   302,
     156,   498,   498,   498,    16,  1336,   184,   281,   282,   286,
     287,  1348,  1349,  1181,   232,  1249,  1012,   786,   788,   789,
    1285,   545,   797,   833,  1005,  1121,  1110,  1274,  1107,  1115,
     867,   870,  1140,   580,   580,  1307,    16,  1068,   541,  1070,
     541,  1096,  1285,  1125,   891,   891,  1085,   833,  1119,   580,
     902,   902,   580,  1271,  1271,   939,   219,   176,   356,   447,
     116,   535,   884,  1285,   887,   859,   906,  1267,   906,  1016,
     326,   546,   470,   624,    52,    63,   163,   204,   228,   239,
     339,   416,   631,   669,   671,   672,   673,   675,   676,   677,
     678,   679,   680,   682,   690,   691,   694,   705,   708,   710,
     711,  1281,  1286,  1290,   999,   998,   560,  1389,  1404,   650,
    1285,  1279,   626,   627,   415,  1363,   765,   812,   766,   231,
     560,   897,   898,   899,   900,   903,   331,   580,   580,  1337,
     342,  1126,  1126,  1126,  1126,  1349,   535,   493,   790,   481,
     791,   580,   581,   222,   241,    70,    98,   208,   283,   300,
     322,   491,   809,   810,   811,  1215,  1009,   560,   581,  1111,
    1119,  1017,  1121,   869,  1145,   267,  1017,   579,  1017,   579,
     580,   581,   172,  1083,  1083,   580,   580,   897,   943,   579,
      50,   327,   413,   439,   888,   888,   580,   581,   580,   581,
     580,  1016,  1017,   140,   625,   692,   695,  1285,   175,   321,
     683,   670,  1286,  1286,  1285,   674,   594,   261,   406,   559,
     714,    30,   712,   588,   580,    51,    60,   251,   635,   845,
     172,   623,  1398,   580,  1360,  1176,   355,   900,  1119,   580,
    1189,  1190,  1276,  1279,  1013,  1127,   787,   789,   579,   500,
    1176,   121,   121,  1176,  1176,  1176,  1176,   579,   804,   811,
     143,    90,   420,  1274,   374,  1132,    68,  1255,   145,  1096,
    1096,  1285,   186,   229,   345,  1087,  1086,   881,   897,   793,
       5,   112,   330,   885,  1285,   877,  1267,   877,  1017,  1017,
     557,   697,   701,   175,  1285,   685,   686,  1017,   653,   668,
     669,   671,   673,   675,   677,   678,   679,   680,   682,   690,
     705,   708,   710,   653,   715,   713,   706,   709,  1363,    60,
     342,    60,   120,   636,   637,  1023,  1405,  1012,   628,   845,
     767,  1126,  1281,   581,  1175,  1250,   580,   791,   801,   802,
     803,  1020,   288,   579,   798,   799,   800,  1282,  1176,  1176,
     259,   331,   520,  1129,  1130,  1129,  1127,  1287,   482,   805,
     806,  1176,  1119,  1285,   138,   148,   343,   497,  1256,  1257,
     247,  1258,  1128,   580,   580,    46,    46,   579,   579,   580,
     693,   702,   135,   701,   704,   219,   139,  1017,   139,   668,
     585,   534,  1017,   654,   714,   712,   342,   342,   120,   668,
    1392,   128,  1399,  1363,  1190,  1181,   870,   580,   581,   288,
     803,  1282,  1282,   807,   580,   581,   829,  1133,    46,    46,
     138,    46,  1257,   469,   497,  1259,  1260,    16,  1093,  1095,
     557,   696,   698,  1017,   653,   139,   681,   204,   501,   261,
     585,   717,   128,   111,   652,   655,   707,  1286,   707,   134,
     629,   635,  1251,   802,   580,   580,   808,  1287,   806,   579,
    1267,  1267,    46,  1267,    46,    46,  1260,   270,   580,   580,
     699,   698,   704,   703,    52,   684,  1285,   687,  1017,   716,
      83,   155,   660,   666,  1285,   139,   668,   585,   424,  1400,
    1255,   809,  1012,  1134,  1135,  1136,  1267,  1267,  1267,   145,
    1017,   139,   501,   581,   653,   139,   653,   189,   581,   656,
      77,    93,   585,  1393,   668,  1258,  1017,   580,   581,  1126,
     700,    52,   653,  1285,   688,   406,   139,   172,  1285,   845,
     172,   172,   668,   205,  1261,  1013,  1136,   501,   135,   136,
     689,   559,   657,   112,   667,   458,   663,  1126,   658,   659,
     331,   579,  1262,   653,   653,   685,   457,   459,   661,   662,
     663,   665,  1023,  1285,  1017,   546,   664,   996,   247,   580,
     586,  1263,  1264,  1276,   439,  1265,   581,   668,   173,  1283,
    1287,   580,   581,  1189,   662,  1264
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1352 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1364 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                ! lip->stmt_prepare_mode &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1389 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:

/* Line 1455 of yacc.c  */
#line 1462 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:

/* Line 1455 of yacc.c  */
#line 1477 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 1487 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1494 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1504 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1511 "sql_yacc.yy"
    {}
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 1526 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 1538 "sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 1546 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 1557 "sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 1563 "sql_yacc.yy"
    {}
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 1573 "sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 1577 "sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 1581 "sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 1585 "sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 1589 "sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 1593 "sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 1598 "sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 1602 "sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 1606 "sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 1610 "sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 1614 "sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 1618 "sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 1627 "sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 1631 "sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 1647 "sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 1651 "sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 1662 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.db_type= ha_default_handlerton(thd);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 1681 "sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if (!lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 1696 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_CREATE_INDEX;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(7) - (7)].table),
                                                        NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_ADD_INDEX;
            lex->col_list.empty();
            lex->change=NullS;
          }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 1709 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key;
            if ((yyvsp[(2) - (12)].key_type) != Key::FULLTEXT && lex->key_create_info.parser_name.str)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            key= new Key((yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str, &lex->key_create_info, 0,
                         lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty();
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 1725 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 1730 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 1737 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 1743 "sql_yacc.yy"
    {}
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 1745 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 1749 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 1753 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 1757 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 1768 "sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 1782 "sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 1786 "sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 1790 "sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 1794 "sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 1798 "sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 1802 "sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 1806 "sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 1813 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 1833 "sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 1844 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 1851 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 1857 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 1859 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            (yyval.num)= 1;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 1864 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 1869 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 1877 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 1884 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 1892 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 1898 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 1904 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 1910 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 1918 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 1920 "sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 1927 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 1970 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2002 "sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2017 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2033 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2051 "sql_yacc.yy"
    {}
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2052 "sql_yacc.yy"
    {}
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2056 "sql_yacc.yy"
    {}
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2057 "sql_yacc.yy"
    {}
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2063 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2065 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2067 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2069 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2071 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2073 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2075 "sql_yacc.yy"
    {}
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2080 "sql_yacc.yy"
    { }
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2081 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 2082 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2087 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2091 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2098 "sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2106 "sql_yacc.yy"
    {}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2122 "sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2126 "sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2144 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2164 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2201 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2226 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2227 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2228 "sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2229 "sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2233 "sql_yacc.yy"
    {}
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2238 "sql_yacc.yy"
    {}
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2244 "sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 2248 "sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 2274 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2282 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            lex->sphead->restore_lex(YYTHD);

            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2339 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

	    if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2354 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
	                              ctx->current_var_count());
            if (i == NULL ||
	        sp->add_instr(i) ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)))
              MYSQL_YYABORT;
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2370 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
	          sp->add_instr(i) ||
	          sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2402 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
	    if (i == NULL ||
                sp->add_instr(i) ||
	        ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2427 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 2431 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            lex->sphead->restore_lex(YYTHD);
          }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2449 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2450 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2456 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2458 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2463 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2486 "sql_yacc.yy"
    { /* mysql errno */
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2494 "sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, 5);
            (yyval.spcondtype)->sqlstate[5]= '\0';
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2510 "sql_yacc.yy"
    {}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2511 "sql_yacc.yy"
    {}
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2516 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2520 "sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2529 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2536 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2543 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2553 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2568 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2585 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2586 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 2607 "sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 2609 "sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 2613 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 2622 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            sp->restore_lex(thd);
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 2669 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 2671 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            sp->restore_lex(YYTHD);
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 2696 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 2702 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 2711 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 2764 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 2807 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 2827 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 2844 "sql_yacc.yy"
    {}
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 2849 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 2875 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 2895 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 2917 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 2919 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
	        sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->restore_lex(YYTHD);
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 2934 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 2946 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 2966 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 2972 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 2983 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 2991 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 2999 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3017 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3021 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3031 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3040 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3044 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3052 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3061 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3076 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3094 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3111 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3112 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3117 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3133 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3149 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3156 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3164 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3173 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3201 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3211 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3213 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
	    /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->restore_lex(YYTHD);
          }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3228 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3239 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3241 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD);
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3259 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3261 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3266 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3268 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3270 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 3304 "sql_yacc.yy"
    {}
    break;

  case 310:

/* Line 1455 of yacc.c  */
#line 3306 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 311:

/* Line 1455 of yacc.c  */
#line 3316 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 312:

/* Line 1455 of yacc.c  */
#line 3322 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3345 "sql_yacc.yy"
    {}
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 3439 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 3447 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 3455 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 3463 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 3475 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 3487 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 3492 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 3497 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 3505 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 3513 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 3521 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 3529 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 3537 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 3545 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 3553 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 3566 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 3579 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 3598 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 3603 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 3615 "sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 3617 "sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 3667 "sql_yacc.yy"
    {}
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 3670 "sql_yacc.yy"
    {}
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 3672 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 3686 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 3704 "sql_yacc.yy"
    {}
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 3707 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 3708 "sql_yacc.yy"
    {}
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 3712 "sql_yacc.yy"
    {}
    break;

  case 395:

/* Line 1455 of yacc.c  */
#line 3714 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 396:

/* Line 1455 of yacc.c  */
#line 3715 "sql_yacc.yy"
    {}
    break;

  case 397:

/* Line 1455 of yacc.c  */
#line 3717 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 3718 "sql_yacc.yy"
    {}
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 3746 "sql_yacc.yy"
    {}
    break;

  case 401:

/* Line 1455 of yacc.c  */
#line 3752 "sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX *lex= Lex;
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-partition");
              MYSQL_YYABORT;
            }
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     "partitioning", "--with-partition");
            MYSQL_YYABORT;
#endif

          }
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 3784 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 3796 "sql_yacc.yy"
    {}
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 3805 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->list_of_part_fields= TRUE;
            lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 3811 "sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 3812 "sql_yacc.yy"
    {}
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 3814 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 3815 "sql_yacc.yy"
    {}
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 3817 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 3818 "sql_yacc.yy"
    {}
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 3822 "sql_yacc.yy"
    {}
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 3824 "sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 3828 "sql_yacc.yy"
    {}
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 3829 "sql_yacc.yy"
    {}
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 3833 "sql_yacc.yy"
    {}
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 3834 "sql_yacc.yy"
    {}
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 3839 "sql_yacc.yy"
    {
            if (Lex->part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 3850 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_part_fields= FALSE;
            lex->part_info->part_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->part_func_string= func_string;
            lex->part_info->part_func_len= expr_len;
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 3865 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_subpart_fields= FALSE;
            lex->part_info->subpart_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->subpart_func_string= func_string;        
            lex->part_info->subpart_func_len= expr_len;
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 3880 "sql_yacc.yy"
    {}
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 3882 "sql_yacc.yy"
    { 
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            lex->part_info->no_parts= no_parts;
            lex->part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 3897 "sql_yacc.yy"
    {}
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 3899 "sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 3900 "sql_yacc.yy"
    {}
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 3903 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->subpart_type= HASH_PARTITION;
            lex->part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 3908 "sql_yacc.yy"
    {}
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 3912 "sql_yacc.yy"
    {}
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 3913 "sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 3918 "sql_yacc.yy"
    {
            if (Lex->part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 3929 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_CONST_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 3944 "sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 3946 "sql_yacc.yy"
    {
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->no_subparts= no_parts;
            lex->part_info->use_default_no_subpartitions= FALSE;
          }
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 3961 "sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 3963 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->no_parts != 0)
            {
              if (part_info->no_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->no_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 3985 "sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 3986 "sql_yacc.yy"
    {}
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 3991 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 4011 "sql_yacc.yy"
    {}
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4016 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 4026 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (lex->part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (lex->part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4047 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4062 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= LIST_PARTITION;
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4080 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            lex->part_info->defined_max_value= TRUE;
            lex->part_info->curr_part_elem->max_value= TRUE;
            lex->part_info->curr_part_elem->range_value= LONGLONG_MAX;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4092 "sql_yacc.yy"
    {
            if (Lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            if (Lex->part_info->curr_part_elem->has_null_value)
            {
              my_parse_error(ER(ER_NULL_IN_VALUES_LESS_THAN));
              MYSQL_YYABORT;
            }
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4113 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (!((yyvsp[(2) - (3)].p_elem_value)->unsigned_flag))
              part_info->curr_part_elem->signed_flag= TRUE;
            part_info->curr_part_elem->range_value= (yyvsp[(2) - (3)].p_elem_value)->value;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4122 "sql_yacc.yy"
    {}
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4123 "sql_yacc.yy"
    {}
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4128 "sql_yacc.yy"
    {
            part_elem_value *value_ptr= (yyvsp[(1) - (1)].p_elem_value);
            partition_info *part_info= Lex->part_info;
            if (!value_ptr->unsigned_flag)
              part_info->curr_part_elem->signed_flag= TRUE;
            if (!value_ptr->null_value &&
               part_info->curr_part_elem->
                list_val_list.push_back(value_ptr))
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4145 "sql_yacc.yy"
    {
            Item *part_expr= (yyvsp[(1) - (1)].item);
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Name_resolution_context *context= &lex->current_select->context;
            TABLE_LIST *save_list= context->table_list;
            const char *save_where= thd->where;

            context->table_list= 0;
            thd->where= "partition function";

            part_elem_value *value_ptr= 
              (part_elem_value*)sql_alloc(sizeof(part_elem_value));
            if (!value_ptr)
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
            if (part_expr->walk(&Item::check_partition_func_processor, 0,
                                NULL))
            {
              my_error(ER_PARTITION_FUNCTION_IS_NOT_ALLOWED, MYF(0));
              MYSQL_YYABORT;
            }
            if (part_expr->fix_fields(YYTHD, (Item**)0) ||
                ((context->table_list= save_list), FALSE) ||
                (!part_expr->const_item()) ||
                (!lex->safe_to_cache_query))
            {
              my_error(ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR, MYF(0));
              MYSQL_YYABORT;
            }
            thd->where= save_where;
            value_ptr->value= part_expr->val_int();
            value_ptr->unsigned_flag= TRUE;
            if (!part_expr->unsigned_flag &&
                value_ptr->value < 0)
              value_ptr->unsigned_flag= FALSE;
            if ((value_ptr->null_value= part_expr->null_value))
            {
              if (Lex->part_info->curr_part_elem->has_null_value)
              {
                my_error(ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              Lex->part_info->curr_part_elem->has_null_value= TRUE;
            }
            else if (part_expr->result_type() != INT_RESULT)
            {
              my_parse_error(ER(ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.p_elem_value)= value_ptr; 
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4203 "sql_yacc.yy"
    {
            if (Lex->part_info->no_subparts != 0 &&
                !Lex->part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4216 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (part_info->no_subparts != 0)
            {
              if (part_info->no_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->no_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4242 "sql_yacc.yy"
    {}
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4243 "sql_yacc.yy"
    {}
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4248 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_no_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4281 "sql_yacc.yy"
    {}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4286 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4290 "sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4291 "sql_yacc.yy"
    {}
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4295 "sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4296 "sql_yacc.yy"
    {}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4301 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4303 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            lex->part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4309 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4311 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4313 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4315 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4317 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4319 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4328 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->lock_option= TL_READ_DEFAULT;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4344 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4348 "sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4358 "sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4359 "sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4363 "sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4364 "sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4368 "sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4369 "sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4373 "sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4374 "sql_yacc.yy"
    {}
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4378 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4379 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4383 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4384 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4388 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4392 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4393 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4414 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4419 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            WARN_DEPRECATED(yythd, "6.0", "TYPE=storage_engine",
                            "'ENGINE=storage_engine'");
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4426 "sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4431 "sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4436 "sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4441 "sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4446 "sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4451 "sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4456 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4471 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4477 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4482 "sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4487 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4492 "sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4497 "sql_yacc.yy"
    {
            /* Move the union list to the merge_list */
            LEX *lex=Lex;
            TABLE_LIST *table_list= lex->select_lex.get_table_list();
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->create_info.merge_list.elements--;
            lex->create_info.merge_list.first=
              (uchar*) (table_list->next_local);
            lex->select_lex.table_list.elements=1;
            lex->select_lex.table_list.next=
              (uchar**) &(table_list->next_local);
            table_list->next_local= 0;
            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4514 "sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4519 "sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4524 "sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 4529 "sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 4531 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 4533 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 4535 "sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 4541 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 4549 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 4567 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
              {
                my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                         (yyvsp[(4) - (4)].charset)->name, cinfo->default_table_charset->csname);
                MYSQL_YYABORT;
              }
              Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
              Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 4584 "sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 4607 "sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 4620 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 4621 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 4622 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 4623 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 4624 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 4625 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 4629 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 4630 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 4631 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 4635 "sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 4640 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 4641 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 4642 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 4643 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 4659 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 4666 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (7)].key_type) != Key::FULLTEXT && lex->key_create_info.parser_name.str)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Key *key= new Key((yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].simple_string), &lex->key_create_info, 0,
                              lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 4682 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(3) - (8)].simple_string) ? (yyvsp[(3) - (8)].simple_string) : (yyvsp[(1) - (8)].simple_string);
            Key *key= new Key((yyvsp[(2) - (8)].key_type), key_name, &lex->key_create_info, 0,
                              lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 4693 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(1) - (8)].simple_string) ? (yyvsp[(1) - (8)].simple_string) : (yyvsp[(4) - (8)].simple_string);
            const char *fkey_name = (yyvsp[(4) - (8)].simple_string) ? (yyvsp[(4) - (8)].simple_string) : key_name;
            Key *key= new Foreign_key(fkey_name, lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            key= new Key(Key::MULTIPLE, key_name,
                         &default_key_create_info, 1,
                         lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 4717 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 4721 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 4736 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 4737 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 4741 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(2) - (2)].simple_string); }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 4746 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 4755 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 4768 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 4769 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 4770 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 4772 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 4777 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 4781 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 4786 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 4791 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 4795 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 4800 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 4805 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 4811 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 4816 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 4822 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 4826 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 4831 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 4836 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_YEAR; }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 4838 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 4840 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 4842 "sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 4855 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 4857 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 4862 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 4867 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 4879 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 4884 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 4889 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 4894 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 4896 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 4898 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 4900 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 4902 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 4904 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 4906 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 4908 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 4910 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 4912 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 4914 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 4916 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 4918 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 4920 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 4928 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 4929 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 4931 "sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 4935 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 4936 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 4937 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 4938 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 4939 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 4943 "sql_yacc.yy"
    {}
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 4947 "sql_yacc.yy"
    {}
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 4948 "sql_yacc.yy"
    {}
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 4952 "sql_yacc.yy"
    {}
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 4953 "sql_yacc.yy"
    {}
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 4957 "sql_yacc.yy"
    {}
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 4958 "sql_yacc.yy"
    {}
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 4959 "sql_yacc.yy"
    {}
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 4960 "sql_yacc.yy"
    {}
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 4961 "sql_yacc.yy"
    {}
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 4965 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 4966 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 4967 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 4968 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 4969 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 4974 "sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 4979 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 4981 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 4986 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 4988 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 4990 "sql_yacc.yy"
    {}
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 4995 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5003 "sql_yacc.yy"
    {}
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5004 "sql_yacc.yy"
    {}
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5008 "sql_yacc.yy"
    {}
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5009 "sql_yacc.yy"
    {}
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5013 "sql_yacc.yy"
    {}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5014 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5015 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5019 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5020 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5021 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5022 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5025 "sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5026 "sql_yacc.yy"
    { }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5029 "sql_yacc.yy"
    {}
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5030 "sql_yacc.yy"
    {}
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5034 "sql_yacc.yy"
    {}
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5035 "sql_yacc.yy"
    {}
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5039 "sql_yacc.yy"
    {}
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5044 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5045 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5046 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5048 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5054 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5056 "sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5062 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5068 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5074 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5079 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5081 "sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5097 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5103 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5107 "sql_yacc.yy"
    {}
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5108 "sql_yacc.yy"
    {}
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5113 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5120 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5124 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5125 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5129 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5130 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5135 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5143 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5147 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5148 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5153 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5163 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5164 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5168 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5169 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5173 "sql_yacc.yy"
    {}
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5174 "sql_yacc.yy"
    {}
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5178 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5179 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5180 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5182 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5190 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5191 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5195 "sql_yacc.yy"
    { }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5196 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5200 "sql_yacc.yy"
    { Lex->charset= NULL; }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5201 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5203 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5211 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (2)].charset); }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5221 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->fk_delete_opt= lex->fk_update_opt= lex->fk_match_option= 0;
            lex->ref_list.empty();
          }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5227 "sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (4)].table);
          }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5233 "sql_yacc.yy"
    {}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5234 "sql_yacc.yy"
    {}
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5239 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5246 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5255 "sql_yacc.yy"
    {}
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5256 "sql_yacc.yy"
    {}
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5260 "sql_yacc.yy"
    {}
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5261 "sql_yacc.yy"
    {}
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5265 "sql_yacc.yy"
    { Lex->fk_delete_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5266 "sql_yacc.yy"
    { Lex->fk_update_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5267 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5268 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5269 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5273 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5274 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5275 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5276 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5277 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5281 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5282 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5284 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 5296 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 5297 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 5301 "sql_yacc.yy"
    {}
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 5302 "sql_yacc.yy"
    {}
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 5306 "sql_yacc.yy"
    {}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 5311 "sql_yacc.yy"
    {}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 5312 "sql_yacc.yy"
    {}
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 5313 "sql_yacc.yy"
    {}
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 5317 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 5318 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 5319 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 5321 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 5333 "sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 5350 "sql_yacc.yy"
    {}
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 5360 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 5361 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 5367 "sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 5369 "sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 5381 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 5382 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 5383 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 5387 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 5388 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 5393 "sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 5399 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str).str,(uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 5412 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; /* Default length */ }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 5413 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 5417 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 5418 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 5422 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 5423 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 5431 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db=
              ((TABLE_LIST*) lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 5455 "sql_yacc.yy"
    {}
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 5457 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 5462 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 5471 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 5482 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 5493 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 5500 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 5511 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 5518 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 5529 "sql_yacc.yy"
    {}
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 5536 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 5548 "sql_yacc.yy"
    {}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 5550 "sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 5570 "sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 5583 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 5588 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 5593 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 5598 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 5603 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 5612 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 5613 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 5614 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 5615 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 5619 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 5621 "sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 5632 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 5633 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 5637 "sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 5638 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 5643 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 5644 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 5661 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 5666 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 5673 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 5683 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 5691 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_CHECK;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->check_opt.init();
          }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 5700 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 5709 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.no_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 5720 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 5727 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 5735 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 5747 "sql_yacc.yy"
    {}
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 5753 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 5758 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 5766 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 5781 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 5785 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 5789 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 5796 "sql_yacc.yy"
    {}
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 5797 "sql_yacc.yy"
    {}
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 5802 "sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 5822 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 5830 "sql_yacc.yy"
    { }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 5832 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 5836 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 5840 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 5847 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 5856 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 5869 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 5878 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 5882 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 5891 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 5900 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 5906 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 5912 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 5921 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 5930 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 5949 "sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 5970 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
          }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 5975 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_FORCE;
          }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 5979 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 5986 "sql_yacc.yy"
    {}
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 5987 "sql_yacc.yy"
    {}
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 5991 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 5992 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 5996 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 5997 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 5998 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6002 "sql_yacc.yy"
    {}
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6003 "sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6004 "sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6008 "sql_yacc.yy"
    {}
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6009 "sql_yacc.yy"
    {}
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6010 "sql_yacc.yy"
    {}
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6011 "sql_yacc.yy"
    {}
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6020 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6029 "sql_yacc.yy"
    {}
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6031 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6038 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6046 "sql_yacc.yy"
    {}
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6048 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6057 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6065 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6067 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6073 "sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6075 "sql_yacc.yy"
    {}
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6084 "sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6085 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6086 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6090 "sql_yacc.yy"
    {}
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6092 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6113 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RESTORE_TABLE;
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6117 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6124 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BACKUP_TABLE;
          }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6128 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6135 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
          }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6140 "sql_yacc.yy"
    {}
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6144 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6145 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6146 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6151 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6159 "sql_yacc.yy"
    {}
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6163 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6164 "sql_yacc.yy"
    {}
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6168 "sql_yacc.yy"
    {}
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 6169 "sql_yacc.yy"
    {}
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6173 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 6174 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 6175 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 6180 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6188 "sql_yacc.yy"
    {}
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6193 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6201 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 6214 "sql_yacc.yy"
    {}
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6218 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6219 "sql_yacc.yy"
    {}
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6223 "sql_yacc.yy"
    {}
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6224 "sql_yacc.yy"
    {}
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6228 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6229 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6230 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6231 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6232 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6233 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6238 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6246 "sql_yacc.yy"
    {}
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6250 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6251 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6252 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6257 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6261 "sql_yacc.yy"
    {}
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6263 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6270 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6275 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6288 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6301 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6315 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ, 
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 6323 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 6324 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 6329 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 6334 "sql_yacc.yy"
    {}
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 6344 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 6352 "sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        global_system_variables.old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 6363 "sql_yacc.yy"
    { }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 6369 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 6370 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 6380 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 6394 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (sel->set_braces(1))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                !sel->master_unit()->first_select()->braces &&
                sel->master_unit()->first_select()->linkage ==
                UNION_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                sel->master_unit()->fake_select_lex)
            {
 	       my_error(ER_WRONG_USAGE, MYF(0),
                        "CUBE/ROLLUP", "ORDER BY");
               MYSQL_YYABORT;
            }
            /* select in braces, can't contain global parameters */
            if (sel->master_unit()->fake_select_lex)
              sel->master_unit()->global_parameters=
                 sel->master_unit()->fake_select_lex;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 6428 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 6447 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 6455 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 6462 "sql_yacc.yy"
    {}
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 6472 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table= 
                (TABLE_LIST *) Select->table_list.first;
          }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 6487 "sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 6502 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 6504 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Lex->lock_option=  TL_READ_HIGH_PRIORITY;
            Lex->current_select->lock_option= TL_READ_HIGH_PRIORITY;
          }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 6510 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 6511 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 6512 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 6514 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 6520 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 6526 "sql_yacc.yy"
    {
            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 6532 "sql_yacc.yy"
    {
            /*
             Honor this flag only if SQL_NO_CACHE wasn't specified AND
             we are parsing the outermost SELECT in the query.
            */
            if (Lex->select_lex.sql_cache != SELECT_LEX::SQL_NO_CACHE &&
                Lex->current_select == &Lex->select_lex)
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 6545 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 6551 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->current_select->lock_option= TL_WRITE;
            lex->safe_to_cache_query=0;
            lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 6559 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->current_select->lock_option= TL_READ_WITH_SHARED_LOCKS;
            lex->safe_to_cache_query=0;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 6572 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 6587 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 6612 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 6618 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 6624 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); /* table.* */ }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 6625 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 6629 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 6630 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 6631 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 6632 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 6633 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 6637 "sql_yacc.yy"
    {}
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 6638 "sql_yacc.yy"
    {}
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 6644 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 6695 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 6702 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 6745 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 6751 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 6757 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 6763 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 6769 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 6775 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 6781 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 6791 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 6797 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 6803 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 6809 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 6815 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 6825 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 6831 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 6841 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 6847 "sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 6855 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 6861 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 6871 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 6877 "sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 6886 "sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 6896 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 6902 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 6912 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 6918 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 6931 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 6937 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 6943 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 6949 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 6955 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 6961 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 6967 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 6973 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 6979 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 6985 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 6991 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 6997 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7003 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7009 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7038 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7039 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7040 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7041 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7042 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7043 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7047 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7048 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7058 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7074 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7080 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7084 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7090 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7096 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7102 "sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7108 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 7110 "sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7117 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7124 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7130 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 7132 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7141 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 7148 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 7156 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 7162 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7169 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7175 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7189 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7197 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7212 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7218 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7224 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7232 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7238 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7244 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7250 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7256 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7271 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7283 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7289 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7295 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7301 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7307 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7313 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7319 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7325 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7331 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7337 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7343 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7349 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7355 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7361 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7367 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7373 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7379 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7387 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7408 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 7415 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 7421 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 7428 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7435 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7443 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7450 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 7456 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7462 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 7468 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7475 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 7482 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7488 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 7495 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 7501 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 7507 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 7513 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 7519 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 7525 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 7535 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 7545 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 7551 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 7557 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 7564 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 7571 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 7586 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 7592 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 7598 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 7604 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 7610 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 7617 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 7623 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 7629 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 7635 "sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 7641 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 7653 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 7659 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 7665 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 7671 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 7677 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 7689 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 7695 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 7711 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 7717 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 7724 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 7731 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 7738 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 7745 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 7752 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 7756 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 7775 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 7794 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 7843 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 7875 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 7877 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 7881 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 7882 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 7886 "sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 7887 "sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 7891 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 7892 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 7897 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 7904 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 7912 "sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 7932 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 7938 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 7944 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 7950 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 7956 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 7962 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 7971 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 7977 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 7979 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 7981 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count_distinct(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 7987 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 7998 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8004 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8010 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8016 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8022 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8028 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8034 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8040 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8046 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8052 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 8056 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8070 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8078 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8085 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8095 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8103 "sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe();
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8118 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8119 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8124 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8129 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8134 "sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8138 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list=
              (SQL_LIST*) sql_memdup((char*) &select->order_list,
                                     sizeof(st_sql_list));
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8151 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8160 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8168 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8170 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8172 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8174 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8176 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8178 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8180 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8182 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8184 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8186 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8188 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8192 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8193 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8198 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8205 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8212 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8213 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8218 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8225 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8232 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8233 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8237 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8238 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8243 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8251 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8260 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8262 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8270 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8281 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8282 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8287 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8289 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8309 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8311 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8314 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8322 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8329 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8337 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8345 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8349 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8351 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8359 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8367 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8375 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8379 "sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8385 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8395 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8403 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8412 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8416 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8423 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8433 "sql_yacc.yy"
    {}
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8434 "sql_yacc.yy"
    {}
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8435 "sql_yacc.yy"
    {}
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8440 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8445 "sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                Lex->lock_option,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8454 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8476 "sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */

            if (!((yyvsp[(3) - (6)].table_list) || (yyvsp[(6) - (6)].lex_str_ptr)) && (yyvsp[(2) - (6)].select_lex)->embedding &&
                !(yyvsp[(2) - (6)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (6)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(6) - (6)].lex_str_ptr), 0,
                                               TL_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(4) - (6)].num) || (yyvsp[(6) - (6)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (6)].table_list);
            }
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8528 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8534 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8550 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8567 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8574 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8579 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8604 "sql_yacc.yy"
    {}
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8605 "sql_yacc.yy"
    {}
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8610 "sql_yacc.yy"
    {
            (yyval.num)= global_system_variables.old_mode ? 
                  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8614 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8615 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8616 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8620 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8621 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 8626 "sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 8631 "sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 8644 "sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 8648 "sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 8653 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 8654 "sql_yacc.yy"
    {}
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 8659 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 8661 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 8671 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 8682 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 8694 "sql_yacc.yy"
    {}
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 8695 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 8696 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 8697 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 8698 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 8699 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 8700 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 8701 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 8702 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 8703 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 8704 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 8705 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 8709 "sql_yacc.yy"
    {}
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 8710 "sql_yacc.yy"
    { 
                                  (yyval.interval_time_st)=INTERVAL_MICROSECOND; 
                                  /*
                                    FRAC_SECOND was mistakenly implemented with
                                    a wrong resolution. According to the ODBC
                                    standard it should be nanoseconds, not
                                    microseconds. Changing it to nanoseconds
                                    in MySQL would mean making TIMESTAMPDIFF
                                    and TIMESTAMPADD to return DECIMAL, since
                                    the return value would be too big for BIGINT
                                    Hence we just deprecate the incorrect
                                    implementation without changing its
                                    resolution.
                                  */
                                  WARN_DEPRECATED(yythd, "6.2", "FRAC_SECOND", "MICROSECOND");
                                }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 8729 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 8730 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 8731 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 8732 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 8733 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 8734 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 8735 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 8736 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 8737 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 8741 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 8742 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 8743 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 8744 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 8754 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 8756 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 8769 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 8771 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 8775 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 8787 "sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 8791 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 8802 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 8807 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 8829 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 8831 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 8835 "sql_yacc.yy"
    {}
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 8837 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT; /* To be deleted in 5.1 */
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 8850 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 8877 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 8896 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 8931 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 8933 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 8937 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 8938 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 8939 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 8944 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 8950 "sql_yacc.yy"
    {}
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 8954 "sql_yacc.yy"
    {}
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 8955 "sql_yacc.yy"
    {}
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 8959 "sql_yacc.yy"
    {}
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 8964 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 8971 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 8978 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 8988 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 8992 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 8998 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9004 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9013 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9018 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9026 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9027 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9028 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9029 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9030 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9031 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9035 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9036 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9037 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9038 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9039 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9043 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9044 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9045 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9046 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9047 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9051 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9052 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9053 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9054 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9059 "sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9070 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select ||
                lex->select_lex.get_table_list()->derived)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= (uchar**) &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9101 "sql_yacc.yy"
    {}
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9102 "sql_yacc.yy"
    {}
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9112 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9123 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && 
                  (!(lex->result= new select_dumpvar(lex->nest_level))))
              MYSQL_YYABORT;
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9130 "sql_yacc.yy"
    {}
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9135 "sql_yacc.yy"
    {}
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9140 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9159 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9191 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9203 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange, lex->nest_level)))
              MYSQL_YYABORT;
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9211 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9214 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange, lex->nest_level)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9226 "sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9237 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 9243 "sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 9254 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (6)].num);
            lex->drop_if_exists= (yyvsp[(4) - (6)].num);
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 9260 "sql_yacc.yy"
    {}
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 9261 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 9275 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 9282 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 9305 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 9326 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 9338 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 9342 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (5)].num);
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 9348 "sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 9354 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 9361 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 9366 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 9371 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 9386 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 9399 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option ))
              MYSQL_YYABORT;
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 9408 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 9409 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 9413 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 9414 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 9422 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
            /* for subselects */
            lex->lock_option= TL_READ_DEFAULT;
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 9432 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 9437 "sql_yacc.yy"
    {}
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 9442 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 9449 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 9454 "sql_yacc.yy"
    {}
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 9459 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 9471 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 9472 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 9473 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 9477 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 9478 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 9482 "sql_yacc.yy"
    {}
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 9483 "sql_yacc.yy"
    {}
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 9488 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 9496 "sql_yacc.yy"
    {}
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 9497 "sql_yacc.yy"
    {}
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 9498 "sql_yacc.yy"
    {}
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 9500 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 9510 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 9511 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 9515 "sql_yacc.yy"
    {}
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 9516 "sql_yacc.yy"
    {}
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 9518 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 9519 "sql_yacc.yy"
    {}
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 9521 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 9522 "sql_yacc.yy"
    {}
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 9537 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 9546 "sql_yacc.yy"
    {}
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 9547 "sql_yacc.yy"
    {}
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 9551 "sql_yacc.yy"
    {}
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 9552 "sql_yacc.yy"
    {}
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 9557 "sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 9562 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 9570 "sql_yacc.yy"
    {}
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 9576 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 9581 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 9588 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 9590 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 9599 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 9607 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->lock_option= TL_UNLOCK; /* Will be set later */
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 9616 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 9634 "sql_yacc.yy"
    {}
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 9644 "sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 9657 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 9666 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 9667 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 9674 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            lex->lock_option= TL_WRITE_DEFAULT;
            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 9682 "sql_yacc.yy"
    {}
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 9687 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 9693 "sql_yacc.yy"
    {}
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 9695 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 9697 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 9702 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 9704 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 9711 "sql_yacc.yy"
    {}
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 9712 "sql_yacc.yy"
    {}
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 9717 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (3)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(3) - (3)].lex_str_ptr),
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 9729 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(5) - (5)].lex_str_ptr), 
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 9743 "sql_yacc.yy"
    {}
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 9744 "sql_yacc.yy"
    {}
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 9748 "sql_yacc.yy"
    {}
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 9749 "sql_yacc.yy"
    {}
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 9753 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 9754 "sql_yacc.yy"
    { Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 9755 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 9760 "sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 9784 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 9788 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 9792 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 9796 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 9800 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 9804 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 9808 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 9812 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 9816 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 9823 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 9827 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 9836 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 9845 "sql_yacc.yy"
    {}
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 9850 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 9857 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 9865 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 9873 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 9881 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 9889 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 9897 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            WARN_DEPRECATED(yythd, "6.0", "SHOW PLUGIN", "'SHOW PLUGINS'");
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 9905 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 9912 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 9914 "sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 9916 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 9931 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
            Lex->mi.log_file_name = (yyvsp[(8) - (16)].lex_str).str;
            Lex->mi.pos = (yyvsp[(12) - (16)].ulonglong_number);
            Lex->mi.server_id = (yyvsp[(16) - (16)].ulong_num);
          }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 9938 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 9942 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 9946 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 9951 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 9960 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_COLUMN_TYPES;
          }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 9965 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            WARN_DEPRECATED(yythd, "6.0", "SHOW TABLE TYPES", "'SHOW [STORAGE] ENGINES'");
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 9973 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 9980 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 9985 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 9990 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 9995 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 9997 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 9999 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10001 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10003 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10005 "sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10012 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10020 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_STATUS;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW INNODB STATUS", "'SHOW ENGINE INNODB STATUS'");
          }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10032 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_MUTEX;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW MUTEX STATUS", "'SHOW ENGINE INNODB MUTEX'");
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10044 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10046 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10054 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10061 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10068 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10078 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10085 "sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 10091 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10100 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10108 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10112 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10116 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10123 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10130 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10136 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10143 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10150 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10160 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10170 "sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10178 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 10180 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10182 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10196 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10197 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10201 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10202 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 10211 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 10212 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 10216 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 10217 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 10223 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 10230 "sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 10240 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 10251 "sql_yacc.yy"
    {}
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 10253 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 10255 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 10267 "sql_yacc.yy"
    {}
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 10268 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 10269 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 10273 "sql_yacc.yy"
    {}
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 10274 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 10276 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 10290 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 10297 "sql_yacc.yy"
    {}
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 10307 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES; }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 10308 "sql_yacc.yy"
    {}
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 10310 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 10312 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 10314 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 10316 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 10318 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 10320 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 10322 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 10324 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 10326 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 10328 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 10332 "sql_yacc.yy"
    {}
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 10333 "sql_yacc.yy"
    {}
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 10338 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 10343 "sql_yacc.yy"
    {}
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 10352 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 10353 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 10354 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 10359 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 10365 "sql_yacc.yy"
    {}
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 10374 "sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 10378 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 10390 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 10399 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 10400 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 10401 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 10408 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 10419 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD DATA");
              MYSQL_YYABORT;
            }
            lex->fname_start= lip->get_ptr();
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 10432 "sql_yacc.yy"
    {}
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 10434 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            WARN_DEPRECATED(yythd, "6.0", "LOAD TABLE FROM MASTER",
                            "MySQL Administrator (mysqldump, mysql)");
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD TABLE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(3) - (5)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 10451 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->lock_option= (yyvsp[(1) - (4)].lock_type);
            lex->local_file=  (yyvsp[(2) - (4)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(4) - (4)].lex_str).str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 10462 "sql_yacc.yy"
    {
            Lex->fname_end= YYLIP->get_ptr();
          }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 10466 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(10) - (10)].table), NULL, TL_OPTION_UPDATING,
                                           lex->lock_option))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 10476 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(12) - (12)].charset); }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 10479 "sql_yacc.yy"
    {}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 10481 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
            WARN_DEPRECATED(yythd, "6.0", "LOAD DATA FROM MASTER",
                            "mysqldump or future "
                            "BACKUP/RESTORE DATABASE facility");
          }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 10490 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 10491 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 10495 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 10497 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 10508 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 10512 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 10513 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 10514 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 10529 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 10534 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 10541 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 10546 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 10564 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 10569 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 10578 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 10585 "sql_yacc.yy"
    {}
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 10586 "sql_yacc.yy"
    {}
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 10587 "sql_yacc.yy"
    {}
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 10592 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 10594 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 10598 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 10600 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 10608 "sql_yacc.yy"
    {}
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 10609 "sql_yacc.yy"
    {}
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 10616 "sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 10640 "sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 10652 "sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 10663 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 10682 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 10690 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 10702 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 10717 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 10737 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 10738 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 10740 "sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 10747 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 10748 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 10750 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 10757 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 10763 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 10769 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 10775 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 10781 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 10810 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 10837 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 10838 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 10839 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 10844 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 10854 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 10864 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 10870 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 10879 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 10893 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 10894 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 10899 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 10908 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 10923 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 10928 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 10974 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 10979 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 10996 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11001 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list((uchar*) trg_fld,
                                                 (uchar**) &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11080 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11105 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11135 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11137 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11153 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11162 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11167 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11173 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11179 "sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11189 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11198 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11200 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, (yyvsp[(1) - (1)].lex_str).str + wlen);
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11229 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11245 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11261 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11277 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11279 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11289 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11291 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11301 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11302 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11303 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11308 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11322 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
          }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11335 "sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11349 "sql_yacc.yy"
    {}
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11350 "sql_yacc.yy"
    {}
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11351 "sql_yacc.yy"
    {}
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 11352 "sql_yacc.yy"
    {}
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 11353 "sql_yacc.yy"
    {}
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11354 "sql_yacc.yy"
    {}
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11355 "sql_yacc.yy"
    {}
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11356 "sql_yacc.yy"
    {}
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11357 "sql_yacc.yy"
    {}
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11358 "sql_yacc.yy"
    {}
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11359 "sql_yacc.yy"
    {}
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11360 "sql_yacc.yy"
    {}
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 11361 "sql_yacc.yy"
    {}
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11362 "sql_yacc.yy"
    {}
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11363 "sql_yacc.yy"
    {}
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11364 "sql_yacc.yy"
    {}
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11365 "sql_yacc.yy"
    {}
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11366 "sql_yacc.yy"
    {}
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11367 "sql_yacc.yy"
    {}
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11368 "sql_yacc.yy"
    {}
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11369 "sql_yacc.yy"
    {}
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11370 "sql_yacc.yy"
    {}
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11371 "sql_yacc.yy"
    {}
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11372 "sql_yacc.yy"
    {}
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 11373 "sql_yacc.yy"
    {}
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 11374 "sql_yacc.yy"
    {}
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 11375 "sql_yacc.yy"
    {}
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 11376 "sql_yacc.yy"
    {}
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11377 "sql_yacc.yy"
    {}
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11378 "sql_yacc.yy"
    {}
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11379 "sql_yacc.yy"
    {}
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11380 "sql_yacc.yy"
    {}
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11381 "sql_yacc.yy"
    {}
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 11382 "sql_yacc.yy"
    {}
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 11383 "sql_yacc.yy"
    {}
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 11384 "sql_yacc.yy"
    {}
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 11385 "sql_yacc.yy"
    {}
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 11386 "sql_yacc.yy"
    {}
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 11387 "sql_yacc.yy"
    {}
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 11388 "sql_yacc.yy"
    {}
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 11389 "sql_yacc.yy"
    {}
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 11390 "sql_yacc.yy"
    {}
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 11391 "sql_yacc.yy"
    {}
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 11392 "sql_yacc.yy"
    {}
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 11393 "sql_yacc.yy"
    {}
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 11394 "sql_yacc.yy"
    {}
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 11395 "sql_yacc.yy"
    {}
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 11396 "sql_yacc.yy"
    {}
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 11397 "sql_yacc.yy"
    {}
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 11398 "sql_yacc.yy"
    {}
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 11408 "sql_yacc.yy"
    {}
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 11409 "sql_yacc.yy"
    {}
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 11410 "sql_yacc.yy"
    {}
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 11411 "sql_yacc.yy"
    {}
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 11412 "sql_yacc.yy"
    {}
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 11413 "sql_yacc.yy"
    {}
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 11414 "sql_yacc.yy"
    {}
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 11415 "sql_yacc.yy"
    {}
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 11416 "sql_yacc.yy"
    {}
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 11417 "sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 11418 "sql_yacc.yy"
    {}
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 11419 "sql_yacc.yy"
    {}
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 11420 "sql_yacc.yy"
    {}
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 11421 "sql_yacc.yy"
    {}
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 11422 "sql_yacc.yy"
    {}
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 11423 "sql_yacc.yy"
    {}
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 11424 "sql_yacc.yy"
    {}
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 11425 "sql_yacc.yy"
    {}
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 11426 "sql_yacc.yy"
    {}
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 11427 "sql_yacc.yy"
    {}
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 11428 "sql_yacc.yy"
    {}
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 11429 "sql_yacc.yy"
    {}
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 11430 "sql_yacc.yy"
    {}
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 11431 "sql_yacc.yy"
    {}
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 11432 "sql_yacc.yy"
    {}
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 11433 "sql_yacc.yy"
    {}
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 11434 "sql_yacc.yy"
    {}
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 11435 "sql_yacc.yy"
    {}
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 11436 "sql_yacc.yy"
    {}
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 11437 "sql_yacc.yy"
    {}
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 11438 "sql_yacc.yy"
    {}
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 11439 "sql_yacc.yy"
    {}
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 11440 "sql_yacc.yy"
    {}
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 11441 "sql_yacc.yy"
    {}
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 11442 "sql_yacc.yy"
    {}
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 11443 "sql_yacc.yy"
    {}
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 11444 "sql_yacc.yy"
    {}
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 11445 "sql_yacc.yy"
    {}
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 11446 "sql_yacc.yy"
    {}
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 11447 "sql_yacc.yy"
    {}
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 11448 "sql_yacc.yy"
    {}
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 11449 "sql_yacc.yy"
    {}
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 11450 "sql_yacc.yy"
    {}
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 11451 "sql_yacc.yy"
    {}
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 11452 "sql_yacc.yy"
    {}
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 11453 "sql_yacc.yy"
    {}
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 11454 "sql_yacc.yy"
    {}
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 11455 "sql_yacc.yy"
    {}
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 11456 "sql_yacc.yy"
    {}
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 11457 "sql_yacc.yy"
    {}
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 11458 "sql_yacc.yy"
    {}
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 11459 "sql_yacc.yy"
    {}
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 11460 "sql_yacc.yy"
    {}
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 11461 "sql_yacc.yy"
    {}
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 11462 "sql_yacc.yy"
    {}
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 11463 "sql_yacc.yy"
    {}
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 11464 "sql_yacc.yy"
    {}
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 11465 "sql_yacc.yy"
    {}
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 11466 "sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 11467 "sql_yacc.yy"
    {}
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 11468 "sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 11469 "sql_yacc.yy"
    {}
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 11470 "sql_yacc.yy"
    {}
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 11471 "sql_yacc.yy"
    {}
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 11472 "sql_yacc.yy"
    {}
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 11473 "sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 11474 "sql_yacc.yy"
    {}
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 11475 "sql_yacc.yy"
    {}
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 11476 "sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 11477 "sql_yacc.yy"
    {}
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 11478 "sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 11479 "sql_yacc.yy"
    {}
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 11480 "sql_yacc.yy"
    {}
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 11481 "sql_yacc.yy"
    {}
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 11482 "sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 11483 "sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 11484 "sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 11485 "sql_yacc.yy"
    {}
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 11486 "sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 11487 "sql_yacc.yy"
    {}
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 11488 "sql_yacc.yy"
    {}
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 11489 "sql_yacc.yy"
    {}
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 11490 "sql_yacc.yy"
    {}
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 11491 "sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 11492 "sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 11493 "sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 11494 "sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 11495 "sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 11496 "sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 11497 "sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 11498 "sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 11499 "sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 11500 "sql_yacc.yy"
    {}
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 11501 "sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 11502 "sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 11503 "sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 11504 "sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 11505 "sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 11506 "sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 11507 "sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 11508 "sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 11509 "sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 11510 "sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 11511 "sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 11512 "sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 11513 "sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 11514 "sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 11515 "sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 11516 "sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 11517 "sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 11518 "sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 11519 "sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 11520 "sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 11521 "sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 11522 "sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 11523 "sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 11524 "sql_yacc.yy"
    {}
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 11525 "sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 11526 "sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 11527 "sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 11528 "sql_yacc.yy"
    {}
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 11529 "sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 11530 "sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 11531 "sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 11532 "sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 11533 "sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 11534 "sql_yacc.yy"
    {}
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 11535 "sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 11536 "sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 11537 "sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 11538 "sql_yacc.yy"
    {}
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 11539 "sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 11540 "sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 11541 "sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 11542 "sql_yacc.yy"
    {}
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 11543 "sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 11544 "sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 11545 "sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 11546 "sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 11547 "sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 11548 "sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 11549 "sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 11550 "sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 11551 "sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 11552 "sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 11553 "sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 11554 "sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 11555 "sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 11556 "sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 11557 "sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 11558 "sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 11559 "sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 11560 "sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 11561 "sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 11562 "sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 11563 "sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 11564 "sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 11565 "sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 11566 "sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 11567 "sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 11568 "sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 11569 "sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 11570 "sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 11571 "sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 11572 "sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 11573 "sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 11574 "sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 11575 "sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 11576 "sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 11577 "sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 11578 "sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 11579 "sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 11580 "sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 11581 "sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 11582 "sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 11583 "sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 11584 "sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 11585 "sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 11586 "sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 11587 "sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 11588 "sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 11589 "sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 11590 "sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 11591 "sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 11592 "sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 11593 "sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 11594 "sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 11595 "sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 11596 "sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 11597 "sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 11598 "sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 11599 "sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 11600 "sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 11601 "sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 11602 "sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 11603 "sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 11604 "sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 11605 "sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 11606 "sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 11607 "sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 11608 "sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 11609 "sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 11610 "sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 11611 "sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 11612 "sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 11613 "sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 11614 "sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 11615 "sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 11616 "sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 11617 "sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 11618 "sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 11619 "sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 11620 "sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 11621 "sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 11622 "sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 11623 "sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 11624 "sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 11625 "sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 11626 "sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 11627 "sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 11628 "sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 11629 "sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 11630 "sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 11631 "sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 11632 "sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 11633 "sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 11634 "sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 11635 "sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 11636 "sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 11637 "sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 11638 "sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 11639 "sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 11640 "sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 11641 "sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 11642 "sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 11643 "sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 11644 "sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 11645 "sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 11646 "sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 11647 "sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 11648 "sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 11649 "sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 11650 "sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 11651 "sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 11652 "sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 11653 "sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 11654 "sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 11655 "sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 11656 "sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 11657 "sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 11658 "sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 11659 "sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 11660 "sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 11661 "sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 11662 "sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 11663 "sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 11664 "sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 11665 "sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 11666 "sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 11667 "sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 11674 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 11684 "sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 11688 "sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 11689 "sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 11698 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 11729 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              lex->sphead->restore_lex(thd);
            }
          }
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 11779 "sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 11780 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 11781 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 11782 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 11786 "sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 11787 "sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 11791 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 11792 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 11793 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 11794 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 11798 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 11799 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 11800 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 11801 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 11811 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              Item *it;
              Item_trigger_field *trg_fld;
              sp_instr_set_trigger_field *sp_fld;
              LINT_INIT(sp_fld);
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if ((yyvsp[(4) - (4)].item))
                it= (yyvsp[(4) - (4)].item);
              else
              {
                /* QQ: Shouldn't this be field's default value ? */
                it= new Item_null();
              }

              DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));

              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            Item_trigger_field::NEW_ROW,
                                            (yyvsp[(2) - (4)].variable).base_name.str,
                                            UPDATE_ACL, FALSE);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              sp_fld= new sp_instr_set_trigger_field(lex->sphead->
                                                     instructions(),
                                                     lex->spcont,
                                                     trg_fld,
                                                     it, lex);
              if (sp_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field
                objects in trigger.
              */
              lex->trg_table_fields.link_in_list((uchar *)trg_fld,
                                                 (uchar **) &trg_fld->
                                                   next_trg_field);

              if (lex->sphead->add_instr(sp_fld))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            { /* System variable */
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);
              set_var *var= new set_var(lex->option_type, (yyvsp[(2) - (4)].variable).var,
                                        &(yyvsp[(2) - (4)].variable).base_name, (yyvsp[(4) - (4)].item));
              if (var == NULL)
                MYSQL_YYABORT;
              lex->var_list.push_back(var);
            }
            else
            {
              /* An SP local variable */
              sp_pcontext *ctx= lex->spcont;
              sp_variable_t *spv;
              sp_instr_set *sp_set;
              Item *it;
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              spv= ctx->find_variable(&(yyvsp[(2) - (4)].variable).base_name);

              if ((yyvsp[(4) - (4)].item))
                it= (yyvsp[(4) - (4)].item);
              else if (spv->dflt)
                it= spv->dflt;
              else
              {
                it= new (thd->mem_root) Item_null();
                if (it == NULL)
                  MYSQL_YYABORT;
              }
              sp_set= new sp_instr_set(lex->sphead->instructions(), ctx,
                                       spv->offset, it, spv->type, lex, TRUE);
              if (sp_set == NULL ||
                  lex->sphead->add_instr(sp_set))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 11909 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 11928 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 11939 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            set_var *var= new set_var((yyvsp[(3) - (6)].var_type), (yyvsp[(4) - (6)].variable).var, &(yyvsp[(4) - (6)].variable).base_name, (yyvsp[(6) - (6)].item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 11947 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 11961 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 11976 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 11995 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->priv_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 12022 "sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 12035 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            /* We have to lookup here since local vars can shadow sysvars */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* Not an SP local variable */
              sys_var *tmp=find_sys_var(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= null_lex_str;
              if (spc && tmp == &sys_autocommit)
              {
                /*
                  We don't allow setting AUTOCOMMIT from a stored function
                  or trigger.
                */
                lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
              }
            }
            else
            {
              /* An SP local variable */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 12067 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 12110 "sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 12123 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 12124 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 12125 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 12126 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 12130 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 12132 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 12141 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 12152 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 12153 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 12155 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 12161 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 12167 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 12178 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 12189 "sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 12204 "sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type))
              MYSQL_YYABORT;
            /* If table is to be write locked, protect from a impending GRL. */
            if (lock_type >= TL_WRITE_ALLOW_WRITE)
              Lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 12215 "sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 12216 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 12217 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 12218 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 12223 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 12234 "sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 12243 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 12255 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 12267 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 12286 "sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
          }
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 12292 "sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 12293 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 12297 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 12298 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 12302 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 12303 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 12304 "sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 12305 "sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 12307 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 12315 "sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 12319 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 12320 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 12321 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 12322 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 12323 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 12330 "sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 12335 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 12341 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 12352 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 12363 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 12370 "sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 12376 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 12383 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 12395 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 12413 "sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 12415 "sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 12433 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 12434 "sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 12436 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 12437 "sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 12439 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 12440 "sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 12442 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 12443 "sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 12444 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 12445 "sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 12446 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 12447 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 12448 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 12449 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 12450 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 12451 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 12452 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 12453 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 12454 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 12455 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 12456 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 12457 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 12458 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 12459 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 12460 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 12461 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 12462 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 12463 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 12464 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 12465 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 12466 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 12467 "sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 12468 "sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 12472 "sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 12473 "sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 12483 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 12493 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 12503 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 12516 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 12531 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 12544 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 12557 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 12569 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 12574 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 12582 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 12587 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 12595 "sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 12622 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); }
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 12624 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 12629 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 12643 "sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 12672 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 12676 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 12680 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 12684 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 12690 "sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 12695 "sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 12696 "sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 12700 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 12702 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 12708 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 12714 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 12720 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 12729 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 12734 "sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 12738 "sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 12739 "sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 12744 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 1); }
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 12745 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 12746 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 12751 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 2); }
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 12752 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 12753 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 12757 "sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 12758 "sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 12763 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 12773 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 12781 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 12790 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 12799 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 12812 "sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 12818 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result && 
               (lex->result->get_nest_level() == -1 ||
                lex->result->get_nest_level() == lex->nest_level))
              {
                /* 
                   Only the last SELECT can have INTO unless the INTO and UNION
                   are at different nest levels. In version 5.1 and above, INTO
                   will onle be allowed at top level.
                */
                my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
                MYSQL_YYABORT;
              }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* This counter shouldn't be incremented for UNION parts */
            Lex->nest_level--;
            if (mysql_new_select(lex, 0))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage=UNION_TYPE;
            if ((yyvsp[(2) - (2)].num)) /* UNION DISTINCT - remember position */
              lex->current_select->master_unit()->union_distinct=
                lex->current_select;
          }
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 12848 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 12858 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 12859 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 12860 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 12864 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 12880 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 12893 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 12894 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 12895 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 12899 "sql_yacc.yy"
    {
          (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
        }
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 12906 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (5)].select_lex);
        }
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 12911 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (6)].select_lex);
        }
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 12916 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 12937 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            /*
              Set the required lock level for the tables associated with the
              current sub-select. This will overwrite previous lock options set
              using st_select_lex::add_table_to_list in any of the following
              rules: single_multi, table_wild_one, load_data, table_alias_ref,
              table_factor.
              The default lock level is TL_READ_DEFAULT but it can be modified
              with query options specific for a certain (sub-)SELECT.
            */
            lex->current_select->
              set_lock_for_tables(lex->current_select->lock_option);

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 12973 "sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 12975 "sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 12977 "sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13010 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13024 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13037 "sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13039 "sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13041 "sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13046 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13051 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13053 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13055 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13060 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 13062 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13064 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13069 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13082 "sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13088 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13093 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13100 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13109 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13131 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13133 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13135 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13137 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13154 "sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13160 "sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 13165 "sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 13195 "sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13228 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13246 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 13269 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 13301 "sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 13305 "sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13313 "sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 13336 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 13345 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13401 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13425 "sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13434 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13442 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13450 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 13464 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 13468 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 13472 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13476 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13480 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13484 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13491 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 13498 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 13505 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13514 "sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13515 "sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 13519 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13520 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 13521 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 13525 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 13526 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 13531 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 13533 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 13538 "sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 13539 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 13544 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 13554 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1455 of yacc.c  */
#line 35951 "sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



