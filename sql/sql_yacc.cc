/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse MYSQLparse
#define yylex   MYSQLlex
#define yyerror MYSQLerror
#define yylval  MYSQLlval
#define yychar  MYSQLchar
#define yydebug MYSQLdebug
#define yynerrs MYSQLnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CHAIN_SYM = 309,
     CHANGE = 310,
     CHANGED = 311,
     CHARSET = 312,
     CHAR_SYM = 313,
     CHECKSUM_SYM = 314,
     CHECK_SYM = 315,
     CIPHER_SYM = 316,
     CLIENT_SYM = 317,
     CLOSE_SYM = 318,
     COALESCE = 319,
     CODE_SYM = 320,
     COLLATE_SYM = 321,
     COLLATION_SYM = 322,
     COLUMNS = 323,
     COLUMN_SYM = 324,
     COMMENT_SYM = 325,
     COMMITTED_SYM = 326,
     COMMIT_SYM = 327,
     COMPACT_SYM = 328,
     COMPLETION_SYM = 329,
     COMPRESSED_SYM = 330,
     CONCURRENT = 331,
     CONDITION_SYM = 332,
     CONNECTION_SYM = 333,
     CONSISTENT_SYM = 334,
     CONSTRAINT = 335,
     CONTAINS_SYM = 336,
     CONTEXT_SYM = 337,
     CONTINUE_SYM = 338,
     CONTRIBUTORS_SYM = 339,
     CONVERT_SYM = 340,
     COUNT_SYM = 341,
     CPU_SYM = 342,
     CREATE = 343,
     CROSS = 344,
     CUBE_SYM = 345,
     CURDATE = 346,
     CURRENT_SYM = 347,
     CURRENT_USER = 348,
     CURSOR_SYM = 349,
     CURTIME = 350,
     DATABASE = 351,
     DATABASES = 352,
     DATAFILE_SYM = 353,
     DATA_SYM = 354,
     DATETIME = 355,
     DATE_ADD_INTERVAL = 356,
     DATE_SUB_INTERVAL = 357,
     DATE_SYM = 358,
     DAY_HOUR_SYM = 359,
     DAY_MICROSECOND_SYM = 360,
     DAY_MINUTE_SYM = 361,
     DAY_SECOND_SYM = 362,
     DAY_SYM = 363,
     DEALLOCATE_SYM = 364,
     DECIMAL_NUM = 365,
     DECIMAL_SYM = 366,
     DECLARE_SYM = 367,
     DEFAULT = 368,
     DEFINER_SYM = 369,
     DELAYED_SYM = 370,
     DELAY_KEY_WRITE_SYM = 371,
     DELETE_SYM = 372,
     DESC = 373,
     DESCRIBE = 374,
     DES_KEY_FILE = 375,
     DETERMINISTIC_SYM = 376,
     DIRECTORY_SYM = 377,
     DISABLE_SYM = 378,
     DISCARD = 379,
     DISK_SYM = 380,
     DISTINCT = 381,
     DIV_SYM = 382,
     DOUBLE_SYM = 383,
     DO_SYM = 384,
     DROP = 385,
     DUAL_SYM = 386,
     DUMPFILE = 387,
     DUPLICATE_SYM = 388,
     DYNAMIC_SYM = 389,
     EACH_SYM = 390,
     ELSE = 391,
     ELSEIF_SYM = 392,
     ENABLE_SYM = 393,
     ENCLOSED = 394,
     END = 395,
     ENDS_SYM = 396,
     END_OF_INPUT = 397,
     ENGINES_SYM = 398,
     ENGINE_SYM = 399,
     ENUM = 400,
     EQ = 401,
     EQUAL_SYM = 402,
     ERRORS = 403,
     ESCAPED = 404,
     ESCAPE_SYM = 405,
     EVENTS_SYM = 406,
     EVENT_SYM = 407,
     EVERY_SYM = 408,
     EXECUTE_SYM = 409,
     EXISTS = 410,
     EXIT_SYM = 411,
     EXPANSION_SYM = 412,
     EXTENDED_SYM = 413,
     EXTENT_SIZE_SYM = 414,
     EXTRACT_SYM = 415,
     FALSE_SYM = 416,
     FAST_SYM = 417,
     FAULTS_SYM = 418,
     FETCH_SYM = 419,
     FILE_SYM = 420,
     FIRST_SYM = 421,
     FIXED_SYM = 422,
     FLOAT_NUM = 423,
     FLOAT_SYM = 424,
     FLUSH_SYM = 425,
     FOLLOWING_SYM = 426,
     FORCE_SYM = 427,
     FOREIGN = 428,
     FOR_SYM = 429,
     FOUND_SYM = 430,
     FRAC_SECOND_SYM = 431,
     FROM = 432,
     FULL = 433,
     FULLTEXT_SYM = 434,
     FUNCTION_SYM = 435,
     GE = 436,
     GEOMETRYCOLLECTION = 437,
     GEOMETRY_SYM = 438,
     GET_FORMAT = 439,
     GLOBAL_SYM = 440,
     GRANT = 441,
     GRANTS = 442,
     GROUP_SYM = 443,
     GROUP_CONCAT_SYM = 444,
     GT_SYM = 445,
     HANDLER_SYM = 446,
     HASH_SYM = 447,
     HAVING = 448,
     HELP_SYM = 449,
     HEX_NUM = 450,
     HIGH_PRIORITY = 451,
     HOST_SYM = 452,
     HOSTS_SYM = 453,
     HOUR_MICROSECOND_SYM = 454,
     HOUR_MINUTE_SYM = 455,
     HOUR_SECOND_SYM = 456,
     HOUR_SYM = 457,
     IDENT = 458,
     IDENTIFIED_SYM = 459,
     IDENT_QUOTED = 460,
     IF = 461,
     IGNORE_SYM = 462,
     IMPORT = 463,
     INDEXES = 464,
     INDEX_SYM = 465,
     INFILE = 466,
     INITIAL_SIZE_SYM = 467,
     INNER_SYM = 468,
     INNOBASE_SYM = 469,
     INOUT_SYM = 470,
     INSENSITIVE_SYM = 471,
     INSERT = 472,
     INSERT_METHOD = 473,
     INSTALL_SYM = 474,
     INTERVAL_SYM = 475,
     INTO = 476,
     INT_SYM = 477,
     INVOKER_SYM = 478,
     IN_SYM = 479,
     IO_SYM = 480,
     IPC_SYM = 481,
     IS = 482,
     ISOLATION = 483,
     ISSUER_SYM = 484,
     ITERATE_SYM = 485,
     JOIN_SYM = 486,
     KEYS = 487,
     KEY_BLOCK_SIZE = 488,
     KEY_SYM = 489,
     KILL_SYM = 490,
     LANGUAGE_SYM = 491,
     LAST_SYM = 492,
     LE = 493,
     LEADING = 494,
     LEAVES = 495,
     LEAVE_SYM = 496,
     LEFT = 497,
     LESS_SYM = 498,
     LEVEL_SYM = 499,
     LEX_HOSTNAME = 500,
     LIKE = 501,
     LIMIT = 502,
     LINEAR_SYM = 503,
     LINES = 504,
     LINESTRING = 505,
     LIST_SYM = 506,
     LOAD = 507,
     LOCAL_SYM = 508,
     LOCATOR_SYM = 509,
     LOCKS_SYM = 510,
     LOCK_SYM = 511,
     LOGFILE_SYM = 512,
     LOGS_SYM = 513,
     LONGBLOB = 514,
     LONGTEXT = 515,
     LONG_NUM = 516,
     LONG_SYM = 517,
     LOOP_SYM = 518,
     LOW_PRIORITY = 519,
     LT = 520,
     MASTER_CONNECT_RETRY_SYM = 521,
     MASTER_HOST_SYM = 522,
     MASTER_LOG_FILE_SYM = 523,
     MASTER_LOG_POS_SYM = 524,
     MASTER_PASSWORD_SYM = 525,
     MASTER_PORT_SYM = 526,
     MASTER_SERVER_ID_SYM = 527,
     MASTER_SSL_CAPATH_SYM = 528,
     MASTER_SSL_CA_SYM = 529,
     MASTER_SSL_CERT_SYM = 530,
     MASTER_SSL_CIPHER_SYM = 531,
     MASTER_SSL_KEY_SYM = 532,
     MASTER_SSL_SYM = 533,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 534,
     MASTER_SYM = 535,
     MASTER_USER_SYM = 536,
     MATCH = 537,
     MAX_CONNECTIONS_PER_HOUR = 538,
     MAX_QUERIES_PER_HOUR = 539,
     MAX_ROWS = 540,
     MAX_SIZE_SYM = 541,
     MAX_SYM = 542,
     MAX_UPDATES_PER_HOUR = 543,
     MAX_USER_CONNECTIONS_SYM = 544,
     MAX_VALUE_SYM = 545,
     MEDIUMBLOB = 546,
     MEDIUMINT = 547,
     MEDIUMTEXT = 548,
     MEDIUM_SYM = 549,
     MEMORY_SYM = 550,
     MERGE_SYM = 551,
     MICROSECOND_SYM = 552,
     MIGRATE_SYM = 553,
     MINUTE_MICROSECOND_SYM = 554,
     MINUTE_SECOND_SYM = 555,
     MINUTE_SYM = 556,
     MIN_ROWS = 557,
     MIN_SYM = 558,
     MODE_SYM = 559,
     MODIFIES_SYM = 560,
     MODIFY_SYM = 561,
     MOD_SYM = 562,
     MONTH_SYM = 563,
     MULTILINESTRING = 564,
     MULTIPOINT = 565,
     MULTIPOLYGON = 566,
     MUTEX_SYM = 567,
     NAMES_SYM = 568,
     NAME_SYM = 569,
     NATIONAL_SYM = 570,
     NATURAL = 571,
     NCHAR_STRING = 572,
     NCHAR_SYM = 573,
     NDBCLUSTER_SYM = 574,
     NE = 575,
     NEG = 576,
     NEW_SYM = 577,
     NEXT_SYM = 578,
     NODEGROUP_SYM = 579,
     NONE_SYM = 580,
     NOT2_SYM = 581,
     NOT_SYM = 582,
     NOW_SYM = 583,
     NO_SYM = 584,
     NO_WAIT_SYM = 585,
     NO_WRITE_TO_BINLOG = 586,
     NTH_VALUE_SYM = 587,
     NULL_SYM = 588,
     NULLS_SYM = 589,
     NUM = 590,
     NUMERIC_SYM = 591,
     NVARCHAR_SYM = 592,
     OFFSET_SYM = 593,
     OLD_PASSWORD = 594,
     ON = 595,
     ONE_SHOT_SYM = 596,
     ONE_SYM = 597,
     OPEN_SYM = 598,
     OPTIMIZE = 599,
     OPTIONS_SYM = 600,
     OPTION = 601,
     OPTIONALLY = 602,
     OR2_SYM = 603,
     ORDER_SYM = 604,
     OR_OR_SYM = 605,
     OR_SYM = 606,
     OUTER = 607,
     OUTFILE = 608,
     OUT_SYM = 609,
     OVER_SYM = 610,
     OWNER_SYM = 611,
     PACK_KEYS_SYM = 612,
     PAGE_SYM = 613,
     PARAM_MARKER = 614,
     PARSER_SYM = 615,
     PARTIAL = 616,
     PARTITIONING_SYM = 617,
     PARTITIONS_SYM = 618,
     PARTITION_SYM = 619,
     PASSWORD = 620,
     PERCENTILE_CONT_SYM = 621,
     PERCENTILE_DISC_SYM = 622,
     PHASE_SYM = 623,
     PLUGINS_SYM = 624,
     PLUGIN_SYM = 625,
     POINT_SYM = 626,
     POLYGON = 627,
     PORT_SYM = 628,
     POSITION_SYM = 629,
     PRECEDING_SYM = 630,
     PRECISION = 631,
     PREPARE_SYM = 632,
     PRESERVE_SYM = 633,
     PREV_SYM = 634,
     PRIMARY_SYM = 635,
     PRIVILEGES = 636,
     PROCEDURE = 637,
     PROCESS = 638,
     PROCESSLIST_SYM = 639,
     PROFILE_SYM = 640,
     PROFILES_SYM = 641,
     PURGE = 642,
     QUARTER_SYM = 643,
     QUERY_SYM = 644,
     QUICK = 645,
     RANGE_SYM = 646,
     READS_SYM = 647,
     READ_ONLY_SYM = 648,
     READ_SYM = 649,
     READ_WRITE_SYM = 650,
     REAL = 651,
     REBUILD_SYM = 652,
     RECOVER_SYM = 653,
     REDOFILE_SYM = 654,
     REDO_BUFFER_SIZE_SYM = 655,
     REDUNDANT_SYM = 656,
     REFERENCES = 657,
     REGEXP = 658,
     RELAY_LOG_FILE_SYM = 659,
     RELAY_LOG_POS_SYM = 660,
     RELAY_THREAD = 661,
     RELEASE_SYM = 662,
     RELOAD = 663,
     REMOVE_SYM = 664,
     RENAME = 665,
     REORGANIZE_SYM = 666,
     REPAIR = 667,
     REPEATABLE_SYM = 668,
     REPEAT_SYM = 669,
     REPLACE = 670,
     REPLICATION = 671,
     REQUIRE_SYM = 672,
     RESET_SYM = 673,
     RESOURCES = 674,
     RESPECT_SYM = 675,
     RESTORE_SYM = 676,
     RESTRICT = 677,
     RESUME_SYM = 678,
     RETURNS_SYM = 679,
     RETURN_SYM = 680,
     REVOKE = 681,
     RIGHT = 682,
     ROLLBACK_SYM = 683,
     ROLLUP_SYM = 684,
     ROUTINE_SYM = 685,
     ROWS_SYM = 686,
     ROW_FORMAT_SYM = 687,
     ROW_SYM = 688,
     RTREE_SYM = 689,
     SAVEPOINT_SYM = 690,
     SCHEDULE_SYM = 691,
     SECOND_MICROSECOND_SYM = 692,
     SECOND_SYM = 693,
     SECURITY_SYM = 694,
     SELECT_SYM = 695,
     SENSITIVE_SYM = 696,
     SEPARATOR_SYM = 697,
     SERIALIZABLE_SYM = 698,
     SERIAL_SYM = 699,
     SESSION_SYM = 700,
     SERVER_SYM = 701,
     SERVER_OPTIONS = 702,
     SET = 703,
     SET_VAR = 704,
     SHARE_SYM = 705,
     SHIFT_LEFT = 706,
     SHIFT_RIGHT = 707,
     SHOW = 708,
     SHUTDOWN = 709,
     SIGNED_SYM = 710,
     SIMPLE_SYM = 711,
     SLAVE = 712,
     SMALLINT = 713,
     SNAPSHOT_SYM = 714,
     SOCKET_SYM = 715,
     SONAME_SYM = 716,
     SOUNDS_SYM = 717,
     SOURCE_SYM = 718,
     SPATIAL_SYM = 719,
     SPECIFIC_SYM = 720,
     SQLEXCEPTION_SYM = 721,
     SQLSTATE_SYM = 722,
     SQLWARNING_SYM = 723,
     SQL_BIG_RESULT = 724,
     SQL_BUFFER_RESULT = 725,
     SQL_CACHE_SYM = 726,
     SQL_CALC_FOUND_ROWS = 727,
     SQL_NO_CACHE_SYM = 728,
     INFINIDB_ORDERED_SYM = 729,
     SQL_SMALL_RESULT = 730,
     SQL_SYM = 731,
     SQL_THREAD = 732,
     SSL_SYM = 733,
     STARTING = 734,
     STARTS_SYM = 735,
     START_SYM = 736,
     STATUS_SYM = 737,
     STDDEV_SAMP_SYM = 738,
     STD_SYM = 739,
     STOP_SYM = 740,
     STORAGE_SYM = 741,
     STRAIGHT_JOIN = 742,
     STRING_SYM = 743,
     SUBDATE_SYM = 744,
     SUBJECT_SYM = 745,
     SUBPARTITIONS_SYM = 746,
     SUBPARTITION_SYM = 747,
     SUBSTRING = 748,
     SUM_SYM = 749,
     SUPER_SYM = 750,
     SUSPEND_SYM = 751,
     SWAPS_SYM = 752,
     SWITCHES_SYM = 753,
     SYSDATE = 754,
     TABLES = 755,
     TABLESPACE = 756,
     TABLE_REF_PRIORITY = 757,
     TABLE_SYM = 758,
     TABLE_CHECKSUM_SYM = 759,
     TEMPORARY = 760,
     TEMPTABLE_SYM = 761,
     TERMINATED = 762,
     TEXT_STRING = 763,
     TEXT_SYM = 764,
     THAN_SYM = 765,
     THEN_SYM = 766,
     TIMESTAMP = 767,
     TIMESTAMP_ADD = 768,
     TIMESTAMP_DIFF = 769,
     TIME_SYM = 770,
     TINYBLOB = 771,
     TINYINT = 772,
     TINYTEXT = 773,
     TO_SYM = 774,
     TRAILING = 775,
     TRANSACTION_SYM = 776,
     TRIGGERS_SYM = 777,
     TRIGGER_SYM = 778,
     TRIM = 779,
     TRUE_SYM = 780,
     TRUNCATE_SYM = 781,
     TYPES_SYM = 782,
     TYPE_SYM = 783,
     UDF_RETURNS_SYM = 784,
     ULONGLONG_NUM = 785,
     UNBOUNDED_SYM = 786,
     UNCOMMITTED_SYM = 787,
     UNDEFINED_SYM = 788,
     UNDERSCORE_CHARSET = 789,
     UNDOFILE_SYM = 790,
     UNDO_BUFFER_SIZE_SYM = 791,
     UNDO_SYM = 792,
     UNICODE_SYM = 793,
     UNINSTALL_SYM = 794,
     UNION_SYM = 795,
     UNIQUE_SYM = 796,
     UNKNOWN_SYM = 797,
     UNLOCK_SYM = 798,
     UNSIGNED = 799,
     UNTIL_SYM = 800,
     UPDATE_SYM = 801,
     UPGRADE_SYM = 802,
     USAGE = 803,
     USER = 804,
     USE_FRM = 805,
     USE_SYM = 806,
     USING = 807,
     UTC_DATE_SYM = 808,
     UTC_TIMESTAMP_SYM = 809,
     UTC_TIME_SYM = 810,
     VALUES = 811,
     VALUE_SYM = 812,
     VARBINARY = 813,
     VARCHAR = 814,
     VARIABLES = 815,
     VARIANCE_SYM = 816,
     VARYING = 817,
     VAR_SAMP_SYM = 818,
     VIEW_SYM = 819,
     WAIT_SYM = 820,
     WARNINGS = 821,
     WEEK_SYM = 822,
     WHEN_SYM = 823,
     WHERE = 824,
     WHILE_SYM = 825,
     WITH = 826,
     WITHIN = 827,
     WORK_SYM = 828,
     WRAPPER_SYM = 829,
     WRITE_SYM = 830,
     X509_SYM = 831,
     XA_SYM = 832,
     XOR = 833,
     YEAR_MONTH_SYM = 834,
     YEAR_SYM = 835,
     ZEROFILL = 836
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CHAIN_SYM 309
#define CHANGE 310
#define CHANGED 311
#define CHARSET 312
#define CHAR_SYM 313
#define CHECKSUM_SYM 314
#define CHECK_SYM 315
#define CIPHER_SYM 316
#define CLIENT_SYM 317
#define CLOSE_SYM 318
#define COALESCE 319
#define CODE_SYM 320
#define COLLATE_SYM 321
#define COLLATION_SYM 322
#define COLUMNS 323
#define COLUMN_SYM 324
#define COMMENT_SYM 325
#define COMMITTED_SYM 326
#define COMMIT_SYM 327
#define COMPACT_SYM 328
#define COMPLETION_SYM 329
#define COMPRESSED_SYM 330
#define CONCURRENT 331
#define CONDITION_SYM 332
#define CONNECTION_SYM 333
#define CONSISTENT_SYM 334
#define CONSTRAINT 335
#define CONTAINS_SYM 336
#define CONTEXT_SYM 337
#define CONTINUE_SYM 338
#define CONTRIBUTORS_SYM 339
#define CONVERT_SYM 340
#define COUNT_SYM 341
#define CPU_SYM 342
#define CREATE 343
#define CROSS 344
#define CUBE_SYM 345
#define CURDATE 346
#define CURRENT_SYM 347
#define CURRENT_USER 348
#define CURSOR_SYM 349
#define CURTIME 350
#define DATABASE 351
#define DATABASES 352
#define DATAFILE_SYM 353
#define DATA_SYM 354
#define DATETIME 355
#define DATE_ADD_INTERVAL 356
#define DATE_SUB_INTERVAL 357
#define DATE_SYM 358
#define DAY_HOUR_SYM 359
#define DAY_MICROSECOND_SYM 360
#define DAY_MINUTE_SYM 361
#define DAY_SECOND_SYM 362
#define DAY_SYM 363
#define DEALLOCATE_SYM 364
#define DECIMAL_NUM 365
#define DECIMAL_SYM 366
#define DECLARE_SYM 367
#define DEFAULT 368
#define DEFINER_SYM 369
#define DELAYED_SYM 370
#define DELAY_KEY_WRITE_SYM 371
#define DELETE_SYM 372
#define DESC 373
#define DESCRIBE 374
#define DES_KEY_FILE 375
#define DETERMINISTIC_SYM 376
#define DIRECTORY_SYM 377
#define DISABLE_SYM 378
#define DISCARD 379
#define DISK_SYM 380
#define DISTINCT 381
#define DIV_SYM 382
#define DOUBLE_SYM 383
#define DO_SYM 384
#define DROP 385
#define DUAL_SYM 386
#define DUMPFILE 387
#define DUPLICATE_SYM 388
#define DYNAMIC_SYM 389
#define EACH_SYM 390
#define ELSE 391
#define ELSEIF_SYM 392
#define ENABLE_SYM 393
#define ENCLOSED 394
#define END 395
#define ENDS_SYM 396
#define END_OF_INPUT 397
#define ENGINES_SYM 398
#define ENGINE_SYM 399
#define ENUM 400
#define EQ 401
#define EQUAL_SYM 402
#define ERRORS 403
#define ESCAPED 404
#define ESCAPE_SYM 405
#define EVENTS_SYM 406
#define EVENT_SYM 407
#define EVERY_SYM 408
#define EXECUTE_SYM 409
#define EXISTS 410
#define EXIT_SYM 411
#define EXPANSION_SYM 412
#define EXTENDED_SYM 413
#define EXTENT_SIZE_SYM 414
#define EXTRACT_SYM 415
#define FALSE_SYM 416
#define FAST_SYM 417
#define FAULTS_SYM 418
#define FETCH_SYM 419
#define FILE_SYM 420
#define FIRST_SYM 421
#define FIXED_SYM 422
#define FLOAT_NUM 423
#define FLOAT_SYM 424
#define FLUSH_SYM 425
#define FOLLOWING_SYM 426
#define FORCE_SYM 427
#define FOREIGN 428
#define FOR_SYM 429
#define FOUND_SYM 430
#define FRAC_SECOND_SYM 431
#define FROM 432
#define FULL 433
#define FULLTEXT_SYM 434
#define FUNCTION_SYM 435
#define GE 436
#define GEOMETRYCOLLECTION 437
#define GEOMETRY_SYM 438
#define GET_FORMAT 439
#define GLOBAL_SYM 440
#define GRANT 441
#define GRANTS 442
#define GROUP_SYM 443
#define GROUP_CONCAT_SYM 444
#define GT_SYM 445
#define HANDLER_SYM 446
#define HASH_SYM 447
#define HAVING 448
#define HELP_SYM 449
#define HEX_NUM 450
#define HIGH_PRIORITY 451
#define HOST_SYM 452
#define HOSTS_SYM 453
#define HOUR_MICROSECOND_SYM 454
#define HOUR_MINUTE_SYM 455
#define HOUR_SECOND_SYM 456
#define HOUR_SYM 457
#define IDENT 458
#define IDENTIFIED_SYM 459
#define IDENT_QUOTED 460
#define IF 461
#define IGNORE_SYM 462
#define IMPORT 463
#define INDEXES 464
#define INDEX_SYM 465
#define INFILE 466
#define INITIAL_SIZE_SYM 467
#define INNER_SYM 468
#define INNOBASE_SYM 469
#define INOUT_SYM 470
#define INSENSITIVE_SYM 471
#define INSERT 472
#define INSERT_METHOD 473
#define INSTALL_SYM 474
#define INTERVAL_SYM 475
#define INTO 476
#define INT_SYM 477
#define INVOKER_SYM 478
#define IN_SYM 479
#define IO_SYM 480
#define IPC_SYM 481
#define IS 482
#define ISOLATION 483
#define ISSUER_SYM 484
#define ITERATE_SYM 485
#define JOIN_SYM 486
#define KEYS 487
#define KEY_BLOCK_SIZE 488
#define KEY_SYM 489
#define KILL_SYM 490
#define LANGUAGE_SYM 491
#define LAST_SYM 492
#define LE 493
#define LEADING 494
#define LEAVES 495
#define LEAVE_SYM 496
#define LEFT 497
#define LESS_SYM 498
#define LEVEL_SYM 499
#define LEX_HOSTNAME 500
#define LIKE 501
#define LIMIT 502
#define LINEAR_SYM 503
#define LINES 504
#define LINESTRING 505
#define LIST_SYM 506
#define LOAD 507
#define LOCAL_SYM 508
#define LOCATOR_SYM 509
#define LOCKS_SYM 510
#define LOCK_SYM 511
#define LOGFILE_SYM 512
#define LOGS_SYM 513
#define LONGBLOB 514
#define LONGTEXT 515
#define LONG_NUM 516
#define LONG_SYM 517
#define LOOP_SYM 518
#define LOW_PRIORITY 519
#define LT 520
#define MASTER_CONNECT_RETRY_SYM 521
#define MASTER_HOST_SYM 522
#define MASTER_LOG_FILE_SYM 523
#define MASTER_LOG_POS_SYM 524
#define MASTER_PASSWORD_SYM 525
#define MASTER_PORT_SYM 526
#define MASTER_SERVER_ID_SYM 527
#define MASTER_SSL_CAPATH_SYM 528
#define MASTER_SSL_CA_SYM 529
#define MASTER_SSL_CERT_SYM 530
#define MASTER_SSL_CIPHER_SYM 531
#define MASTER_SSL_KEY_SYM 532
#define MASTER_SSL_SYM 533
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 534
#define MASTER_SYM 535
#define MASTER_USER_SYM 536
#define MATCH 537
#define MAX_CONNECTIONS_PER_HOUR 538
#define MAX_QUERIES_PER_HOUR 539
#define MAX_ROWS 540
#define MAX_SIZE_SYM 541
#define MAX_SYM 542
#define MAX_UPDATES_PER_HOUR 543
#define MAX_USER_CONNECTIONS_SYM 544
#define MAX_VALUE_SYM 545
#define MEDIUMBLOB 546
#define MEDIUMINT 547
#define MEDIUMTEXT 548
#define MEDIUM_SYM 549
#define MEMORY_SYM 550
#define MERGE_SYM 551
#define MICROSECOND_SYM 552
#define MIGRATE_SYM 553
#define MINUTE_MICROSECOND_SYM 554
#define MINUTE_SECOND_SYM 555
#define MINUTE_SYM 556
#define MIN_ROWS 557
#define MIN_SYM 558
#define MODE_SYM 559
#define MODIFIES_SYM 560
#define MODIFY_SYM 561
#define MOD_SYM 562
#define MONTH_SYM 563
#define MULTILINESTRING 564
#define MULTIPOINT 565
#define MULTIPOLYGON 566
#define MUTEX_SYM 567
#define NAMES_SYM 568
#define NAME_SYM 569
#define NATIONAL_SYM 570
#define NATURAL 571
#define NCHAR_STRING 572
#define NCHAR_SYM 573
#define NDBCLUSTER_SYM 574
#define NE 575
#define NEG 576
#define NEW_SYM 577
#define NEXT_SYM 578
#define NODEGROUP_SYM 579
#define NONE_SYM 580
#define NOT2_SYM 581
#define NOT_SYM 582
#define NOW_SYM 583
#define NO_SYM 584
#define NO_WAIT_SYM 585
#define NO_WRITE_TO_BINLOG 586
#define NTH_VALUE_SYM 587
#define NULL_SYM 588
#define NULLS_SYM 589
#define NUM 590
#define NUMERIC_SYM 591
#define NVARCHAR_SYM 592
#define OFFSET_SYM 593
#define OLD_PASSWORD 594
#define ON 595
#define ONE_SHOT_SYM 596
#define ONE_SYM 597
#define OPEN_SYM 598
#define OPTIMIZE 599
#define OPTIONS_SYM 600
#define OPTION 601
#define OPTIONALLY 602
#define OR2_SYM 603
#define ORDER_SYM 604
#define OR_OR_SYM 605
#define OR_SYM 606
#define OUTER 607
#define OUTFILE 608
#define OUT_SYM 609
#define OVER_SYM 610
#define OWNER_SYM 611
#define PACK_KEYS_SYM 612
#define PAGE_SYM 613
#define PARAM_MARKER 614
#define PARSER_SYM 615
#define PARTIAL 616
#define PARTITIONING_SYM 617
#define PARTITIONS_SYM 618
#define PARTITION_SYM 619
#define PASSWORD 620
#define PERCENTILE_CONT_SYM 621
#define PERCENTILE_DISC_SYM 622
#define PHASE_SYM 623
#define PLUGINS_SYM 624
#define PLUGIN_SYM 625
#define POINT_SYM 626
#define POLYGON 627
#define PORT_SYM 628
#define POSITION_SYM 629
#define PRECEDING_SYM 630
#define PRECISION 631
#define PREPARE_SYM 632
#define PRESERVE_SYM 633
#define PREV_SYM 634
#define PRIMARY_SYM 635
#define PRIVILEGES 636
#define PROCEDURE 637
#define PROCESS 638
#define PROCESSLIST_SYM 639
#define PROFILE_SYM 640
#define PROFILES_SYM 641
#define PURGE 642
#define QUARTER_SYM 643
#define QUERY_SYM 644
#define QUICK 645
#define RANGE_SYM 646
#define READS_SYM 647
#define READ_ONLY_SYM 648
#define READ_SYM 649
#define READ_WRITE_SYM 650
#define REAL 651
#define REBUILD_SYM 652
#define RECOVER_SYM 653
#define REDOFILE_SYM 654
#define REDO_BUFFER_SIZE_SYM 655
#define REDUNDANT_SYM 656
#define REFERENCES 657
#define REGEXP 658
#define RELAY_LOG_FILE_SYM 659
#define RELAY_LOG_POS_SYM 660
#define RELAY_THREAD 661
#define RELEASE_SYM 662
#define RELOAD 663
#define REMOVE_SYM 664
#define RENAME 665
#define REORGANIZE_SYM 666
#define REPAIR 667
#define REPEATABLE_SYM 668
#define REPEAT_SYM 669
#define REPLACE 670
#define REPLICATION 671
#define REQUIRE_SYM 672
#define RESET_SYM 673
#define RESOURCES 674
#define RESPECT_SYM 675
#define RESTORE_SYM 676
#define RESTRICT 677
#define RESUME_SYM 678
#define RETURNS_SYM 679
#define RETURN_SYM 680
#define REVOKE 681
#define RIGHT 682
#define ROLLBACK_SYM 683
#define ROLLUP_SYM 684
#define ROUTINE_SYM 685
#define ROWS_SYM 686
#define ROW_FORMAT_SYM 687
#define ROW_SYM 688
#define RTREE_SYM 689
#define SAVEPOINT_SYM 690
#define SCHEDULE_SYM 691
#define SECOND_MICROSECOND_SYM 692
#define SECOND_SYM 693
#define SECURITY_SYM 694
#define SELECT_SYM 695
#define SENSITIVE_SYM 696
#define SEPARATOR_SYM 697
#define SERIALIZABLE_SYM 698
#define SERIAL_SYM 699
#define SESSION_SYM 700
#define SERVER_SYM 701
#define SERVER_OPTIONS 702
#define SET 703
#define SET_VAR 704
#define SHARE_SYM 705
#define SHIFT_LEFT 706
#define SHIFT_RIGHT 707
#define SHOW 708
#define SHUTDOWN 709
#define SIGNED_SYM 710
#define SIMPLE_SYM 711
#define SLAVE 712
#define SMALLINT 713
#define SNAPSHOT_SYM 714
#define SOCKET_SYM 715
#define SONAME_SYM 716
#define SOUNDS_SYM 717
#define SOURCE_SYM 718
#define SPATIAL_SYM 719
#define SPECIFIC_SYM 720
#define SQLEXCEPTION_SYM 721
#define SQLSTATE_SYM 722
#define SQLWARNING_SYM 723
#define SQL_BIG_RESULT 724
#define SQL_BUFFER_RESULT 725
#define SQL_CACHE_SYM 726
#define SQL_CALC_FOUND_ROWS 727
#define SQL_NO_CACHE_SYM 728
#define INFINIDB_ORDERED_SYM 729
#define SQL_SMALL_RESULT 730
#define SQL_SYM 731
#define SQL_THREAD 732
#define SSL_SYM 733
#define STARTING 734
#define STARTS_SYM 735
#define START_SYM 736
#define STATUS_SYM 737
#define STDDEV_SAMP_SYM 738
#define STD_SYM 739
#define STOP_SYM 740
#define STORAGE_SYM 741
#define STRAIGHT_JOIN 742
#define STRING_SYM 743
#define SUBDATE_SYM 744
#define SUBJECT_SYM 745
#define SUBPARTITIONS_SYM 746
#define SUBPARTITION_SYM 747
#define SUBSTRING 748
#define SUM_SYM 749
#define SUPER_SYM 750
#define SUSPEND_SYM 751
#define SWAPS_SYM 752
#define SWITCHES_SYM 753
#define SYSDATE 754
#define TABLES 755
#define TABLESPACE 756
#define TABLE_REF_PRIORITY 757
#define TABLE_SYM 758
#define TABLE_CHECKSUM_SYM 759
#define TEMPORARY 760
#define TEMPTABLE_SYM 761
#define TERMINATED 762
#define TEXT_STRING 763
#define TEXT_SYM 764
#define THAN_SYM 765
#define THEN_SYM 766
#define TIMESTAMP 767
#define TIMESTAMP_ADD 768
#define TIMESTAMP_DIFF 769
#define TIME_SYM 770
#define TINYBLOB 771
#define TINYINT 772
#define TINYTEXT 773
#define TO_SYM 774
#define TRAILING 775
#define TRANSACTION_SYM 776
#define TRIGGERS_SYM 777
#define TRIGGER_SYM 778
#define TRIM 779
#define TRUE_SYM 780
#define TRUNCATE_SYM 781
#define TYPES_SYM 782
#define TYPE_SYM 783
#define UDF_RETURNS_SYM 784
#define ULONGLONG_NUM 785
#define UNBOUNDED_SYM 786
#define UNCOMMITTED_SYM 787
#define UNDEFINED_SYM 788
#define UNDERSCORE_CHARSET 789
#define UNDOFILE_SYM 790
#define UNDO_BUFFER_SIZE_SYM 791
#define UNDO_SYM 792
#define UNICODE_SYM 793
#define UNINSTALL_SYM 794
#define UNION_SYM 795
#define UNIQUE_SYM 796
#define UNKNOWN_SYM 797
#define UNLOCK_SYM 798
#define UNSIGNED 799
#define UNTIL_SYM 800
#define UPDATE_SYM 801
#define UPGRADE_SYM 802
#define USAGE 803
#define USER 804
#define USE_FRM 805
#define USE_SYM 806
#define USING 807
#define UTC_DATE_SYM 808
#define UTC_TIMESTAMP_SYM 809
#define UTC_TIME_SYM 810
#define VALUES 811
#define VALUE_SYM 812
#define VARBINARY 813
#define VARCHAR 814
#define VARIABLES 815
#define VARIANCE_SYM 816
#define VARYING 817
#define VAR_SAMP_SYM 818
#define VIEW_SYM 819
#define WAIT_SYM 820
#define WARNINGS 821
#define WEEK_SYM 822
#define WHEN_SYM 823
#define WHERE 824
#define WHILE_SYM 825
#define WITH 826
#define WITHIN 827
#define WORK_SYM 828
#define WRAPPER_SYM 829
#define WRITE_SYM 830
#define X509_SYM 831
#define XA_SYM 832
#define XOR 833
#define YEAR_MONTH_SYM 834
#define YEAR_SYM 835
#define ZEROFILL 836




/* Copy the first part of user declarations.  */
#line 33 "sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().

** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "mysql_priv.h"
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "item_create_window_function.h"
#include "item_window_function.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

const LEX_STRING null_lex_str= {0,0};

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  /* Push an error into the error stack */
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  (yytext ? yytext : ""),
                  lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup.
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == &sys_autocommit)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}


static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}


static bool add_create_index (LEX *lex, Key::Keytype type, const char *name,
  KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated,
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

static char idb_on_clause_err_str[] = "ON clause";
static char idb_where_clause_err_str[] = "WHERE clause";
static char idb_having_clause_err_str[] = "HAVING clause";
static char idb_group_by_clause_err_str[] = "GROUP BY clause";



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 646 "sql_yacc.yy"
{
  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  struct st_lex *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  struct Window_context *Window_context;
  struct Ordering *ordering;
  struct Frame *frame;
  struct Boundary *boundary;
  enum BOUND bound;
  SQL_LIST *list;
}
/* Line 193 of yacc.c.  */
#line 1930 "sql_yacc.cc"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 696 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 216 of yacc.c.  */
#line 1946 "sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  551
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   49016

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  601
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  854
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2436
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4199

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   836

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   594,     2,     2,     2,   588,   583,     2,
     591,   592,   586,   585,   593,   584,   599,   587,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   600,   597,
       2,     2,     2,     2,   598,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   589,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   595,   582,   596,   590,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   228,   232,   236,   240,   244,   245,   253,
     254,   267,   268,   281,   282,   295,   296,   303,   304,   308,
     313,   318,   322,   325,   336,   338,   342,   345,   348,   351,
     354,   357,   360,   363,   364,   378,   379,   386,   389,   390,
     392,   396,   398,   399,   402,   403,   406,   407,   409,   413,
     418,   419,   422,   423,   426,   428,   430,   432,   434,   436,
     438,   440,   442,   444,   446,   448,   450,   452,   453,   457,
     459,   460,   463,   464,   467,   470,   473,   476,   479,   483,
     487,   489,   491,   493,   496,   500,   504,   505,   510,   511,
     515,   516,   518,   522,   524,   525,   527,   531,   533,   534,
     538,   539,   541,   545,   547,   552,   553,   555,   557,   559,
     560,   564,   567,   571,   572,   576,   577,   583,   589,   590,
     598,   604,   605,   608,   610,   612,   614,   618,   620,   622,
     626,   627,   629,   631,   633,   635,   638,   640,   642,   646,
     647,   650,   652,   654,   656,   658,   660,   662,   664,   666,
     668,   670,   672,   674,   676,   677,   683,   684,   687,   688,
     692,   693,   696,   699,   702,   705,   706,   713,   716,   717,
     720,   722,   724,   728,   729,   730,   731,   739,   740,   743,
     746,   748,   750,   751,   752,   761,   762,   769,   771,   774,
     776,   779,   780,   781,   788,   789,   790,   797,   798,   801,
     802,   808,   809,   811,   812,   818,   819,   822,   823,   829,
     834,   835,   836,   845,   846,   854,   856,   858,   860,   862,
     864,   867,   872,   878,   879,   884,   889,   894,   898,   902,
     905,   908,   909,   912,   914,   917,   921,   923,   925,   927,
     929,   931,   934,   938,   940,   942,   944,   946,   948,   950,
     952,   954,   956,   958,   961,   965,   967,   969,   971,   973,
     975,   977,   979,   982,   986,   988,   990,   992,   994,   996,
     998,  1000,  1002,  1004,  1007,  1011,  1013,  1015,  1017,  1020,
    1023,  1026,  1028,  1030,  1032,  1034,  1037,  1041,  1045,  1049,
    1053,  1057,  1061,  1065,  1069,  1074,  1075,  1077,  1079,  1081,
    1083,  1085,  1088,  1092,  1095,  1100,  1106,  1107,  1113,  1114,
    1115,  1121,  1122,  1130,  1131,  1133,  1134,  1138,  1139,  1143,
    1149,  1155,  1156,  1161,  1162,  1166,  1167,  1171,  1172,  1174,
    1175,  1177,  1179,  1183,  1185,  1191,  1197,  1198,  1201,  1202,
    1203,  1211,  1212,  1222,  1224,  1228,  1230,  1232,  1233,  1236,
    1237,  1241,  1243,  1247,  1248,  1255,  1257,  1258,  1263,  1269,
    1271,  1273,  1275,  1279,  1283,  1285,  1289,  1291,  1293,  1294,
    1298,  1300,  1304,  1305,  1310,  1312,  1313,  1315,  1318,  1320,
    1324,  1329,  1333,  1337,  1341,  1346,  1351,  1355,  1356,  1357,
    1364,  1365,  1367,  1368,  1370,  1372,  1375,  1377,  1379,  1380,
    1382,  1384,  1387,  1389,  1390,  1394,  1395,  1397,  1399,  1402,
    1404,  1407,  1411,  1415,  1419,  1423,  1427,  1431,  1435,  1439,
    1443,  1447,  1451,  1455,  1459,  1463,  1467,  1473,  1475,  1477,
    1481,  1486,  1491,  1494,  1497,  1500,  1504,  1508,  1513,  1518,
    1520,  1522,  1524,  1526,  1528,  1530,  1532,  1534,  1536,  1538,
    1540,  1542,  1545,  1547,  1549,  1551,  1553,  1555,  1559,  1561,
    1563,  1566,  1569,  1577,  1586,  1595,  1604,  1613,  1616,  1619,
    1620,  1622,  1625,  1626,  1628,  1631,  1632,  1637,  1641,  1645,
    1649,  1651,  1654,  1656,  1658,  1662,  1665,  1669,  1672,  1675,
    1677,  1681,  1685,  1688,  1692,  1694,  1696,  1699,  1701,  1703,
    1706,  1708,  1710,  1712,  1715,  1719,  1722,  1726,  1729,  1732,
    1736,  1740,  1744,  1745,  1752,  1753,  1760,  1763,  1765,  1767,
    1769,  1771,  1773,  1775,  1777,  1779,  1781,  1783,  1785,  1788,
    1791,  1793,  1796,  1798,  1801,  1805,  1808,  1810,  1812,  1814,
    1816,  1818,  1820,  1822,  1825,  1826,  1828,  1830,  1836,  1837,
    1839,  1842,  1844,  1846,  1848,  1850,  1854,  1858,  1862,  1866,
    1867,  1869,  1870,  1872,  1873,  1875,  1878,  1880,  1882,  1885,
    1888,  1893,  1895,  1899,  1902,  1904,  1907,  1910,  1913,  1916,
    1918,  1921,  1923,  1925,  1927,  1929,  1931,  1932,  1935,  1937,
    1939,  1941,  1943,  1945,  1946,  1949,  1951,  1953,  1954,  1956,
    1957,  1960,  1962,  1965,  1969,  1972,  1973,  1975,  1976,  1978,
    1980,  1983,  1984,  1986,  1987,  1992,  1994,  1999,  2003,  2005,
    2006,  2008,  2011,  2013,  2017,  2021,  2024,  2027,  2030,  2032,
    2034,  2037,  2040,  2043,  2045,  2048,  2051,  2053,  2055,  2056,
    2058,  2060,  2062,  2064,  2065,  2067,  2069,  2071,  2072,  2074,
    2077,  2078,  2080,  2081,  2083,  2084,  2086,  2088,  2091,  2093,
    2096,  2098,  2101,  2104,  2107,  2111,  2113,  2115,  2117,  2119,
    2123,  2125,  2127,  2129,  2134,  2137,  2139,  2144,  2145,  2147,
    2148,  2151,  2153,  2157,  2158,  2165,  2166,  2172,  2180,  2181,
    2187,  2188,  2194,  2195,  2201,  2202,  2207,  2208,  2219,  2223,
    2228,  2232,  2236,  2244,  2245,  2249,  2251,  2256,  2257,  2261,
    2262,  2265,  2266,  2268,  2269,  2272,  2275,  2278,  2281,  2283,
    2285,  2287,  2291,  2296,  2297,  2304,  2309,  2310,  2316,  2317,
    2324,  2329,  2331,  2334,  2336,  2338,  2339,  2345,  2346,  2350,
    2353,  2354,  2360,  2361,  2362,  2369,  2371,  2375,  2377,  2379,
    2383,  2386,  2390,  2393,  2398,  2399,  2406,  2407,  2408,  2417,
    2422,  2427,  2431,  2435,  2438,  2441,  2448,  2454,  2458,  2464,
    2466,  2468,  2470,  2471,  2473,  2474,  2476,  2477,  2479,  2481,
    2482,  2485,  2487,  2488,  2490,  2492,  2494,  2495,  2501,  2505,
    2506,  2512,  2516,  2520,  2521,  2525,  2526,  2529,  2531,  2535,
    2536,  2538,  2540,  2541,  2544,  2546,  2550,  2551,  2558,  2559,
    2566,  2567,  2573,  2574,  2576,  2578,  2579,  2586,  2587,  2589,
    2591,  2594,  2596,  2598,  2600,  2601,  2607,  2610,  2611,  2617,
    2618,  2620,  2622,  2625,  2627,  2629,  2631,  2633,  2635,  2638,
    2639,  2645,  2646,  2648,  2650,  2651,  2656,  2661,  2665,  2671,
    2673,  2677,  2681,  2687,  2689,  2693,  2696,  2698,  2700,  2701,
    2708,  2710,  2714,  2718,  2719,  2722,  2723,  2728,  2729,  2732,
    2734,  2737,  2742,  2745,  2749,  2750,  2754,  2755,  2756,  2763,
    2766,  2768,  2770,  2773,  2776,  2785,  2790,  2791,  2793,  2796,
    2798,  2800,  2802,  2804,  2806,  2808,  2810,  2812,  2814,  2816,
    2818,  2820,  2821,  2824,  2829,  2833,  2835,  2837,  2842,  2843,
    2844,  2846,  2848,  2849,  2852,  2855,  2857,  2859,  2860,  2863,
    2867,  2871,  2875,  2878,  2882,  2887,  2891,  2896,  2900,  2905,
    2907,  2911,  2916,  2920,  2924,  2931,  2933,  2939,  2946,  2952,
    2960,  2967,  2976,  2982,  2989,  2994,  2999,  3005,  3009,  3014,
    3016,  3020,  3024,  3028,  3032,  3036,  3040,  3046,  3052,  3056,
    3060,  3064,  3068,  3072,  3076,  3078,  3080,  3082,  3084,  3086,
    3088,  3090,  3092,  3094,  3096,  3098,  3100,  3102,  3104,  3106,
    3108,  3110,  3112,  3114,  3116,  3118,  3120,  3122,  3126,  3128,
    3130,  3132,  3134,  3138,  3141,  3144,  3147,  3150,  3154,  3158,
    3164,  3171,  3176,  3181,  3189,  3192,  3199,  3205,  3212,  3219,
    3224,  3229,  3235,  3240,  3247,  3250,  3255,  3260,  3265,  3276,
    3283,  3292,  3299,  3304,  3309,  3316,  3321,  3326,  3331,  3338,
    3343,  3351,  3359,  3367,  3374,  3381,  3388,  3395,  3399,  3404,
    3411,  3420,  3423,  3426,  3431,  3440,  3449,  3456,  3463,  3466,
    3471,  3478,  3485,  3494,  3503,  3510,  3519,  3526,  3529,  3534,
    3543,  3552,  3555,  3558,  3561,  3566,  3571,  3576,  3581,  3585,
    3594,  3599,  3606,  3611,  3616,  3621,  3628,  3637,  3644,  3649,
    3656,  3658,  3665,  3670,  3675,  3680,  3685,  3690,  3697,  3702,
    3708,  3715,  3721,  3728,  3734,  3741,  3748,  3754,  3761,  3767,
    3774,  3780,  3787,  3793,  3799,  3805,  3811,  3819,  3832,  3845,
    3846,  3849,  3852,  3853,  3855,  3858,  3861,  3867,  3868,  3872,
    3873,  3875,  3880,  3886,  3890,  3891,  3894,  3897,  3898,  3900,
    3906,  3909,  3911,  3913,  3916,  3919,  3922,  3927,  3929,  3931,
    3936,  3943,  3946,  3950,  3951,  3956,  3957,  3961,  3962,  3964,
    3966,  3970,  3975,  3980,  3986,  3991,  3996,  4001,  4007,  4012,
    4018,  4023,  4029,  4034,  4040,  4045,  4050,  4055,  4060,  4065,
    4071,  4072,  4081,  4082,  4086,  4090,  4092,  4097,  4098,  4100,
    4101,  4104,  4105,  4106,  4111,  4116,  4119,  4120,  4124,  4127,
    4131,  4134,  4136,  4139,  4141,  4144,  4146,  4148,  4150,  4153,
    4154,  4156,  4158,  4162,  4163,  4167,  4169,  4173,  4175,  4179,
    4180,  4182,  4183,  4186,  4191,  4197,  4199,  4201,  4203,  4205,
    4210,  4212,  4216,  4220,  4224,  4225,  4232,  4233,  4240,  4241,
    4250,  4255,  4256,  4265,  4266,  4277,  4284,  4285,  4294,  4295,
    4306,  4313,  4315,  4318,  4321,  4322,  4327,  4331,  4338,  4339,
    4343,  4344,  4345,  4351,  4352,  4354,  4355,  4357,  4358,  4361,
    4365,  4369,  4371,  4373,  4374,  4382,  4383,  4391,  4393,  4396,
    4397,  4398,  4401,  4402,  4405,  4406,  4408,  4410,  4412,  4414,
    4418,  4420,  4424,  4426,  4428,  4430,  4432,  4434,  4436,  4438,
    4440,  4442,  4444,  4446,  4448,  4450,  4452,  4454,  4456,  4458,
    4460,  4462,  4464,  4466,  4468,  4470,  4472,  4474,  4476,  4478,
    4479,  4481,  4483,  4484,  4487,  4488,  4490,  4491,  4492,  4496,
    4497,  4498,  4502,  4505,  4506,  4507,  4508,  4514,  4519,  4522,
    4523,  4526,  4529,  4533,  4537,  4539,  4542,  4543,  4545,  4546,
    4551,  4556,  4559,  4560,  4562,  4564,  4565,  4567,  4568,  4570,
    4573,  4575,  4579,  4583,  4585,  4587,  4589,  4591,  4592,  4595,
    4597,  4599,  4601,  4603,  4605,  4607,  4609,  4611,  4613,  4615,
    4617,  4619,  4621,  4623,  4625,  4627,  4629,  4631,  4633,  4635,
    4637,  4639,  4641,  4642,  4643,  4650,  4651,  4653,  4657,  4659,
    4663,  4664,  4667,  4671,  4673,  4676,  4678,  4679,  4683,  4684,
    4685,  4693,  4696,  4698,  4699,  4703,  4710,  4711,  4718,  4723,
    4730,  4735,  4740,  4745,  4751,  4756,  4761,  4767,  4774,  4779,
    4781,  4785,  4787,  4789,  4793,  4795,  4796,  4799,  4800,  4802,
    4803,  4804,  4813,  4814,  4815,  4822,  4823,  4825,  4827,  4829,
    4831,  4833,  4836,  4838,  4840,  4842,  4846,  4851,  4852,  4856,
    4860,  4862,  4865,  4868,  4869,  4873,  4874,  4880,  4884,  4886,
    4890,  4892,  4896,  4898,  4900,  4901,  4903,  4904,  4909,  4910,
    4912,  4916,  4918,  4920,  4922,  4923,  4924,  4931,  4932,  4933,
    4945,  4949,  4951,  4955,  4959,  4961,  4965,  4966,  4968,  4969,
    4974,  4975,  4982,  4983,  4989,  4990,  4997,  4999,  5003,  5007,
    5013,  5014,  5017,  5018,  5021,  5023,  5025,  5027,  5031,  5032,
    5034,  5035,  5037,  5039,  5043,  5045,  5047,  5050,  5053,  5056,
    5058,  5060,  5062,  5064,  5065,  5069,  5070,  5074,  5077,  5082,
    5087,  5091,  5096,  5101,  5104,  5106,  5110,  5114,  5121,  5138,
    5141,  5144,  5145,  5152,  5158,  5161,  5164,  5167,  5169,  5171,
    5173,  5179,  5185,  5188,  5191,  5193,  5198,  5202,  5205,  5208,
    5211,  5215,  5218,  5221,  5223,  5227,  5232,  5236,  5240,  5243,
    5246,  5250,  5254,  5258,  5262,  5266,  5270,  5274,  5278,  5280,
    5282,  5284,  5286,  5288,  5289,  5291,  5292,  5295,  5296,  5298,
    5300,  5302,  5303,  5306,  5307,  5310,  5311,  5314,  5317,  5318,
    5323,  5324,  5329,  5331,  5333,  5334,  5336,  5338,  5339,  5341,
    5343,  5344,  5349,  5353,  5355,  5356,  5360,  5365,  5368,  5370,
    5372,  5374,  5376,  5378,  5380,  5382,  5384,  5385,  5387,  5388,
    5392,  5396,  5398,  5400,  5402,  5405,  5406,  5410,  5414,  5417,
    5420,  5424,  5425,  5427,  5429,  5432,  5433,  5438,  5444,  5445,
    5446,  5447,  5465,  5468,  5469,  5471,  5472,  5474,  5476,  5477,
    5479,  5481,  5482,  5485,  5488,  5490,  5494,  5499,  5503,  5507,
    5508,  5511,  5514,  5516,  5520,  5524,  5525,  5529,  5530,  5534,
    5537,  5541,  5543,  5545,  5548,  5549,  5552,  5554,  5556,  5559,
    5562,  5564,  5566,  5568,  5570,  5572,  5575,  5578,  5580,  5582,
    5584,  5586,  5588,  5590,  5592,  5595,  5598,  5601,  5604,  5607,
    5609,  5611,  5613,  5615,  5617,  5619,  5621,  5625,  5631,  5633,
    5635,  5637,  5639,  5641,  5645,  5650,  5656,  5658,  5664,  5668,
    5671,  5673,  5677,  5680,  5683,  5688,  5690,  5692,  5694,  5696,
    5698,  5700,  5702,  5704,  5706,  5708,  5710,  5712,  5714,  5716,
    5720,  5723,  5725,  5727,  5729,  5731,  5733,  5735,  5737,  5739,
    5741,  5743,  5745,  5747,  5749,  5751,  5753,  5755,  5757,  5759,
    5761,  5763,  5765,  5767,  5769,  5771,  5773,  5775,  5777,  5779,
    5781,  5783,  5785,  5787,  5789,  5791,  5793,  5795,  5797,  5799,
    5801,  5803,  5805,  5807,  5809,  5811,  5813,  5815,  5817,  5819,
    5821,  5823,  5825,  5827,  5829,  5831,  5833,  5835,  5837,  5839,
    5841,  5843,  5845,  5847,  5849,  5851,  5853,  5855,  5857,  5859,
    5861,  5863,  5865,  5867,  5869,  5871,  5873,  5875,  5877,  5879,
    5881,  5883,  5885,  5887,  5889,  5891,  5893,  5895,  5897,  5899,
    5901,  5903,  5905,  5907,  5909,  5911,  5913,  5915,  5917,  5919,
    5921,  5923,  5925,  5927,  5929,  5931,  5933,  5935,  5937,  5939,
    5941,  5943,  5945,  5947,  5949,  5951,  5953,  5955,  5957,  5959,
    5961,  5963,  5965,  5967,  5969,  5971,  5973,  5975,  5977,  5979,
    5981,  5983,  5985,  5987,  5989,  5991,  5993,  5995,  5997,  5999,
    6001,  6003,  6005,  6007,  6009,  6011,  6013,  6015,  6017,  6019,
    6021,  6023,  6025,  6027,  6029,  6031,  6033,  6035,  6037,  6039,
    6041,  6043,  6045,  6047,  6049,  6051,  6053,  6055,  6057,  6059,
    6061,  6063,  6065,  6067,  6069,  6071,  6073,  6075,  6077,  6079,
    6081,  6083,  6085,  6087,  6089,  6091,  6093,  6095,  6097,  6099,
    6101,  6103,  6105,  6107,  6109,  6111,  6113,  6115,  6117,  6119,
    6121,  6123,  6125,  6127,  6129,  6131,  6133,  6135,  6137,  6139,
    6141,  6143,  6145,  6147,  6149,  6151,  6153,  6155,  6157,  6159,
    6161,  6163,  6165,  6167,  6169,  6171,  6173,  6175,  6177,  6179,
    6181,  6183,  6185,  6187,  6189,  6191,  6193,  6195,  6197,  6199,
    6201,  6203,  6205,  6207,  6209,  6211,  6213,  6215,  6217,  6219,
    6221,  6223,  6225,  6227,  6229,  6231,  6233,  6235,  6237,  6239,
    6241,  6243,  6245,  6247,  6249,  6251,  6253,  6255,  6257,  6259,
    6261,  6263,  6265,  6267,  6269,  6271,  6273,  6275,  6277,  6279,
    6281,  6283,  6285,  6287,  6289,  6291,  6293,  6295,  6297,  6299,
    6301,  6303,  6305,  6307,  6309,  6311,  6313,  6315,  6317,  6319,
    6321,  6323,  6325,  6327,  6329,  6331,  6333,  6335,  6337,  6339,
    6341,  6343,  6345,  6346,  6351,  6352,  6354,  6356,  6360,  6361,
    6364,  6366,  6368,  6370,  6372,  6373,  6375,  6376,  6378,  6380,
    6382,  6383,  6386,  6389,  6392,  6394,  6397,  6402,  6408,  6413,
    6420,  6423,  6427,  6431,  6435,  6441,  6443,  6447,  6451,  6454,
    6457,  6460,  6462,  6464,  6469,  6474,  6476,  6478,  6480,  6482,
    6484,  6485,  6490,  6492,  6494,  6496,  6500,  6504,  6506,  6508,
    6511,  6514,  6515,  6519,  6524,  6528,  6529,  6537,  6539,  6542,
    6544,  6546,  6548,  6550,  6552,  6554,  6555,  6561,  6563,  6565,
    6567,  6569,  6571,  6575,  6582,  6589,  6596,  6604,  6608,  6617,
    6626,  6635,  6636,  6638,  6640,  6643,  6644,  6646,  6648,  6652,
    6653,  6657,  6658,  6662,  6663,  6667,  6668,  6672,  6674,  6676,
    6678,  6680,  6682,  6684,  6686,  6688,  6690,  6692,  6694,  6697,
    6700,  6702,  6706,  6709,  6712,  6715,  6718,  6721,  6724,  6727,
    6730,  6732,  6734,  6735,  6737,  6741,  6743,  6746,  6749,  6752,
    6754,  6758,  6762,  6764,  6766,  6770,  6772,  6776,  6781,  6787,
    6789,  6790,  6794,  6798,  6800,  6802,  6803,  6806,  6809,  6812,
    6815,  6816,  6819,  6822,  6824,  6827,  6830,  6833,  6836,  6839,
    6840,  6844,  6845,  6847,  6848,  6852,  6855,  6856,  6858,  6861,
    6862,  6864,  6869,  6874,  6880,  6883,  6887,  6888,  6890,  6891,
    6896,  6897,  6899,  6901,  6902,  6905,  6908,  6910,  6911,  6913,
    6915,  6916,  6922,  6929,  6930,  6931,  6934,  6937,  6941,  6943,
    6945,  6947,  6949,  6951,  6953,  6955,  6957,  6959,  6961,  6963,
    6965,  6967,  6968,  6972,  6974,  6977,  6979,  6982,  6986,  6990,
    6994,  6995,  6999,  7003,  7004,  7012,  7013,  7017,  7019,  7023,
    7024,  7028,  7031,  7036,  7037,  7041,  7046,  7051,  7052,  7053,
    7054,  7071,  7080,  7088,  7089,  7090,  7091,  7092,  7093,  7109,
    7110,  7111,  7112,  7113,  7126,  7131,  7136,  7140,  7145,  7149,
    7152,  7154,  7158,  7164,  7166,  7168,  7169,  7171,  7173,  7174,
    7177,  7178,  7179,  7183,  7184,  7187,  7193
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     602,     0,    -1,   142,    -1,    -1,   605,   603,   597,   604,
      -1,   605,   142,    -1,    -1,   142,    -1,   606,    -1,  1389,
      -1,   930,    -1,   991,    -1,   981,    -1,   993,    -1,   653,
      -1,   618,    -1,   994,    -1,   983,    -1,  1395,    -1,   623,
      -1,   607,    -1,  1231,    -1,  1261,    -1,  1185,    -1,  1187,
      -1,   611,    -1,  1267,    -1,  1364,    -1,  1355,    -1,   616,
      -1,  1195,    -1,  1453,    -1,  1281,    -1,  1284,    -1,  1347,
      -1,   999,    -1,  1007,    -1,   785,    -1,  1011,    -1,   609,
      -1,  1277,    -1,  1398,    -1,  1002,    -1,   986,    -1,  1198,
      -1,  1273,    -1,   979,    -1,  1362,    -1,  1396,    -1,  1397,
      -1,  1019,    -1,  1330,    -1,  1248,    -1,   968,    -1,   971,
      -1,  1242,    -1,  1454,    -1,  1353,    -1,  1223,    -1,  1283,
      -1,  1445,    -1,   608,   377,  1324,    -1,   109,    -1,   130,
      -1,   377,  1324,   177,   610,    -1,  1321,    -1,   598,  1326,
      -1,    -1,   154,  1324,   612,   613,    -1,    -1,   552,   614,
      -1,   614,   593,   615,    -1,   615,    -1,   598,  1326,    -1,
      -1,   194,   617,  1326,    -1,    -1,    55,   280,   519,   619,
     620,    -1,   621,    -1,   620,   593,   621,    -1,   267,   146,
    1321,    -1,   281,   146,  1321,    -1,   270,   146,  1321,    -1,
     271,   146,  1165,    -1,   266,   146,  1165,    -1,   278,   146,
    1165,    -1,   274,   146,  1321,    -1,   273,   146,  1321,    -1,
     275,   146,  1321,    -1,   276,   146,  1321,    -1,   277,   146,
    1321,    -1,   279,   146,  1165,    -1,   622,    -1,   268,   146,
    1321,    -1,   269,   146,  1167,    -1,   404,   146,  1321,    -1,
     405,   146,  1165,    -1,    -1,    88,   833,   503,   836,  1317,
     624,   776,    -1,    -1,    88,   908,   210,  1324,   912,   340,
    1317,   625,   591,   925,   592,   913,    -1,    -1,    88,   909,
     210,  1324,   911,   340,  1317,   626,   591,   925,   592,   914,
      -1,    -1,    88,   910,   210,  1324,   911,   340,  1317,   627,
     591,   925,   592,   915,    -1,    -1,    88,    96,   836,  1324,
     628,   830,    -1,    -1,    88,   629,  1411,    -1,    88,   549,
     646,  1380,    -1,    88,   257,   188,   739,    -1,    88,   501,
     736,    -1,    88,   630,    -1,   446,  1326,   173,    99,   574,
    1326,   345,   591,   631,   592,    -1,   632,    -1,   631,   593,
     632,    -1,   549,  1321,    -1,   197,  1321,    -1,    96,  1321,
      -1,   356,  1321,    -1,   365,  1321,    -1,   460,  1321,    -1,
     373,  1165,    -1,    -1,  1035,   152,   836,   647,   634,   340,
     436,   635,   640,   637,   642,   129,   643,    -1,    -1,   153,
    1040,  1135,   636,   638,   639,    -1,    22,  1040,    -1,    -1,
     138,    -1,   123,   340,   457,    -1,   123,    -1,    -1,   480,
    1040,    -1,    -1,   141,  1040,    -1,    -1,   641,    -1,   340,
      74,   378,    -1,   340,    74,   327,   378,    -1,    -1,    70,
    1321,    -1,    -1,   644,   645,    -1,   685,    -1,   687,    -1,
     683,    -1,   704,    -1,   722,    -1,   724,    -1,   719,    -1,
     689,    -1,   691,    -1,   692,    -1,   693,    -1,   694,    -1,
     696,    -1,    -1,  1324,   599,  1324,    -1,  1324,    -1,    -1,
     648,   650,    -1,    -1,   649,   651,    -1,    70,  1321,    -1,
     236,   476,    -1,   329,   476,    -1,    81,   476,    -1,   392,
     476,    99,    -1,   305,   476,    99,    -1,   652,    -1,   650,
      -1,   121,    -1,  1046,   121,    -1,   476,   439,   114,    -1,
     476,   439,   223,    -1,    -1,    49,   647,   654,   655,    -1,
      -1,   591,   656,   592,    -1,    -1,   657,    -1,   657,   593,
    1040,    -1,  1040,    -1,    -1,   659,    -1,   659,   593,   661,
      -1,   661,    -1,    -1,  1324,   660,   859,    -1,    -1,   663,
      -1,   663,   593,   664,    -1,   664,    -1,   665,   660,  1324,
     859,    -1,    -1,   224,    -1,   354,    -1,   215,    -1,    -1,
     666,   682,   597,    -1,   682,   597,    -1,   667,   682,   597,
      -1,    -1,   668,   669,   597,    -1,    -1,   112,   680,   670,
     859,   681,    -1,   112,  1324,    77,   174,   677,    -1,    -1,
     112,   674,   191,   174,   671,   675,   682,    -1,   112,  1324,
      94,   174,   672,    -1,    -1,   673,  1019,    -1,   156,    -1,
      83,    -1,   676,    -1,   675,   593,   676,    -1,   679,    -1,
    1165,    -1,   467,   678,  1322,    -1,    -1,   557,    -1,   677,
      -1,  1324,    -1,   468,    -1,  1046,   175,    -1,   466,    -1,
    1324,    -1,   680,   593,  1324,    -1,    -1,   113,  1040,    -1,
     685,    -1,   687,    -1,   683,    -1,   704,    -1,   722,    -1,
     724,    -1,   719,    -1,   689,    -1,   691,    -1,   692,    -1,
     693,    -1,   694,    -1,   696,    -1,    -1,   206,   684,   699,
     140,   206,    -1,    -1,   686,   606,    -1,    -1,   425,   688,
    1040,    -1,    -1,   690,   728,    -1,   241,  1325,    -1,   230,
    1325,    -1,   343,  1324,    -1,    -1,   164,   697,  1324,   221,
     695,   698,    -1,    63,  1324,    -1,    -1,   323,   177,    -1,
     177,    -1,  1324,    -1,   698,   593,  1324,    -1,    -1,    -1,
      -1,   700,  1040,   511,   701,   667,   702,   703,    -1,    -1,
     137,   699,    -1,   136,   667,    -1,   705,    -1,   708,    -1,
      -1,    -1,    52,   706,  1040,   707,   710,   718,   140,    52,
      -1,    -1,    52,   709,   711,   718,   140,    52,    -1,   712,
      -1,   710,   712,    -1,   715,    -1,   711,   715,    -1,    -1,
      -1,   568,   713,  1040,   714,   511,   667,    -1,    -1,    -1,
     568,   716,  1040,   717,   511,   667,    -1,    -1,   136,   667,
      -1,    -1,  1325,   600,   720,   728,   721,    -1,    -1,  1325,
      -1,    -1,  1325,   600,   723,   726,   721,    -1,    -1,   725,
     726,    -1,    -1,    30,   727,   668,   666,   140,    -1,   263,
     667,   140,   263,    -1,    -1,    -1,   570,   729,  1040,   129,
     730,   667,   140,   570,    -1,    -1,   414,   667,   545,   731,
    1040,   140,   414,    -1,    29,    -1,     8,    -1,   217,    -1,
     546,    -1,   117,    -1,   761,   763,    -1,   761,    55,   758,
     742,    -1,   761,     6,   758,   737,   746,    -1,    -1,   551,
     257,   188,  1324,    -1,   761,     6,   758,   749,    -1,   761,
     130,   758,   749,    -1,   762,   741,   752,    -1,   762,   741,
     755,    -1,     6,   759,    -1,     6,   760,    -1,    -1,   743,
     744,    -1,   745,    -1,   744,   745,    -1,   744,   593,   745,
      -1,   764,    -1,   765,    -1,   766,    -1,   747,    -1,   748,
      -1,   747,   748,    -1,   747,   593,   748,    -1,   764,    -1,
     765,    -1,   766,    -1,   767,    -1,   770,    -1,   772,    -1,
     774,    -1,   771,    -1,   750,    -1,   751,    -1,   750,   751,
      -1,   750,   593,   751,    -1,   764,    -1,   765,    -1,   766,
      -1,   772,    -1,   774,    -1,   753,    -1,   754,    -1,   753,
     754,    -1,   753,   593,   754,    -1,   764,    -1,   768,    -1,
     769,    -1,   770,    -1,   772,    -1,   774,    -1,   771,    -1,
     756,    -1,   757,    -1,   756,   757,    -1,   756,   593,   757,
      -1,   764,    -1,   772,    -1,   774,    -1,    98,  1321,    -1,
     535,  1321,    -1,   399,  1321,    -1,  1324,    -1,  1324,    -1,
     393,    -1,   395,    -1,   327,     4,    -1,   212,  1215,   775,
      -1,    24,  1215,   775,    -1,   286,  1215,   775,    -1,   159,
    1215,   775,    -1,   536,  1215,   775,    -1,   400,  1215,   775,
      -1,   324,  1215,  1166,    -1,    70,  1215,  1321,    -1,  1254,
     144,  1215,   843,    -1,    -1,   774,    -1,   565,    -1,   330,
      -1,  1166,    -1,   203,    -1,   591,   777,    -1,   837,   782,
     779,    -1,   246,  1317,    -1,   591,   246,  1317,   592,    -1,
     849,   592,   837,   782,   779,    -1,    -1,   782,   826,   592,
     778,  1402,    -1,    -1,    -1,  1292,   829,   826,   780,  1399,
      -1,    -1,  1292,   829,   591,   826,   592,   781,  1402,    -1,
      -1,   783,    -1,    -1,   364,   784,   787,    -1,    -1,   364,
     786,   787,    -1,    46,   788,   798,   799,   806,    -1,   792,
     234,   591,   793,   592,    -1,    -1,   792,   192,   789,   796,
      -1,    -1,   391,   790,   796,    -1,    -1,   251,   791,   796,
      -1,    -1,   248,    -1,    -1,   794,    -1,   795,    -1,   794,
     593,   795,    -1,  1324,    -1,   591,  1035,   804,  1036,   592,
      -1,   591,  1035,   804,  1036,   592,    -1,    -1,   363,  1166,
      -1,    -1,    -1,   492,    46,   792,   192,   797,   800,   805,
      -1,    -1,   492,    46,   792,   234,   591,   802,   592,   801,
     805,    -1,   803,    -1,   802,   593,   803,    -1,  1324,    -1,
    1043,    -1,    -1,   491,  1166,    -1,    -1,   591,   807,   592,
      -1,   808,    -1,   807,   593,   808,    -1,    -1,   364,   809,
     810,   811,   823,   818,    -1,  1324,    -1,    -1,   556,   243,
     510,   812,    -1,   556,   224,   591,   815,   592,    -1,   813,
      -1,   814,    -1,   290,    -1,   591,   290,   592,    -1,   591,
     817,   592,    -1,   816,    -1,   815,   593,   816,    -1,   817,
      -1,  1043,    -1,    -1,   591,   819,   592,    -1,   820,    -1,
     819,   593,   820,    -1,    -1,   492,   821,   822,   823,    -1,
    1326,    -1,    -1,   824,    -1,   824,   825,    -1,   825,    -1,
     501,  1215,  1326,    -1,  1254,   144,  1215,   843,    -1,   324,
    1215,  1166,    -1,   285,  1215,  1168,    -1,   302,  1215,  1168,
      -1,    99,   122,  1215,  1321,    -1,   210,   122,  1215,  1321,
      -1,    70,  1215,  1321,    -1,    -1,    -1,   440,   827,  1029,
    1033,   828,   847,    -1,    -1,    18,    -1,    -1,   831,    -1,
     832,    -1,   831,   832,    -1,   842,    -1,   841,    -1,    -1,
     834,    -1,   835,    -1,   835,   834,    -1,   505,    -1,    -1,
     206,  1046,   155,    -1,    -1,   839,    -1,   840,    -1,   840,
     838,    -1,   840,    -1,   840,   839,    -1,   840,   593,   839,
      -1,   144,  1215,   843,    -1,   528,  1215,   843,    -1,   285,
    1215,  1167,    -1,   302,  1215,  1167,    -1,    26,  1215,  1165,
      -1,   365,  1215,  1321,    -1,    70,  1215,  1321,    -1,    25,
    1215,  1167,    -1,   357,  1215,  1165,    -1,   357,  1215,   113,
      -1,    59,  1215,  1165,    -1,   504,  1215,  1165,    -1,   116,
    1215,  1165,    -1,   432,  1215,   845,    -1,   540,  1215,   591,
    1272,   592,    -1,   841,    -1,   842,    -1,   218,  1215,   846,
      -1,    99,   122,  1215,  1321,    -1,   210,   122,  1215,  1321,
      -1,   501,  1324,    -1,   486,   125,    -1,   486,   295,    -1,
      78,  1215,  1321,    -1,   233,  1215,  1165,    -1,   890,   881,
    1215,   883,    -1,   890,    66,  1215,   889,    -1,  1326,    -1,
    1326,    -1,   113,    -1,   167,    -1,   134,    -1,    75,    -1,
     401,    -1,    73,    -1,   329,    -1,   166,    -1,   237,    -1,
    1160,    -1,  1028,  1032,    -1,   488,    -1,   396,    -1,   111,
      -1,   222,    -1,   850,    -1,   849,   593,   850,    -1,   851,
      -1,   852,    -1,   857,   853,    -1,   857,   895,    -1,   903,
     927,   912,   591,   925,   592,   913,    -1,   909,   906,   927,
     911,   591,   925,   592,   914,    -1,   910,   906,   927,   911,
     591,   925,   592,   915,    -1,   855,   904,   927,   912,   591,
     925,   592,   913,    -1,   855,   173,   234,   927,   591,   925,
     592,   895,    -1,   856,   853,    -1,   855,   854,    -1,    -1,
     854,    -1,    60,  1040,    -1,    -1,   856,    -1,    80,   927,
      -1,    -1,  1316,   858,   859,   877,    -1,   867,   875,   871,
      -1,   868,   876,   871,    -1,   169,   869,   871,    -1,    38,
      -1,    38,   874,    -1,    43,    -1,    42,    -1,   863,   874,
     891,    -1,   863,   891,    -1,   864,   874,   892,    -1,   864,
     892,    -1,    33,   874,    -1,    33,    -1,   865,   874,   891,
      -1,   866,   874,   892,    -1,   558,   874,    -1,   580,   875,
     871,    -1,   103,    -1,   515,    -1,   512,   875,    -1,   100,
      -1,   516,    -1,    40,   875,    -1,   862,    -1,   291,    -1,
     259,    -1,   262,   558,    -1,   262,   865,   891,    -1,   518,
     891,    -1,   509,   875,   891,    -1,   293,   891,    -1,   260,
     891,    -1,   111,   869,   871,    -1,   336,   869,   871,    -1,
     167,   869,   871,    -1,    -1,   145,   860,   591,   929,   592,
     891,    -1,    -1,   448,   861,   591,   929,   592,   891,    -1,
     262,   891,    -1,   444,    -1,   183,    -1,   182,    -1,   371,
      -1,   310,    -1,   250,    -1,   309,    -1,   372,    -1,   311,
      -1,    58,    -1,   318,    -1,   315,    58,    -1,   863,   562,
      -1,   559,    -1,   315,   559,    -1,   337,    -1,   318,   559,
      -1,   315,    58,   562,    -1,   318,   562,    -1,   222,    -1,
     517,    -1,   458,    -1,   292,    -1,    32,    -1,   396,    -1,
     128,    -1,   128,   376,    -1,    -1,   874,    -1,   870,    -1,
     591,   335,   593,   335,   592,    -1,    -1,   872,    -1,   872,
     873,    -1,   873,    -1,   455,    -1,   544,    -1,   581,    -1,
     591,   261,   592,    -1,   591,   530,   592,    -1,   591,   110,
     592,    -1,   591,   335,   592,    -1,    -1,   874,    -1,    -1,
     870,    -1,    -1,   878,    -1,   878,   879,    -1,   879,    -1,
     333,    -1,  1046,   333,    -1,   113,   880,    -1,   340,   546,
     328,  1039,    -1,    25,    -1,   444,   113,   557,    -1,   894,
     234,    -1,   541,    -1,   541,   234,    -1,    70,  1321,    -1,
      66,   887,    -1,   328,  1039,    -1,  1307,    -1,    58,   448,
      -1,    57,    -1,  1326,    -1,    33,    -1,   882,    -1,   113,
      -1,    -1,   881,   883,    -1,  1326,    -1,    33,    -1,   885,
      -1,   113,    -1,  1326,    -1,    -1,    66,   889,    -1,   887,
      -1,   113,    -1,    -1,   113,    -1,    -1,    20,   892,    -1,
      47,    -1,   538,   892,    -1,   881,   882,   892,    -1,    33,
     893,    -1,    -1,    33,    -1,    -1,    20,    -1,   538,    -1,
     881,   882,    -1,    -1,   380,    -1,    -1,   402,  1317,   896,
     897,    -1,   899,    -1,   591,   898,   592,   899,    -1,   898,
     593,  1324,    -1,  1324,    -1,    -1,   900,    -1,   900,   901,
      -1,   901,    -1,   340,   117,   902,    -1,   340,   546,   902,
      -1,   282,   178,    -1,   282,   361,    -1,   282,   456,    -1,
     422,    -1,    50,    -1,   448,   333,    -1,   329,     5,    -1,
     448,   113,    -1,   905,    -1,   380,   234,    -1,   541,   906,
      -1,   234,    -1,   210,    -1,    -1,   905,    -1,   232,    -1,
     210,    -1,   209,    -1,    -1,   541,    -1,   179,    -1,   464,
      -1,    -1,   911,    -1,   911,   919,    -1,    -1,   916,    -1,
      -1,   918,    -1,    -1,   917,    -1,   921,    -1,   916,   921,
      -1,   922,    -1,   917,   922,    -1,   923,    -1,   918,   923,
      -1,   552,   924,    -1,   528,   924,    -1,   233,  1215,  1165,
      -1,   920,    -1,   919,    -1,   920,    -1,   920,    -1,   571,
     360,  1320,    -1,    45,    -1,   434,    -1,   192,    -1,   925,
     593,   926,  1158,    -1,   926,  1158,    -1,  1324,    -1,  1324,
     591,   335,   592,    -1,    -1,  1316,    -1,    -1,   599,  1324,
      -1,  1305,    -1,   929,   593,  1305,    -1,    -1,    13,   964,
     503,  1317,   931,   942,    -1,    -1,    13,    96,   941,   932,
     831,    -1,    13,    96,  1324,   547,    99,   122,   314,    -1,
      -1,    13,   382,   647,   933,   648,    -1,    -1,    13,   180,
     647,   934,   648,    -1,    -1,    13,  1419,  1414,   935,  1421,
      -1,    -1,    13,  1414,   936,  1421,    -1,    -1,    13,  1414,
     152,   647,   937,   938,   939,   637,   642,   940,    -1,    13,
     501,   738,    -1,    13,   257,   188,   740,    -1,    13,   501,
     735,    -1,    13,   501,   734,    -1,    13,   446,  1326,   345,
     591,   631,   592,    -1,    -1,   340,   436,   635,    -1,   641,
      -1,   340,   436,   635,   641,    -1,    -1,   410,   519,   647,
      -1,    -1,   129,   643,    -1,    -1,  1324,    -1,    -1,   124,
     501,    -1,   208,   501,    -1,   957,   782,    -1,   957,   946,
      -1,   946,    -1,   783,    -1,   948,    -1,   130,   364,   955,
      -1,   397,   364,  1001,   947,    -1,    -1,   344,   364,  1001,
     947,   943,  1001,    -1,    14,   364,  1001,   947,    -1,    -1,
      60,   364,   947,   944,   996,    -1,    -1,   412,   364,  1001,
     947,   945,   988,    -1,    64,   364,  1001,  1166,    -1,   951,
      -1,   409,   362,    -1,    12,    -1,   955,    -1,    -1,     6,
     364,  1001,   949,   950,    -1,    -1,   591,   807,   592,    -1,
     363,  1166,    -1,    -1,   411,   364,  1001,   952,   953,    -1,
      -1,    -1,   955,   954,   221,   591,   807,   592,    -1,   956,
      -1,   955,   593,   956,    -1,  1324,    -1,   959,    -1,   957,
     593,   959,    -1,     6,   963,    -1,   958,   851,   966,    -1,
       6,   852,    -1,   958,   591,   849,   592,    -1,    -1,    55,
     963,  1316,   960,   857,   966,    -1,    -1,    -1,   306,   963,
    1316,   961,   859,   877,   962,   966,    -1,   130,   963,  1316,
     965,    -1,   130,   173,   234,   927,    -1,   130,   380,   234,
      -1,   130,   905,  1316,    -1,   123,   232,    -1,   138,   232,
      -1,    13,   963,  1316,   448,   113,  1307,    -1,    13,   963,
    1316,   130,   113,    -1,   410,   967,  1317,    -1,    85,   519,
     881,   883,   888,    -1,   838,    -1,   172,    -1,  1151,    -1,
      -1,    69,    -1,    -1,   207,    -1,    -1,   422,    -1,    50,
      -1,    -1,     8,  1324,    -1,   166,    -1,    -1,   519,    -1,
     146,    -1,    18,    -1,    -1,   481,   457,   973,   969,   977,
      -1,   485,   457,   973,    -1,    -1,   457,   481,   973,   970,
     977,    -1,   457,   485,   973,    -1,   481,   521,   972,    -1,
      -1,   571,    79,   459,    -1,    -1,   974,   975,    -1,   976,
      -1,   975,   593,   976,    -1,    -1,   477,    -1,   406,    -1,
      -1,   545,   978,    -1,   622,    -1,   978,   593,   622,    -1,
      -1,   421,  1349,   980,  1189,   177,  1321,    -1,    -1,    28,
    1349,   982,  1189,   519,  1321,    -1,    -1,    59,  1349,   984,
    1189,   985,    -1,    -1,   390,    -1,   158,    -1,    -1,   412,
    1001,  1349,   987,  1189,   988,    -1,    -1,   989,    -1,   990,
      -1,   990,   989,    -1,   390,    -1,   158,    -1,   550,    -1,
      -1,    14,  1001,  1349,   992,  1189,    -1,    34,  1321,    -1,
      -1,    60,  1349,   995,  1189,   996,    -1,    -1,   997,    -1,
     998,    -1,   998,   997,    -1,   390,    -1,   162,    -1,   294,
      -1,   158,    -1,    56,    -1,   174,   547,    -1,    -1,   344,
    1001,  1349,  1000,  1189,    -1,    -1,   331,    -1,   253,    -1,
      -1,   410,  1349,  1003,  1005,    -1,   410,   549,   646,  1004,
      -1,  1327,   519,  1327,    -1,  1004,   593,  1327,   519,  1327,
      -1,  1006,    -1,  1005,   593,  1006,    -1,  1317,   519,  1317,
      -1,    48,   210,  1008,   224,  1010,    -1,  1009,    -1,  1008,
     593,  1009,    -1,  1317,  1015,    -1,  1324,    -1,   113,    -1,
      -1,   252,   210,   221,    48,  1012,  1013,    -1,  1014,    -1,
    1013,   593,  1014,    -1,  1317,  1015,  1018,    -1,    -1,  1016,
    1017,    -1,    -1,   905,   591,  1131,   592,    -1,    -1,   207,
     240,    -1,  1020,    -1,   440,  1022,    -1,   591,  1021,   592,
    1402,    -1,   440,  1024,    -1,   591,  1021,   592,    -1,    -1,
    1024,  1023,  1399,    -1,    -1,    -1,  1025,  1029,  1033,  1026,
    1027,  1032,    -1,  1154,  1160,    -1,  1180,    -1,  1028,    -1,
    1180,  1028,    -1,  1028,  1180,    -1,   177,  1099,  1142,  1147,
    1144,  1154,  1160,  1171,    -1,   177,   131,  1142,  1160,    -1,
      -1,  1030,    -1,  1030,  1031,    -1,  1031,    -1,   487,    -1,
     196,    -1,   126,    -1,   475,    -1,   469,    -1,   470,    -1,
     472,    -1,   473,    -1,   474,    -1,   471,    -1,    12,    -1,
      -1,   174,   546,    -1,   256,   224,   450,   304,    -1,  1033,
     593,  1034,    -1,  1034,    -1,   586,    -1,  1035,  1037,  1036,
    1038,    -1,    -1,    -1,  1311,    -1,  1040,    -1,    -1,    18,
    1324,    -1,    18,  1321,    -1,  1324,    -1,  1321,    -1,    -1,
     591,   592,    -1,  1040,  1044,  1040,    -1,  1040,   578,  1040,
      -1,  1040,  1045,  1040,    -1,   327,  1040,    -1,  1041,   227,
     525,    -1,  1041,   227,  1046,   525,    -1,  1041,   227,   161,
      -1,  1041,   227,  1046,   161,    -1,  1041,   227,   542,    -1,
    1041,   227,  1046,   542,    -1,  1041,    -1,  1041,   227,   333,
      -1,  1041,   227,  1046,   333,    -1,  1041,   147,  1042,    -1,
    1041,  1048,  1042,    -1,  1041,  1048,  1049,   591,  1408,   592,
      -1,  1042,    -1,  1043,   224,   591,  1408,   592,    -1,  1043,
    1046,   224,   591,  1408,   592,    -1,  1043,   224,   591,  1040,
     592,    -1,  1043,   224,   591,  1040,   593,  1090,   592,    -1,
    1043,  1046,   224,   591,  1040,   592,    -1,  1043,  1046,   224,
     591,  1040,   593,  1090,   592,    -1,  1043,    31,  1043,    16,
    1042,    -1,  1043,  1046,    31,  1043,    16,  1042,    -1,  1043,
     462,   246,  1043,    -1,  1043,   246,  1050,  1146,    -1,  1043,
    1046,   246,  1050,  1146,    -1,  1043,   403,  1043,    -1,  1043,
    1046,   403,  1043,    -1,  1043,    -1,  1043,   582,  1043,    -1,
    1043,   583,  1043,    -1,  1043,   451,  1043,    -1,  1043,   452,
    1043,    -1,  1043,   585,  1043,    -1,  1043,   584,  1043,    -1,
    1043,   585,   220,  1040,  1135,    -1,  1043,   584,   220,  1040,
    1135,    -1,  1043,   586,  1043,    -1,  1043,   587,  1043,    -1,
    1043,   588,  1043,    -1,  1043,   127,  1043,    -1,  1043,   307,
    1043,    -1,  1043,   589,  1043,    -1,  1050,    -1,   351,    -1,
     348,    -1,    16,    -1,    15,    -1,   327,    -1,   326,    -1,
     594,    -1,   326,    -1,   146,    -1,   181,    -1,   190,    -1,
     238,    -1,   265,    -1,   320,    -1,    12,    -1,    17,    -1,
    1313,    -1,  1051,    -1,  1052,    -1,  1055,    -1,  1069,    -1,
    1053,    -1,  1050,    66,  1326,    -1,  1308,    -1,  1306,    -1,
    1078,    -1,  1076,    -1,  1050,   350,  1050,    -1,   585,  1050,
      -1,   584,  1050,    -1,   590,  1050,    -1,  1047,  1050,    -1,
     591,  1408,   592,    -1,   591,  1040,   592,    -1,   591,  1040,
     593,  1090,   592,    -1,   433,   591,  1040,   593,  1090,   592,
      -1,   155,   591,  1408,   592,    -1,   595,  1324,  1040,   596,
      -1,   282,  1093,     9,   591,  1043,  1070,   592,    -1,    33,
    1050,    -1,    53,   591,  1040,    18,  1088,   592,    -1,    52,
    1095,  1097,  1096,   140,    -1,    85,   591,  1040,   593,  1088,
     592,    -1,    85,   591,  1040,   552,   882,   592,    -1,   113,
     591,  1313,   592,    -1,   556,   591,  1314,   592,    -1,   220,
    1040,  1135,   585,  1040,    -1,    58,   591,  1090,   592,    -1,
      58,   591,  1090,   552,   882,   592,    -1,    93,  1039,    -1,
     103,   591,  1040,   592,    -1,   108,   591,  1040,   592,    -1,
     202,   591,  1040,   592,    -1,   217,   591,  1040,   593,  1040,
     593,  1040,   593,  1040,   592,    -1,   220,   591,  1040,   593,
    1040,   592,    -1,   220,   591,  1040,   593,  1040,   593,  1090,
     592,    -1,   242,   591,  1040,   593,  1040,   592,    -1,   301,
     591,  1040,   592,    -1,   308,   591,  1040,   592,    -1,   427,
     591,  1040,   593,  1040,   592,    -1,   438,   591,  1040,   592,
      -1,   515,   591,  1040,   592,    -1,   512,   591,  1040,   592,
      -1,   512,   591,  1040,   593,  1040,   592,    -1,   524,   591,
    1040,   592,    -1,   524,   591,   239,  1040,   177,  1040,   592,
      -1,   524,   591,   520,  1040,   177,  1040,   592,    -1,   524,
     591,    44,  1040,   177,  1040,   592,    -1,   524,   591,   239,
     177,  1040,   592,    -1,   524,   591,   520,   177,  1040,   592,
      -1,   524,   591,    44,   177,  1040,   592,    -1,   524,   591,
    1040,   177,  1040,   592,    -1,   549,   591,   592,    -1,   580,
     591,  1040,   592,    -1,     7,   591,  1040,   593,  1040,   592,
      -1,     7,   591,  1040,   593,   220,  1040,  1135,   592,    -1,
      91,  1039,    -1,    95,  1039,    -1,    95,   591,  1040,   592,
      -1,   101,   591,  1040,   593,   220,  1040,  1135,   592,    -1,
     102,   591,  1040,   593,   220,  1040,  1135,   592,    -1,   160,
     591,  1135,   177,  1040,   592,    -1,   184,   591,  1138,   593,
    1040,   592,    -1,   328,  1039,    -1,   328,   591,  1040,   592,
      -1,   374,   591,  1043,   224,  1040,   592,    -1,   489,   591,
    1040,   593,  1040,   592,    -1,   489,   591,  1040,   593,   220,
    1040,  1135,   592,    -1,   493,   591,  1040,   593,  1040,   593,
    1040,   592,    -1,   493,   591,  1040,   593,  1040,   592,    -1,
     493,   591,  1040,   177,  1040,   174,  1040,   592,    -1,   493,
     591,  1040,   177,  1040,   592,    -1,   499,  1039,    -1,   499,
     591,  1040,   592,    -1,   513,   591,  1136,   593,  1040,   593,
    1040,   592,    -1,   514,   591,  1136,   593,  1040,   593,  1040,
     592,    -1,   553,  1039,    -1,   555,  1039,    -1,   554,  1039,
      -1,    20,   591,  1040,   592,    -1,    57,   591,  1040,   592,
      -1,    64,   591,  1090,   592,    -1,    67,   591,  1040,   592,
      -1,    96,   591,   592,    -1,   206,   591,  1040,   593,  1040,
     593,  1040,   592,    -1,   297,   591,  1040,   592,    -1,   307,
     591,  1040,   593,  1040,   592,    -1,   339,   591,  1040,   592,
      -1,   365,   591,  1040,   592,    -1,   388,   591,  1040,   592,
      -1,   414,   591,  1040,   593,  1040,   592,    -1,   415,   591,
    1040,   593,  1040,   593,  1040,   592,    -1,   526,   591,  1040,
     593,  1040,   592,    -1,   567,   591,  1040,   592,    -1,   567,
     591,  1040,   593,  1040,   592,    -1,  1054,    -1,    81,   591,
    1040,   593,  1040,   592,    -1,   182,   591,  1090,   592,    -1,
     250,   591,  1090,   592,    -1,   309,   591,  1090,   592,    -1,
     310,   591,  1090,   592,    -1,   311,   591,  1090,   592,    -1,
     371,   591,  1040,   593,  1040,   592,    -1,   372,   591,  1090,
     592,    -1,  1320,   591,  1073,   592,  1059,    -1,  1320,   591,
    1073,   592,  1058,  1059,    -1,   494,   591,  1086,   592,  1059,
      -1,   494,   591,   126,  1086,   592,  1059,    -1,    27,   591,
    1086,   592,  1059,    -1,    27,   591,   126,  1086,   592,  1059,
      -1,    86,   591,  1141,   586,   592,  1059,    -1,    86,   591,
    1086,   592,  1059,    -1,    86,   591,   126,  1091,   592,  1059,
      -1,   303,   591,  1086,   592,  1059,    -1,   303,   591,   126,
    1086,   592,  1059,    -1,   287,   591,  1086,   592,  1059,    -1,
     287,   591,   126,  1086,   592,  1059,    -1,   561,   591,  1086,
     592,  1059,    -1,   563,   591,  1086,   592,  1059,    -1,   484,
     591,  1086,   592,  1059,    -1,   483,   591,  1086,   592,  1059,
      -1,   332,   591,  1074,   592,  1056,  1057,  1059,    -1,   366,
     591,  1075,   592,   572,   188,   591,   349,    46,  1062,   592,
    1059,    -1,   367,   591,  1075,   592,   572,   188,   591,   349,
      46,  1062,   592,  1059,    -1,    -1,   177,   166,    -1,   177,
     237,    -1,    -1,  1058,    -1,   420,   334,    -1,   207,   334,
      -1,   355,   591,  1060,  1061,   592,    -1,    -1,   364,    46,
    1090,    -1,    -1,  1065,    -1,   349,    46,  1062,  1064,    -1,
    1062,   593,  1312,  1158,  1063,    -1,  1312,  1158,  1063,    -1,
      -1,   334,   166,    -1,   334,   237,    -1,    -1,  1065,    -1,
    1066,    31,  1067,    16,  1067,    -1,  1066,  1067,    -1,   431,
      -1,   391,    -1,   531,  1068,    -1,    92,   433,    -1,  1040,
    1068,    -1,   220,  1040,  1135,  1068,    -1,   375,    -1,   171,
      -1,  1320,   591,  1073,   592,    -1,  1324,   599,  1324,   591,
    1089,   592,    -1,  1071,  1072,    -1,   224,    42,   304,    -1,
      -1,   224,   316,   236,   304,    -1,    -1,   571,   389,   157,
      -1,    -1,  1074,    -1,  1075,    -1,  1074,   593,  1075,    -1,
    1035,  1040,  1036,  1038,    -1,    27,   591,  1086,   592,    -1,
      27,   591,   126,  1086,   592,    -1,    36,   591,  1086,   592,
      -1,    37,   591,  1086,   592,    -1,    39,   591,  1086,   592,
      -1,    86,   591,  1141,   586,   592,    -1,    86,   591,  1086,
     592,    -1,    86,   591,   126,  1091,   592,    -1,   303,   591,
    1086,   592,    -1,   303,   591,   126,  1086,   592,    -1,   287,
     591,  1086,   592,    -1,   287,   591,   126,  1086,   592,    -1,
     484,   591,  1086,   592,    -1,   561,   591,  1086,   592,    -1,
     483,   591,  1086,   592,    -1,   563,   591,  1086,   592,    -1,
     494,   591,  1086,   592,    -1,   494,   591,   126,  1086,   592,
      -1,    -1,   189,   591,  1081,  1077,  1090,  1083,  1082,   592,
      -1,    -1,   598,  1079,  1080,    -1,  1326,   449,  1040,    -1,
    1326,    -1,   598,  1339,  1326,   928,    -1,    -1,   126,    -1,
      -1,   442,  1305,    -1,    -1,    -1,   349,    46,  1084,  1085,
      -1,  1085,   593,  1312,  1158,    -1,  1312,  1158,    -1,    -1,
    1141,  1087,  1040,    -1,    33,   875,    -1,    58,   875,   891,
      -1,   318,   875,    -1,   455,    -1,   455,   222,    -1,   544,
      -1,   544,   222,    -1,   103,    -1,   515,    -1,   100,    -1,
     111,   869,    -1,    -1,  1090,    -1,  1040,    -1,  1090,   593,
    1040,    -1,    -1,  1141,  1092,  1090,    -1,  1094,    -1,   591,
    1094,   592,    -1,  1313,    -1,  1094,   593,  1313,    -1,    -1,
    1040,    -1,    -1,   136,  1040,    -1,   568,  1040,   511,  1040,
      -1,  1097,   568,  1040,   511,  1040,    -1,  1111,    -1,  1102,
      -1,  1101,    -1,  1098,    -1,   595,  1324,  1098,   596,    -1,
    1100,    -1,  1101,   593,  1100,    -1,  1098,  1110,  1098,    -1,
    1098,   487,  1111,    -1,    -1,  1098,  1110,  1098,   340,  1103,
    1040,    -1,    -1,  1098,   487,  1111,   340,  1104,  1040,    -1,
      -1,  1098,  1110,  1098,   552,  1105,   591,  1134,   592,    -1,
    1098,   316,   231,  1111,    -1,    -1,  1098,   242,  1120,   231,
    1098,   340,  1106,  1040,    -1,    -1,  1098,   242,  1120,   231,
    1111,  1107,   552,   591,  1134,   592,    -1,  1098,   316,   242,
    1120,   231,  1111,    -1,    -1,  1098,   427,  1120,   231,  1098,
     340,  1108,  1040,    -1,    -1,  1098,   427,  1120,   231,  1111,
    1109,   552,   591,  1134,   592,    -1,  1098,   316,   427,  1120,
     231,  1111,    -1,   231,    -1,   213,   231,    -1,    89,   231,
      -1,    -1,  1112,  1317,  1140,  1129,    -1,  1119,  1118,  1115,
      -1,   591,  1118,  1113,  1402,   592,  1140,    -1,    -1,  1118,
    1114,  1101,    -1,    -1,    -1,  1116,  1029,  1033,  1117,   847,
      -1,    -1,   440,    -1,    -1,   352,    -1,    -1,   174,   231,
      -1,   174,   349,    46,    -1,   174,   188,    46,    -1,   172,
      -1,   207,    -1,    -1,  1122,   905,  1121,  1124,   591,  1133,
     592,    -1,    -1,   551,   905,  1121,  1125,   591,  1131,   592,
      -1,  1123,    -1,  1126,  1123,    -1,    -1,    -1,  1128,  1126,
      -1,    -1,  1130,  1127,    -1,    -1,  1133,    -1,  1324,    -1,
     380,    -1,  1132,    -1,  1133,   593,  1132,    -1,  1324,    -1,
    1134,   593,  1324,    -1,  1137,    -1,   104,    -1,   105,    -1,
     106,    -1,   107,    -1,   199,    -1,   200,    -1,   201,    -1,
     299,    -1,   300,    -1,   437,    -1,   579,    -1,  1137,    -1,
     176,    -1,   108,    -1,   567,    -1,   202,    -1,   301,    -1,
     308,    -1,   388,    -1,   438,    -1,   297,    -1,   580,    -1,
     103,    -1,   515,    -1,   100,    -1,   512,    -1,    -1,    18,
      -1,   146,    -1,    -1,  1139,  1324,    -1,    -1,    12,    -1,
      -1,    -1,   569,  1143,  1040,    -1,    -1,    -1,   193,  1145,
    1040,    -1,   150,  1050,    -1,    -1,    -1,    -1,   188,    46,
    1148,  1149,  1150,    -1,  1149,   593,  1312,  1158,    -1,  1312,
    1158,    -1,    -1,   571,    90,    -1,   571,   429,    -1,   349,
      46,  1152,    -1,  1152,   593,  1153,    -1,  1153,    -1,  1314,
    1158,    -1,    -1,  1155,    -1,    -1,   349,    46,  1156,  1157,
      -1,  1157,   593,  1312,  1158,    -1,  1312,  1158,    -1,    -1,
      19,    -1,   118,    -1,    -1,  1161,    -1,    -1,  1161,    -1,
     247,  1162,    -1,  1163,    -1,  1163,   593,  1163,    -1,  1163,
     338,  1163,    -1,  1306,    -1,   530,    -1,   261,    -1,   335,
      -1,    -1,   247,  1163,    -1,   335,    -1,   195,    -1,   261,
      -1,   530,    -1,   110,    -1,   168,    -1,   335,    -1,   195,
      -1,   261,    -1,   530,    -1,  1169,    -1,   335,    -1,   530,
      -1,   261,    -1,   110,    -1,   168,    -1,   335,    -1,   530,
      -1,   261,    -1,  1169,    -1,  1170,    -1,   110,    -1,   168,
      -1,    -1,    -1,   382,  1324,  1172,   591,  1173,   592,    -1,
      -1,  1174,    -1,  1174,   593,  1175,    -1,  1175,    -1,  1035,
    1040,  1036,    -1,    -1,  1177,  1178,    -1,  1178,   593,  1179,
      -1,  1179,    -1,   598,  1326,    -1,  1326,    -1,    -1,   221,
    1181,  1182,    -1,    -1,    -1,   353,  1323,  1183,   884,  1184,
    1293,  1296,    -1,   132,  1323,    -1,  1176,    -1,    -1,   129,
    1186,  1090,    -1,   130,  1194,  1349,  1193,  1189,   965,    -1,
      -1,   130,   210,  1324,   340,  1317,  1188,    -1,   130,    96,
    1193,  1324,    -1,   130,   180,  1193,  1324,   599,  1324,    -1,
     130,   180,  1193,  1324,    -1,   130,   382,  1193,   647,    -1,
     130,   549,   646,  1379,    -1,   130,   564,  1193,  1189,   965,
      -1,   130,   152,  1193,   647,    -1,   130,   523,  1193,   647,
      -1,   130,   501,   761,   772,   773,    -1,   130,   257,   188,
     762,   772,   773,    -1,   130,   446,  1193,  1326,    -1,  1190,
      -1,  1189,   593,  1190,    -1,  1317,    -1,  1192,    -1,  1191,
     593,  1192,    -1,  1318,    -1,    -1,   206,   155,    -1,    -1,
     505,    -1,    -1,    -1,   217,  1196,  1201,   964,  1203,  1197,
    1205,  1221,    -1,    -1,    -1,   415,  1199,  1202,  1203,  1200,
    1205,    -1,    -1,   264,    -1,   115,    -1,   196,    -1,  1230,
      -1,   115,    -1,   221,  1204,    -1,  1204,    -1,  1190,    -1,
    1208,    -1,   591,   592,  1208,    -1,   591,  1207,   592,  1208,
      -1,    -1,   448,  1206,  1212,    -1,  1207,   593,  1310,    -1,
    1310,    -1,   556,  1211,    -1,   557,  1211,    -1,    -1,   826,
    1209,  1399,    -1,    -1,   591,   826,   592,  1210,  1402,    -1,
    1211,   593,  1216,    -1,  1216,    -1,  1212,   593,  1213,    -1,
    1213,    -1,  1314,  1214,  1220,    -1,   146,    -1,   449,    -1,
      -1,  1214,    -1,    -1,   591,  1217,  1218,   592,    -1,    -1,
    1219,    -1,  1219,   593,  1220,    -1,  1220,    -1,  1040,    -1,
     113,    -1,    -1,    -1,   340,   133,  1222,   234,   546,  1228,
      -1,    -1,    -1,   546,  1224,  1230,   964,  1099,   448,  1226,
    1225,  1142,  1154,  1164,    -1,  1226,   593,  1227,    -1,  1227,
      -1,  1314,  1214,  1220,    -1,  1228,   593,  1229,    -1,  1229,
      -1,  1314,  1214,  1220,    -1,    -1,   264,    -1,    -1,   117,
    1232,  1240,  1233,    -1,    -1,   177,  1317,  1234,  1142,  1154,
    1164,    -1,    -1,  1237,  1235,   177,  1099,  1142,    -1,    -1,
     177,  1191,  1236,   552,  1099,  1142,    -1,  1238,    -1,  1237,
     593,  1238,    -1,  1324,  1239,  1140,    -1,  1324,   599,  1324,
    1239,  1140,    -1,    -1,   599,   586,    -1,    -1,  1241,  1240,
      -1,   390,    -1,   264,    -1,   207,    -1,   526,  1243,  1190,
      -1,    -1,   503,    -1,    -1,  1245,    -1,  1246,    -1,  1245,
     593,  1246,    -1,    87,    -1,   295,    -1,    41,   225,    -1,
      82,   498,    -1,   358,   163,    -1,   226,    -1,   497,    -1,
     463,    -1,    12,    -1,    -1,   174,   389,   335,    -1,    -1,
     453,  1249,  1250,    -1,    97,  1260,    -1,  1256,   500,  1255,
    1260,    -1,  1256,   522,  1255,  1260,    -1,   151,  1255,  1260,
      -1,   503,   482,  1255,  1260,    -1,   343,   500,  1255,  1260,
      -1,  1256,   370,    -1,   369,    -1,   144,   844,  1252,    -1,
     144,    12,  1252,    -1,  1256,    68,  1257,  1317,  1255,  1260,
      -1,   322,   280,   174,   457,   571,   268,   146,  1321,    16,
     269,   146,  1167,    16,   272,   146,  1165,    -1,  1253,   258,
      -1,   457,   198,    -1,    -1,    34,   151,  1258,  1259,  1251,
    1159,    -1,   907,  1257,  1317,  1255,  1142,    -1,    69,   527,
      -1,   503,   527,    -1,  1254,   143,    -1,    23,    -1,    84,
      -1,   381,    -1,    86,   591,   586,   592,   566,    -1,    86,
     591,   586,   592,   148,    -1,   566,  1159,    -1,   148,  1159,
      -1,   386,    -1,   385,  1244,  1247,  1159,    -1,  1338,   482,
    1260,    -1,   214,   482,    -1,   312,   482,    -1,  1256,   384,
      -1,  1338,   560,  1260,    -1,   881,  1260,    -1,    67,  1260,
      -1,   187,    -1,   187,   174,  1327,    -1,    88,    96,   836,
    1324,    -1,    88,   503,  1317,    -1,    88,   564,  1317,    -1,
     280,   482,    -1,   457,   482,    -1,    88,   382,   647,    -1,
      88,   180,   647,    -1,    88,   523,   647,    -1,   382,   482,
    1260,    -1,   180,   482,  1260,    -1,   382,    65,   647,    -1,
     180,    65,   647,    -1,    88,   152,   647,    -1,   482,    -1,
     312,    -1,   258,    -1,   280,    -1,    33,    -1,    -1,   486,
      -1,    -1,  1257,  1324,    -1,    -1,   178,    -1,   177,    -1,
     224,    -1,    -1,   224,  1321,    -1,    -1,   177,  1167,    -1,
      -1,   246,  1321,    -1,   569,  1040,    -1,    -1,  1264,  1317,
    1262,  1266,    -1,    -1,  1264,  1265,  1263,  1019,    -1,   118,
      -1,   119,    -1,    -1,   158,    -1,   363,    -1,    -1,  1305,
      -1,  1324,    -1,    -1,   170,  1001,  1268,  1269,    -1,  1269,
     593,  1270,    -1,  1270,    -1,    -1,  1349,  1271,  1272,    -1,
     500,   571,   394,   256,    -1,   389,    48,    -1,   198,    -1,
     381,    -1,   258,    -1,   482,    -1,   457,    -1,   280,    -1,
     120,    -1,   419,    -1,    -1,  1189,    -1,    -1,   418,  1274,
    1275,    -1,  1275,   593,  1276,    -1,  1276,    -1,   457,    -1,
     280,    -1,   389,    48,    -1,    -1,   387,  1278,  1279,    -1,
    1253,   258,  1280,    -1,   519,  1321,    -1,    29,  1040,    -1,
     235,  1282,  1040,    -1,    -1,    78,    -1,   389,    -1,   551,
    1324,    -1,    -1,   252,    99,  1285,  1286,    -1,   252,   503,
    1317,   177,   280,    -1,    -1,    -1,    -1,  1291,  1290,   211,
    1323,  1287,  1292,   221,   503,  1317,  1288,   884,  1289,  1293,
    1296,  1299,  1300,  1303,    -1,   177,   280,    -1,    -1,   253,
      -1,    -1,    76,    -1,   264,    -1,    -1,   415,    -1,   207,
      -1,    -1,    68,  1294,    -1,  1294,  1295,    -1,  1295,    -1,
     507,    46,  1305,    -1,   347,   139,    46,  1305,    -1,   139,
      46,  1305,    -1,   149,    46,  1305,    -1,    -1,   249,  1297,
      -1,  1297,  1298,    -1,  1298,    -1,   507,    46,  1305,    -1,
     479,    46,  1305,    -1,    -1,   207,   335,   249,    -1,    -1,
     591,  1301,   592,    -1,   591,   592,    -1,  1301,   593,  1302,
      -1,  1302,    -1,  1314,    -1,   598,  1326,    -1,    -1,   448,
    1228,    -1,   508,    -1,   317,    -1,   534,   508,    -1,  1304,
    1322,    -1,  1322,    -1,   195,    -1,    35,    -1,   359,    -1,
    1308,    -1,   585,  1309,    -1,   584,  1309,    -1,  1304,    -1,
    1309,    -1,   333,    -1,   161,    -1,   525,    -1,   195,    -1,
      35,    -1,   534,   195,    -1,   534,    35,    -1,   103,  1304,
      -1,   515,  1304,    -1,   512,  1304,    -1,   335,    -1,   261,
      -1,   530,    -1,   110,    -1,   168,    -1,  1314,    -1,  1311,
      -1,  1324,   599,   586,    -1,  1324,   599,  1324,   599,   586,
      -1,  1040,    -1,  1324,    -1,  1315,    -1,  1324,    -1,  1315,
      -1,  1324,   599,  1324,    -1,   599,  1324,   599,  1324,    -1,
    1324,   599,  1324,   599,  1324,    -1,  1324,    -1,  1324,   599,
    1324,   599,  1324,    -1,  1324,   599,  1324,    -1,   599,  1324,
      -1,  1324,    -1,  1324,   599,  1324,    -1,   599,  1324,    -1,
    1324,  1239,    -1,  1324,   599,  1324,  1239,    -1,  1324,    -1,
     203,    -1,   205,    -1,   508,    -1,   508,    -1,   508,    -1,
    1320,    -1,  1328,    -1,  1320,    -1,  1329,    -1,  1324,    -1,
    1321,    -1,   245,    -1,  1326,    -1,  1326,   598,  1326,    -1,
      93,  1039,    -1,  1329,    -1,    20,    -1,    28,    -1,    30,
      -1,    47,    -1,    48,    -1,    57,    -1,    59,    -1,    63,
      -1,    70,    -1,    72,    -1,    81,    -1,   109,    -1,   129,
      -1,   140,    -1,   154,    -1,   170,    -1,   191,    -1,   194,
      -1,   197,    -1,   219,    -1,   236,    -1,   329,    -1,   343,
      -1,   345,    -1,   356,    -1,   360,    -1,   364,    -1,   373,
      -1,   377,    -1,   409,    -1,   412,    -1,   418,    -1,   421,
      -1,   428,    -1,   435,    -1,   439,    -1,   446,    -1,   455,
      -1,   460,    -1,   457,    -1,   461,    -1,   481,    -1,   485,
      -1,   526,    -1,   538,    -1,   539,    -1,   574,    -1,   577,
      -1,   547,    -1,     5,    -1,     7,    -1,     8,    -1,     9,
      -1,    10,    -1,    11,    -1,    17,    -1,    22,    -1,    23,
      -1,    25,    -1,    24,    -1,    26,    -1,    27,    -1,    34,
      -1,    38,    -1,    41,    -1,    43,    -1,    42,    -1,    45,
      -1,    51,    -1,    54,    -1,    56,    -1,    61,    -1,    62,
      -1,    64,    -1,    65,    -1,    67,    -1,    68,    -1,    71,
      -1,    73,    -1,    74,    -1,    75,    -1,    76,    -1,    78,
      -1,    79,    -1,    82,    -1,    84,    -1,    87,    -1,    90,
      -1,    99,    -1,    98,    -1,   100,    -1,   103,    -1,   108,
      -1,   114,    -1,   116,    -1,   120,    -1,   122,    -1,   123,
      -1,   124,    -1,   125,    -1,   132,    -1,   133,    -1,   134,
      -1,   141,    -1,   145,    -1,   144,    -1,   143,    -1,   148,
      -1,   150,    -1,   152,    -1,   151,    -1,   153,    -1,   157,
      -1,   158,    -1,   159,    -1,   163,    -1,   162,    -1,   175,
      -1,   138,    -1,   178,    -1,   165,    -1,   166,    -1,   167,
      -1,   176,    -1,   183,    -1,   182,    -1,   184,    -1,   187,
      -1,   185,    -1,   192,    -1,   198,    -1,   202,    -1,   204,
      -1,   223,    -1,   208,    -1,   209,    -1,   212,    -1,   225,
      -1,   226,    -1,   228,    -1,   229,    -1,   214,    -1,   218,
      -1,   233,    -1,   237,    -1,   240,    -1,   243,    -1,   244,
      -1,   250,    -1,   251,    -1,   253,    -1,   255,    -1,   257,
      -1,   258,    -1,   285,    -1,   280,    -1,   267,    -1,   271,
      -1,   268,    -1,   269,    -1,   281,    -1,   270,    -1,   272,
      -1,   266,    -1,   278,    -1,   274,    -1,   273,    -1,   275,
      -1,   276,    -1,   277,    -1,   283,    -1,   284,    -1,   286,
      -1,   288,    -1,   289,    -1,   290,    -1,   294,    -1,   295,
      -1,   296,    -1,   297,    -1,   298,    -1,   301,    -1,   302,
      -1,   306,    -1,   304,    -1,   308,    -1,   309,    -1,   310,
      -1,   311,    -1,   312,    -1,   314,    -1,   313,    -1,   315,
      -1,   318,    -1,   319,    -1,   323,    -1,   322,    -1,   330,
      -1,   324,    -1,   325,    -1,   337,    -1,   338,    -1,   339,
      -1,   341,    -1,   342,    -1,   357,    -1,   358,    -1,   361,
      -1,   362,    -1,   363,    -1,   365,    -1,   368,    -1,   370,
      -1,   369,    -1,   371,    -1,   372,    -1,   378,    -1,   379,
      -1,   381,    -1,   383,    -1,   384,    -1,   385,    -1,   386,
      -1,   388,    -1,   389,    -1,   390,    -1,   393,    -1,   397,
      -1,   398,    -1,   400,    -1,   399,    -1,   401,    -1,   404,
      -1,   405,    -1,   406,    -1,   408,    -1,   411,    -1,   413,
      -1,   416,    -1,   419,    -1,   423,    -1,   424,    -1,   429,
      -1,   430,    -1,   431,    -1,   432,    -1,   433,    -1,   434,
      -1,   436,    -1,   438,    -1,   444,    -1,   443,    -1,   445,
      -1,   456,    -1,   450,    -1,   454,    -1,   459,    -1,   462,
      -1,   463,    -1,   471,    -1,   470,    -1,   473,    -1,   474,
      -1,   477,    -1,   480,    -1,   482,    -1,   486,    -1,   488,
      -1,   489,    -1,   490,    -1,   492,    -1,   491,    -1,   495,
      -1,   496,    -1,   497,    -1,   498,    -1,   500,    -1,   504,
      -1,   501,    -1,   505,    -1,   506,    -1,   509,    -1,   510,
      -1,   521,    -1,   522,    -1,   512,    -1,   513,    -1,   514,
      -1,   515,    -1,   527,    -1,   528,    -1,   529,    -1,   180,
      -1,   532,    -1,   533,    -1,   536,    -1,   535,    -1,   542,
      -1,   545,    -1,   549,    -1,   550,    -1,   560,    -1,   564,
      -1,   557,    -1,   566,    -1,   565,    -1,   567,    -1,   573,
      -1,   576,    -1,   580,    -1,    -1,   448,  1332,  1331,  1333,
      -1,    -1,   346,    -1,  1334,    -1,  1333,   593,  1334,    -1,
      -1,  1335,  1340,    -1,  1337,    -1,   185,    -1,   253,    -1,
     445,    -1,    -1,   341,    -1,    -1,   185,    -1,   253,    -1,
     445,    -1,    -1,   185,   599,    -1,   253,   599,    -1,   445,
     599,    -1,  1341,    -1,  1337,  1342,    -1,  1336,  1343,  1214,
    1346,    -1,  1336,   521,   228,   244,  1344,    -1,   598,  1326,
    1214,  1040,    -1,   598,   598,  1339,  1343,  1214,  1346,    -1,
     881,   886,    -1,   313,  1214,  1040,    -1,   313,   883,   888,
      -1,   365,  1214,  1345,    -1,   365,   174,  1327,  1214,  1345,
      -1,  1324,    -1,  1324,   599,  1324,    -1,   113,   599,  1324,
      -1,   394,   532,    -1,   394,    71,    -1,   413,   394,    -1,
     443,    -1,   508,    -1,   365,   591,   508,   592,    -1,   339,
     591,   508,   592,    -1,  1040,    -1,   113,    -1,   340,    -1,
      12,    -1,    33,    -1,    -1,   256,  1349,  1348,  1350,    -1,
     503,    -1,   500,    -1,  1351,    -1,  1350,   593,  1351,    -1,
    1317,  1140,  1352,    -1,   394,    -1,   575,    -1,   264,   575,
      -1,   394,   253,    -1,    -1,   543,  1354,  1349,    -1,   191,
    1317,   343,  1140,    -1,   191,  1319,    63,    -1,    -1,   191,
    1319,   394,  1356,  1357,  1142,  1160,    -1,  1358,    -1,  1324,
    1359,    -1,   166,    -1,   323,    -1,   166,    -1,   323,    -1,
     379,    -1,   237,    -1,    -1,  1361,  1360,   591,  1219,   592,
      -1,   146,    -1,   181,    -1,   238,    -1,   190,    -1,   265,
      -1,   426,   646,  1363,    -1,  1367,   340,  1366,  1378,   177,
    1380,    -1,  1367,   340,   180,  1378,   177,  1380,    -1,  1367,
     340,   382,  1378,   177,  1380,    -1,    12,  1368,   593,   186,
     346,   177,  1380,    -1,   186,   646,  1365,    -1,  1367,   340,
    1366,  1378,   519,  1380,  1385,  1386,    -1,  1367,   340,   180,
    1378,   519,  1380,  1385,  1386,    -1,  1367,   340,   382,  1378,
     519,  1380,  1385,  1386,    -1,    -1,   503,    -1,  1369,    -1,
      12,  1368,    -1,    -1,   381,    -1,  1370,    -1,  1369,   593,
    1370,    -1,    -1,   440,  1371,  1382,    -1,    -1,   217,  1372,
    1382,    -1,    -1,   546,  1373,  1382,    -1,    -1,   402,  1374,
    1382,    -1,   117,    -1,   548,    -1,   210,    -1,    13,    -1,
      88,    -1,   130,    -1,   154,    -1,   408,    -1,   454,    -1,
     383,    -1,   165,    -1,   186,   346,    -1,   453,    97,    -1,
     495,    -1,    88,   505,   500,    -1,   256,   500,    -1,   416,
     457,    -1,   416,    62,    -1,    88,   564,    -1,   453,   564,
      -1,    88,   430,    -1,    13,   430,    -1,    88,   549,    -1,
     152,    -1,   523,    -1,    -1,    16,    -1,  1377,  1375,  1376,
      -1,  1377,    -1,   490,   508,    -1,   229,   508,    -1,    61,
     508,    -1,   586,    -1,  1324,   599,   586,    -1,   586,   599,
     586,    -1,  1317,    -1,  1327,    -1,  1379,   593,  1327,    -1,
    1381,    -1,  1380,   593,  1381,    -1,  1327,   204,    46,   508,
      -1,  1327,   204,    46,   365,   508,    -1,  1327,    -1,    -1,
     591,  1383,   592,    -1,  1383,   593,  1384,    -1,  1384,    -1,
    1324,    -1,    -1,   417,  1376,    -1,   417,   478,    -1,   417,
     576,    -1,   417,   325,    -1,    -1,   571,  1387,    -1,  1387,
    1388,    -1,  1388,    -1,   186,   346,    -1,   284,  1165,    -1,
     288,  1165,    -1,   283,  1165,    -1,   289,  1165,    -1,    -1,
      30,  1390,  1391,    -1,    -1,   573,    -1,    -1,    16,   329,
      54,    -1,    16,    54,    -1,    -1,   407,    -1,   329,   407,
      -1,    -1,   435,    -1,    72,  1391,  1392,  1393,    -1,   428,
    1391,  1392,  1393,    -1,   428,  1391,   519,  1394,  1324,    -1,
     435,  1324,    -1,   407,   435,  1324,    -1,    -1,  1400,    -1,
      -1,   540,  1406,  1401,  1020,    -1,    -1,  1400,    -1,  1403,
      -1,    -1,  1404,  1405,    -1,  1155,  1159,    -1,  1161,    -1,
      -1,   126,    -1,    12,    -1,    -1,   440,  1409,  1022,  1407,
    1410,    -1,   591,  1409,  1021,  1407,  1410,   592,    -1,    -1,
      -1,  1416,  1412,    -1,  1415,  1413,    -1,  1417,  1414,  1421,
      -1,  1421,    -1,  1429,    -1,  1440,    -1,  1434,    -1,   633,
      -1,  1421,    -1,  1429,    -1,  1440,    -1,  1434,    -1,  1433,
      -1,   633,    -1,  1415,    -1,  1416,    -1,    -1,   114,   146,
    1327,    -1,  1418,    -1,  1418,  1419,    -1,  1419,    -1,   351,
     415,    -1,    11,   146,   533,    -1,    11,   146,   296,    -1,
      11,   146,   506,    -1,    -1,   476,   439,   114,    -1,   476,
     439,   223,    -1,    -1,  1420,   564,  1317,  1422,  1423,    18,
    1425,    -1,    -1,   591,  1424,   592,    -1,  1324,    -1,  1424,
     593,  1324,    -1,    -1,  1426,  1427,  1428,    -1,   440,  1022,
      -1,   591,  1021,   592,  1402,    -1,    -1,   571,    60,   346,
      -1,   571,    51,    60,   346,    -1,   571,   253,    60,   346,
      -1,    -1,    -1,    -1,   523,  1035,   647,   732,   733,   340,
    1035,  1430,  1317,   174,  1035,  1431,   135,   433,  1432,   682,
      -1,    10,  1035,   180,  1324,   424,   848,   461,  1321,    -1,
    1035,   180,  1324,   424,   848,   461,  1321,    -1,    -1,    -1,
      -1,    -1,    -1,  1035,   180,   647,   591,  1435,   658,   592,
    1436,   424,  1437,   859,  1438,   649,  1439,   682,    -1,    -1,
      -1,    -1,    -1,   382,  1035,   647,  1441,   591,  1442,   662,
     592,  1443,   649,  1444,   682,    -1,   577,  1447,  1446,  1448,
      -1,   577,   140,  1446,  1450,    -1,   577,   377,  1446,    -1,
     577,    72,  1446,  1449,    -1,   577,   428,  1446,    -1,   577,
     398,    -1,  1305,    -1,  1305,   593,  1305,    -1,  1305,   593,
    1305,   593,  1165,    -1,    30,    -1,   481,    -1,    -1,   231,
      -1,   423,    -1,    -1,   342,   368,    -1,    -1,    -1,   496,
    1451,  1452,    -1,    -1,   174,   298,    -1,   219,   370,  1324,
     461,  1321,    -1,   539,   370,  1324,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1559,  1559,  1572,  1571,  1596,  1603,  1605,  1609,  1610,
    1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
    1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,  1634,
    1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,
    1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,
    1665,  1669,  1679,  1680,  1684,  1694,  1701,  1712,  1711,  1722,
    1724,  1728,  1729,  1733,  1746,  1745,  1765,  1764,  1775,  1776,
    1780,  1784,  1788,  1792,  1796,  1800,  1805,  1809,  1813,  1817,
    1821,  1825,  1830,  1834,  1838,  1854,  1858,  1870,  1869,  1903,
    1902,  1914,  1912,  1925,  1923,  1935,  1934,  1947,  1946,  1954,
    1958,  1962,  1966,  1973,  1986,  1987,  1991,  1995,  1999,  2003,
    2007,  2011,  2015,  2023,  2022,  2054,  2053,  2060,  2067,  2068,
    2074,  2080,  2090,  2096,  2102,  2104,  2111,  2112,  2116,  2122,
    2131,  2132,  2140,  2140,  2198,  2199,  2200,  2201,  2202,  2203,
    2204,  2205,  2206,  2207,  2208,  2209,  2210,  2215,  2229,  2245,
    2264,  2265,  2269,  2270,  2275,  2277,  2279,  2281,  2283,  2285,
    2287,  2293,  2294,  2295,  2299,  2303,  2311,  2310,  2323,  2325,
    2328,  2330,  2334,  2338,  2345,  2347,  2351,  2352,  2357,  2376,
    2402,  2404,  2408,  2409,  2413,  2439,  2440,  2441,  2442,  2446,
    2447,  2451,  2452,  2457,  2460,  2487,  2486,  2551,  2567,  2566,
    2620,  2646,  2646,  2669,  2670,  2675,  2677,  2682,  2705,  2713,
    2730,  2731,  2735,  2739,  2748,  2755,  2762,  2772,  2787,  2805,
    2806,  2810,  2811,  2812,  2813,  2814,  2815,  2816,  2817,  2818,
    2819,  2820,  2821,  2822,  2827,  2826,  2833,  2833,  2890,  2889,
    2918,  2918,  2932,  2985,  3028,  3049,  3048,  3070,  3089,  3091,
    3092,  3096,  3116,  3139,  3141,  3157,  3139,  3176,  3178,  3179,
    3183,  3184,  3189,  3195,  3188,  3216,  3215,  3231,  3232,  3236,
    3237,  3242,  3246,  3241,  3267,  3271,  3266,  3290,  3300,  3305,
    3304,  3340,  3341,  3346,  3345,  3378,  3378,  3393,  3392,  3428,
    3440,  3442,  3439,  3469,  3468,  3489,  3491,  3496,  3498,  3500,
    3517,  3522,  3528,  3535,  3536,  3544,  3550,  3559,  3565,  3571,
    3572,  3576,  3576,  3581,  3582,  3583,  3587,  3588,  3589,  3593,
    3597,  3598,  3599,  3603,  3604,  3605,  3606,  3607,  3608,  3609,
    3610,  3614,  3618,  3619,  3620,  3624,  3625,  3626,  3627,  3628,
    3632,  3636,  3637,  3638,  3642,  3643,  3644,  3645,  3646,  3647,
    3648,  3652,  3656,  3657,  3658,  3662,  3663,  3664,  3669,  3677,
    3685,  3693,  3705,  3717,  3722,  3727,  3735,  3743,  3751,  3759,
    3767,  3775,  3783,  3796,  3809,  3822,  3824,  3828,  3833,  3846,
    3847,  3898,  3899,  3902,  3916,  3933,  3938,  3936,  3946,  3948,
    3947,  3954,  3953,  3986,  3987,  3992,  3991,  4024,  4023,  4040,
    4044,  4051,  4050,  4054,  4053,  4057,  4056,  4062,  4063,  4068,
    4069,  4073,  4074,  4078,  4089,  4104,  4120,  4121,  4137,  4139,
    4138,  4143,  4141,  4152,  4153,  4157,  4168,  4184,  4185,  4201,
    4202,  4225,  4226,  4231,  4230,  4255,  4266,  4286,  4301,  4319,
    4331,  4347,  4348,  4352,  4362,  4363,  4367,  4384,  4443,  4455,
    4482,  4483,  4488,  4487,  4525,  4530,  4531,  4535,  4536,  4540,
    4542,  4548,  4550,  4552,  4554,  4556,  4558,  4568,  4597,  4567,
    4611,  4612,  4616,  4617,  4621,  4622,  4626,  4627,  4631,  4632,
    4636,  4637,  4641,  4645,  4646,  4649,  4651,  4655,  4656,  4660,
    4661,  4662,  4666,  4671,  4678,  4683,  4688,  4693,  4698,  4703,
    4708,  4723,  4729,  4734,  4739,  4744,  4749,  4762,  4763,  4764,
    4769,  4774,  4779,  4781,  4783,  4785,  4791,  4799,  4817,  4834,
    4857,  4871,  4872,  4873,  4874,  4875,  4876,  4880,  4881,  4882,
    4886,  4887,  4891,  4892,  4893,  4894,  4898,  4899,  4903,  4904,
    4908,  4909,  4916,  4921,  4927,  4933,  4939,  4959,  4963,  4969,
    4971,  4975,  4979,  4980,  4984,  4989,  4988,  5011,  5012,  5013,
    5014,  5019,  5023,  5028,  5033,  5037,  5042,  5047,  5053,  5058,
    5064,  5068,  5073,  5078,  5096,  5098,  5100,  5113,  5115,  5120,
    5125,  5137,  5142,  5147,  5152,  5154,  5156,  5158,  5160,  5162,
    5164,  5166,  5169,  5168,  5173,  5172,  5176,  5178,  5187,  5188,
    5189,  5194,  5195,  5196,  5197,  5198,  5202,  5206,  5207,  5211,
    5212,  5216,  5217,  5218,  5219,  5220,  5224,  5225,  5226,  5227,
    5228,  5232,  5237,  5239,  5245,  5246,  5248,  5253,  5262,  5263,
    5267,  5268,  5272,  5273,  5274,  5278,  5279,  5280,  5281,  5284,
    5285,  5288,  5289,  5293,  5294,  5298,  5299,  5303,  5304,  5305,
    5306,  5313,  5314,  5320,  5326,  5332,  5338,  5339,  5355,  5361,
    5366,  5367,  5371,  5379,  5383,  5384,  5388,  5389,  5393,  5402,
    5406,  5407,  5411,  5422,  5423,  5427,  5428,  5432,  5433,  5437,
    5438,  5439,  5440,  5449,  5450,  5454,  5455,  5459,  5460,  5461,
    5470,  5473,  5475,  5480,  5479,  5492,  5493,  5497,  5504,  5514,
    5515,  5519,  5520,  5524,  5525,  5526,  5527,  5528,  5532,  5533,
    5534,  5535,  5536,  5540,  5544,  5545,  5549,  5550,  5554,  5555,
    5559,  5560,  5561,  5565,  5566,  5570,  5574,  5587,  5599,  5600,
    5604,  5605,  5609,  5610,  5614,  5615,  5619,  5620,  5624,  5625,
    5629,  5630,  5634,  5635,  5639,  5644,  5645,  5649,  5653,  5654,
    5667,  5668,  5669,  5673,  5674,  5678,  5684,  5698,  5699,  5703,
    5704,  5708,  5709,  5717,  5716,  5742,  5741,  5755,  5767,  5766,
    5785,  5784,  5803,  5802,  5821,  5815,  5835,  5834,  5867,  5872,
    5877,  5882,  5887,  5897,  5898,  5899,  5900,  5904,  5905,  5917,
    5918,  5922,  5923,  5926,  5928,  5929,  5930,  5932,  5934,  5935,
    5944,  5945,  5949,  5958,  5956,  5966,  5976,  5975,  5985,  5983,
    5993,  6000,  6004,  6011,  6015,  6020,  6019,  6035,  6037,  6042,
    6051,  6050,  6066,  6070,  6069,  6081,  6082,  6086,  6101,  6102,
    6106,  6115,  6116,  6120,  6125,  6124,  6132,  6141,  6131,  6153,
    6162,  6166,  6175,  6184,  6190,  6196,  6205,  6214,  6233,  6254,
    6259,  6263,  6271,  6272,  6276,  6277,  6281,  6282,  6283,  6287,
    6288,  6289,  6293,  6294,  6295,  6296,  6305,  6304,  6315,  6323,
    6322,  6332,  6341,  6350,  6351,  6358,  6358,  6364,  6365,  6369,
    6370,  6371,  6375,  6376,  6392,  6393,  6398,  6397,  6409,  6408,
    6420,  6419,  6429,  6430,  6431,  6436,  6435,  6448,  6449,  6453,
    6454,  6458,  6459,  6460,  6465,  6464,  6477,  6486,  6485,  6503,
    6504,  6508,  6509,  6513,  6514,  6515,  6516,  6517,  6518,  6523,
    6522,  6535,  6536,  6537,  6542,  6541,  6547,  6554,  6559,  6567,
    6568,  6572,  6585,  6594,  6595,  6599,  6608,  6609,  6614,  6613,
    6623,  6624,  6628,  6637,  6637,  6648,  6649,  6654,  6655,  6664,
    6673,  6674,  6678,  6708,  6713,  6712,  6732,  6740,  6732,  6747,
    6748,  6749,  6750,  6751,  6755,  6762,  6769,  6771,  6782,  6783,
    6787,  6788,  6795,  6796,  6797,  6798,  6804,  6810,  6816,  6820,
    6834,  6837,  6839,  6847,  6858,  6859,  6860,  6875,  6901,  6907,
    6913,  6914,  6918,  6919,  6920,  6921,  6922,  6926,  6927,  6932,
    6983,  6990,  7033,  7039,  7045,  7051,  7057,  7063,  7069,  7075,
    7079,  7085,  7091,  7097,  7103,  7109,  7113,  7119,  7129,  7135,
    7143,  7149,  7159,  7165,  7174,  7184,  7190,  7200,  7206,  7215,
    7219,  7225,  7231,  7237,  7243,  7249,  7255,  7261,  7267,  7273,
    7279,  7285,  7291,  7297,  7303,  7307,  7308,  7312,  7313,  7317,
    7318,  7322,  7323,  7327,  7328,  7329,  7330,  7331,  7332,  7336,
    7337,  7341,  7342,  7343,  7344,  7345,  7346,  7347,  7359,  7360,
    7361,  7362,  7363,  7369,  7373,  7379,  7385,  7391,  7397,  7399,
    7406,  7413,  7419,  7421,  7430,  7437,  7445,  7451,  7458,  7464,
    7478,  7485,  7501,  7507,  7513,  7521,  7527,  7533,  7539,  7545,
    7560,  7572,  7578,  7584,  7590,  7596,  7602,  7608,  7614,  7620,
    7626,  7632,  7638,  7644,  7650,  7656,  7662,  7668,  7676,  7697,
    7704,  7710,  7717,  7724,  7731,  7738,  7745,  7751,  7757,  7764,
    7771,  7777,  7784,  7790,  7796,  7802,  7808,  7814,  7832,  7842,
    7848,  7854,  7861,  7868,  7883,  7889,  7895,  7901,  7907,  7914,
    7920,  7926,  7932,  7938,  7950,  7956,  7962,  7968,  7974,  7986,
    7992,  8008,  8014,  8021,  8028,  8035,  8042,  8049,  8053,  8066,
    8091,  8127,  8135,  8149,  8157,  8171,  8179,  8187,  8215,  8223,
    8237,  8245,  8259,  8267,  8275,  8283,  8292,  8304,  8312,  8323,
    8324,  8325,  8328,  8329,  8332,  8333,  8336,  8364,  8365,  8369,
    8370,  8375,  8396,  8402,  8416,  8417,  8418,  8422,  8423,  8427,
    8442,  8455,  8456,  8460,  8465,  8470,  8476,  8486,  8487,  8504,
    8577,  8619,  8621,  8626,  8627,  8631,  8632,  8636,  8637,  8641,
    8648,  8656,  8682,  8688,  8694,  8700,  8706,  8712,  8721,  8742,
    8749,  8760,  8766,  8772,  8778,  8784,  8790,  8796,  8802,  8808,
    8815,  8814,  8835,  8834,  8849,  8859,  8867,  8883,  8884,  8889,
    8894,  8897,  8900,  8899,  8916,  8918,  8924,  8923,  8940,  8942,
    8944,  8946,  8948,  8950,  8952,  8954,  8956,  8958,  8960,  8965,
    8966,  8970,  8977,  8986,  8985,  9002,  9003,  9007,  9014,  9022,
    9023,  9027,  9028,  9032,  9040,  9050,  9051,  9060,  9071,  9072,
    9077,  9078,  9098,  9100,  9104,  9102,  9119,  9117,  9135,  9133,
    9140,  9149,  9147,  9165,  9164,  9174,  9185,  9183,  9202,  9201,
    9212,  9223,  9224,  9225,  9230,  9230,  9243,  9265,  9318,  9317,
    9340,  9357,  9340,  9364,  9368,  9394,  9395,  9400,  9404,  9405,
    9406,  9410,  9411,  9416,  9415,  9421,  9420,  9428,  9429,  9432,
    9434,  9434,  9438,  9438,  9443,  9444,  9448,  9450,  9455,  9456,
    9460,  9471,  9484,  9485,  9486,  9487,  9488,  9489,  9490,  9491,
    9492,  9493,  9494,  9495,  9499,  9500,  9519,  9520,  9521,  9522,
    9523,  9524,  9525,  9526,  9527,  9531,  9532,  9533,  9534,  9537,
    9539,  9540,  9544,  9545,  9553,  9555,  9559,  9561,  9560,  9574,
    9577,  9576,  9591,  9597,  9612,  9615,  9614,  9622,  9624,  9629,
    9630,  9643,  9661,  9665,  9666,  9670,  9683,  9685,  9690,  9689,
    9724,  9726,  9731,  9732,  9733,  9738,  9744,  9748,  9749,  9753,
    9757,  9764,  9771,  9781,  9785,  9791,  9797,  9807,  9811,  9820,
    9821,  9822,  9823,  9824,  9825,  9829,  9830,  9831,  9832,  9833,
    9837,  9838,  9839,  9840,  9841,  9845,  9846,  9847,  9848,  9852,
    9857,  9858,  9861,  9864,  9863,  9894,  9895,  9899,  9900,  9904,
    9916,  9916,  9927,  9928,  9932,  9951,  9984,  9983,  9996, 10004,
    9995, 10006, 10018, 10030, 10029, 10046, 10053, 10053, 10067, 10074,
   10097, 10118, 10130, 10134, 10140, 10146, 10153, 10158, 10163, 10173,
   10174, 10178, 10186, 10187, 10191, 10201, 10202, 10206, 10207, 10215,
   10225, 10214, 10235, 10242, 10234, 10252, 10264, 10265, 10266, 10270,
   10271, 10275, 10276, 10280, 10289, 10290, 10291, 10293, 10292, 10303,
   10304, 10308, 10309, 10311, 10310, 10314, 10313, 10319, 10320, 10324,
   10325, 10329, 10339, 10340, 10344, 10345, 10350, 10349, 10363, 10364,
   10368, 10373, 10381, 10382, 10390, 10392, 10392, 10400, 10409, 10399,
   10431, 10432, 10436, 10444, 10445, 10449, 10459, 10460, 10467, 10466,
   10480, 10479, 10488, 10487, 10495, 10494, 10504, 10505, 10509, 10521,
   10536, 10537, 10541, 10542, 10546, 10547, 10548, 10552, 10562, 10564,
   10567, 10569, 10572, 10573, 10576, 10580, 10584, 10588, 10592, 10596,
   10600, 10604, 10608, 10616, 10619, 10629, 10628, 10642, 10649, 10657,
   10665, 10673, 10681, 10689, 10697, 10704, 10706, 10708, 10717, 10730,
   10734, 10739, 10738, 10743, 10752, 10757, 10765, 10772, 10777, 10782,
   10787, 10789, 10791, 10793, 10795, 10797, 10804, 10812, 10824, 10836,
   10838, 10846, 10853, 10860, 10870, 10877, 10883, 10892, 10900, 10904,
   10908, 10915, 10922, 10928, 10935, 10942, 10952, 10962, 10970, 10972,
   10974, 10979, 10980, 10983, 10985, 10989, 10990, 10994, 10995, 10999,
   11000, 11004, 11005, 11009, 11010, 11013, 11015, 11022, 11033, 11032,
   11046, 11045, 11055, 11056, 11060, 11061, 11062, 11066, 11067, 11068,
   11083, 11082, 11094, 11095, 11100, 11099, 11102, 11104, 11106, 11108,
   11110, 11112, 11114, 11116, 11118, 11120, 11125, 11126, 11131, 11130,
   11140, 11141, 11145, 11146, 11147, 11152, 11151, 11162, 11166, 11170,
   11182, 11192, 11193, 11194, 11200, 11212, 11211, 11224, 11242, 11253,
   11263, 11241, 11267, 11277, 11278, 11282, 11283, 11295, 11299, 11300,
   11301, 11304, 11306, 11310, 11311, 11315, 11320, 11327, 11332, 11339,
   11341, 11345, 11346, 11350, 11355, 11362, 11364, 11372, 11373, 11374,
   11378, 11380, 11385, 11386, 11395, 11396, 11402, 11426, 11438, 11449,
   11468, 11476, 11488, 11503, 11524, 11525, 11526, 11534, 11535, 11536,
   11543, 11549, 11555, 11561, 11567, 11596, 11624, 11625, 11626, 11630,
   11640, 11650, 11656, 11665, 11680, 11681, 11685, 11694, 11710, 11714,
   11761, 11765, 11783, 11787, 11866, 11891, 11922, 11923, 11939, 11949,
   11953, 11959, 11965, 11975, 11981, 11990, 12000, 12001, 12030, 12046,
   12062, 12079, 12080, 12091, 12092, 12103, 12104, 12105, 12109, 12123,
   12142, 12157, 12158, 12159, 12160, 12161, 12162, 12163, 12164, 12165,
   12166, 12167, 12168, 12169, 12170, 12171, 12172, 12173, 12174, 12175,
   12176, 12177, 12178, 12179, 12180, 12181, 12182, 12183, 12184, 12185,
   12186, 12187, 12188, 12189, 12190, 12191, 12192, 12193, 12194, 12195,
   12196, 12197, 12198, 12199, 12200, 12201, 12202, 12203, 12204, 12205,
   12206, 12216, 12217, 12218, 12219, 12220, 12221, 12222, 12223, 12224,
   12225, 12226, 12227, 12228, 12229, 12230, 12231, 12232, 12233, 12234,
   12235, 12236, 12237, 12238, 12239, 12240, 12241, 12242, 12243, 12244,
   12245, 12246, 12247, 12248, 12249, 12250, 12251, 12252, 12253, 12254,
   12255, 12256, 12257, 12258, 12259, 12260, 12261, 12262, 12263, 12264,
   12265, 12266, 12267, 12268, 12269, 12270, 12271, 12272, 12273, 12274,
   12275, 12276, 12277, 12278, 12279, 12280, 12281, 12282, 12283, 12284,
   12285, 12286, 12287, 12288, 12289, 12290, 12291, 12292, 12293, 12294,
   12295, 12296, 12297, 12298, 12299, 12300, 12301, 12302, 12303, 12304,
   12305, 12306, 12307, 12308, 12309, 12310, 12311, 12312, 12313, 12314,
   12315, 12316, 12317, 12318, 12319, 12320, 12321, 12322, 12323, 12324,
   12325, 12326, 12327, 12328, 12329, 12330, 12331, 12332, 12333, 12334,
   12335, 12336, 12337, 12338, 12339, 12340, 12341, 12342, 12343, 12344,
   12345, 12346, 12347, 12348, 12349, 12350, 12351, 12352, 12353, 12354,
   12355, 12356, 12357, 12358, 12359, 12360, 12361, 12362, 12363, 12364,
   12365, 12366, 12367, 12368, 12369, 12370, 12371, 12372, 12373, 12374,
   12375, 12376, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384,
   12385, 12386, 12387, 12388, 12389, 12390, 12391, 12392, 12393, 12394,
   12395, 12396, 12397, 12398, 12399, 12400, 12401, 12402, 12403, 12404,
   12405, 12406, 12407, 12408, 12409, 12410, 12411, 12412, 12413, 12414,
   12415, 12416, 12417, 12418, 12419, 12420, 12421, 12422, 12423, 12424,
   12425, 12426, 12427, 12428, 12429, 12430, 12431, 12432, 12433, 12434,
   12435, 12436, 12437, 12438, 12439, 12440, 12441, 12442, 12443, 12444,
   12445, 12446, 12447, 12448, 12449, 12450, 12451, 12452, 12453, 12454,
   12455, 12456, 12457, 12458, 12459, 12460, 12461, 12462, 12463, 12464,
   12465, 12466, 12467, 12468, 12469, 12470, 12471, 12472, 12473, 12474,
   12475, 12476, 12483, 12482, 12497, 12498, 12502, 12503, 12507, 12507,
   12589, 12590, 12591, 12592, 12596, 12597, 12601, 12602, 12603, 12604,
   12608, 12609, 12610, 12611, 12615, 12616, 12620, 12662, 12681, 12692,
   12705, 12719, 12734, 12753, 12780, 12793, 12820, 12863, 12877, 12878,
   12879, 12880, 12884, 12885, 12894, 12906, 12907, 12908, 12914, 12920,
   12932, 12931, 12947, 12948, 12952, 12953, 12957, 12969, 12970, 12971,
   12972, 12977, 12976, 12996, 13008, 13021, 13020, 13046, 13047, 13051,
   13052, 13056, 13057, 13058, 13059, 13061, 13060, 13073, 13074, 13075,
   13076, 13077, 13083, 13088, 13094, 13105, 13116, 13123, 13128, 13135,
   13147, 13161, 13163, 13167, 13168, 13175, 13177, 13181, 13182, 13187,
   13186, 13190, 13189, 13193, 13192, 13196, 13195, 13198, 13199, 13200,
   13201, 13202, 13203, 13204, 13205, 13206, 13207, 13208, 13209, 13210,
   13211, 13212, 13213, 13214, 13215, 13216, 13217, 13218, 13219, 13220,
   13221, 13222, 13226, 13227, 13231, 13232, 13236, 13246, 13256, 13269,
   13284, 13297, 13310, 13322, 13327, 13335, 13340, 13348, 13375, 13377,
   13383, 13387, 13391, 13392, 13396, 13423, 13425, 13429, 13433, 13437,
   13444, 13445, 13449, 13450, 13454, 13455, 13461, 13467, 13473, 13483,
   13482, 13492, 13493, 13498, 13499, 13500, 13505, 13506, 13507, 13511,
   13512, 13516, 13526, 13533, 13543, 13552, 13566, 13567, 13572, 13571,
   13612, 13613, 13614, 13618, 13618, 13642, 13643, 13647, 13648, 13649,
   13653, 13658, 13663, 13670, 13691, 13726, 13728, 13730, 13735, 13736,
   13737, 13738, 13739, 13743, 13744, 13745, 13746, 13747, 13748, 13758,
   13759, 13764, 13777, 13790, 13792, 13794, 13799, 13804, 13806, 13808,
   13814, 13815, 13817, 13823, 13822, 13836, 13837, 13841, 13846, 13854,
   13854, 13879, 13880, 13885, 13886, 13888, 13890, 13908, 13914, 13919,
   13901, 13980, 13998, 14023, 14055, 14059, 14067, 14090, 14019, 14155,
   14179, 14188, 14196, 14154, 14217, 14221, 14225, 14229, 14233, 14237,
   14244, 14251, 14258, 14268, 14269, 14273, 14274, 14275, 14279, 14280,
   14285, 14287, 14286, 14292, 14293, 14297, 14307
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CHAIN_SYM", "CHANGE",
  "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM",
  "CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM",
  "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM",
  "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_SYM",
  "CURRENT_USER", "CURSOR_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE",
  "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM",
  "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM",
  "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM",
  "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END",
  "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ",
  "EQUAL_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM",
  "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM",
  "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FOLLOWING_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM",
  "FRAC_SECOND_SYM", "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM",
  "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM",
  "HANDLER_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM", "IMPORT",
  "INDEXES", "INDEX_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INNOBASE_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT",
  "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM",
  "INVOKER_SYM", "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION",
  "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE",
  "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM", "MICROSECOND_SYM",
  "MIGRATE_SYM", "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM",
  "MINUTE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM", "MODIFIES_SYM",
  "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT",
  "MULTIPOLYGON", "MUTEX_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NTH_VALUE_SYM", "NULL_SYM", "NULLS_SYM", "NUM", "NUMERIC_SYM",
  "NVARCHAR_SYM", "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM",
  "ONE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY",
  "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE",
  "OUT_SYM", "OVER_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARTIAL", "PARTITIONING_SYM",
  "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD", "PERCENTILE_CONT_SYM",
  "PERCENTILE_DISC_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECEDING_SYM",
  "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM",
  "PRIVILEGES", "PROCEDURE", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK",
  "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM",
  "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP",
  "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM",
  "RELOAD", "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR",
  "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM",
  "RESET_SYM", "RESOURCES", "RESPECT_SYM", "RESTORE_SYM", "RESTRICT",
  "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM",
  "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM",
  "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET",
  "SET_VAR", "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SMALLINT", "SNAPSHOT_SYM",
  "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "INFINIDB_ORDERED_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIMESTAMP",
  "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB", "TINYINT",
  "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TRIGGERS_SYM",
  "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM",
  "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNBOUNDED_SYM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH",
  "WITHIN", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'",
  "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'",
  "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "@3",
  "change", "@4", "master_defs", "master_def", "master_file_def", "create",
  "@5", "@6", "@7", "@8", "@9", "@10", "server_def", "server_options_list",
  "server_option", "event_tail", "@11", "ev_schedule_time", "@12",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "@13",
  "ev_sql_stmt_inner", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "@14",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "@15", "@16", "sp_cursor_stmt",
  "@17", "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "opt_value", "sp_hcond", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "@18", "sp_proc_stmt_statement",
  "@19", "sp_proc_stmt_return", "@20", "sp_proc_stmt_unlabeled", "@21",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "@22", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "@23", "@24", "@25", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "@26", "@27",
  "searched_case_stmt", "@28", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "@29", "@30",
  "searched_when_clause", "@31", "@32", "else_clause_opt",
  "sp_labeled_control", "@33", "sp_opt_label", "sp_labeled_block", "@34",
  "sp_unlabeled_block", "@35", "sp_block_content", "@36",
  "sp_unlabeled_control", "@37", "@38", "@39", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "@41", "create3", "@42", "@43", "opt_partitioning",
  "partitioning", "@44", "partition_entry", "@45", "partition",
  "part_type_def", "@46", "@47", "@48", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_func", "sub_part_func",
  "opt_no_parts", "opt_sub_part", "@49", "@50", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_no_subparts", "part_defs",
  "part_def_list", "part_definition", "@51", "part_name",
  "opt_part_values", "part_func_max", "max_value_sym", "part_range_func",
  "part_list_func", "part_list_item", "part_bit_expr", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "@52", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "@53", "@54", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "field_list", "field_list_item", "column_def", "key_def",
  "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "@55", "type", "@56", "@57", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "float_options", "precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "opt_binary", "opt_bin_mod", "opt_bin_charset",
  "opt_primary", "references", "@58", "opt_ref_list", "ref_list",
  "opt_on_delete", "opt_on_delete_list", "opt_on_delete_item",
  "delete_option", "normal_key_type", "constraint_key_type",
  "key_or_index", "opt_key_or_index", "keys_or_index", "opt_unique",
  "fulltext", "spatial", "init_key_options", "key_alg",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "key_using_alg", "all_key_opt", "normal_key_opt", "spatial_key_opt",
  "fulltext_key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "@59", "@60",
  "@61", "@62", "@63", "@64", "@65", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "@66", "@67", "@68", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "@69",
  "add_part_extra", "reorg_partition_rule", "@70", "reorg_parts_rule",
  "@71", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "@72", "@73", "@74", "opt_column",
  "opt_ignore", "opt_restrict", "opt_place", "opt_to", "slave", "@75",
  "@76", "start", "start_transaction_opts", "slave_thread_opts", "@77",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "restore", "@78", "backup", "@79", "checksum", "@80",
  "opt_checksum_type", "repair", "@81", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "@82",
  "binlog_base64_event", "check", "@83", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "@84",
  "opt_no_write_to_binlog", "rename", "@85", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "keycache_list",
  "assign_to_keycache", "key_cache_name", "preload", "@86", "preload_list",
  "preload_keys", "cache_keys_spec", "@87", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "select_paren",
  "select_init2", "@88", "select_part2", "@89", "@90", "select_into",
  "select_from", "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_item2", "select_alias", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_window", "opt_from", "opt_respect",
  "respect", "window_clause", "opt_window_partition_by_clause",
  "opt_window_order_by_clause", "window_order_list", "opt_nulls",
  "opt_frame", "frame", "boundary_unit", "bounding", "preceding_following",
  "function_call_generic", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "@91", "variable", "@92", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "@93", "gorder_list",
  "in_sum_expr", "@94", "cast_type", "opt_expr_list", "expr_list",
  "in_sum_expr_list", "@95", "ident_list_arg", "ident_list", "opt_expr",
  "opt_else", "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "@96", "@97", "@98", "@99", "@100",
  "@101", "@102", "normal_join", "table_factor", "@103", "select_derived",
  "@104", "select_derived2", "@105", "@106", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "@107", "@108",
  "index_hints_list", "opt_index_hints_list", "@109", "opt_key_definition",
  "@110", "opt_key_usage_list", "key_usage_element", "key_usage_list",
  "using_list", "interval", "interval_time_stamp", "interval_time_st",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "@111", "having_clause", "@112", "opt_escape",
  "group_clause", "@113", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "@114", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "@115", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "@116",
  "select_var_list", "select_var_ident", "into", "@117",
  "into_destination", "@118", "@119", "do", "@120", "drop", "@121",
  "table_list", "table_name", "table_alias_ref_list", "table_alias_ref",
  "if_exists", "opt_temporary", "insert", "@122", "@123", "replace",
  "@124", "@125", "insert_lock_option", "replace_lock_option", "insert2",
  "insert_table", "insert_field_spec", "@126", "fields", "insert_values",
  "@127", "@128", "values_list", "ident_eq_list", "ident_eq_value",
  "equal", "opt_equal", "no_braces", "@129", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "@130", "update", "@131", "@132",
  "update_list", "update_elem", "insert_update_list", "insert_update_elem",
  "opt_low_priority", "delete", "@133", "single_multi", "@134", "@135",
  "@136", "table_wild_list", "table_wild_one", "opt_wild",
  "opt_delete_options", "opt_delete_option", "truncate", "opt_table_sym",
  "opt_profile_defs", "profile_defs", "profile_def", "opt_profile_args",
  "show", "@137", "show_param", "@138", "show_engine_param",
  "master_or_binary", "opt_storage", "opt_db", "opt_full", "from_or_in",
  "binlog_in", "binlog_from", "wild_and_where", "describe", "@139", "@140",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "@141", "flush_options", "flush_option", "@142",
  "opt_table_list", "reset", "@143", "reset_options", "reset_option",
  "purge", "@144", "purge_options", "purge_option", "kill", "kill_option",
  "use", "load", "@145", "load_data", "@146", "@147", "@148", "opt_local",
  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list",
  "field_term", "opt_line_term", "line_term_list", "line_term",
  "opt_ignore_lines", "opt_field_or_var_spec", "fields_or_vars",
  "field_or_var", "opt_load_data_set_spec", "text_literal", "text_string",
  "param_marker", "signed_literal", "literal", "NUM_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "@149", "opt_option", "option_value_list", "option_type_value",
  "@150", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "internal_variable_name", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "@151",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "@152", "handler", "@153", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "@154",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "@155", "@156", "@157",
  "@158", "opt_and", "require_list", "require_list_element", "grant_ident",
  "user_list", "grant_list", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "require_clause", "grant_options",
  "grant_option_list", "grant_option", "begin", "@159", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "@160",
  "union_opt", "union_order_or_limit", "@161", "order_or_limit",
  "union_option", "take_first_select", "subselect", "subselect_start",
  "subselect_end", "view_or_trigger_or_sp_or_event", "definer_tail",
  "no_definer_tail", "definer_opt", "no_definer", "definer",
  "view_replace_or_algorithm", "view_replace", "view_algorithm",
  "view_suid", "view_tail", "@162", "view_list_opt", "view_list",
  "view_select", "@163", "view_select_aux", "view_check_option",
  "trigger_tail", "@164", "@165", "@166", "udf_tail", "sf_tail", "@167",
  "@168", "@169", "@170", "@171", "sp_tail", "@172", "@173", "@174",
  "@175", "xa", "xid", "begin_or_start", "opt_join_or_resume",
  "opt_one_phase", "opt_suspend", "@176", "opt_migrate", "install",
  "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    64,    46,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   601,   602,   603,   602,   602,   604,   604,   605,   605,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   607,   608,   608,   609,   610,   610,   612,   611,   613,
     613,   614,   614,   615,   617,   616,   619,   618,   620,   620,
     621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
     621,   621,   621,   622,   622,   622,   622,   624,   623,   625,
     623,   626,   623,   627,   623,   628,   623,   629,   623,   623,
     623,   623,   623,   630,   631,   631,   632,   632,   632,   632,
     632,   632,   632,   634,   633,   636,   635,   635,   637,   637,
     637,   637,   638,   638,   639,   639,   640,   640,   641,   641,
     642,   642,   644,   643,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   646,   647,   647,
     648,   648,   649,   649,   650,   650,   650,   650,   650,   650,
     650,   651,   651,   651,   652,   652,   654,   653,   655,   655,
     656,   656,   657,   657,   658,   658,   659,   659,   660,   661,
     662,   662,   663,   663,   664,   665,   665,   665,   665,   666,
     666,   667,   667,   668,   668,   670,   669,   669,   671,   669,
     669,   673,   672,   674,   674,   675,   675,   676,   677,   677,
     678,   678,   679,   679,   679,   679,   679,   680,   680,   681,
     681,   682,   682,   682,   682,   682,   682,   682,   682,   682,
     682,   682,   682,   682,   684,   683,   686,   685,   688,   687,
     690,   689,   691,   692,   693,   695,   694,   696,   697,   697,
     697,   698,   698,   700,   701,   702,   699,   703,   703,   703,
     704,   704,   706,   707,   705,   709,   708,   710,   710,   711,
     711,   713,   714,   712,   716,   717,   715,   718,   718,   720,
     719,   721,   721,   723,   722,   725,   724,   727,   726,   728,
     729,   730,   728,   731,   728,   732,   732,   733,   733,   733,
     734,   735,   736,   737,   737,   738,   738,   739,   740,   741,
     741,   743,   742,   744,   744,   744,   745,   745,   745,   746,
     747,   747,   747,   748,   748,   748,   748,   748,   748,   748,
     748,   749,   750,   750,   750,   751,   751,   751,   751,   751,
     752,   753,   753,   753,   754,   754,   754,   754,   754,   754,
     754,   755,   756,   756,   756,   757,   757,   757,   758,   759,
     760,   761,   762,   763,   763,   763,   764,   765,   766,   767,
     768,   769,   770,   771,   772,   773,   773,   774,   774,   775,
     775,   776,   776,   776,   776,   777,   778,   777,   779,   780,
     779,   781,   779,   782,   782,   784,   783,   786,   785,   787,
     788,   789,   788,   790,   788,   791,   788,   792,   792,   793,
     793,   794,   794,   795,   796,   797,   798,   798,   799,   800,
     799,   801,   799,   802,   802,   803,   804,   805,   805,   806,
     806,   807,   807,   809,   808,   810,   811,   811,   811,   812,
     812,   813,   813,   814,   815,   815,   816,   817,   818,   818,
     819,   819,   821,   820,   822,   823,   823,   824,   824,   825,
     825,   825,   825,   825,   825,   825,   825,   827,   828,   826,
     829,   829,   830,   830,   831,   831,   832,   832,   833,   833,
     834,   834,   835,   836,   836,   837,   837,   838,   838,   839,
     839,   839,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   841,   842,   843,
     844,   845,   845,   845,   845,   845,   845,   846,   846,   846,
     847,   847,   848,   848,   848,   848,   849,   849,   850,   850,
     851,   851,   852,   852,   852,   852,   852,   852,   852,   853,
     853,   854,   855,   855,   856,   858,   857,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   860,   859,   861,   859,   859,   859,   862,   862,
     862,   862,   862,   862,   862,   862,   863,   864,   864,   865,
     865,   866,   866,   866,   866,   866,   867,   867,   867,   867,
     867,   868,   868,   868,   869,   869,   869,   870,   871,   871,
     872,   872,   873,   873,   873,   874,   874,   874,   874,   875,
     875,   876,   876,   877,   877,   878,   878,   879,   879,   879,
     879,   879,   879,   879,   879,   879,   879,   879,   880,   880,
     881,   881,   882,   882,   883,   883,   884,   884,   885,   885,
     886,   886,   887,   888,   888,   889,   889,   890,   890,   891,
     891,   891,   891,   891,   891,   892,   892,   893,   893,   893,
     893,   894,   894,   896,   895,   897,   897,   898,   898,   899,
     899,   900,   900,   901,   901,   901,   901,   901,   902,   902,
     902,   902,   902,   903,   904,   904,   905,   905,   906,   906,
     907,   907,   907,   908,   908,   909,   910,   911,   912,   912,
     913,   913,   914,   914,   915,   915,   916,   916,   917,   917,
     918,   918,   919,   919,   920,   921,   921,   922,   923,   923,
     924,   924,   924,   925,   925,   926,   926,   927,   927,   928,
     928,   929,   929,   931,   930,   932,   930,   930,   933,   930,
     934,   930,   935,   930,   936,   930,   937,   930,   930,   930,
     930,   930,   930,   938,   938,   938,   938,   939,   939,   940,
     940,   941,   941,   942,   942,   942,   942,   942,   942,   942,
     942,   942,   942,   943,   942,   942,   944,   942,   945,   942,
     942,   942,   946,   947,   947,   949,   948,   950,   950,   950,
     952,   951,   953,   954,   953,   955,   955,   956,   957,   957,
     958,   959,   959,   959,   960,   959,   961,   962,   959,   959,
     959,   959,   959,   959,   959,   959,   959,   959,   959,   959,
     959,   959,   963,   963,   964,   964,   965,   965,   965,   966,
     966,   966,   967,   967,   967,   967,   969,   968,   968,   970,
     968,   968,   971,   972,   972,   974,   973,   975,   975,   976,
     976,   976,   977,   977,   978,   978,   980,   979,   982,   981,
     984,   983,   985,   985,   985,   987,   986,   988,   988,   989,
     989,   990,   990,   990,   992,   991,   993,   995,   994,   996,
     996,   997,   997,   998,   998,   998,   998,   998,   998,  1000,
     999,  1001,  1001,  1001,  1003,  1002,  1002,  1004,  1004,  1005,
    1005,  1006,  1007,  1008,  1008,  1009,  1010,  1010,  1012,  1011,
    1013,  1013,  1014,  1016,  1015,  1017,  1017,  1018,  1018,  1019,
    1020,  1020,  1021,  1021,  1023,  1022,  1025,  1026,  1024,  1027,
    1027,  1027,  1027,  1027,  1028,  1028,  1029,  1029,  1030,  1030,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1032,  1032,  1032,  1033,  1033,  1033,  1034,  1035,  1036,
    1037,  1037,  1038,  1038,  1038,  1038,  1038,  1039,  1039,  1040,
    1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,
    1041,  1041,  1041,  1041,  1041,  1041,  1042,  1042,  1042,  1042,
    1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,
    1043,  1043,  1043,  1043,  1043,  1043,  1043,  1043,  1043,  1043,
    1043,  1043,  1043,  1043,  1043,  1044,  1044,  1045,  1045,  1046,
    1046,  1047,  1047,  1048,  1048,  1048,  1048,  1048,  1048,  1049,
    1049,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,
    1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,
    1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,
    1050,  1050,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,
    1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,
    1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1052,
    1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1052,  1052,  1052,  1053,  1053,  1053,  1053,  1053,  1053,
    1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,
    1053,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1055,
    1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,
    1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1056,
    1056,  1056,  1057,  1057,  1058,  1058,  1059,  1060,  1060,  1061,
    1061,  1061,  1062,  1062,  1063,  1063,  1063,  1064,  1064,  1065,
    1065,  1066,  1066,  1067,  1067,  1067,  1067,  1068,  1068,  1069,
    1069,  1070,  1070,  1071,  1071,  1072,  1072,  1073,  1073,  1074,
    1074,  1075,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,
    1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,
    1077,  1076,  1079,  1078,  1080,  1080,  1080,  1081,  1081,  1082,
    1082,  1083,  1084,  1083,  1085,  1085,  1087,  1086,  1088,  1088,
    1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1089,
    1089,  1090,  1090,  1092,  1091,  1093,  1093,  1094,  1094,  1095,
    1095,  1096,  1096,  1097,  1097,  1098,  1098,  1099,  1100,  1100,
    1101,  1101,  1102,  1102,  1103,  1102,  1104,  1102,  1105,  1102,
    1102,  1106,  1102,  1107,  1102,  1102,  1108,  1102,  1109,  1102,
    1102,  1110,  1110,  1110,  1112,  1111,  1111,  1111,  1114,  1113,
    1116,  1117,  1115,  1118,  1119,  1120,  1120,  1121,  1121,  1121,
    1121,  1122,  1122,  1124,  1123,  1125,  1123,  1126,  1126,  1127,
    1128,  1127,  1130,  1129,  1131,  1131,  1132,  1132,  1133,  1133,
    1134,  1134,  1135,  1135,  1135,  1135,  1135,  1135,  1135,  1135,
    1135,  1135,  1135,  1135,  1136,  1136,  1137,  1137,  1137,  1137,
    1137,  1137,  1137,  1137,  1137,  1138,  1138,  1138,  1138,  1139,
    1139,  1139,  1140,  1140,  1141,  1141,  1142,  1143,  1142,  1144,
    1145,  1144,  1146,  1146,  1147,  1148,  1147,  1149,  1149,  1150,
    1150,  1150,  1151,  1152,  1152,  1153,  1154,  1154,  1156,  1155,
    1157,  1157,  1158,  1158,  1158,  1159,  1159,  1160,  1160,  1161,
    1162,  1162,  1162,  1163,  1163,  1163,  1163,  1164,  1164,  1165,
    1165,  1165,  1165,  1165,  1165,  1166,  1166,  1166,  1166,  1166,
    1167,  1167,  1167,  1167,  1167,  1168,  1168,  1168,  1168,  1169,
    1170,  1170,  1171,  1172,  1171,  1173,  1173,  1174,  1174,  1175,
    1177,  1176,  1178,  1178,  1179,  1179,  1181,  1180,  1183,  1184,
    1182,  1182,  1182,  1186,  1185,  1187,  1188,  1187,  1187,  1187,
    1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1189,
    1189,  1190,  1191,  1191,  1192,  1193,  1193,  1194,  1194,  1196,
    1197,  1195,  1199,  1200,  1198,  1201,  1201,  1201,  1201,  1202,
    1202,  1203,  1203,  1204,  1205,  1205,  1205,  1206,  1205,  1207,
    1207,  1208,  1208,  1209,  1208,  1210,  1208,  1211,  1211,  1212,
    1212,  1213,  1214,  1214,  1215,  1215,  1217,  1216,  1218,  1218,
    1219,  1219,  1220,  1220,  1221,  1222,  1221,  1224,  1225,  1223,
    1226,  1226,  1227,  1228,  1228,  1229,  1230,  1230,  1232,  1231,
    1234,  1233,  1235,  1233,  1236,  1233,  1237,  1237,  1238,  1238,
    1239,  1239,  1240,  1240,  1241,  1241,  1241,  1242,  1243,  1243,
    1244,  1244,  1245,  1245,  1246,  1246,  1246,  1246,  1246,  1246,
    1246,  1246,  1246,  1247,  1247,  1249,  1248,  1250,  1250,  1250,
    1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,
    1250,  1251,  1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,
    1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,
    1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,
    1250,  1250,  1250,  1250,  1250,  1250,  1250,  1250,  1252,  1252,
    1252,  1253,  1253,  1254,  1254,  1255,  1255,  1256,  1256,  1257,
    1257,  1258,  1258,  1259,  1259,  1260,  1260,  1260,  1262,  1261,
    1263,  1261,  1264,  1264,  1265,  1265,  1265,  1266,  1266,  1266,
    1268,  1267,  1269,  1269,  1271,  1270,  1270,  1270,  1270,  1270,
    1270,  1270,  1270,  1270,  1270,  1270,  1272,  1272,  1274,  1273,
    1275,  1275,  1276,  1276,  1276,  1278,  1277,  1279,  1280,  1280,
    1281,  1282,  1282,  1282,  1283,  1285,  1284,  1284,  1287,  1288,
    1289,  1286,  1286,  1290,  1290,  1291,  1291,  1291,  1292,  1292,
    1292,  1293,  1293,  1294,  1294,  1295,  1295,  1295,  1295,  1296,
    1296,  1297,  1297,  1298,  1298,  1299,  1299,  1300,  1300,  1300,
    1301,  1301,  1302,  1302,  1303,  1303,  1304,  1304,  1304,  1304,
    1305,  1305,  1305,  1306,  1307,  1307,  1307,  1308,  1308,  1308,
    1308,  1308,  1308,  1308,  1308,  1308,  1308,  1308,  1308,  1309,
    1309,  1309,  1309,  1309,  1310,  1310,  1311,  1311,  1312,  1313,
    1313,  1314,  1314,  1315,  1315,  1315,  1316,  1316,  1316,  1316,
    1317,  1317,  1317,  1318,  1318,  1319,  1320,  1320,  1321,  1322,
    1323,  1324,  1324,  1325,  1325,  1326,  1326,  1326,  1327,  1327,
    1327,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,
    1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,
    1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,
    1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,
    1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,  1328,
    1328,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1331,  1330,  1332,  1332,  1333,  1333,  1335,  1334,
    1336,  1336,  1336,  1336,  1337,  1337,  1338,  1338,  1338,  1338,
    1339,  1339,  1339,  1339,  1340,  1340,  1341,  1341,  1342,  1342,
    1342,  1342,  1342,  1342,  1342,  1343,  1343,  1343,  1344,  1344,
    1344,  1344,  1345,  1345,  1345,  1346,  1346,  1346,  1346,  1346,
    1348,  1347,  1349,  1349,  1350,  1350,  1351,  1352,  1352,  1352,
    1352,  1354,  1353,  1355,  1355,  1356,  1355,  1357,  1357,  1358,
    1358,  1359,  1359,  1359,  1359,  1360,  1359,  1361,  1361,  1361,
    1361,  1361,  1362,  1363,  1363,  1363,  1363,  1364,  1365,  1365,
    1365,  1366,  1366,  1367,  1367,  1368,  1368,  1369,  1369,  1371,
    1370,  1372,  1370,  1373,  1370,  1374,  1370,  1370,  1370,  1370,
    1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,
    1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,
    1370,  1370,  1375,  1375,  1376,  1376,  1377,  1377,  1377,  1378,
    1378,  1378,  1378,  1379,  1379,  1380,  1380,  1381,  1381,  1381,
    1382,  1382,  1383,  1383,  1384,  1385,  1385,  1385,  1385,  1385,
    1386,  1386,  1387,  1387,  1388,  1388,  1388,  1388,  1388,  1390,
    1389,  1391,  1391,  1392,  1392,  1392,  1393,  1393,  1393,  1394,
    1394,  1395,  1396,  1396,  1397,  1398,  1399,  1399,  1401,  1400,
    1402,  1402,  1402,  1404,  1403,  1405,  1405,  1406,  1406,  1406,
    1407,  1408,  1408,  1409,  1410,  1411,  1411,  1411,  1412,  1412,
    1412,  1412,  1412,  1413,  1413,  1413,  1413,  1413,  1413,  1414,
    1414,  1415,  1416,  1417,  1417,  1417,  1418,  1419,  1419,  1419,
    1420,  1420,  1420,  1422,  1421,  1423,  1423,  1424,  1424,  1426,
    1425,  1427,  1427,  1428,  1428,  1428,  1428,  1430,  1431,  1432,
    1429,  1433,  1433,  1435,  1436,  1437,  1438,  1439,  1434,  1441,
    1442,  1443,  1444,  1440,  1445,  1445,  1445,  1445,  1445,  1445,
    1446,  1446,  1446,  1447,  1447,  1448,  1448,  1448,  1449,  1449,
    1450,  1451,  1450,  1452,  1452,  1453,  1454
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     0,     7,     0,
      12,     0,    12,     0,    12,     0,     6,     0,     3,     4,
       4,     3,     2,    10,     1,     3,     2,     2,     2,     2,
       2,     2,     2,     0,    13,     0,     6,     2,     0,     1,
       3,     1,     0,     2,     0,     2,     0,     1,     3,     4,
       0,     2,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     1,
       0,     2,     0,     2,     2,     2,     2,     2,     3,     3,
       1,     1,     1,     2,     3,     3,     0,     4,     0,     3,
       0,     1,     3,     1,     0,     1,     3,     1,     0,     3,
       0,     1,     3,     1,     4,     0,     1,     1,     1,     0,
       3,     2,     3,     0,     3,     0,     5,     5,     0,     7,
       5,     0,     2,     1,     1,     1,     3,     1,     1,     3,
       0,     1,     1,     1,     1,     2,     1,     1,     3,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     5,     0,     2,     0,     3,
       0,     2,     2,     2,     2,     0,     6,     2,     0,     2,
       1,     1,     3,     0,     0,     0,     7,     0,     2,     2,
       1,     1,     0,     0,     8,     0,     6,     1,     2,     1,
       2,     0,     0,     6,     0,     0,     6,     0,     2,     0,
       5,     0,     1,     0,     5,     0,     2,     0,     5,     4,
       0,     0,     8,     0,     7,     1,     1,     1,     1,     1,
       2,     4,     5,     0,     4,     4,     4,     3,     3,     2,
       2,     0,     2,     1,     2,     3,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     3,     2,     4,     5,     0,     5,     0,     0,
       5,     0,     7,     0,     1,     0,     3,     0,     3,     5,
       5,     0,     4,     0,     3,     0,     3,     0,     1,     0,
       1,     1,     3,     1,     5,     5,     0,     2,     0,     0,
       7,     0,     9,     1,     3,     1,     1,     0,     2,     0,
       3,     1,     3,     0,     6,     1,     0,     4,     5,     1,
       1,     1,     3,     3,     1,     3,     1,     1,     0,     3,
       1,     3,     0,     4,     1,     0,     1,     2,     1,     3,
       4,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     0,     1,     1,     2,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     5,     1,     1,     3,
       4,     4,     2,     2,     2,     3,     3,     4,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     3,     1,     1,
       2,     2,     7,     8,     8,     8,     8,     2,     2,     0,
       1,     2,     0,     1,     2,     0,     4,     3,     3,     3,
       1,     2,     1,     1,     3,     2,     3,     2,     2,     1,
       3,     3,     2,     3,     1,     1,     2,     1,     1,     2,
       1,     1,     1,     2,     3,     2,     3,     2,     2,     3,
       3,     3,     0,     6,     0,     6,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     2,     1,     2,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     2,     0,     1,     1,     5,     0,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     0,
       1,     0,     1,     0,     1,     2,     1,     1,     2,     2,
       4,     1,     3,     2,     1,     2,     2,     2,     2,     1,
       2,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     0,     1,     0,
       2,     1,     2,     3,     2,     0,     1,     0,     1,     1,
       2,     0,     1,     0,     4,     1,     4,     3,     1,     0,
       1,     2,     1,     3,     3,     2,     2,     2,     1,     1,
       2,     2,     2,     1,     2,     2,     1,     1,     0,     1,
       1,     1,     1,     0,     1,     1,     1,     0,     1,     2,
       0,     1,     0,     1,     0,     1,     1,     2,     1,     2,
       1,     2,     2,     2,     3,     1,     1,     1,     1,     3,
       1,     1,     1,     4,     2,     1,     4,     0,     1,     0,
       2,     1,     3,     0,     6,     0,     5,     7,     0,     5,
       0,     5,     0,     5,     0,     4,     0,    10,     3,     4,
       3,     3,     7,     0,     3,     1,     4,     0,     3,     0,
       2,     0,     1,     0,     2,     2,     2,     2,     1,     1,
       1,     3,     4,     0,     6,     4,     0,     5,     0,     6,
       4,     1,     2,     1,     1,     0,     5,     0,     3,     2,
       0,     5,     0,     0,     6,     1,     3,     1,     1,     3,
       2,     3,     2,     4,     0,     6,     0,     0,     8,     4,
       4,     3,     3,     2,     2,     6,     5,     3,     5,     1,
       1,     1,     0,     1,     0,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     5,     3,     0,
       5,     3,     3,     0,     3,     0,     2,     1,     3,     0,
       1,     1,     0,     2,     1,     3,     0,     6,     0,     6,
       0,     5,     0,     1,     1,     0,     6,     0,     1,     1,
       2,     1,     1,     1,     0,     5,     2,     0,     5,     0,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     0,
       5,     0,     1,     1,     0,     4,     4,     3,     5,     1,
       3,     3,     5,     1,     3,     2,     1,     1,     0,     6,
       1,     3,     3,     0,     2,     0,     4,     0,     2,     1,
       2,     4,     2,     3,     0,     3,     0,     0,     6,     2,
       1,     1,     2,     2,     8,     4,     0,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     4,     3,     1,     1,     4,     0,     0,
       1,     1,     0,     2,     2,     1,     1,     0,     2,     3,
       3,     3,     2,     3,     4,     3,     4,     3,     4,     1,
       3,     4,     3,     3,     6,     1,     5,     6,     5,     7,
       6,     8,     5,     6,     4,     4,     5,     3,     4,     1,
       3,     3,     3,     3,     3,     3,     5,     5,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     3,     2,     2,     2,     2,     3,     3,     5,
       6,     4,     4,     7,     2,     6,     5,     6,     6,     4,
       4,     5,     4,     6,     2,     4,     4,     4,    10,     6,
       8,     6,     4,     4,     6,     4,     4,     4,     6,     4,
       7,     7,     7,     6,     6,     6,     6,     3,     4,     6,
       8,     2,     2,     4,     8,     8,     6,     6,     2,     4,
       6,     6,     8,     8,     6,     8,     6,     2,     4,     8,
       8,     2,     2,     2,     4,     4,     4,     4,     3,     8,
       4,     6,     4,     4,     4,     6,     8,     6,     4,     6,
       1,     6,     4,     4,     4,     4,     4,     6,     4,     5,
       6,     5,     6,     5,     6,     6,     5,     6,     5,     6,
       5,     6,     5,     5,     5,     5,     7,    12,    12,     0,
       2,     2,     0,     1,     2,     2,     5,     0,     3,     0,
       1,     4,     5,     3,     0,     2,     2,     0,     1,     5,
       2,     1,     1,     2,     2,     2,     4,     1,     1,     4,
       6,     2,     3,     0,     4,     0,     3,     0,     1,     1,
       3,     4,     4,     5,     4,     4,     4,     5,     4,     5,
       4,     5,     4,     5,     4,     4,     4,     4,     4,     5,
       0,     8,     0,     3,     3,     1,     4,     0,     1,     0,
       2,     0,     0,     4,     4,     2,     0,     3,     2,     3,
       2,     1,     2,     1,     2,     1,     1,     1,     2,     0,
       1,     1,     3,     0,     3,     1,     3,     1,     3,     0,
       1,     0,     2,     4,     5,     1,     1,     1,     1,     4,
       1,     3,     3,     3,     0,     6,     0,     6,     0,     8,
       4,     0,     8,     0,    10,     6,     0,     8,     0,    10,
       6,     1,     2,     2,     0,     4,     3,     6,     0,     3,
       0,     0,     5,     0,     1,     0,     1,     0,     2,     3,
       3,     1,     1,     0,     7,     0,     7,     1,     2,     0,
       0,     2,     0,     2,     0,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     1,     0,     2,     0,     1,     0,     0,     3,     0,
       0,     3,     2,     0,     0,     0,     5,     4,     2,     0,
       2,     2,     3,     3,     1,     2,     0,     1,     0,     4,
       4,     2,     0,     1,     1,     0,     1,     0,     1,     2,
       1,     3,     3,     1,     1,     1,     1,     0,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     0,     6,     0,     1,     3,     1,     3,
       0,     2,     3,     1,     2,     1,     0,     3,     0,     0,
       7,     2,     1,     0,     3,     6,     0,     6,     4,     6,
       4,     4,     4,     5,     4,     4,     5,     6,     4,     1,
       3,     1,     1,     3,     1,     0,     2,     0,     1,     0,
       0,     8,     0,     0,     6,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     4,     0,     3,     3,
       1,     2,     2,     0,     3,     0,     5,     3,     1,     3,
       1,     3,     1,     1,     0,     1,     0,     4,     0,     1,
       3,     1,     1,     1,     0,     0,     6,     0,     0,    11,
       3,     1,     3,     3,     1,     3,     0,     1,     0,     4,
       0,     6,     0,     5,     0,     6,     1,     3,     3,     5,
       0,     2,     0,     2,     1,     1,     1,     3,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     2,     1,     3,     3,     6,    16,     2,
       2,     0,     6,     5,     2,     2,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     2,     2,
       3,     2,     2,     1,     3,     4,     3,     3,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     0,     1,     0,     2,     0,     1,     1,
       1,     0,     2,     0,     2,     0,     2,     2,     0,     4,
       0,     4,     1,     1,     0,     1,     1,     0,     1,     1,
       0,     4,     3,     1,     0,     3,     4,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     0,     3,
       3,     1,     1,     1,     2,     0,     3,     3,     2,     2,
       3,     0,     1,     1,     2,     0,     4,     5,     0,     0,
       0,    17,     2,     0,     1,     0,     1,     1,     0,     1,
       1,     0,     2,     2,     1,     3,     4,     3,     3,     0,
       2,     2,     1,     3,     3,     0,     3,     0,     3,     2,
       3,     1,     1,     2,     0,     2,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     1,
       1,     1,     1,     1,     1,     1,     3,     5,     1,     1,
       1,     1,     1,     3,     4,     5,     1,     5,     3,     2,
       1,     3,     2,     2,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     4,     0,     1,     1,     3,     0,     2,
       1,     1,     1,     1,     0,     1,     0,     1,     1,     1,
       0,     2,     2,     2,     1,     2,     4,     5,     4,     6,
       2,     3,     3,     3,     5,     1,     3,     3,     2,     2,
       2,     1,     1,     4,     4,     1,     1,     1,     1,     1,
       0,     4,     1,     1,     1,     3,     3,     1,     1,     2,
       2,     0,     3,     4,     3,     0,     7,     1,     2,     1,
       1,     1,     1,     1,     1,     0,     5,     1,     1,     1,
       1,     1,     3,     6,     6,     6,     7,     3,     8,     8,
       8,     0,     1,     1,     2,     0,     1,     1,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     2,
       1,     1,     0,     1,     3,     1,     2,     2,     2,     1,
       3,     3,     1,     1,     3,     1,     3,     4,     5,     1,
       0,     3,     3,     1,     1,     0,     2,     2,     2,     2,
       0,     2,     2,     1,     2,     2,     2,     2,     2,     0,
       3,     0,     1,     0,     3,     2,     0,     1,     2,     0,
       1,     4,     4,     5,     2,     3,     0,     1,     0,     4,
       0,     1,     1,     0,     2,     2,     1,     0,     1,     1,
       0,     5,     6,     0,     0,     2,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     3,     1,     2,     1,     2,     3,     3,     3,
       0,     3,     3,     0,     7,     0,     3,     1,     3,     0,
       3,     2,     4,     0,     3,     4,     4,     0,     0,     0,
      16,     8,     7,     0,     0,     0,     0,     0,    15,     0,
       0,     0,     0,    12,     4,     4,     3,     4,     3,     2,
       1,     3,     5,     1,     1,     0,     1,     1,     0,     2,
       0,     0,     3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2371,   931,     0,  2319,     0,     0,     0,     0,     0,
       0,  2321,   107,    62,  1578,  1692,  1693,  1493,  1517,     2,
       0,   931,   157,     0,    74,  1519,     0,  1731,     0,     0,
     931,   407,     0,  1725,     0,     0,   931,  1522,  1718,     0,
     157,  2321,     0,   966,  2154,  1615,     0,     0,     0,  1598,
       0,  2211,  1567,     0,     0,     0,     0,     3,     8,    20,
       0,    39,    25,    29,    15,    19,    14,    37,    10,    53,
      54,    46,    12,    17,    43,    11,    13,    16,    35,    42,
      36,    38,    50,   959,    23,    24,    30,    44,    58,    21,
      55,    52,    22,  1694,    26,    45,    40,    32,    59,    33,
      51,    34,    57,    28,    47,    27,     9,    18,    48,    49,
      41,    60,    31,    56,     0,   801,     0,     0,   865,     0,
       0,     0,     0,     0,   784,  2369,  2370,  2371,   933,   932,
       0,  2203,  2202,   898,  2321,  1828,   916,     0,  1891,  1892,
    1893,  1894,  1895,  1896,  1897,  1842,  1898,  1899,  1901,  1900,
    1902,  1903,  1843,  1844,  1904,  1905,  1906,  1908,  1907,  1909,
    1845,  1846,  1910,  1911,  1912,  1847,  1848,  1913,  1914,  1849,
    1915,  1916,  1917,  1918,  1850,  1919,  1851,  1920,  1921,  1922,
    1923,  1924,  1925,  1852,  1926,  1927,  1928,  1929,  1931,  1930,
    1932,  1933,  1934,  1853,  1935,  1936,  1937,  1938,  1939,  1940,
    1941,  1854,  1942,  1943,  1944,  1960,  1855,  1945,  1948,  1947,
    1946,  1949,  1950,  1952,  1951,  1953,  1856,  1954,  1955,  1956,
    1958,  1957,  1962,  1963,  1964,  1857,  1959,  1965,  1961,  2134,
    1967,  1966,  1968,  1970,  1969,  1858,  1971,  1859,  1860,  1972,
    1973,  1826,  1974,  1827,  1976,  1977,  1978,  1983,  1984,  1861,
    1975,  1979,  1980,  1981,  1982,  1985,  1862,  1986,  1987,  1988,
    1989,  1990,  1991,  1992,  1993,  1994,  1995,  2005,  1998,  2000,
    2001,  2003,  1999,  2004,  2008,  2007,  2009,  2010,  2011,  2006,
    1997,  2002,  2012,  2013,  1996,  2014,  2015,  2016,  2017,  2018,
    2019,  2020,  2021,  2022,  2023,  2024,  2026,  2025,  2027,  2028,
    2029,  2030,  2031,  2033,  2032,  2034,  2035,  2036,  2038,  2037,
    2040,  2041,  1863,  2039,  2042,  2043,  2044,  2045,  2046,  1864,
    1865,  1866,  2047,  2048,  1867,  2049,  2050,  2051,  1868,  2052,
    2053,  2055,  2054,  2056,  2057,  1869,  1870,  2058,  2059,  2060,
    2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,  2069,  2070,
    2072,  2071,  2073,  2074,  2075,  2076,  2077,  1871,  2078,  1872,
    2079,  2080,  1873,  2081,  1874,  2082,  2083,  1875,  2084,  2085,
    2086,  2087,  2088,  2089,  1876,  2090,  2091,  1877,  2093,  2092,
    2094,  1878,  2096,  2097,  1879,  2095,  1881,  2098,  1880,  1882,
    2099,  2100,  2102,  2101,  2103,  2104,  2105,  2106,  1883,  2107,
    1884,  2108,  2109,  2110,  2111,  2113,  2112,  2114,  2115,  2116,
    2117,  2118,  2120,  2119,  2121,  2122,  2123,  2124,  2127,  2128,
    2129,  2130,  2125,  2126,  1885,  2131,  2132,  2133,  2135,  2136,
    2138,  2137,  1886,  1887,  2139,  2140,  1890,  2141,  2142,  2145,
    2143,  2144,  2147,  2146,  2148,  2149,  1888,  2150,  1889,  2151,
     176,  1831,   159,  1832,  1841,     0,   900,   917,  2322,  2323,
     493,   735,     0,     0,   736,     0,   492,   734,   157,  2371,
     112,     0,   489,   490,     0,     0,     0,  1592,     0,  1515,
    1515,  1515,     0,     0,  1515,  1515,     0,  1518,  1515,   157,
    1515,     0,    67,  1700,     0,     0,     0,     0,  1825,     0,
    1525,     0,  1732,  1733,     0,  1735,     0,     0,  2200,     0,
       0,     0,     0,     0,   157,   934,     0,  1576,     0,   896,
       0,  2323,  2334,   960,   964,   976,  2155,  2152,  1677,   885,
     885,   885,   883,   885,  1599,     0,     0,     0,  1576,  1734,
    2423,     0,     0,     0,  2419,     0,  2424,     0,   966,     0,
       0,     1,     5,     0,     0,  1955,  2051,  1690,  1688,  1820,
       0,   775,   802,     0,   780,     0,   778,  1837,  1836,  1835,
       0,   791,   790,   788,     0,   371,     0,     0,  2380,   782,
     914,     0,  2320,     0,   943,   953,   178,     0,    76,     0,
       0,     0,  2326,     0,     0,     0,     0,   111,     0,     0,
       0,   108,   998,   998,  2371,  2373,  2375,   493,   491,     0,
       0,     0,  1596,  1595,  1594,     0,  1592,  1892,  1842,  1903,
       0,  1793,     0,     0,     0,  1299,     0,  1847,     0,  1915,
    1917,  1852,     0,     0,  1007,  1007,  1007,     0,     0,     0,
    1933,  1934,  1802,     0,     0,     0,  1790,  1803,  1967,  1968,
       0,  1792,  1973,     0,     0,     0,     0,  1990,  1800,     0,
       0,  2021,  2023,     0,     0,  2027,  2028,  2029,  2030,  1777,
    1062,     0,  1007,     0,  1789,  1799,  2044,  1783,  2052,     0,
       0,  2056,  2057,     0,  2065,     0,     0,     0,  2088,  2091,
       0,     0,  2110,     0,     0,  1007,  1776,  2127,  2128,  2129,
    2130,     0,  1791,  1885,  1801,     0,  2141,  1007,  1007,  1007,
       0,     0,     0,  2148,  2151,     0,     0,     0,     0,  1061,
       0,  1262,     0,  1291,  1019,  1025,  1039,     0,  1054,  1072,
    1073,  1076,  1170,  1074,  1075,  1081,  1080,  1494,  1787,  1079,
    1078,  1788,  1071,  1810,  1831,  1809,     0,     0,     0,     0,
       0,     0,     0,     0,  1673,     0,     0,     0,  1515,    69,
       0,  2245,  2260,  2261,  2257,  2262,  2280,  2263,  2267,     0,
    2259,  2251,     0,  2266,  2255,  2264,     0,  2249,     0,  2265,
    2270,  2281,  2253,  2258,  2237,     0,  2243,  2247,  1822,  1399,
    2214,  2215,     0,    75,  1527,  1528,  1526,   864,     0,  1730,
    1745,     0,     0,     0,   929,   417,   408,     0,  1672,  1671,
       0,  1726,  2335,     0,     0,   905,  1530,  1577,     0,  1529,
    1723,     0,  1722,  1719,  1721,     0,  2245,  2232,     0,  2329,
    2326,  2336,   990,   982,   981,   984,   985,   989,   986,   987,
     988,   983,   980,   998,   977,   979,  2158,  1637,     0,   671,
       0,  1685,     0,  1638,     0,     0,  1685,     0,  1435,  1675,
    1678,     0,  2167,  1653,   732,   731,     0,   730,  2168,  1671,
       0,     0,     0,  1624,  1639,     0,  1600,  1644,  2169,     0,
    1674,     0,  1435,  1685,     0,  1616,     0,     0,     0,     0,
     879,   889,   881,   876,     0,   882,   878,  1597,  1511,  2436,
    2212,   864,  1782,  1781,  1829,  2420,  1780,  2428,  2430,  2416,
    2418,  2425,   962,     0,  2340,     6,    61,     0,  1697,  2378,
    2379,  2377,   687,     0,  1007,  1838,  2372,   160,   789,     0,
     372,   160,     0,     0,     0,     0,     0,   373,   374,   310,
     773,   786,     0,     0,   785,  2380,     0,     0,  1509,     0,
       0,   945,   955,   180,   177,   158,     0,   902,   919,  2325,
       0,     0,  2327,  2331,  1060,  1059,     0,   105,   110,     0,
       0,     0,  2299,   109,  2295,  2376,   998,   998,   998,  2368,
       0,  2356,  2363,  2364,  2367,  2366,  2365,  2362,     0,  2355,
    2358,  2359,  2361,  2360,  2380,  2374,     0,   737,   737,   737,
       0,  1579,  1582,  1586,  1590,  1593,     0,     0,  1404,  1094,
    1404,  1404,  1404,  1300,     0,     0,     0,     0,     0,     0,
       0,     0,  1404,     0,  1131,  1104,     0,  1132,     0,     0,
       0,     0,     0,  1796,     0,     0,     0,     0,     0,     0,
    1267,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1295,  1297,  1809,  1404,     0,     0,  1404,     0,     0,     0,
       0,     0,  1012,     0,  1138,   998,     0,     0,   998,   998,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1404,
    1404,     0,     0,  1404,     0,  1147,     0,  1798,     0,     0,
       0,  1797,     0,     0,  1795,  1794,  1778,     0,  1151,  1153,
    1152,     0,  1404,  1404,     0,     0,  1084,  1083,  1085,  2353,
       0,     0,     0,     0,     0,     0,  1058,  1057,  1056,  1055,
       0,     0,     0,  1063,     0,  1064,  1065,     0,  1066,  1067,
    1068,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1086,     0,     0,     0,  1779,   998,     0,  1516,  1498,  1504,
    1500,     0,  1673,  1501,  1508,   385,     0,  1505,  2293,  1502,
     866,     0,     0,    68,  1714,  1708,  1710,  1713,  1709,     0,
    1715,  1712,  1711,  2203,  1701,  1703,  1704,  2246,  2244,  2278,
    2277,     0,  2279,  2275,  2268,  2300,  2272,  2300,  2274,  2273,
    2300,  2269,  2276,  2300,  2241,     0,  1400,  1401,     0,  2213,
       0,  1821,     0,     0,  1746,     0,  1747,  1736,  1743,   948,
       0,  1399,  2201,  2204,     0,   418,   415,   413,   426,     0,
       0,    64,    65,     0,   936,     0,   935,   939,     0,     0,
       0,  1533,  1523,  1532,  1724,     0,     0,  2244,  2241,  2330,
       0,  2332,  2347,   965,  2337,   996,   967,   995,     0,   978,
    2153,  2156,  2164,  1681,   670,     0,     0,  1652,  1634,     0,
     493,     0,     0,     0,     0,     0,     0,  1617,     0,     0,
     530,     0,  1643,  1436,  1679,  1680,  1685,     0,     0,  1685,
       0,  1647,  1658,  1648,     0,  1675,     0,  1685,  1612,     0,
       0,  1604,  1609,  1605,     0,  1611,  1610,  1613,  1601,  1602,
    1630,  1659,  1675,  1635,  1642,  1651,     0,  1629,  1636,     0,
    1623,  1649,  1675,  1675,  1685,  1685,   892,   891,   890,   886,
     887,   892,     0,  1334,     0,     0,  2417,  2431,  2415,  2426,
    2427,  2414,   963,  2341,   961,  2342,     0,     7,     4,  1691,
    1689,  1698,  1699,   688,   687,   484,   487,   486,     0,     0,
    1840,     0,   781,     0,  1673,   779,     0,     0,  1673,   321,
    1673,   375,   687,   793,     0,     0,   783,   915,     0,     0,
     947,   942,   946,   944,   727,   726,     0,   954,     0,   181,
     183,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    77,    78,    92,
     904,   903,   901,   927,   926,   924,     0,   925,   923,   918,
     920,   921,  2324,  2328,   494,   687,  1673,     0,   313,     0,
       0,     0,     0,     0,   493,     0,     0,  2357,    97,   738,
       0,     0,     0,  1584,  1512,  1580,  1514,  1820,     0,     0,
       0,  1399,     0,     0,  1405,  1404,     0,  1276,     0,     0,
       0,     0,  1301,     0,     0,     0,     0,     0,     0,     0,
    1404,     0,  1276,  1008,     0,  1158,     0,     0,     0,     0,
       0,  2353,     0,  1373,  1374,  1375,  1376,  1386,  1377,  1378,
    1379,  1388,  1393,  1380,  1381,  1389,  1390,  1391,  1382,  1392,
    1387,  1383,  1394,     0,  1372,     0,  1397,  1395,  1398,  1396,
       0,  1268,  1260,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1404,     0,     0,     0,  1404,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1239,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1404,     0,     0,     0,
    1385,     0,  1384,     0,     0,     0,     0,     0,     0,     0,
    1127,     0,  1812,  1811,     0,     0,     0,     0,   966,     0,
    1088,     0,  1087,     0,  2170,  1263,  1265,     0,  1010,  1009,
    1011,  1022,  1015,  1020,  1013,  1017,     0,  1069,  1897,  1023,
       0,     0,  1051,     0,  1413,  1052,  1037,  1042,  1043,     0,
    1040,  1041,     0,  1045,     0,  1044,  1048,  1049,  1050,  1053,
       0,     0,     0,     0,  1077,  1082,  1292,     0,  1238,  1813,
       0,  1496,   385,   388,   387,  1506,   386,  1554,     0,   868,
     867,  1503,   866,     0,    70,    72,  1707,     0,     0,  1716,
    2271,     0,  2252,  2256,  2250,  2254,     0,     0,  2242,     0,
    2248,  1403,  1963,  2037,     0,  1406,  2217,  1520,  2435,  1742,
    1744,     0,     0,  1737,     0,     0,   930,     0,     0,     0,
     428,   411,     0,    66,     0,     0,  1727,     0,     0,     0,
       0,   907,  1531,     0,  1720,     0,     0,     0,     0,     0,
    2333,  2349,  2348,  2338,   998,  1426,   999,  1001,  1000,  1809,
    2158,  2161,  2162,  2165,  2163,     0,  2160,  2159,  2174,     0,
    1683,  1686,  1687,     0,     0,  1667,  1661,  1660,  1656,  1662,
    1657,  1670,  1669,  1668,  1626,  1625,  1445,  1446,  1444,  1439,
    1440,  1443,  1620,  1676,  1666,  1664,  1654,     0,  1685,  1665,
    1663,  1606,  1607,  1608,     0,  1435,     0,  1685,  1675,     0,
    1685,  1685,  1646,  1650,     0,   880,   889,   877,   884,  1344,
    1343,     0,  1308,     0,  1310,  1307,  1306,  1305,     0,  1343,
    2421,  2429,  2433,     0,  1435,  2346,  2344,   485,  1554,  1554,
       0,  1839,     0,     0,     0,     0,     0,     0,     0,   161,
     170,     0,     0,   319,   320,  1554,   318,   361,   362,   365,
     366,   367,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   368,  1554,  1554,   315,   341,   342,   345,   346,   347,
     348,   349,   311,     0,   316,   862,   862,     0,  1554,  1554,
     862,  1554,     0,     0,  1554,  1554,     0,     0,  1554,     0,
       0,   862,     0,  1554,   860,     0,     0,  1554,  1554,  1554,
    1554,   862,     0,     0,  1554,   405,  1554,     0,     0,   872,
       0,     0,  1554,     0,     0,  1554,  1554,  1554,   809,   859,
     497,   517,   518,   774,   808,   810,   821,   403,     0,   838,
     861,     0,   795,   797,  2381,  2382,  2383,   899,  1510,  1364,
     179,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   928,
     922,   106,   687,  1554,  1554,  1554,  1554,   317,   350,   351,
     354,   355,   356,   357,   360,   358,   359,     0,     0,  1673,
       0,  2296,     0,  2409,     0,     0,     0,   159,   495,     0,
       0,   739,     0,     0,     0,     0,     0,  1406,     0,  1823,
    1587,  1334,  1591,  1590,  1588,     0,  1154,     0,  1242,     0,
    1244,  1245,  1246,     0,     0,     0,     0,     0,  1155,     0,
    1102,  1156,  1157,     0,     0,     0,     0,  1293,  1248,     0,
    1133,     0,     0,  1105,  1106,  1099,  1091,     0,  1172,     0,
       0,  1107,     0,     0,     0,     0,     0,  1173,  1296,     0,
    1298,  1813,     0,  1252,  1160,  1112,     0,  1250,     0,  1113,
    1174,  1175,  1176,  1139,   999,  1199,   998,  1162,  1163,     0,
       0,     0,  1178,     0,  1164,     0,     0,     0,     0,  1115,
    1256,  1254,     0,     0,     0,     0,  1258,  1148,  1117,     0,
       0,     0,  1116,     0,     0,     0,     0,     0,     0,     0,
    1119,     0,  1100,  1255,  1257,  1168,     0,  1128,  2350,  2350,
       0,  1092,     0,     0,     0,     0,     0,  1814,  1016,  1021,
    1014,  1018,     0,     0,     0,     0,     0,  1035,  1034,     0,
       0,     0,     0,  1413,  1038,  1229,  1289,     0,  1499,  1497,
    1507,  1552,  1553,  1555,     0,  2294,  1495,    73,     0,     0,
    1702,  1717,  1705,  2304,     0,  2303,  2289,  2292,  1820,     0,
       0,     0,  2227,  2221,  2228,  2230,  2224,  2229,  2231,  2222,
    2223,  2218,  2225,  1407,  1437,     0,     0,   949,   950,   953,
       0,  2207,  2208,  2206,  2205,   998,   416,   414,  1470,  1471,
    1456,  1457,  1455,  1458,   427,  1459,  1469,     0,   439,     0,
     419,  1729,  1728,     0,   937,   940,   941,   912,   911,   913,
     906,   908,   909,   477,  1537,     0,     0,     0,  1543,  1524,
    1534,   897,     0,     0,     0,     0,     0,   994,  1334,  1486,
     991,   971,  1437,  1427,   970,  1002,     0,  2157,     0,  2125,
    2185,     0,     0,     0,     0,     0,  2175,  1682,     0,  1631,
       0,  1655,     0,     0,     0,  1622,     0,  1645,  1603,  1621,
    1406,  1675,  1618,  1619,   894,   893,   888,  1343,  1334,     0,
       0,  1331,  1345,     0,  1345,  1334,  1334,     0,  1334,  1399,
    1340,     0,     0,  2432,  1428,  2345,     0,     0,   777,   164,
     167,   165,     0,   166,     0,     0,   370,   369,     0,  1673,
     363,   118,   117,   119,   120,  1453,  1454,  1450,  1451,  1449,
    1452,   122,   121,   116,   792,     0,     0,     0,  1673,   343,
     322,   323,   326,   327,   328,   863,   767,   931,   842,     0,
     559,   767,   723,   728,   728,   840,     0,   931,     0,     0,
       0,     0,     0,   931,     0,     0,     0,  1554,     0,   853,
     804,     0,     0,     0,     0,     0,   854,     0,   805,  1554,
       0,     0,     0,     0,     0,   931,     0,     0,     0,     0,
     931,   822,   875,   874,   873,     0,   931,   931,     0,   523,
     524,   522,     0,     0,     0,   498,   687,   806,   404,   807,
     562,     0,   869,   559,   565,  1816,     0,     0,     0,   128,
    2385,  1367,     0,  1368,  1365,  1366,   182,    84,    80,    93,
    1463,  1464,  1462,  1460,  1461,    94,    82,    83,    87,    86,
      88,    89,    90,    85,    91,    81,    95,    96,    79,     0,
       0,     0,     0,  1673,   352,     0,     0,  1554,   312,   329,
     330,   333,   334,   335,   336,   337,   340,   338,   339,     0,
    2297,     0,     0,   306,   305,     0,   123,  2403,     0,     0,
     562,    98,   403,   496,   499,   760,   762,   761,   753,   752,
      99,   101,   103,  1513,  1590,  1334,  1426,  1821,  1406,     0,
    1399,     0,     0,  1243,     0,  1183,  1277,     0,  1302,     0,
    1096,   649,   649,  1287,  1285,   634,   649,  1281,  1286,  1283,
       0,   673,     0,   672,     0,     0,     0,  1249,     0,  1186,
    1247,     0,     0,     0,     0,  1271,     0,     0,     0,  1101,
       0,  1233,  1253,  1190,  1251,  1188,     0,  1002,     0,  1202,
    1240,     0,     0,     0,     0,     0,     0,     0,     0,  1195,
    1194,     0,     0,     0,     0,  1259,  1181,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1192,  1193,
       0,  2354,  2354,  1089,  2171,  2172,  2173,   769,  1264,     0,
    1032,  1028,     0,  1026,  1412,  1047,  1046,     0,     0,     0,
    1036,     0,     0,     0,  1179,     0,  1290,  1815,   384,   529,
      71,  1706,  2301,     0,     0,     0,     0,     0,     0,     0,
       0,  2216,  1438,  1564,  1830,  1738,     0,   957,  2209,  2210,
       0,   417,     0,   409,   412,     0,   420,   421,   423,     0,
     910,   976,     0,  1556,  1541,  1548,  1542,     0,     0,     0,
    1540,  1805,  1804,  1811,  2336,     0,     0,     0,     0,  2339,
    1406,  1406,  1480,     0,     0,   968,   973,   969,   972,     0,
     997,  1006,  1005,  1806,  1813,     0,     0,     0,     0,   675,
     674,   683,     0,     0,     0,  2170,     0,   679,   681,   680,
    2180,   678,  1684,  1435,  1641,  1640,  1442,  1441,     0,  1614,
    1633,  1685,     0,  2343,  1338,     0,  1333,  1332,  1346,     0,
    1334,  1345,  1345,     0,  1313,  1312,  1568,  1571,     0,  1311,
    1362,  1336,   976,  2422,  2434,     0,   686,   685,   528,   682,
     527,   169,   168,   174,   175,   390,   376,   389,   364,   115,
     377,   378,   344,     0,   324,   564,   768,   825,     0,     0,
       0,   728,   558,   767,   557,   560,   737,   729,   767,   767,
       0,     0,   509,   506,   844,   512,   823,   816,   824,   835,
     837,     0,   508,   525,     0,     0,   514,   767,   811,   851,
     852,   866,   502,     0,   538,   539,   537,   519,   526,   504,
     505,   846,     0,  1422,  1424,  1432,   511,   510,   406,   507,
       0,   857,   830,     0,   536,   534,   531,   533,   532,   535,
     515,   513,   503,  1716,   862,   862,   839,     0,   546,   548,
     549,  1819,     0,   871,   841,     0,   550,   551,     0,     0,
       0,   138,     0,     0,   794,     0,   131,   129,   140,     0,
       0,   956,     0,   383,   382,   381,   380,   353,     0,     0,
       0,  1673,   331,  2298,     0,  2410,   309,   307,   308,     0,
       0,   184,   544,   545,   543,   542,     0,   393,     0,  1868,
     391,     0,     0,  1748,   687,   500,     0,     0,     0,     0,
    1406,  1447,  1824,  1583,  1589,     0,  1129,  1184,  1207,  1303,
       0,     0,   650,  1278,   689,     0,  1288,   636,   635,  1280,
    1282,  1284,  1095,  1103,  1171,  1098,  1097,  1187,  1294,  1185,
       0,     0,  1136,  1137,     0,  1269,     0,     0,  1109,     0,
    1111,     0,     0,  1235,  1191,  1189,  1161,  1241,  1200,  1201,
       0,  1203,     0,     0,  1177,  1140,  1165,     0,  1114,  1090,
       0,  1141,     0,  1146,  1144,     0,  1182,  1118,     0,     0,
    1125,     0,  1123,     0,  1124,     0,  1126,  1167,  1169,  2351,
       0,     0,  1266,  1024,     0,  1033,  1030,     0,  1027,  1205,
    1204,  1180,  1230,  2302,  2291,  2290,  2305,  2305,  2305,     0,
    1408,     0,  1521,  1748,   951,     0,   952,   999,   436,     0,
     443,     0,   441,   410,     0,   938,   998,  1538,  1550,     0,
    1558,     0,     0,  1535,  1545,     0,     0,     0,  1544,     0,
    2234,  2235,  2233,  1437,  1414,     0,     0,  1492,     0,  1487,
     992,     0,  1004,  1003,     0,  2187,     0,  2186,  2198,  2199,
    2196,  2197,  2195,  2176,     0,  2182,  2181,     0,     0,     0,
    2192,  2183,     0,     0,  1632,     0,  1627,   895,     0,  1334,
    1309,  1334,  1320,     0,     0,  1334,  1316,  1314,  1318,     0,
    1406,     0,  1335,  1359,   998,  1808,  1429,  1432,   325,   827,
     561,   767,   724,   725,   737,     0,   737,   737,     0,     0,
     815,     0,   919,     0,   820,   683,   520,   850,   849,   521,
       0,   813,     0,  1433,  1434,  1425,   812,   832,   818,     0,
     843,   562,   870,   703,   630,   579,   570,   649,   573,   572,
     616,   587,   584,   634,   632,   602,   634,   634,   609,   608,
     626,   612,   592,   689,   689,   591,   629,   689,   613,   611,
     615,     0,   617,   634,   622,   610,   614,   631,   607,   604,
     628,   649,   649,   585,   588,   627,   689,     0,   620,   649,
     653,   590,   689,   695,     0,     0,   649,   651,  1818,   139,
     127,     0,     0,   796,   798,     0,     0,   799,  2387,     0,
    2389,  1369,     0,   314,   379,   332,     0,   195,   998,     0,
       0,   185,   187,   188,     0,     0,     0,   495,  1750,  1749,
     392,   480,   501,     0,     0,     0,  1590,  1585,     0,  1581,
       0,     0,  1209,  1304,     0,     0,     0,     0,   695,   697,
     691,   695,     0,  1279,     0,     0,     0,  1272,     0,     0,
       0,     0,     0,     0,     0,  1093,     0,  1231,  1196,     0,
       0,     0,     0,     0,     0,     0,     0,  1122,  1120,  1121,
    2352,   770,  1029,     0,     0,  2310,  2310,  2310,  1563,  1562,
       0,  1561,  1565,     0,   958,     0,     0,     0,     0,   440,
       0,   422,   478,     0,     0,     0,  1559,  1547,  2340,  1536,
    1539,  1813,  2236,   975,     0,  1409,  1491,  1488,     0,  1481,
    1483,  1485,     0,  1807,     0,     0,  2191,  2177,   684,     0,
       0,     0,     0,  2178,     0,  1399,  1339,     0,  1305,  1334,
    1334,     0,  1305,     0,     0,     0,  1570,  1426,  1572,  1363,
       0,  1341,     0,  1431,     0,     0,   826,     0,     0,     0,
       0,     0,   856,     0,   869,   817,   836,   858,   653,   931,
    1423,   831,   833,   907,   516,   547,   709,   578,   571,   589,
     638,   633,     0,   638,   638,   598,   616,   593,     0,   689,
     606,   597,   618,   621,   623,   625,   638,     0,   689,   586,
     595,   582,   638,   661,     0,     0,     0,   657,     0,   702,
       0,   664,   566,   654,   656,     0,     0,   619,   689,   575,
     696,   695,   577,   689,   695,   638,     0,   652,   638,     0,
     125,   130,   141,   142,   787,  2386,     0,  2384,     0,     0,
       0,   198,   196,   197,     0,   191,   193,   188,  2397,     0,
    2404,     0,     0,  2402,   394,   396,   403,   481,     0,     0,
    1432,   765,     0,     0,  1448,  1130,     0,     0,  1222,  1221,
       0,  1210,     0,   647,   645,   648,   646,   690,   698,   699,
       0,   694,   692,   695,     0,  1134,  1135,     0,  1270,  1261,
    1159,     0,  1110,  1232,     0,     0,     0,     0,  1166,  1142,
    1145,  1143,  1149,  1150,  1031,     0,     0,  2309,  2307,     0,
    2308,  2306,  2282,     0,  2239,  2240,  2238,  2226,     0,     0,
       0,   424,   998,   429,     0,   446,   445,   442,  1437,  1549,
    1551,  1557,  1546,  1415,  1410,  1426,   676,  1484,     0,   993,
    2189,  2188,  2190,  2184,     0,     0,     0,     0,  1337,  1321,
       0,  1325,  1330,  1326,     0,  1317,  1315,     0,  1447,  1351,
    1352,     0,     0,  1357,  1361,  1437,  1432,   829,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   855,
    1784,   845,   847,   814,     0,   819,     0,     0,     0,   704,
     705,   710,   712,   642,   643,   644,   599,   639,   641,     0,
     601,   569,   594,   624,   600,     0,   596,   583,   667,   666,
    1007,   659,   669,     0,     0,   665,   655,   663,   658,   574,
     576,   580,   581,   567,     0,   568,  1817,   132,   800,   246,
    2388,   966,     0,  2393,   113,  2401,  2411,   195,     0,     0,
     136,     0,   186,   189,  2340,  1748,     0,   399,   740,     0,
     764,     0,   742,   744,  1208,     0,  1206,     0,     0,     0,
       0,     0,  1220,   700,   693,     0,  1273,  1432,     0,  1234,
    1236,     0,     0,  2288,  2287,  2286,  2283,     0,     0,     0,
       0,     0,     0,  2311,  2313,  1560,     0,     0,     0,   437,
       0,   433,   435,     0,   465,   479,   991,   540,     0,     0,
    1437,     0,  1489,  1482,  2194,  2193,  2179,     0,     0,     0,
       0,     0,     0,  1370,  1569,  1347,  1347,  1358,  1342,  1430,
     828,     0,     0,   740,     0,     0,  1786,  1785,   869,     0,
     715,   716,   717,     0,     0,     0,   708,   711,   640,     0,
     771,     0,   668,  1007,   662,     0,   134,   272,     0,   258,
     244,     0,     0,     0,   248,   143,   146,   144,     0,   145,
     151,     0,   152,   153,   154,   155,   156,   147,   270,   271,
     150,   148,   149,     0,  1833,     0,  1834,  2391,     0,     0,
    2390,   162,   192,     0,     0,   128,   137,  2405,   397,   395,
       0,  2336,  1554,   100,   741,   756,   755,   746,  1432,     0,
       0,   102,   743,   758,   750,   104,   745,   757,   748,  1217,
    1432,     0,  1224,     0,  1228,  1227,  1223,  1225,   637,     0,
    1275,  1108,     0,     0,  2284,  2314,  2317,  2315,  2316,  2318,
    2312,     0,  1739,   999,     0,   430,   431,     0,     0,     0,
    1554,     0,     0,  1554,  1554,  1554,  1554,   458,   466,   468,
       0,   541,  1419,  1432,  1411,  1472,   677,  1751,     0,  1322,
       0,  1327,     0,  1319,     0,     0,  1355,  1353,     0,   740,
     552,   742,   744,   848,     0,   719,     0,   718,     0,   713,
     714,   709,     0,   689,     0,   689,   660,   133,     0,   126,
       0,     0,   257,   260,     0,     0,   263,   253,   252,   254,
       0,   247,   246,   246,   300,   251,   297,   296,   289,  2340,
       0,     0,     0,  2412,   194,   998,   140,     0,   401,   400,
       0,   747,   763,   766,     0,   751,   749,     0,  1211,  1218,
    1214,     0,     0,  1432,     0,     0,  1566,  1574,     0,   676,
       0,   438,   437,   434,     0,     0,     0,  1554,  1554,     0,
       0,     0,     0,     0,   444,   467,  1554,     0,     0,  1416,
    1418,     0,   974,     0,  1759,     0,     0,     0,  1371,     0,
    1348,     0,     0,     0,   556,   555,   553,   554,     0,   721,
     722,   720,   706,   707,   603,   772,   605,   135,   273,   284,
     287,   279,   259,     0,     0,     0,   249,   246,     0,   233,
     231,   232,   238,   239,   240,   241,   242,   243,   234,   237,
     235,   236,   246,     0,   203,     0,     0,  2392,     0,  2394,
       0,   172,   171,   163,     0,   246,  2398,     0,  2406,  2340,
     754,   759,  1432,     0,  1213,  1219,  1226,  1274,  1197,  1198,
       0,     0,  1740,   425,   432,     0,   454,   456,   457,   451,
       0,   447,   449,   450,   476,     0,     0,  1467,  1465,  1466,
     472,  1468,   473,   471,   469,   462,     0,   460,     0,  1420,
    1421,  1432,  1473,     0,     0,     0,     0,  1752,  1754,     0,
    1490,     0,  1324,  1329,  1350,  1349,  1364,     0,   834,     0,
       0,   246,   280,     0,   255,     0,     0,     0,     0,   201,
     303,     0,   199,   291,   291,  2395,  2396,   173,  2413,     0,
     142,   162,   402,  1214,  1215,  1216,  1573,  1575,  1751,   448,
       0,  2017,     0,   474,   475,     0,   459,     0,   470,  1417,
       0,     0,     0,     0,     0,  1753,     0,     0,  1760,  1762,
       0,     0,     0,   281,   287,   277,   285,   246,     0,     0,
     245,   264,   299,   202,     0,   301,     0,   246,     0,   290,
     292,   294,     0,   124,  2407,  1212,  1759,   455,   452,   453,
     465,   464,   461,   998,  1757,  1758,     0,  1755,     0,     0,
    1761,     0,  1356,  1354,     0,   278,     0,     0,   276,   256,
     261,   246,     0,   246,   214,   213,     0,   205,   227,   298,
       0,   204,  2399,   246,  1765,   463,     0,     0,  1476,  1478,
    1756,  1764,  1763,     0,   282,     0,   246,     0,   246,     0,
     246,     0,     0,     0,     0,     0,   200,   246,  2408,     0,
    1767,   999,  1474,   998,  1628,     0,   274,   246,   262,   267,
     304,     0,   208,   228,   229,     0,   211,  2400,     0,     0,
    1774,  1479,  1477,   246,   246,   263,   266,   302,     0,     0,
     206,   220,   207,   218,   210,     0,  1766,  1769,     0,     0,
    1771,  1772,     0,  1741,   246,   246,   268,   226,   224,   246,
     215,   222,   217,     0,   223,   230,   221,     0,   212,  1773,
    1768,     0,  1775,     0,   209,   225,   219,  1770,   216
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   553,  1348,    57,    58,    59,    60,    61,  1231,
      62,   759,  1173,  1644,  1645,    63,   499,    64,   956,  1407,
    1408,  1409,    65,  1948,  2816,  2817,  2818,  1425,   469,   470,
    1819,  1820,   979,  2800,  2774,  3527,  2778,  3646,  3789,  3685,
    1892,  3107,  3528,  3529,  3655,   494,  1946,  1362,  3813,  1799,
    3923,  1800,    66,   586,   954,  1388,  1389,  3120,  3121,  3352,
    3122,  3344,  3345,  3346,  3347,  4057,  3897,  4002,  4058,  4123,
    4158,  4164,  4165,  4096,  4179,  4180,  4181,  4187,  4182,  4097,
    4160,  3898,  3899,  3796,  3900,  3658,  3901,  3800,  3902,  3661,
    3903,  3904,  3905,  3906,  4049,  3907,  3795,  4089,  3894,  3895,
    4091,  4139,  4156,  3908,  3668,  3790,  3989,  3669,  3791,  4044,
    3890,  4045,  4084,  4135,  3891,  3990,  4087,  3993,  3909,  3915,
    4059,  3910,  3916,  3911,  3673,  3807,  3914,  3805,  3913,  4093,
    4054,  2415,  2799,   571,   572,   597,  1939,   573,   968,   928,
    1364,  1832,  1833,  2280,  2281,  2398,  2399,  2400,  1824,  1825,
    1826,  1927,  1928,  1929,  1806,  1807,  1808,  1368,  1803,  1804,
     574,   929,   939,  1827,  1828,  1829,  2404,  1931,  1932,  1933,
    1934,  1830,  1635,  1831,  2676,  2421,  2810,  3544,  3130,  3691,
    3929,  2347,  2348,  2328,    67,   510,   806,  1228,  2159,  1678,
    1677,  1229,  2575,  2576,  2577,  2146,  3423,  1680,  2158,  3589,
    3842,  3590,  3591,  2927,  3735,  2573,  2931,  2932,  3198,  3425,
    3594,  3951,  3952,  3953,  3945,  3946,  3947,  3854,  3966,  3967,
    4025,  4070,  3747,  3748,  3749,  2178,  2581,  3428,  3358,  1921,
    1354,  1355,   471,   472,   473,   594,  2422,  1879,  2423,  2424,
    1881,  1882,  2548,  1279,  2750,  2727,  3595,  2806,  2757,  2758,
    2759,  2760,  2694,  2695,  2289,  2290,  2353,  2768,  3090,  3282,
    3297,  3091,  3092,  3093,  3094,  3095,  3096,  3097,  2836,  2837,
    3496,  3497,  3498,  2832,  2833,  3328,  3312,  3313,  3314,  3511,
    3152,  2620,  2621,  3602,  2629,  2630,  2667,  2975,  2668,  1358,
    3153,  3322,  3381,  3315,  2767,  3276,  3489,  3635,  3490,  3491,
    3492,  3779,  2291,  2693,  2292,  2698,   884,   474,  2293,  2294,
    1439,  1440,  3693,  3701,  3705,  3694,  3706,  3702,  3695,  3696,
    3697,  3708,  3704,  2428,  3359,  3360,  2685,  2902,  3639,    68,
    1372,   922,   931,   927,   945,   578,  1373,  1893,  2359,  3334,
     561,  1883,  3269,  3022,  3273,  1884,  2707,  1885,  3009,  3256,
    1886,  3037,  3271,  3484,  2708,  2709,  1887,  1888,  1889,  3021,
    3030,  3628,  2295,   123,  1641,  2764,  2335,    69,  1331,  1326,
      70,   895,   890,   891,  1329,  1330,  1765,  2225,    71,   825,
      72,   581,    73,   589,  1412,    74,  1239,  2170,  2171,  2172,
      75,   946,    76,    77,   590,  1419,  1420,  1421,    78,  1224,
     130,    79,   814,  1234,  1236,  1237,    80,   583,   584,  1381,
      81,  1672,  2137,  2138,   951,   952,  1387,  2926,    82,    83,
     550,   523,   831,   524,   525,  1705,  2190,  3596,   843,   844,
     845,  2605,  1256,  1257,  1536,  2195,  1706,  2610,  1024,   723,
     724,   725,   726,  1121,  1122,  3316,   727,  1131,  1600,   728,
     729,   730,   731,   732,   733,  2489,  2870,  2543,  2445,  3142,
    3370,  3709,  3934,  3828,  3371,  3372,  3562,  3716,   734,  2862,
    2863,  3167,  1627,  1537,  1538,   735,  2000,   736,  1114,  1585,
    1512,  3159,  2855,  3387,  3566,  1456,  1969,  2460,  2545,  2070,
    1986,  2468,  1049,  1050,  1014,  1976,  1462,  1772,  1773,  1774,
    1775,  1776,  3244,  3243,  3245,  3608,  3450,  3610,  3454,  2236,
    1777,  1778,  2643,  2989,  2661,  2662,  3465,  2227,  1779,  2649,
    3766,  3462,  3463,  3873,  3872,  3464,  3249,  3250,  3002,  3003,
    2362,  2363,  2364,  3612,  1503,  1561,  1504,  1510,  1208,  1209,
    1457,  2134,  2560,  3435,  3599,  2087,  3215,  3598,  3752,  3859,
    1890,  2733,  2734,  2192,  2193,  2665,  3006,  3035,  1282,  3597,
    2562,  1739,  1740,  3139,  4163,  2677,  2375,  3960,  2155,  2156,
    3862,  4030,  4107,  4108,  4109,  2957,  2958,  3219,  3220,  2194,
    2602,  2959,  3436,  3757,    84,   478,    85,  2099,  2111,   948,
    1443,  1444,   747,   491,    86,   500,  2135,    87,   517,  1693,
     797,   818,  1242,  1243,  2179,  2582,  2589,  2180,  2594,  3208,
    2584,  2937,  2938,  2103,  2104,  2585,  2940,  3205,  3190,  3191,
    2922,  3419,    88,   538,  3000,  2656,  2657,  3836,  3837,   819,
      89,   477,  1001,  1957,  1449,  1956,  1002,  1003,  1959,   615,
     616,    90,   535,  1307,  1308,  1309,  1755,    91,   528,   885,
    2633,  1734,   810,  1166,  1286,   888,  1287,  1720,  2209,  1267,
      92,   918,   917,    93,   557,  1350,    94,   760,  1184,  1185,
    1649,  2112,    95,   518,   823,   824,    96,   512,   811,  1686,
      97,   504,    98,    99,   800,  1217,  2923,  3839,  4018,  1671,
    1218,  3131,  3864,  3977,  3978,  3980,  4038,  4039,  4130,  4150,
    4169,  4170,  4173,   738,   905,   739,  3479,   740,   741,  2590,
    2591,  3710,   742,  3838,   743,  2686,   898,  1446,   497,   451,
     568,   906,  2565,   745,  3675,   925,   972,   453,   454,   100,
     846,   527,  1260,  1261,  1262,  1715,  1716,   889,  2075,  1717,
    1718,  2206,  2201,  3227,  2981,  2973,   101,   803,  1186,  1222,
    1223,  2143,   102,   537,   103,  1210,  1665,  1666,  2131,  2559,
    2132,   104,   827,   105,   784,  1659,   785,  1188,   786,   787,
    1200,  1195,  1203,  1197,  3577,  3411,  3412,  2119,  1169,   973,
     974,  1652,  2114,  2115,  3185,  3414,  3583,  3584,   106,   134,
     459,   592,   963,  1250,   107,   108,   109,   110,  1253,  1343,
    2186,  1344,  1345,  1346,  1786,  1703,  2521,  1112,  1579,  2899,
     601,   989,   981,   124,   125,   126,   604,   605,   127,   943,
     944,  2360,  2780,  3109,  3337,  3338,  3533,  3680,   983,  3539,
    4009,  4127,   984,   985,  2801,  3541,  3817,  4011,  4103,   986,
    2412,  3117,  3681,  3925,   111,   907,   547,  1341,  1336,  1338,
    1782,  2243,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3330
static const int yypact[] =
{
    4650,  2250,  1133,  1232, -3330,   444,   748, 41548,   813,  1232,
    1232,   572,  3276, -3330, -3330, -3330, -3330, -3330,  2842, -3330,
   41548,  1133, -3330, 23729, -3330, -3330,  1000,   338,   289,  1232,
    1133, -3330, 41548, -3330,   774,  1081,  1133, -3330, -3330,  1232,
   -3330,   572, 41548, -3330,   929, -3330,   -85,   -81,   864,   893,
    1084, -3330, -3330, 41548,  1822,  -138,  1432,  1329, -3330, -3330,
    1104, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, 24307, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330,  1352, 41548,  1358, 41548, -3330,  1340,
   41548, 35808, 41548,  1071,  1435, -3330, -3330,  1477, -3330, -3330,
    1232, -3330, -3330, -3330,   572, -3330, -3330, 23729, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330,  1040, -3330, -3330,  1132, -3330, -3330, -3330,  1639,
    1471, -3330,  1513, 35808, -3330, 41548, -3330, -3330, -3330,   271,
   -3330,  1215, -3330,  1235,  1535,  1538,  1567,  1238, 12571,  1584,
    1584,  1584, 41548,  1660,  1584,  1584, 41548, -3330,  1584, -3330,
    1584,  1232, -3330, -3330,  4065, 41548,  1517,   192,   530, 35808,
     185, 41548, -3330, -3330, 12571, -3330,  1645, 23729, -3330,  1232,
    1857,  1730,   235, 41548, -3330, -3330,  1232,  1042,    -9, -3330,
    4712,   153, -3330, -3330, -3330,  2508, -3330, -3330,  3705, -3330,
   -3330, -3330,  1366, -3330, -3330, 23729, 41548,  1232,  1699, -3330,
   -3330,   222,   222,   222, -3330,   222, -3330,   222, -3330,  -138,
    1319, -3330, -3330,  1332, 41548,   625,   915, -3330, -3330,  1376,
     568, -3330,  1439, 32938, -3330, 41548, -3330, -3330, -3330, -3330,
    1634, -3330, -3330, -3330,  2279, -3330, 23729, 41548,  1524, -3330,
   -3330, 23729, -3330,     2, -3330, -3330,  1400, 41548, -3330, 23729,
   23729,   850,  1219,    84, 41548, 41548,  1832, -3330,  2005, 32938,
    1602, -3330,   603,   -50,  1477,  2008, -3330,  1471, -3330, 41548,
   41548, 41548, -3330, -3330, -3330, 37530,  1238,  1442,  1448,  1450,
   16141, -3330,  1461,  1475,  1478, 12571,  1483,  1490,  1498,  1504,
    1508,  1519,  1550,  1556,  1563,  1563,  1566,  1576,  1603,  1643,
    1463,  1653, -3330,  1662,  1674,  1676, -3330, -3330,  1680,  1686,
    1703, -3330,  1718,  1720,  1731, 13166,  1738,  1759, -3330, 20835,
    1765,  1778,  1783,  1794,  1796,  1803,  1805,  1812,  1829, -3330,
   -3330, 12571,  1841,  1846, -3330, -3330,  1856, -3330,  1858,  1865,
    1868,  1872,  1875,  1877,  1879,  1881,  1883,  1885,  1892,  1894,
    1898,  1901,  1904,  1906,  1915,  1924, -3330,  1479,  1934,  1971,
    1551,  1975, -3330,  1979, -3330,   256,  1982,  1563,  1563,  1563,
    1997,  2006,  2010,  2016,  2024, 16141, 16141, 16141,  9596, -3330,
   41548, -3330, 41548,   674,  2500, -3330,  2334, 16141,   207, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330,  1453,  1600, -3330,
   -3330, -3330, -3330, -3330,  2026,  1601,  2083, 41548, 41548, 41548,
    1902, 41548, 41548, 35808,  1853, 41548, 32938, 23729,  1584,  1739,
    3019,  1870,  1850,  1346, -3330, -3330, -3330, -3330, -3330,  2033,
   -3330, -3330,  1978, -3330, -3330, -3330,   133, -3330,    68, -3330,
   -3330, -3330, -3330, -3330, -3330,  2014,  1769, -3330, -3330,   123,
   -3330, -3330, 41548, -3330, -3330, -3330, -3330,  2379,  2158,   674,
     212,  2579,  2454, 23729, -3330,  1212, -3330,  -159, -3330, -3330,
    2375, -3330, -3330, 32938, 23729, -3330, -3330, -3330, 21413, -3330,
   -3330,  2596, -3330,  2064, -3330, 23729,  1870, -3330,  2319,  2227,
    1219,  2125, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330,  2098,  2508, -3330, -3330, -3330,  2537, -3330,
    2245,   270,  2140, -3330,  2112,  1204,   270, 33512,  2459,   856,
   -3330,   251, -3330,  2534, -3330, -3330,  2238, -3330, -3330,  2241,
    2244,  2451,  2243, -3330, -3330,   326,  2341, -3330, -3330,    79,
   -3330,   884,  2459,   270,   856, -3330,  2487,  2609,   987,  1075,
   -3330,   479, -3330, -3330,  2675, -3330, -3330, -3330, -3330, -3330,
   -3330,  2379, -3330, -3330, -3330,  2164, -3330,  2419,  2270, -3330,
   -3330,  1013, -3330,  2179,   702,  2634, -3330,   927, 34086, -3330,
   -3330, -3330,  2665,  2694,  1563,  2207, -3330, -3330, -3330,  2808,
   -3330, -3330,  2230,  2728,  2728,  2728,  2827, -3330, -3330, -3330,
   -3330, -3330,  2395,  2271, -3330,  1524, 23729,  -146, -3330, 38104,
   23729, -3330,   164, 12571, -3330, -3330,  3734,    93,  1365, -3330,
    2782,  2430, -3330, -3330, -3330, -3330,  2685, -3330, -3330,  2808,
    2745,  2728,  2648,  2261, -3330, -3330, -3330, -3330, -3330, -3330,
     232, -3330, -3330, -3330, -3330, -3330, -3330, -3330,  1486, -3330,
   -3330, -3330, -3330, -3330,  1524, -3330, 23729, -3330, -3330, -3330,
   23729, -3330,  2264, -3330,  2259, -3330, 12571, 12571,   305,  2793,
    2848,  2848,  2848,   674,  2294, 12571, 12571, 12571, 12571, 12571,
   12571, 12571,   311,  2272, -3330, -3330, 10191, -3330,  2275, 12571,
   12571,  2355, 12571,  1600, 12571, 24885,  1002,  2516, 12571,   448,
    2740, 12571, 12571, 12571,  9596,  3005, 12571, 12571, 24885,  2859,
    2277, -3330,  2276,   317, 12571, 12571,   324, 12571, 12571, 12571,
   12571, 12571, -3330, 10191, -3330, -3330, 12571, 12571, -3330, -3330,
   12571, 12571, 16141, 12571, 12571, 12571, 12571, 12571, 12571,  2848,
    2848, 12571, 12571,  1073, 10191, -3330, 12571,  1600,  1308,  1308,
   12571,  1600,  7216, 12571, -3330, -3330, -3330,  2282, -3330, -3330,
   -3330, 24885,  2848,  2848, 12571, 12571,  2793,  2793,  2793, -3330,
    9596,   161,  2285, 12571, 26041,  2280, -3330, -3330, -3330, -3330,
   12571, 12571, 12571, -3330, 16141, -3330, -3330,  1689, -3330, -3330,
   -3330, 13761, 16141, 16141,  2287, 16141, 16141, 16141, 16141, 16141,
    2625, 16141, 16141, 16736, 17331, 16141, 16141, 16141, 16141,  1017,
    2793, 35808, 16141, 12571, -3330,  2293, 41548, -3330, -3330, -3330,
    2288, 23729,  1853, -3330, -3330,   562,  2737, -3330, -3330,  2295,
     141, 23729,  2291, -3330, -3330, -3330, -3330, -3330, -3330,  2838,
   -3330, -3330, -3330,  2322,  2297, -3330, -3330, -3330, -3330, -3330,
   -3330,  2397, -3330, -3330, -3330,  2307, -3330,  2307, -3330, -3330,
    2307, -3330, -3330,  2307,    63,  3653, -3330, -3330, 41548, -3330,
   42122, -3330, 21413,   444, -3330,  2620, -3330, -3330,  2650, -3330,
    2627,   206,  2317, -3330, 23729, -3330, -3330, -3330,  2549,  1455,
   35808, -3330, -3330,   131,  2321,  2396,  2331, -3330,  2406, 23729,
   23729, -3330, -3330, -3330, -3330,    -9,   103,  2337,   734, -3330,
   41548, -3330,  1470, -3330, -3330, -3330,  2338, -3330, 12571, -3330,
    2348, -3330,  1651,  2710, -3330,   444, 12571, -3330, -3330,  2349,
    1471, 41548, 41548, 41548, 23729, 41548, 23729, -3330,  1103,  1103,
   -3330,  1131, -3330, -3330, -3330, -3330,   270, 41548, 41548,   270,
   32938, -3330, -3330, -3330,  2770,   856, 41548,   270, -3330,  2718,
    2449, -3330, -3330, -3330,  2785, -3330, -3330,  2776,  2359, -3330,
   -3330, -3330,   856, -3330, -3330, -3330, 23729, -3330, -3330,   856,
   -3330, -3330,   856,   856,   270,   270,  2413, -3330, -3330,  2367,
   -3330,  2413,  2502,   882,   222,  2595, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330,    81, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330,    80, -3330, -3330, -3330,  1665,  2843,
   -3330, 35808,  2769,   -49,  1289,  2769,  1887,   444,   984, -3330,
     984, -3330,  4386,  2624,   210, 23729, -3330,  2391,   444, 23729,
   -3330, -3330, -3330, -3330, -3330, -3330,  2377, -3330,  2380,  2393,
     674,  2844,  2847,  2850,  2851,  2855,  2856,  2857,  2860,  2861,
    2863,  2865,  2866,  2871,  2872,  2873,  2877,  2431, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330,  2480, -3330, -3330, -3330,
   -3330,  2219, -3330, -3330, -3330,    88,   826,  2455,  2477,  2985,
   32938,  2852, 41548, 41548,  1471, 41548, 41548, -3330, -3330,  -134,
    2693,  2695,  2698,  2446, -3330, -3330, -3330,  1143, 41548,  2864,
   28346,   124,   310,   902, -3330,  2848,  2448, -3330,  2450,  2452,
    2453, 12571,   197,   349,   951,  1573,  -187,   959,   355,   245,
    2848,  2456,  2457, -3330,   975, -3330,   426,   439,   981,   983,
    2463, -3330,  2465, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330,  2869, -3330,  1265, -3330, -3330, -3330, -3330,
    2458, -3330, -3330,   990,   482,   495,   263,  2464,   506,  1292,
    1485,  2469, 24885, 41548,  2848,  2470,   998,  1062,  2848,  2471,
     613,  1096,  1495,  1545,  1582,  1121, 12571,  1587, -3330,  1127,
    1169,  2472,  2473,   632,  1614,  2536,  1171,   683,   708,   710,
     720,  1173,  2474,  2476,   755,   290,  2848,  2478,  1196,   298,
   -3330,  2468, -3330,  2484,  1214, 10786, 11381, 11976,   288,   767,
   -3330,  2479, -3330,  2276,  2481,  2486,   306,  1241, -3330,  -138,
   -3330, 12571, -3330,   136,   993, -3330,  2630, 41548,  2211,   159,
   -3330, -3330, -3330, -3330, -3330, -3330,   906, -3330,  2489, -3330,
    2493,  1916,  2496,  9596,   970,  2496,  2684,  1854,  1854, 16141,
    2518,  2746, 13166,  1276, 13166,  1276,  2496,  2496,  2496, -3330,
   16141,  2495, 16141, 16141, -3330,  2793,   674,  2497,  2494,  -192,
   41548, -3330,   562, -3330, -3330, -3330, -3330,   113, 32938, -3330,
   -3330, -3330,   141, 35808,  2498, -3330, -3330,  2696,  3019, 23729,
   -3330, 41548, -3330, -3330, -3330, -3330, 21991, 21991, -3330, 21991,
   -3330, -3330,   273,   721,  3129,  2519, -3330, -3330, -3330, -3330,
   -3330,  2858, 23729, -3330,   883, 23729,  2391,  2501,  2501,  1092,
    2601, -3330,  2503, -3330, 12571,   444, -3330, 32938, 32938, 23729,
   23729,   427, -3330,  1559, -3330,   444,  2911, 21991, 21991, 21991,
   -3330, -3330, -3330, -3330, -3330,  1230, -3330,   674, -3330,  2509,
   -3330, -3330, -3330, -3330, -3330, 38678,   158, -3330, -3330,   444,
    2940, -3330,   674,  2538, 41548, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
     -63, -3330, -3330, -3330, -3330, -3330, -3330,  2681,   270, -3330,
   -3330, -3330, -3330, -3330,  2751,  2459,  2341,   270,   856, 23729,
     270,   270, -3330, -3330,  1852, -3330,   479, -3330, -3330, -3330,
   -3330, 41548,  2743,  2700, -3330,  2548, -3330, -3330, 23729, -3330,
    2550, -3330,  2968,  3103,  2459, -3330, -3330, -3330,   113,   113,
    2837, -3330,   444,  2678,  2680,  2683,  2688,  2689,  2721, -3330,
   -3330,   444,   444, -3330, -3330,   113, -3330,  1886, -3330, -3330,
   -3330, -3330,   444,   444,   444,   444,  2081,   444,   444,  1644,
   -3330, -3330,   113,   113, -3330,  1597, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330,  1200, -3330,  2364,  3098,  2805,   113,   113,
    3098,   113,  2810,  2811,   113,   113,  2658,  3058,   113,  2949,
    2691,  1995,  2950,   113, -3330,  2692,  3062,   113,   113,   113,
     113,  3098,  2821,  3140,   113, -3330,   113,  2830,  2833,   162,
    2835,  2845,   113,   167, 41548,   113,   113,   113, -3330, -3330,
    5536, -3330, -3330, -3330, -3330, -3330, -3330,   976, 22571, -3330,
   -3330,   395, -3330,  2791, -3330, -3330, -3330, -3330, -3330, 39252,
   -3330, 12571,  2081,   444,   444,   878,   444,  2081,   444,   444,
     444,   444,   444,  2081,  2081,   444,   444,  2081,  3734, -3330,
   -3330, -3330,   110,   113,   113,   113,   113, -3330,  1732, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, 35808,  2951,  1247,
     -26, -3330, 41548, -3330,  1629, 41548,  2619,  -135,  3401,   956,
     956, -3330, 23729, 23729, 23729, 41548,  2660,  2519, 28346, -3330,
   -3330,   882, -3330,  2615, -3330, 14356, -3330,  2626,  2870, 12571,
   -3330, -3330, -3330,  1328, 12571, 12571,  3080,  2170, -3330, 34660,
   -3330, -3330, -3330, 12571, 34660,  2170,  2636, -3330,  2870,  2637,
   -3330,  3013,  3015, -3330, -3330, -3330, -3330, 12571, -3330, 12571,
   12571, -3330, 12571, 12571, 12571, 12571, 12571, -3330, -3330, 16141,
   -3330,  2640,  2645,  2870, -3330, -3330,  2649,  2870, 12571, -3330,
   -3330, -3330, -3330, -3330,   674,  3065, -3330, -3330, -3330,  2672,
    2674, 12571, -3330, 12571, -3330, 12571, 12571, 12571, 12571, -3330,
    2870,  2870, 14951, 12571, 12571,  2659,  2870, -3330, -3330, 12571,
   12571, 12571, -3330, 12571,  1160, 12571,  1263, 12571,  1336, 12571,
   -3330, 12571, -3330,  2870,  2870, -3330, 12571, -3330, -3330, -3330,
    1707, -3330,  2656,  2657,  2661, 35808, 12571, -3330, -3330, -3330,
   -3330, -3330,  1002, 16141,   315,  2670, 16141, -3330,  2684,  3005,
    3005,  2066,  9596,   970,  2684,   105, 12571, 41548, -3330, -3330,
   -3330, -3330, -3330, -3330, 35808, -3330, -3330, -3330,  2291,  3007,
   -3330,  2391, -3330, -3330,  1740, -3330,  2666, -3330,  2677,  2755,
    2760,  2766, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330,  2459,  1559,  2778,  2699, -3330, -3330,
    2712,  3036, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330,  3245,  2702,  2501,
   41548,   674, -3330,  2777, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330,   686, -3330, -3330,  2703,  2703, 19677, -3330, -3330,
   -3330, -3330,  2952,  3124,  3126,  3130,   927, -3330,   778, -3330,
    1256,  3087,  2459, -3330,  3132, 36382, 28920, -3330,  2713,  3089,
    2716,   113, 31216,   833, 26618, 31790, -3330, -3330,   878, -3330,
      46, -3330,  1131,  1131,  2747, -3330,  2986, -3330, -3330, -3330,
    2519,   856, -3330, -3330, -3330,  2727, -3330, -3330,  1021,  3093,
    3094, -3330,  2971,  1237,  2971,  1021,  1021, 24885,   882,  2340,
   -3330,  2081,  3028, -3330, -3330, -3330, 35234, 32364, -3330, -3330,
   -3330, -3330,  3228, -3330,  3238,  1113, -3330, -3330,  1961,  1289,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330,  1887,  1961,  1961,   984, -3330,
     135, -3330, -3330, -3330, -3330, -3330, 25463,  1133, -3330,   138,
     175, 25463, -3330,   164,   164, -3330, 25463,  1133,   878,  2081,
   25463,  2081, 39826,  1133,   444,   444,  2342,   113,  2081, -3330,
   -3330,  3104, 41548,  3105, 25463, 25463, -3330, 35808, -3330,   113,
     117,  2081,   878,   878, 25463,  1133, 24885,  1012,  1857,   444,
    1133, -3330, -3330, -3330, -3330, 23729,  1133,  1133,  1818, -3330,
   -3330, -3330,  2081, 35808,  2749, -3330,  5345, -3330, -3330, -3330,
   19099, 41548,   286,   171, -3330,  2753,    45,   904,  2823,  1751,
    2754, -3330,  2758, -3330,  2761, -3330,   674, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,   444,
    1092,  1961,  1961,   826, -3330,  3001,  3167,   113, -3330,  1690,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,  2862,
   -3330,  2944,  2780, -3330, -3330,   240, -3330, -3330,   876, 23729,
   18521, -3330,  3010, -3330,  2643, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330,  2779,   882,  3020,  1391,  2519,  2790,
     124, 13166,  1269,  2870,  2786, -3330,   674, 12571,   674,  1647,
   -3330,  2788,  2788, -3330, -3330,  2789,  2788,  3159, -3330,  3160,
    2792, -3330,  2794, -3330,  1281,  2795,  2796,  2870, 12571, -3330,
    2870, 12571, 12571,  1309,  1378,  -100,   787,   804,   327, -3330,
    1386,  2775,  2870, -3330,  2870, -3330,  1402, 36382,  1082,   646,
   -3330,  3195,  3201,  1418,  1434,  1480,   811,  1585,  1814, -3330,
   -3330, 13166,  1591,   294,   343,  2870, -3330,  1609,   821,   844,
    1618, 12571,  1655, 12571,  1670, 12571,  1694,  1696, -3330, -3330,
    1700, -3330, -3330, -3330, -3330, -3330, -3330,  2797,   674,  2798,
   -3330, -3330, 12571, -3330,   207, -3330, -3330, 16141,   353,  2800,
   -3330,  3061,  3064,  2870, -3330,  2807,  1453, -3330, -3330, -3330,
   -3330, -3330, -3330, 41548,  2815, 29494, 32938, 32938, 32938,  2812,
   12571, -3330, -3330,  3067, -3330, -3330, 23729,  3197, -3330, -3330,
   16141,  3154,  3041, -3330, -3330,  2818,  2819, -3330, -3330, 32938,
   -3330,  2508, 24885, -3330,  2820, -3330,  2820,  1561,  2822,  1825,
   -3330, -3330, -3330,  2816,  2125,  3239, 32938, 32938, 32938, -3330,
    2519,  2519,   800,  2874,  3198, -3330, -3330, -3330, -3330, 40400,
   -3330, -3330, -3330, -3330,   939, 41548,  3179, 41548,  8406, -3330,
   -3330,  3358, 12571, 32938,  1135,   993,   113, -3330, -3330, -3330,
   -3330, -3330, -3330,  2459, -3330, -3330, -3330, -3330,  3157, -3330,
   -3330,   270,  1852,  -157, -3330,  1294, -3330, -3330, -3330,  3199,
    1021,  2971,  2971,  3202,  3088,   988,  2836, -3330,   113, -3330,
   -3330, -3330,  2508, -3330, -3330, 12571, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330,  1200, -3330, -3330, -3330, -3330, 12571,  3200,
    3203,   164, -3330, 25463, -3330, -3330, -3330, -3330, 25463, 25463,
     397, 39826, -3330, -3330, -3330, -3330, -3330, -3330,  2839, -3330,
   -3330,  1092, -3330, -3330, 32364,   444, -3330, 25463,  2839, -3330,
   -3330,   231, -3330,   444, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, 39826,  2846, -3330,   373, -3330, -3330, -3330, -3330,
   39826, -3330, -3330, 39826, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, 23729,  2485,  2011, -3330,  1833, -3330, -3330,
   -3330, -3330, 41548, -3330, -3330, 23729, -3330, -3330,  5699, 41548,
    3057, -3330, 12571, 12571,  3096, 41548,  3100, -3330,  3374, 41548,
    3427, -3330, 39252, -3330, -3330, -3330, -3330, -3330,  2878, 41548,
    1961,  1247, -3330, -3330,   876, -3330, -3330, -3330, -3330,  3106,
    3107, 41548, -3330, -3330, -3330, -3330,  2987, -3330, 23729,  3403,
   -3330,  3014,  1842,   566,  5386, -3330,  2879,  2881,  2882, 28346,
    2519,  3206, -3330, -3330, -3330,  3005, -3330, -3330,  3097,   674,
   12571,   143, -3330, -3330,   362,   905, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,  1453, -3330,
    3005,  3005, -3330, -3330,  3410,  3022, 12571, 12571, -3330, 12571,
   -3330,   216,  2876,  2886, -3330, -3330, -3330, -3330, -3330, -3330,
    2870, -3330,  2884,  2887, -3330, -3330, -3330, 12571, -3330, -3330,
    3005, -3330, 12571, -3330, -3330, 12571, -3330, -3330, 12571, 12571,
   -3330,  1709, -3330,  1728, -3330,  1743, -3330, -3330, -3330, -3330,
    2885, 41548, -3330, -3330,  1860, -3330, -3330, 12571, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330,   -98,   -98,   -98, 15546,
     674,  3347, -3330,    65, -3330,  3242, -3330, -3330,  2684,  1528,
   -3330,  1862, -3330, -3330, 41548, -3330,  2098,  2894, -3330,   113,
   15546,  2703,  3014, -3330, -3330,  1561, 24885, 28920, -3330, 32938,
    2261,  2261,  2261,  2459,  3300,  2778,  2778, -3330, 27195, -3330,
   -3330,  3039, -3330, -3330, 30068, -3330,  1580, -3330, -3330, 16141,
    1662, -3330,   674, -3330, 35234, -3330,   674,   113,  2899,  2900,
   -3330, -3330, 40974, 12571, -3330,  3346, -3330, -3330,  2901,   882,
   -3330,  1021, -3330,  3263,  3264,  1021, -3330, -3330, -3330, 24885,
    2519, 15546, -3330,   361,  2098,   674,  2905,   373, -3330,   629,
     674, 25463, -3330, -3330, -3330,  2912, -3330, -3330,  3389,  3391,
   -3330, 25463,  2219, 41548, -3330,  3358, -3330, -3330, -3330, -3330,
    5699, -3330, 24885, -3330, -3330, -3330, -3330, 41548, -3330,  2913,
   -3330, 19099, -3330, -3330, -3330,  2788,  2788,  2788, -3330, -3330,
   -3330, -3330, -3330,  2789,  3131, -3330,  2789,  2789, -3330, -3330,
   -3330, -3330, -3330,   362,   996, -3330, -3330,   362, -3330, -3330,
   -3330,   134,  1195,  2789, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330,  2788,  2788, -3330, -3330, -3330,   362,  2788, -3330,  2788,
    2515, -3330,   287,   121,  2788,  2788,  2788,  2915,  2910, -3330,
     674,  3005,  3436, -3330, -3330,  3054,   444,  3383, -3330,  1931,
   -3330, -3330,  1887, -3330, -3330, -3330,  3055,  1023, -3330,  3082,
    2928,  2930, -3330, -3330,   444,  2929,  2932,  5536, -3330, -3330,
   -3330,  3507, -3330, 41548, 41548, 41548,  2615, -3330,  1131, -3330,
    1313,  3480,  1217,   674,  2935,  2936,  2937,  2938,  3502,   209,
   -3330,  3502, 34660, -3330,  1937,  2945,  2948, -3330,   222,  2954,
    1763,   846,  1946,  3232,  3305, -3330,  3155, -3330, -3330,  3205,
    3208,  1771,  1331,  1788,  1792,  1798,  1800, -3330, -3330, -3330,
   -3330, -3330, -3330,  1949,   111,  2984,  2984,  2984,  1662,   674,
    1964, -3330, -3330,  3338, -3330,  2973,  2969,  2972, 41548, -3330,
    3041, -3330,  2338, 24885, 15546,  2975,  2976, -3330,   702, -3330,
   -3330,  2982,  2261, -3330,  3525,  3395, -3330, -3330, 35808,  2989,
   -3330, -3330,  3292, -3330,    85,  3207, -3330, -3330, -3330,  1135,
    3109,  3112,   113,   674,   444,  1357,  2548,  2924,  3045,  1021,
    1021,  3069,  3048, 12571, 12571,  3024, -3330,  3020, -3330, -3330,
     703,  2338, 12571, -3330,  1092,  3041, -3330,  3030,  3032, 41548,
    3035,  3037, -3330,  3180,   286, -3330, -3330, -3330,  2515,  1133,
   -3330, -3330,  2839,   686, -3330, -3330,   828, -3330, -3330, -3330,
    1097, -3330,  3038,  1097,  1097, -3330,  2245, -3330,  3068,   362,
   -3330, -3330,  3070, -3330, -3330, -3330,  1097,  3040,   362, -3330,
   -3330, -3330,  1097, -3330, 35808,   444,  2638, -3330,  3081, -3330,
    3522,  3404, -3330,  2515, -3330,  3405,  3307, -3330,   362, -3330,
   -3330,  3502, -3330,   362,  3502,  1097,  3308, -3330,  1097, 41548,
   -3330, -3330, -3330, -3330, -3330, -3330, 41548, -3330,  1027,  1976,
     444, -3330, -3330, -3330,  3056,  3090, -3330, -3330, -3330,   904,
   -3330, 41548,  5699, -3330, -3330, -3330,  3010, -3330,  1036,  1984,
     373,  3059,  1986,  1991, -3330, -3330, 12571,  3603, -3330, -3330,
    3063, -3330,  7811, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   34660, -3330, -3330,  3502,  3316, -3330, -3330, 12571, -3330, -3330,
   -3330, 12571, -3330, -3330,  3353,  3501,  3614,  3615, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330,  3173,  3174, -3330, -3330,  3181,
   -3330, -3330,   112,  1748, -3330, -3330, -3330, -3330, 15546,  3428,
    3184, -3330, -3330, -3330, 41548,  3134, -3330, -3330,  1158, -3330,
   -3330, -3330, -3330, -3330, -3330,  3020,  2342, -3330, 27195, -3330,
   -3330, -3330, -3330, -3330,  3099,  3101,  8406,  3678, -3330, -3330,
    3144, -3330, -3330, -3330,  3145,   674,   674, 41548,  3206, -3330,
   -3330,   164,   164, -3330,   703,  1158,   373, -3330,  2000, 41548,
   41548,  2002, 41548, 41548,   866,   866,   866,  1963,  1963, -3330,
   -3330, -3330, -3330, -3330,  3477, -3330,   772,   249, 41548, -3330,
   -3330,   104, -3330, -3330, -3330, -3330, -3330,  1097, -3330,   222,
   -3330, -3330, -3330, -3330, -3330,   222, -3330, -3330, -3330, -3330,
    1563, -3330, -3330,  3371,  3143, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330,  3108, -3330, -3330,  3224, -3330, 47288,
   -3330, -3330,  -138,  3136, -3330, -3330, -3330,  1348, 41548, 23729,
    3096,  3284, -3330, -3330,   702,   566,  3014, -3330,    12, 41548,
   -3330,  3376,   -21,  3476,  1453, 12571, -3330,  9001,  3279, 13166,
     839,  1884, -3330, -3330, -3330,  3121,  3122,   373,  1830, -3330,
   -3330, 12571, 12571, -3330, -3330, -3330, -3330,   314,  3370,  2081,
    2081,  2081,  2081,  1748, -3330, -3330,  3171, 23729, 16141,  3227,
    2021, -3330, -3330,  1429,  2752, -3330,  1256, -3330, 12571, 12571,
    2459, 32364, -3330, -3330, -3330, -3330, -3330,  3450, 12571,  3135,
   12571,  3138,  2037, -3330, -3330,  3547,  3547, -3330, -3330, -3330,
   -3330,  2046,  2050,    12,  2078,  2086, -3330, -3330,   286,  3141,
   -3330, -3330, -3330,   760,   760,  2090, -3330, -3330, -3330,  2105,
   -3330,  2119, -3330,  1563, -3330, 12571,  3582,  3163, 41548,   785,
   -3330, 48436, 48436, 41548, -3330, -3330, -3330, -3330,  5394, -3330,
   -3330,   595, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330,  3695, -3330,  3127, -3330, -3330,  3150,  1110,
   -3330, -3330, -3330,  5699,  3559,  1751, -3330, -3330, -3330, -3330,
    3151,  2125,   113, -3330,    12, -3330, -3330, -3330,   373,  3152,
    3375, -3330,   -21, -3330, -3330, -3330,  3476, -3330, -3330,   701,
     373,  3720, -3330,  3005, -3330, -3330, -3330, -3330, -3330, 12571,
   -3330, -3330,  2137,  2142, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, 24885, -3330, -3330,  1092, -3330, -3330, 41548,  3146,  3235,
     113,  3624,  3625,   113,   113,   113,   113,  3158,  2752, -3330,
    3604, -3330,  -168,   373,   674,  3369, -3330,  3684,  3608,   674,
   41548,   674, 41548, -3330, 41548,   741, -3330, -3330,  3354,    12,
   -3330,   -21,  3476, -3330,  3041, -3330,  3754, -3330,   982, -3330,
   -3330,   104, 41548,   362,   222,   362, -3330,   674, 12571, -3330,
   12571,  3192, -3330, -3330,  3584, 41548, -3330, -3330, -3330, -3330,
   12571, -3330, 47288, 47288, -3330, -3330, -3330, -3330,  3737,   702,
    3709,  3425,  3713,  3092, -3330, -3330,  3374,  5699, -3330, -3330,
    2081, -3330, -3330, -3330,  1586, -3330, -3330, 12571, -3330, -3330,
    3442,  9001,   742,   373,  2870,  2870,  3185, -3330,   113,  2342,
    3188, -3330,  3227, -3330, 16141,   607,   444,   113,   113,  2136,
    2136,  1092, 35808,  3290, -3330, -3330,   113,   120, 12571, -3330,
   -3330, 41548, -3330,  1051,  3535,   878,  2147,  2171, -3330,  3740,
   -3330,  3741,  3204,  3209, -3330, -3330, -3330, -3330,  2188, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330,   674,   674, -3330,
     199, -3330, -3330,  3571,  3656, 12571,   674, 44418,  3211, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, 47862, 12571, -3330,   595,  3695, -3330,  3451, -3330,
    3453, -3330, -3330, -3330,  3680, 47288, -3330,  3674, -3330,   702,
   -3330, -3330,   373,  1327, -3330, -3330, -3330, -3330, -3330, -3330,
   24885, 15546, -3330, -3330, -3330,  2191, -3330, -3330,  2684, -3330,
   17926, -3330, -3330, -3330, -3330,   444,   444, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330,  2197, -3330, 35808, -3330,
   -3330,   373, -3330,  3760,  3763,  3671,  3765,  1051, -3330,   -78,
   -3330,  3796, -3330, -3330, -3330, -3330, 39252, 39252, -3330,  3246,
   12571, 47288, -3330,  3673, -3330,  3609,  1779,  3553,  3222, -3330,
    3220,   526,  3710, 48436, 48436, -3330, -3330, -3330, -3330,  3686,
   -3330, -3330, -3330,  3442, -3330, -3330, -3330, -3330,  3684, -3330,
   16141,  3231,  3234, -3330, -3330, 35808, -3330,  3290, -3330, -3330,
    3233,   222,   222,  3781,   222, -3330,  3782,  3783,   -78, -3330,
    3558,  3240,  2199, -3330,   201, -3330,   674, 44992,  3779, 41548,
   -3330, -3330, -3330, -3330, 12571, -3330, 36956, 45566,  3237, -3330,
   -3330, -3330,  3402, -3330,  3092, -3330,  3535, -3330, -3330, -3330,
    2752, -3330, -3330,  3244, -3330, -3330,   222, -3330,   222,   222,
   -3330,  3691, -3330, -3330, 12571, -3330,  3698,  3329, -3330,  3248,
   -3330, 47288,   907, 47288, -3330, -3330,  3651,  3250,   941, -3330,
    3247, -3330, -3330, 47288,  3639, -3330, 12571,  3255,  3258, -3330,
   -3330, -3330, -3330,  2081,   674,  3800, 47288, 41548, 42696,  3443,
   46140,  3685, 41548,  5699,  3687,  3688, -3330, 47288, -3330,  3523,
    3269,   674, -3330, -3330, -3330,  3357, -3330, 43270, -3330,  2274,
   -3330,  3294, -3330, -3330,  3756,  2220, -3330, -3330,  3622, 20255,
    3424, -3330, -3330, 47288, 47288, -3330, -3330, -3330, 30642, 12571,
   -3330,  3318, -3330, -3330, -3330,   927, -3330, -3330, 35808,  2205,
   -3330, -3330, 24885, -3330, 43844, 46714, -3330, -3330, -3330, 27772,
   -3330, -3330, -3330,  3701, -3330,   674, -3330,  1600, -3330, -3330,
   -3330, 23149,  3185, 30642, -3330, -3330, -3330, -3330, -3330
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3330, -3330, -3330, -3330, -3330,   215, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330,  1770, -3330, -3330, -3330, -3330, -3330,
    1959, -1673, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
     768,  1604,  3278, -3330,   533, -3330,   203, -3330, -3330, -3330,
   -2658,    70,  -121, -3330, -3330,   320,    20,  2960,  -118, -2934,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,   547,
     544, -3330, -3330,   359, -3330, -3330, -2030, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330,  -296,  -247, -3330, -3330, -3330,
   -3330,  -253,   370, -3330,   371, -3330,   372, -3330,   374, -3330,
     375,   378,   379,   381, -3330,   382, -3330, -3330,  -243, -3330,
   -3330, -3330, -3330,   384, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330,  -128, -3330, -3330,    27, -3330, -3330,  -126,   391, -3330,
     -80,   396, -3330,   398, -3330,    14, -3330,    13, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
    2962, -3330, -3330, -3330, -2077, -3330, -3330, -1967,  2562, -3330,
   -1586, -3330, -3330, -1766, -3330, -3330, -1634,  1033, -3330, -3330,
    1181,   345, -3330, -1302, -1728, -1689, -3330, -3330, -3330, -1818,
   -1805,  -724,  2302, -1088, -2029, -3330, -3330, -3330,   390, -3330,
   -3330, -2335,  2566, -3330, -3330, -3330,  1611, -3330, -3330, -3330,
   -3330,  1369, -3330, -3330,  1008, -1497, -3330, -3330, -3330, -3330,
   -3330, -3330,   208,   356,   101, -3330, -3109,   746, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330,   -73,    -2, -3330, -3330,   -77,
   -3330, -3330,  -119, -3330,   205, -2137, -3330, -3330, -3330, -3330,
    2524, -1211, -3330,  3481, -3330,  -481,   829,  2075, -2242, -1296,
    -858,  -850, -2270, -3330, -3330, -3330,   492,  1165,  1540,   921,
    2079, -1751,  1610,  1677, -3330, -3330,   947, -3330, -2965, -3330,
   -3330, -3330,   908, -3330,   909, -3330, -3330, -3330,  -871,   872,
    -838, -3330,   473, -2294, -2267, -3330,   706, -3330,   658, -3330,
    -523, -1918, -2206,   137, -3330, -3330,   671,   952,  1004, -3330,
   -2896, -1554, -3330, -3330,   213, -3330, -3330, -3330,   202, -3330,
     491,   350, -3330, -3330,  -935, -1996, -3330, -3330,  3974,  3975,
    -967, -2143, -3308,   217,   218, -3330, -3330, -3330,  2552, -1237,
     295,   291,   292,  2045, -1146,   447, -2083, -3330,   493, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330,  2127,  -180, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -2190,   997, -3330, -3330,  1673, -3330,
   -3330, -3330, -1713,   591, -1587, -3057, -3330, -3330, -3330, -3330,
   -3330, -3330,  1733, -3330, -3330,  2240,  2690, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330,   743,  1851, -3330,
   -3330, -3330, -3330, -3330, -3330,  1003,  2603, -3330, -3330, -3330,
      15, -3330, -3330, -3330, -3330,  2333, -3330, -3330,  3076, -3330,
   -3330, -3330, -3330,  1462,  1890, -3330, -3330, -3330,  -911,  1844,
    -534, -1549, -3330,  3483, -3330, -3330, -3330, -1550, -2254, -3330,
    3189,   436, -2580,  2330,  -599, -2003, -3330,  1548,  -628,  3281,
   -3330, -1072, -1044, -3330, -3330,  -581, -3330, -3330, -3330,  -598,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330,  1549, -1800, -3330,
   -3330, -1063,    24, -3330,   330, -3330, -3295, -3329, -3330, -3330,
   -3330, -3330, -3330,  2888,  -986, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330,  2178, -3330,  2055, -3330,  -440,
   -3330, -3330, -3330,  2993, -3330, -3330, -3330, -2089, -1775,  1806,
    1056, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -2126, -3330, -3330, -3330, -3330, -3330, -3330, -1551, -3330, -1757,
     430, -3330,   583, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
      64,  1270,    66, -1930, -1008,  2965,  1515, -3330, -3330, -1195,
    -732, -1879, -3330, -3330, -3330,  1958, -3330, -3330, -3330, -3330,
   -3330, -3330,  1024, -2366,  2711, -3330, -3330, -2932,  -840, -2086,
    -808, -3330, -2101,   600, -1782, -1659, -2165,   214, -1047, -3330,
   -3330, -3330, -3330, -3330,   -74, -3330, -3330, -3330,   622,  1871,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,  -411,  -428,
   -3330,  2108,  2289, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330,  2853,  2831,  1932, -3330, -3330, -2097, -3330, -3330,
    1896, -3330,   867, -2145, -1639,  1134, -3330, -3330,  1136, -2911,
   -3330, -3330, -3330, -3330, -3330, -3330,  1074,   -93,   140,  3543,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330,  2635,  -981,  3466,
   -3330, -3330, -3330, -3330, -3330,  2328, -3330, -3330, -3330, -3330,
   -3330,  2806,  3560,  -527, -1159, -3330,  -650, -3330, -3330,  -823,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,  2441,
   -3330,  1339, -3330, -3330, -3330,  2849, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330,  1172,    78, -3330,   125,    34, -3330,    67, -3330, -3330,
   -3330,   -90, -3330,  -629,  -900, -1242,   797, -1661,  -670,  1162,
    2854, -2596,  -563, -1077, -1091, -1691,   181, -3330, -3330,  2532,
       9,  -736,  -137,    -7, -2625,  -102,  -514, -3330, -1643, -3330,
   -3330, -3330, -3330,  2394, -3330, -3330, -3330, -3330,  1484, -3330,
   -3330, -3330,  1129, -3330,   885,   670, -3330, -3330,  2392, -3330,
    2442, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330, -3330,  2875,  3598,  3293, -3330,  2916,
   -3330, -3330, -3330, -3330, -3330,   543, -3330,   978, -3330,  -385,
    2697,  1186, -3330,  1569,  -108,  -357, -3330,   541, -3330, -3330,
     889,  3605,  3295, -3330, -3330, -3330, -3330, -3330, -2540,  -822,
   -3330, -2590, -3330, -3330, -3330, -3330,  2059,  -973,  3021,  1607,
   -3330, -3330, -3330,    60,  3662,  3663, -3330, -3330,  -116, -3330,
     538, -3330, -3330, -3330, -3330, -3330, -3330, -3330,  3530, -3330,
   -3330, -3330, -3330,  3531, -3330, -3330, -3330, -3330, -3330,  3533,
   -3330, -3330, -3330, -3330, -3330,  1482, -3330, -3330, -3330, -3330,
   -3330, -3330, -3330, -3330
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2381
static const yytype_int16 yytable[] =
{
     452,   887,  1154,   980,   988,   883,  1349,  1025,  1027,  1254,
    1572,  1033,   966,   492,   136,   913,   498,  1386,  1351,   570,
    2154,  2487,  1009,  1451,  1571,   511,  1674,   450,  1545,  2068,
    1165,  1441,  1442,  1277,  2271,   522,   493,  1517,   737,  1741,
    2588,  2670,  1314,  2632,  1064,   509,   539,  2722,  2561,   926,
    1283,   516,  1591,  2988,  2948,  2106,  2618,  2622,  2624,  1599,
    1315,  2462,  1809,  1482,  1356,  3268,  2465,  1085,  1087,  3007,
    2821,  1091,  1357,  2752,  1283,  3253,  1880,  1636,  2436,  1098,
    1099,  1100,  1541,  1542,  2288,  2811,   559,  2813,  1601,  1602,
    3248,  2224,  1605,  1606,  1607,  1608,  1051,  1610,  1611,  1613,
    1615,  1616,  1617,  1618,  1619,  2283,  2607,   897,   562,  2654,
     452,  2636,  2637,   452,   569,   575,  3103,  1106,  1107,  1108,
    2367,  2405,  2718,  2296,  1930,  2377,   996,  2300,  3576,  1150,
     559,  2383,  2384,  2702,  2406,  2387,  1748,   564,  2315,  2645,
     566,  1206,  1206,  1787,  2284,  1149,  3468,  2655,  2324,  2246,
    2247,  1116,  1117,  1757,  3320,  2191,  3440,  2729,  2730,  1822,
    1684,  2838,  2394,  1760,  1761,  1201,  2258,  3285,  3290,   591,
     947,  3291,  3405,  2260,  1116,  1117,  1116,  1117,   957,   958,
    2332,  2147,  2815,  2276,  2277,  2834,  2438,   579,  2469,  2839,
    3300,  1639,  3292,  1353,  2634,  1198,  3319,  2354,  2688,  2298,
    2299,  1353,  2301,  2684,   496,  2304,  2305,  3481,  2696,  2308,
    3969,  2402,  3692,  2483,  2317,   849,   850,  2485,  2320,  2321,
    2322,  2323,  -776,  1353,  1206,  2327,   949,  2329,  2240,  3378,
    -482,  2688,  3717,  2338,  1316,  2688,  2342,  2343,  2344,  2279,
    2499,  2500,  1168,  1656,  1258,  3692,  2506,  2680,  2681,  2854,
    2403,  1410,  -483,  3144, -2285,   790,  1964,   902,  3163,  2101,
    1116,  1117,  3711,  2518,  2519, -1402,   849,   850,   808,  1207,
    1207,   820,  3128,  1151,   558,  2212,  1811,  1310,  1116,  1117,
    1695,  1639,   114,  2724,  2389,  2390,  2391,  2392,  1214,  2418,
    1472,  1094,  2339,  3430,  2762,  2544,  1360,  1154,  2699,  1235,
     794, -1402,   548,  1116,  1117,  1116,  1117,  3148,  2333,  1116,
    1117,  2689,  2541,  1116,  1117,  3770,  1288,  1454,   585,  3184,
    3149,  1116,  1117,  1454,  1894,  1116,  1117,  2936,  1281,  1454,
    1116,  1117,   977,  1974,  3150,  3991,  1454,  3991,  1936,  2409,
    3406,  2640,  1116,  1117,   849,   850,  1170,  1805,  -563,   135,
    1801,  1154,  1207,   606,  2725,  1154,  3202,  2796,  1116,  1117,
     520,   596,  2785,  2786,  1116,  1117,  3633,  1977,  1116,  1117,
    1116,  1117,  2770,  1378,  1384,  3405,   531,  1431,  1432,  1433,
     821,   795,  3148,  1252,  1434,   116,  3486,  3543,   505,  1215,
    1241,  1296,  3033,  3502,  1949,  3149,   529,   793,  1385,  2096,
     530,  4036,  3506,  3857,  3145,  1981,  1153,  2097,  3004,  3150,
     964,   965,  1435,  2601,  1246, -2219,   502,   903,  1950,   849,
     850,  1823,  3519,  2771,  3251,  3858,   942,  3521,  3550,  4037,
    1783,  1455,  2792,  1895,  1780, -2340,  3407,  1470,  1632,  1230,
     532,  1116,  1117,  1524,  3487,  1657,  2726,  1379,   822,   796,
    1528,  1095,  2763,   549,  1116,  1117,   569,  2797,   575,  2663,
    2444,  3875,  2340,  1742,   587,  2059,  1745,  2043,  2882,  2356,
   -1402,  2202,  1480,   978,  1750,   750,  1216,  2653,  3146,   575,
    3129,  2983,  2410,  1411,  1118,  1051,  1802,  1119,   788,   995,
    2943,  3034,   569,  1153,   798,  1430,  1356,  1116,  1117,   506,
     559,  1762,  1763,  3936,  1357,  1809,   812,  3585,  3025,  1118,
    1116,  1117,  1119,  3001, -2380,   809,  1265,  2703,  2690,  2705,
   -2219,  1116,  1117,  2203,  2992,  2542,  2716,  3018,   559,   899,
    2213,  2282,  3164, -1360,  3619,  1377,  3935,  1604,  1785,  2728,
    1949,  1116,  1117,  3406,  1636,  2737,  1596,   916,  1506,  3970,
    3700,  1507,  2283,  3015,  1625,  -563,   569,  1152,   930,  2823,
    2751,  1311,  2102,  1640,  1950,  2088,  1658,  1356, -1360,   559,
     452,  3773,  3132,  2765,   559,  1357,  2091,  1465,  1466,  2094,
     955,  2405,   559,   559,  1880,  2167,   791,   967,   930,  3408,
    1199,  2284,   569,  1118,  2406,   950,  1119,   941,  1505,  2220,
   -1402,  3409,   997,   998,   999,  2700,  3008,  1519,  1004,  2704,
    3014,  1118,  2635,   976,  1119,  3016,  3017,  3441,  3432,  1532,
    1533,  1534,   600,  2720,  2721,  2678,  1930,  2787,  1116,  1117,
    2085,  1544,  1202,  2731,  3027,  3720,  1118,  2401,  1118,  1119,
    1810,  1119,  1118,  2827,  2608,  1119,  1118,  1116,  1117,  1119,
    1685,  1164,  1052,  1640,  1118,  4055,  3466,  1119,  1118,  2354,
    2820,  1119,  2574,  1118,   994,  3878,  1119,  2847,  2715,  1759,
    2849,  2402,   829,  3147,  3126,  1118,  2644,  -776,  1119,  2691,
    2723,  2334,  2864, -2285,  2865,  -482,  1379,  3410,   802,  1116,
    1117,  1118,  2682,  3293,  1119,  3013,  1379,  1118,  1116,  1117,
    1119,  1118,  1935,  1118,  1119,  2886,  1119,  -483,  -398, -2285,
    2403,  1787,  2831,  1113,  1120,  1115,  -563, -1402,  3814,  1811,
   -1402,  2953,  2954,  1116,  1117,  1116,  1117,   503,  2683,  2354,
     904,  2784,  2071,  1289,  1379,  1116,  1117,  1120,  1987,  1120,
    1158,   452,  1160,  2911,   930,   452,   569,  3379,   452,   569,
     559,  3277,  3278,  1580,  1581,  1280,  2204,   940,  2790,  2838,
    1642,  3114,  2838,  2838,  1096,  1975,  3822,  3889,  1159,  4043,
    1116,  1117,  1163,  3128,  1118,  1167,  1746,  1119,  3830,  2838,
    3279, -1402,  1116,  1117,  1241,  1211,  2798,  1118,   599,  1724,
    1119,  3567,   507,  3301,  3204,  3634,   559,  1984,  3318,  3321,
    3323,  3324,  1116,  1117,  3409,  2588,   569,   559,  1297,   756,
    3775,   559,  1241,  1676,  3298,  3299,  1232,  2168,   559,  1116,
    1117,  3860,  3302,  1120,  3115,  3151,  1116,  1117,  1691,  3325,
    1118,  2357,  3229,  1119,   813,  1789,  1116,  1117,  1985,  1266,
    1936,  1120, -2219,  1118,  2167,  3019,  1119,  3272,  3209,  3317,
     569,  2408,  3928,  2541,  1118,  1580,  2004,  1119,  3802,  1116,
    1117,  1116,  1117, -2220,   919,  3238,  1120,  3213,  1120,  3242,
   -2219,  3258,  1120, -1820,  1118,  3459,  1120,  1119,  2831,  3922,
    2060,  3458,  3686,  2044,  1120,  1327,  2883,  3884,  1120,  3886,
    2048,  2049,  1633,  1120,  2993,  2994,  1923,  3949,  2065,  2066,
    3151,  3937,  3237,  1965,   959,  1120,  3241,  2531,  2532,  2600,
    3460,  1352, -1360,  3714,  1697,  2217,  2314,  1116,  1117,  2858,
    2859,  1120,  1116,  1117,  3195,  2215,  2772,  1120,  3257,  3869,
     521,  1120,  2955,  1120,  2219,  2884,  2885,  2222,  2223,   559,
     969,  3137,  1382,   559,  2245,  2906,  2907,  1283,  1983, -2343,
    3630,  1898,   135,  1945,  3688,  2283,  1328,  1809,   137,  2010,
    1508,  1118,  3793,  1509,  1119,  2481,  1116,  1117, -2220,  2987,
    1741,  1741,  3870,  2405,  1116,  1117,  1283,  2169,  2282,  2101,
    1118,  3129,  2440,  1119,  1221,   977,  2406,  2802,  2370,   559,
    1116,  1117,  3254,  1447,  2284,  1238,  1116,  1117,  1116,  1117,
    4013,  2425,  3753,  2288,  1120,  1116,  1117,  2623,  1822,  3803,
    3714,  2530,  1586,  1116,  1117,  3144,  3148,  1120,  4124,  1991,
    1379,  3545,  1118,   582,  2093,  1119,  3797,  3798,  1052,  3149,
    4017,  1118,  1992,  1284,  1119,  4125,  1151,  3364,  1805,  4029,
    2490,  1052,  2315,  3150,  2660,  2069,  2371,  4119,  1620,  1624,
    1880, -2343,  3024,   849,  3286,  1319,  1118,  2773,  1118,  1119,
    1120,  1119,  2641,  2402,  1356, -1695,  2542,  2078,  1118,  3600,
    3168,  1119,  1357,  1120,   920,  2002,  2168,  1116,  1117,   942,
    1285,  2535,  2536,  1810,  1120,  1454,  1572,  3446,  2003,  3776,
    3871,  1930,  3368,   455,  1573,  3880,  1162,  2401,  2803,  2006,
    2592,   921,  2403,  1118,  1120,  1258,  1119,   569,  3794,  2529,
    3486,  1116,  1117,  3451,  3452,  1118,  1698,  3715,  1119,  2539,
    2086,  3247,  2265,  3833,  2105,  2736,   978,  1634,  1683,   792,
    3922,   585,  3369,  3631,  3028,  1118,  1116,  1117,  1119,  2372,
     982,   990,  1116,  1117,   569,   458,  1572,  2140,  2426,  1629,
    1924,  3819,  1118,  2956,   559,  1119,  1633,   816,  4144,  1118,
    2658,  3810,  1119,  -398,   559,  3804,  3145, -2380,  3487,  1118,
    3811,  1811,  1119,  2163,  2164,  1116,  1117,  1438,  2072,   960,
    2266,  1445,  3777,   669,  1116,  1117,  1116,  1117,  1116,  1117,
    3973,  1120,  1118,  2205,  1118,  1119,  1805,  1119,  3950,  1556,
    3974,  1661,  2148,  1664,  1935,   559,  2018,  2267,  3778,   513,
    1120,  1116,  1117,  2373,  3715,  2407, -1695,   559,  1769,  3917,
    3255,  3547,  1668,   569,  1822,  2031,  1925,  2673,  3632,  1116,
    1117,  3932,   559,   559,  3383,  1572,  2169,  1658,  3341,  2079,
    3154,  1621,  1252,  1700,  1339,  2824,  2073,  3342,  2868,  2735,
    1118,  1709,  1120,  1119,  3461,  1118,  1116,  1117,  1119,  1791,
    2149,  1120,  3971,  1622,   452,   452,   452,   559,   452,   559,
    1823,  1822,  2804,  2268,  1721,   526,  2035,  2141,  1116,  1117,
    1743,   452,  2102,   569,  1116,  1117,  1120,  2150,  1120,   452,
   -2220,  1725,  1726,  1727,  3827,  1729,  1116,  1117,  1120,  1118,
    1270,  2036,  1119,  2037,  2233,  1936,   817,  1118,  1744,   559,
    1119,  2408,   880,  2038,  1633,  3881,  1749,  1923, -2220,  2869,
    1152,   533,  1769,  1118,  1116,  1117,  1119,  2005,  2997,  1118,
    2354,  1118,  1119,  1120,  1119,  2188,  2674,  2511,  1118,  4012,
    1865,  1119,  1631,  1116,  1117,  1120,  1118,  2269,  2042,  1119,
    2354,  1116,  1117,  2151,   569, -1696,  1271,  1320,  2697,  2697,
    2061,  1731,  1926,  3812,  2805,  1120,  1312,    43,   559,  1770,
     501,  1321,   559,  1771,   696,  1206,  1821,  3343,  4060,  4060,
    2856,  2282,  1120,  2229,  1272,  1868,   128,  1897,  1212,  1120,
    2427,  1634,  1736,  1116,  1117,  3756,   534,  2857,  3975,  1120,
    1031,  1116,  1117,  1133,  2877,  1281,  2397,  2188,  2374,  3690,
    1118,  1313,  1805,  1119,  2888,  1732,  1487,  1116,  1117,  3488,
    1623,  1413,  1120,   569,  1120,   452,   452,  2152,  1947,   452,
    2603,  2080,   551,  1116,  1117,  3147,  1340,  2889,  2074,  3391,
    2513,  1004,  1109,  1963,  1118,   612, -1402,  1119,  2081,  1116,
    1117,  2189,  1943,  1944,   536,  1728,  2822,  1730,  2142,  1805,
    1225,  1769,  3563,  1226,   129,  2905,  1737,  3531,  2650,  1118,
     880,   552,  1119,  1770,  2978,  1118,  2173,  1771,  1119,  2651,
    1120,   554,  1701,  1376,  1560,  1120,  1823,  1322,  2534,  2401,
     677,  1572,  1333,  4014,  1966,  1116,  1117,  1758,   560, -1402,
    2979,  1805,   613,  1207,   563,  2939, -1696,  2230,  1118,  1323,
    1491,  1119,  2604,  2515,  3755,  1052,  2011,  1118,    55,  1118,
    1119,  1118,  1119,  1414,  1119,  2231,  2928,  1415,   565,  1120,
    2096, -1402,  1437,  1823,  3151,  1810,  2232,  1120,  2964,  1416,
    2998,  2107,  2270,  1978,  1118, -1402,  2570,  1119,   961,  1634,
   -1402,  1982,  3493,  1120,  3287,  3088,  1896,  1324,  3976,  1120,
    2475,  1120,  1118,  3341,  4015,  1119,  3367,  1990,  1120,  2346,
   -1402,  1924,  3342,  1993,   576,  1994,  1120,  1633, -1402,  1783,
    2077,   131,  2001,  1136,   132,  1733,  1273,   577, -1402,  1118,
    2014,   116,  1119,  1481,  3377,  3467,  1702,  3382,  2498, -1402,
    1116,  1117,  3480,  1227, -1402,  1492,  1116,  1117,  3368,  1495,
    2233,  1118,  1770, -1402,  1119,  -190,  1496,  1118,  3532,  1633,
    1119,  1822,  2153,  2098,  1116,  1117,   962,  3546,   614,  1118,
     514,   569,  1119,  1116,  1117,  1325,   569,  2413,  1434,   587,
    1120,  3494,   559,  2980,  2113,  3480,   598,  1681,  3369,  2118,
    2118,   588,  2118,  3738,  2015,   591,  2546,  1118,  2414,  1417,
    1119,  1738,  1116,  1117,  2652,   559,  1436,   754,   559,  1935,
    1116,  1117,  3739, -1402,  1120,  2407,  1118,   593,  3495,  1119,
     569,   569,   559,   559,  1118,  1116,  1117,  1119,  2019,  1682,
    2118,  2118,  2118,  3941,  2162, -1590,  1497, -1402,  4028,  1120,
    3981,   595,  3343,  2408,  2181,  1120, -1402,  1274,  2200,  1116,
    1117,  1116,  1117,  2023,  1822,  1116,  1117,  2211,   607,  2027,
    3196,  2234,   849,   850,  1116,  1117,  1118,  1275,  2207,  1119,
    3840,  1788,   131,   880,  1118,   132, -1590,  1119,  1120, -1402,
     466, -1673,  1958,  1116,  1117,   609,  1499,  1120,   610,  1120,
    1118,  1120,   559,  1119,  3294,  1418,  2697,  3295,  1116,  1117,
    1923,  2028,  3197,  2034,  2228,  2039,  1118,  3520,  1276,  1119,
    3522,   559,  1254,  3912,  1120,   880,  1190,   611,  1116,  1117,
     669,  2235,  1118,  2714, -1402,  1119,  1116,  1117,  2047,   241,
     746,   243,  1120,  2984,  1116,  1117,   669,  3726,  3727,  3728,
    3729,  2249,  1923,  1116,  1117, -1402,  2052,  1116,  1117,  1805,
    2256,  2257,  1634,  1116,  1117,  1116,  1117,  3140,  2986,  1120,
    2314,  2261,  2262,  2263,  2264,  1283,  2272,  2273,  1118,  3564,
    3866,  1119,  3867,  2067, -1673,  2395,  1711,  2117,  2117,  2447,
    2117,  1120,  3155,  3156, -1402,  1116,  1117,  1120,   751,  2397,
    1592,  1191,   540,  2139,  1634,  1572,  1221,  1998,  1153,  1120,
     789,  2826,  1145,  1146,  1147,  1148,   801,  2341,   669,  2592,
    1238,  2166,  3172,  2844,  2776,  1500, -1673,  2463,  2117,  2117,
    2117,  2355,  2463,  1823,  2007,  1153,  3676,  1120,  1502,  2777,
    2990,  2744,  2365,  2745,   541,  1192,  1741, -1402,  2005,  1116,
    1117,  2852,  1805,   805,  1712,  3365,  1120,   807,  1572, -1402,
    1193,   914,  2368,  2369,  1120,  2376,  2005,  2378,  2379,  2380,
    2381,  2382,  2658,  3399,  2385,  2386, -1402,  1633, -1402,   915,
     569,  2746,  2083,  1118,  3578,  2411,  1119,   894,   452,  1118,
    2221,  1572,  1119, -1590,  1805,   559,   559,   559,  2434, -1402,
   -1402,  2437,  2747, -1402, -1402,  2735,  1120,  1118,  1379,  2239,
    1119,  4047,   542,   817,  1120,  2416,  1118,  1369,  1370,  1119,
    2853,   696,   569,  2527,  3224,   792,  1823,   569,  2860,   932,
    1120,  1133,  3677,  1812, -1590,  2748,   923,   696,  3362,  3363,
    2439,   953,  1713,  3225,  2866,  1118,  1120,  1031,  1119,  2173,
     942,  2173,  2549,  1118,  1428,   970,  1119,  2174,  3676,  3676,
    2874,   971,  1120,  1031,  1924,   964,   965,   975,  1118,   114,
    1633,  1119,  1593,  3226,   908,   909,  2875,   910,  2848,   911,
   -1673,  3579,  3580,  1006,  3938,  3939,  3581,  3582,  3930,  1007,
    3448,  1008,  1118,  1133,  1118,  1119,  1153,  1119,  1118,  3260,
    3261,  1119,  1010,  3820,  1032,  3714,  1924,  1118,  1120,   696,
    1119,  4118,  1633,  4120,  2285,  2935,  1011,  2407,   569,  1012,
    1086,  2148,  2876,   642,  1015,  3841,  1118,  2008,  1522,  1119,
    2285,  1016,  2537,   880,  1813,  1031,  4137,  2020,  1153,  1017,
    2547,  1118,  2904,  3330,  1119,  1018,  1714,   569,  1805,  1019,
    2463,  3846,  2626,  2631,  3849,  3850,  3851,  3852,   904,  2977,
    1020,  1118,  1572,  3471,  1119,  2175,  2176,  2175,  2176,  1118,
    1393,  1394,  1119,  4174,  4175,  1979,  2939,  1118,  4151,  2149,
    1119,   647,  1925,  2430,  2431,  2432,  1118,  2021,  1153,  1119,
    1118,  1021,  1090,  1119,  2669,  2463,  1118,  1022,  1118,  1119,
    2177,  1119,  2942,  2578,  1023,  2822,  2150,  1026,  2830,  3676,
    3676,  1136,  1634,  1120,  2675,  1980,  1153,  1028,  2311,  1120,
    2593,  2916,  2917,  2918,  2022,  1153,   880,  2878,  1118,  2025,
    2026,  1119,  3280,  2881,  2311,  3283,  3284,  1120,  2612,  2614,
    2278,  2265,  3963,  1133,  1029,   569,  1120,   569,   569,   543,
    1156,  2887,  3296,  2451,  2611,  1384,  2032,  1153,  3955,  3956,
    2890,  2950,  2951,  2952,  1594,  2549,  1633,  3968,   880,  2749,
     544,  1384,  2151,  1136,   658,  1120,  1116,  1117,  2452,  1385,
    1573,  1595,  1118,  1120,  1030,  1119,  2274,  2275,  1157,   569,
     569,  2549,  1161,  1814,  1034,  1385,  2148,  2892,  1120,  2266,
     545,  1187,  1815,  1035,  3676,  1634,  1405,  1406,  3388,  3715,
    1816,   114,  2894,   892,   893,  1036,   896,  1037,  1926,  3676,
    2453,  1038,  1120,  2454,  1120,  1413,  2267,  1039,  1120,  2355,
    1189,  2455,  3676,  2791,  2355,   933,  2896,  1120,  2897,  2355,
    4051,  1172,  2898,  2355,  1040,  2710,  2152,  1634,   675,  2523,
    1153,  3177,  2687,   546,  2149,  2710,  1120,  2355,  2355,  1041,
     569,  1042,  2701,  2712,  2713,  3703,  3707,  2355,  2711,  1573,
    3178,  1120,  1043,  3621,  3622,  2393,  3624,  3625,   559,  1046,
    2265,  4134,  2552,  2553,   934,  3179,   569,  1258,  2739,   880,
    2732,  1120,  2268,  2355,  2761,  2740,   115,  1817,  3676,  1120,
    1047,  2742,  2743,  1298,  1204,  3390,  1053,  1120,  1206,  2312,
    3676,  3676,  1205,  3398,   116,  1132,  1120,  1138,  1139,  1054,
    1120,  1009,   880,  1136,  1055,  2313,  1120,  1414,  1120,  1194,
    3400,  1415,  1299,  1653,  3401,  1056,  1654,  1057,  2266,  1655,
    3402,  2313,  3403,  1416,  1058,   133,  1059,  3957,  2783,   849,
     850,   456,   457,  1060,  3676,  1258,  2879,  1153,  1120,   935,
    4154,  4155,   559,  2355,  3676,  2267,  2269,  2945,  2946,  3162,
    1061,   508,  3721,  1300,  -562,  3040,  3041,   515,  1301, -1402,
     117,   519,  1063,  2285,  3127,  3041,  1818,  1065,  1143,  1144,
    1145,  1146,  1147,  1148,  2286,  3500,  3501,  1066,  3676,  1067,
    3676,  1634,  3182,  1153,  3199,  3200,  1068,   118,  3504,  1069,
    3676,  1133,  1120,  1070,  3507,  3703,  1071,  3183,  1072,  3707,
    1073,  3958,  1074,  3676,  1075,  3676,  1076,  3676,  1196,  2259,
    2612,  2268, -1402,  1077,  3676,  1078,  1207,  3523,  2456,  1079,
    3525,  2153,  1080,   704,  3676,  1081,  2611,  1082,  1141,  1142,
    1143,  1144,  1145,  1146,  1147,  1148,  1083,   119,  3722,  3723,
    3676,  3676, -1402,  1417, -1402,  1084,  2741,  1138,  1139,  3348,
     832,  3020,   580,  3335,  3336,  1088,  3615,  3616, -1402,  3375,
    3384,  3676,  3676, -1402,  3703,  3707,  3676,  -562,  3392,  1153,
    3303,  3404,  1153,   461,  2928,  -562,  2113, -1402,  1211,   569,
     569,   569,  3031, -1402,  2285,  2269,  3417,  3418,  1134,   559,
    3036, -1402,  1089,  3038,  3212,  2286,  1092,  1302,  3534,  2275,
    1093, -1402,   569,  1097,  1384,  1573,  3548,  3549,  3552,  3549,
    1135,  3304, -1402,  3553,  3549,  3305,   118, -1402,  1101,   569,
     569,   569,  3620,  3200,  3623,  3549, -1402,  1102,  1385,  3640,
    2807,  1103,  2963,  1562,  1562,  3640,   936,  1104,  2965,  1418,
    2967,  2270,  2463,  3736,  3737,  1105,   569,  1155,  2962,  1213,
    1483,  1484,  1485,  1486,  1487,  2457,  3380,  1219,  3306,  3763,
    3764,  1220,   120,  1233,   833,  2120,  1303,  2121,  3768,  3549,
    1572,  1136,  3769,  3549,  1244,  1133,  1123,  1124,  1141,  1142,
    1143,  1144,  1145,  1146,  1147,  1148, -1402,  1245,  -562,  1248,
     964,   965,  1249,  1133,   461,  1252,  3959,  1268,  1838,  1839,
    3771,  3549,   937,   621,   938,  2183,  2184,  2185,  3772,  3549,
   -1402,  1125,  3781,  3782,  1255,  2458,  2355,  4161,  1263, -1402,
    1126,  2355,  2355,  1264,  2710,  1384,   121,  3783,  3784,  1304,
    -687,  -687,  1841,  1269,   834,  3832,  1281,   569,  1290,  -687,
    2355,  3785,  3784,  1844,  2459,  1488,  1489,  1490,  1491,  1385,
    1291,  1845, -1402,  1292,  3026,  2710,  1293,  1127,  2287,  3834,
    3827,  1294,  3029,  2710,  3835,  3827,  2710,  1137,  1128,  3982,
    3764,  3474,  1847,  1295,  -562,  1317,   559,  2139,   642,  -701,
    2270,   122,  1318,  -864,  1332,  3042,  1353,  1334,   559,  1848,
    2033,  1335,  3098,  3983,  3764,  1129,  1337, -1402,   452,   748,
     749,  1342,  3108,   752,   753,  2365,  1347,   755,  1353,   757,
    3988,  3200,  3113,  4019,  4020,  1138,  1139,  1853, -1402,  4026,
    4027,  4083,  2782,  1359,  3123,  3104,  1140,  4190,  4191,   646,
    3948,   559,  3961,  3961,  1305,  1361,   647,  3626,  3627,  3186,
    3187,  1133,  3136,  1492,  1363,  1493,  1494,  1495,  3216,  3217,
    1130,  1366,  3740,  3588,  1496,  1136,  1367, -1402,   464,  3415,
    3416,  1371,  2229,   651,  1374,  1375,  1422,  1423,  1306,  1792,
    1424,   964,   965,  1136,  1427,  1033,  1087,  1091,  3307,  1572,
    1793,  3741,  1429,  1856,  1430,  3308,  3221,  1448,  1450,  1151,
    1454,  1857,  1461,  1096,  1473,  -562,  1511,  1475,  1521,  1254,
    1522,  1609,  2669,  1133,  1570,  1523,  1858,  1582,  1603,  1587,
   -1402,  1637,  3642,   758,  3885, -1237,  1646,  1630,  1638,  1643,
    1648, -1402, -1402,  1647,  3181,  3309, -1673,  1650,  1651,   658,
    1669,   804,  1133,  1670,  1497,  -562,  3948,  1673,   815, -1402,
    1675, -1402,  1679,  3601,  1687,  1688,  1141,  1142,  1143,  1144,
    1145,  1146,  1147,  1148,  1689,  1690,  3554,  2578,  1859,   900,
    1696,  1704, -1402, -1402,  1719,  1723, -1402, -1402,   479,  2593,
    3211,  1710,   569,  1751,  1747,  1860,  3043,  1752,  1753,   464,
    1754,   569,  1756,  1498,  1499,   669,  2230,  2547,  1764,  3310,
    1766,  1768,  3742,  1781,  1891,  1790,  3510,   569,  1899,  1138,
    1139,   674,  1900,   675,  2231,  2200,  3948,   835,   836,   837,
     838,   839,   840,   841,  1379,  2232,  1901,  1138,  1139,  3125,
    1902,  1136,  1573,  1903,   480,   842,  1904,  1905,  3678,  2861,
    1864,  1906,  1907,  1908,  2355,  1794,  1909,  1910,  1866,  1911,
     744,  1912,  1913,  2229,  2355,  3786,  2710,  1914,  1915,  1916,
    1116,  1117,   481,  1917,  1918,  1573,  -562,  1919,  1938,  1937,
    2710,  1940,  1942,  1952,  2355,  1953,   744,  3743,  1954,  1955,
    1968,  1961,  1970,  1989,  1971,  1972,  1997,  1171,  1988,  2005,
    2463,  1999,   482,  1136,  3744,  1995,  3311,  1996,  1572,  2233,
    2009,  2050,  2013,  2017,  2029,  2030,  2040,  3750,  2041,  2136,
    2046,  2062,  4171,  2063,  1795,  1872,  3745,  2051,  2064,  2076,
   -1070,  1572,  1136,  1500,  2082,  1148,  2092,  2026,  2133,  2095,
    2109,  2108,  2145,  2157,  2160,  1501,  1502,  2182,  1796,   483,
    1572,  1142,  1143,  1144,  1145,  1146,  1147,  1148,  2196,  1483,
    1484,  1485,  1486,  1487,  4171,  3332,  3437,  2208,  1141,  1142,
    1143,  1144,  1145,  1146,  1147,  1148,  3361,  3361,  3361,  1873,
    2210,  4074,  4075,  3353,  4077,  1138,  1139,  2230,  2214,  1174,
    2216,  2238,  2242,  2241,  1874,   569,   696,  1875,  2237,  2244,
    3475,  2248,   744,  3476,  2250,  2231,  2251,   744,  2229,  2252,
    2255,  1797,  1792,   702,  2253,  2254,  2232,  2285,   704,  2297,
    2234,  1876,   705,  1793,  2302,  2303,  4110,  2306,  4111,  4112,
    2307,  2309,  2316,  1877,  2319,  2325,  2326,   744,  1458,  1459,
    1460,  3426,  2310,  2318,  2330,  2331,  1573,  1138,  1139,  2336,
    1471,  2358,  2669,   744,  1488,  1489,  1490,  1491,  2396,  2337,
    2417,   569,  2435,  3921,  2439,   621,  3926,  1175,  2443,   -63,
    2450,  3750,  3477,  3478,   484,  2444,  1138,  1139,  2467,  2470,
    2235,  1525,  3924,  2471,  1529,  2472,  2814,  2482,   880,  2097,
    2233,  2484,  2488,  3447,  2491,  1798,  2492,   744,   744,   744,
     744,  2505,  3361,  3746,  4188,  2524,  2525,  1552,  1553,   744,
    2526,  1557,  2533,  2551,  3449,  2554,  1141,  1142,  1143,  1144,
    1145,  1146,  1147,  1148,  2556,  2122,  2555,  1176,  2463,  2557,
    1574,  1575,  2230,  3474,  3483,  2558,  2564,  2568,   485,  2569,
     642,  2571,  2566,  2572,  2583,  2123,  2579,   569,  2595,  1177,
    2231,  2596,  1492,  2597,  1493,  1494,  1495,  2598,  2189,  2188,
    2124,  2232,  2615,  1496,  3509,  2617,  3601,  2616,  2638,  2125,
    2642,  2639,  3526,  2648,  2646,  2647,  2664,  2671,  1794,  3530,
    1143,  1144,  1145,  1146,  1147,  1148,  3221,  2672,  2717,  2719,
    2753,   646,  2775,   486,  3123,  2779,  2788,   487,   647,  3535,
    2781,  2234,  2769,  1118,  2782,  2789,  1119,  1141,  1142,  1143,
    1144,  1145,  1146,  1147,  1148,   488,  2126,  2127,  2794,  1783,
    2793,  2795,   460,   569,  1865,   651,  1962,  2828,  2819,  2831,
    2835,  2840,  2841,  2872,  2842,  2233,  2843,  2845,  2846,  2873,
    2903,   489,  2908,  1497,  2128,  2909,  2901,  1795,  2910,  2912,
    1178,  2914,  1225,  2919,  2925,  2930,   490,  2921,  1179,  3453,
    2933,  2235,  2934,  2941,  2944,  2947,  2949,  3592,   964,   965,
    2960,  1796,  2961,  2966,  2974,  2985,  1838,  1839,  2996,  2999,
    2991,   569,  3023,  2995,  3011,  3099,  3102,  3012,  1180,  3032,
    3105,   658,  1498,  1499,  3106,  3110,  3118,  3119,  3124,  -405,
    3613,  4196,  2129,  3138,  2173,   461,  3157,  3166,  -687,  -687,
    1841,  3141,  3361,  3361,  3158,  3361,  3361,  -687,  3165,  3112,
    3133,  1844,  3134,  3135,  4106,  3169,  1181,  3180,  3170,  1845,
    3192,  3636,  3194,  3924,  1797,   744,  -733,  3203,  3214,  3222,
    3230,  3231,  3234,  3235,  3239,  3240,  2234,   669,  3252,  2463,
    1847,  1182,  3262,  3259,  3263,  3274,  3326,  3281,  2130,  3329,
    2356,  3331,  3333,   674,  1353,   675,  3340,  1848,  3349,  1183,
    3350,  3354,   132,  3351,  3355,  3357,  3366,  3373,  3374,  3375,
    3376,  3683,   559,   462,  4106,  3320,  3393,  3385,   744,   744,
    3386,  3394,  3361,  3750,  3395,  1853,  3389,   744,   744,   744,
     744,   744,   744,   744,  3396,  3413,  2235,  3397,   744,  3420,
    3422,   744,   744,  3424,   744,  3421,   744,  3431,  1798,  3418,
     744,  3433,  1500,   744,   744,   744,   744,  4183,   744,   744,
     559,  2964,  3438,  1120,  1501,  1502,   744,   744,  3434,   744,
     744,   744,   744,   744,   569,   744,  3439, -1323,   744,   744,
   -1328,  3442,   744,   744,   744,   744,   744,   744,   744,   744,
     744,  1856,  4183,   744,   744,  3457,   744,  3444,   744,  1857,
    3445,  3469,   744,  3470,   744,   744,  3472,  3513,  3473,  3499,
    3317,  3505,  3503,  1967,  1858,  3514,   744,   744,  3515,  3517,
    3518,  3792,   744,  3524,  3998,   744,  3799,  2419,  3536,  3555,
    3551,  3565,   744,   744,   744,  3556,   744,  3569,  3570,  3998,
    3571,  3572,  3586,   744,   744,   744,   762,   744,   744,   744,
     744,   744,  4008,   744,   744,   744,   744,   744,   744,   744,
     744,  3573,  3574,  3537,   744,   744,  1859,  3587,   696,  3575,
    3593,  3604,  3475,  3605,  3607,  3476,  3609,  3611,  3629,  3643,
    3644,  3384,  2012,  1860,  3645,   702,  2016,  3679,  3687,  3692,
     704,  3699,  3712,  3718,   705,  3719,  3725,  3731,  3734,  3758,
    3684,  3765,   463,  3788,  1573,  3806,  3760,  3808,   847,  3762,
    3592,  -275,  3774,  3815,  2045,  3824,  3831,  3844,   808,   848,
     464,   763,  3809,  3818,  3823,  3845,  3847,  3848,  3856,  3853,
    3964,  3861,  3863,  3613,  3865,  3613,  2765,  3868,  1864,  3879,
    3889,  3892,   849,   850,  3477,  3478,  1866,  -293,  3732,  3918,
     764,  3919,   851,  3920,   852,  3883,  3933,   465,  3940,  -488,
    3943,   466,  3965,   765,  3979,   799,  3984,  3985,  3893,   853,
     744,   854,  3994,   855,  3998,  3986,  3995,  4005,   744,  4006,
    3987,  4007,   856,  4010,  4100,   766,  4031,   767,  3999,  4032,
    4033,  4034,  4040,  4048,  4043,  4050,  4052,   467,   768,  4053,
   -2140,  4062,  4056,  4068,  4073,   468,  4069,  4076,  4078,  4079,
    4081,  4088,  4082,  1872,  4101,  4102, -1475,  4113,  4115,   769,
    4116,  4117,  4121,  4122,  4126,   569,  4129,  4132, -1673,   857,
    4128,  4133,  4136,   858,  3972,  3954,   859,  4140,  4148,  4142,
    4149,  4145,  4146,   770,  4157,  3998,  2549,  3998,  4153,  4159,
     771,  4166,  4172,  3801,  4147,  4186,  4195,  2388,  2550,  2679,
    3339,   987,  3540,   860,  3998,   861,  3927,  1873,  3816,  4063,
     862,  1365,   863,  4064,  3538,  3542,  3682,  4198,  4162,  3656,
    3657,  3659,  1874,  3660,  3662,  1875,  1013,  3663,  3664,   772,
    3665,  3666,  4176,  3667,   864,   865,  4085,  3992,  4086,   866,
    3670,  3998,  3998,  4071,  4061,  3671,  4194,  3672,  4003,  1876,
    4004,  1426,  1834,  1573,  2100,  3689,  1045,   867,  1878,  2738,
    2929,  1877,  3201,  3944,  3733,  3843,  3427,  4067,  4022,  1922,
    4072,  4105,  1062,  3855,   608,  2345,  3356,  3618,   868,  3116,
    2812,   569,  3275,  2766,  4023,  4024,  2692,  2352,  3264,  3327,
    3638,  3516,  3288,  3289,  3482,  3508,  3942,  3267,  3228,  2365,
    2365,  3874,  3637,  3882,  3780,   869,   475,   476,  3876,  3821,
    3877,  1951,  2420,   744,  3825,  2429,  3698,  3826,  3641,  1111,
    1391,  1392,  1393,  1394,  1395,  1396,  2226,  1397,  1398,  1399,
    1400,  1401,  1402,  1403,  2349,  1404,  3485,   870,   569,  2756,
    3266,  1767,  2165,  2580,  1920,  3265,  1383,   871,  2924,  2567,
    2599,   912,  3751,  1259,  2187,  2867,   773,  4065,  2871,  3829,
    2466,  1520,  4090,  1628,  2659,  3236,  3767,  3617,   872,  4098,
    4041,  2540,  3111,  4042,  1563,   774,  3270,  1784,  3614,  4152,
    3603,   775,  2606,  2433,  3962,  1667,  4189,  2563,   744,   776,
    3429,  1692,  2586,  3246,   873,  3207,  3206,   761,   762,  4192,
    4016,   901,  1005,  1960,  2218,  1735,   874,   875,   886,  2110,
     876,   877,  3039,   777,  1694,  3193,  4066,   744,   744,   744,
    4104,  4197,  4035,  3512,  2197,  4080,   778,   779,  3210,  2982,
    4138,  3232,  1708,   744,  3443,  4143,  3606,  2144,   828,  1247,
    3724,  1660,  2913,  1699,  3730,  1251,   830,  1941,  2522,  2900,
    1578,   602,   603,   991,   992,   744,   993,     0,  1405,  1406,
       0,   744,  1573,     0,   744,     0,   744,     0,   780,     0,
     878,  4184,   744,   763,   744,   744,     0,     0,     0,     0,
       0,   569,   879,     0,     0,  1573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   781,     0,     0,     0,
       0,     0,   764,     0,  1573,     0,  4184, -2166,     0,     0,
       0,   880,     0,     0,     0,   765,     0,     0,     0,   782,
       0,   783,     0,     0,     0,     0,     0,     0,   881,     0,
       0,     0,     0,     0,     0,     0,   744,   766,     0,   767,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     768,     0,     0,     0,  1390,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   769,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2166,     0,     0,     0,     0,
       0,   882,     0,     0,     0,   770,     0,     0,     0,     0,
       0,     0,   771,     0,     0,     0,     0,  1452,  1453,     0,
       0,     0,     0,     0,     0,     0,  1463,  1464,     0,     0,
    1467,  1468,  1469,     0,     0,     0,     0,  1474,     0,     0,
    1476,  1477,     0,  1478,     0,  1479,     0,     0,     0,     0,
       0,   772,  1513,  1514,  1515,  1516,     0,  1518,     0,     0,
       0,     0,     0,     0,     0,  1526,  1527,     0,  1530,  1531,
       0,     0,     0,     0,  1535,     0,     0,  1539,  1540,     0,
       0,  1543,     0,     0,  1546,  1547,  1548,  1549,  1550,  1551,
       0,     0,  1554,  1555,     0,  1558,     0,  1559,     0,     0,
       0,  1564,     0,  1568,  1569,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1576,  1577,     0,     0,     0,
       0,  1111,  1835,     0,  1583,     0,     0,     0,     0,  1836,
    1837,  1588,  1589,  1590,     0,     0,     0,     0,     0,     0,
       0,  1838,  1839,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   744,  1626,     0,     0,     0,     0,     0,
       0,  1840,     0,     0,     0,  1841,  1842,     0,   773,     0,
    1843,     0,     0,     0,     0,     0,  1844,     0,     0,     0,
       0,     0,     0,     0,  1845,     0,     0,   774,     0,     0,
       0,  1846,     0,   775,     0,     0,     0,     0,     0,     0,
       0,   776,     0,     0,     0,  1847,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   744,     0,  1353,
       0,   744,  1848,     0,     0,   777,   744,   744,     0,  1849,
    1850,     0,     0,     0,     0,   744,  1851,     0,   778,   779,
       0,     0,     0,     0,  1852,     0,     0,     0,  -803,   744,
    1853,   744,   744,     0,   744,   744,   744,   744,   744,  1707,
       0,   744,     0,     0,     0,     0,     0,  1722,     0,     0,
     744,     0,     0,     0,     0,     0,     0,     0,  1854,     0,
     780,     0,     0,   744,     0,   744,     0,   744,   744,   744,
     744,     0,     0,     0,   744,   744,   744,     0,     0,     0,
       0,   744,   744,   744,     0,   744,     0,   744,   781,   744,
       0,   744,     0,   744,  1855,     0,  1856,     0,   744,     0,
       0,     0,     0,     0,  1857,     0,     0,     0,   744,     0,
       0,   782,     0,   783,     0,   744,     0,     0,   744,  1858,
       0,     0,     0,     0,   744,     0,     0,     0,   744,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     2,     0,     0,     0,     0,     0,
       0,  1859,     0,     0,     0,     0,     0,     0,     3,     0,
       4,     0,     0,     0,     5,     0,     0,     0,  1860,     0,
       0,     0,  1861,     0,     0,     0,     0,     0,     6,     7,
       0,     0,     0,     0,     0,     8,     0,     0,     0,     9,
      10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    11,     0,   826,   762,     0,     0,     0,     0,
    1862,     0,     0,     0,     0,  1863,     0,     0,    12,     0,
       0,     0,  1973,  1864,     0,     0,     0,     0,     0,     0,
    1865,  1866,     0,     0,     0,     0,     0,     0,     0,    13,
       0,     0,     0,     0,     0,     0,     0,    14,    15,    16,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    17,
      18,     0,     0,  1867,     0,     0,     0,     0,     0,     0,
       0,     0,    19,     0,     0,  1868,  1869,  1870,  1871,     0,
     763,     0,     0,     0,    20,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2024,  1872,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,   764,
       0,     0,     0,     0,     0,     0,    22,     0,     0,     0,
       0,    23,   765,     0,    24,     0,  2054,  2056,  2058,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   766,     0,   767,    25,     0,    26,
       0,     0,  1873,     0,     0,     0,     0,   768,     0,     0,
       0,     0,     0,     0,  2084,    27,     0,  1874,     0,     0,
    1875,     0,     0,  2089,     0,  2090,     0,     0,   769,     0,
       0,     0,    28,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,     0,  1876,     0,     0,     0,     0,     0,
       0,     0,   770,     0,     0,     0,  1877,     0,     0,   771,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2161,     0,     0,   772,     0,
       0,     0,     0,   744,     0,     0,     0,     0,     0,   744,
       0,     0,     0,  -803,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
     744,     0,     0,   744,   744,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   744,     0,     0,     0,    33,     0,     0,
       0,     0,     0,   744,     0,   744,     0,   744,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    34,     0,     0,
      35,     0,    36,     0,   744,    37,     0,     0,    38,   744,
       0,    39,     0,     0,     0,     0,    40,     0,    41,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
      43,     0,   744,     0,     0,   773,     0,     0,    44,     0,
       0,     0,   744,    45,     0,     0,     0,    46,     0,     0,
       0,     0,     0,     0,   774,     0,     0,     0,     0,     0,
     775,     0,     0,     0,     0,     0,     0,     0,   776,     0,
       0,    47,     0,     0,     0,    48,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     744,     0,   777,     0,   744,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   778,   779,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    49,     0,     0,     0,
       0,     0,  2366,     0,     0,     0,     0,     0,     0,    50,
       0,     0,     0,    51,     0,     0,    52,   744,     0,     0,
       0,    53,     0,     0,     0,     0,     0,   780,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     744,     0,     0,     0,     0,     0,     0,    54,     0,     0,
       0,     0,     0,     0,     0,   781,     0,     0,     0,     0,
       0,    55,     0,     0,     0,     0,  2442,     0,     0,     0,
    2446,     0,     0,     0,     0,  2448,  2449,     0,   782,     0,
     783,     0,     0,     0,  2464,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2473,     0,
    2474,     0,     0,  2476,  2477,  2478,  2479,  2480,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2486,
       0,     0,     0,     0,   744,   744,     0,     0,     0,     0,
       0,     0,  2493,     0,  2494,     0,  2495,  2496,  2497,     0,
       0,     0,     0,  2502,  2503,  2504,     0,     0,     0,     0,
    2507,  2508,  2509,     0,  2510,     0,  2512,     0,  2514,     0,
    2516,     0,  2517,     0,     0,     0,     0,  2520,     0,     0,
       0,  2754,     0,     0,     0,     0,     0,  2528,  1836,     0,
       0,     0,   744,     0,     0,     0,     0,     0,     0,     0,
    1838,  1839,     0,  2538,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   744,   744,
       0,   744,     0,     0,     0,     0,     0,     0,     0,     0,
    1840,     0,     0,     0,  1841,     0,     0,     1,     2,   744,
       0,  1838,  1839,     0,   744,  1844,     0,   744,     0,     0,
     744,   744,     3,  1845,     0,     0,     0,     0,     5,     0,
    1846,     0,     0,     0,     0,     0,     0,     0,     0,   744,
       0,     0,     6,     7,  1847,  1841,     0,     0,     0,     8,
       0,   744,     0,     9,    10,     0,  1844,     0,  1353,     0,
       0,  1848,     0,     0,  1845,     0,    11,     0,  1849,     0,
       0,     0,   744,     0,     0,  2755,     0,     0,     0,     0,
       0,     0,    12,  1852,     0,  1847,     0,     0,     0,  1853,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1353,
       0,   744,  1848,    13,     0,     0,     0,     0,     0,     0,
       0,    14,    15,    16,     0,   744,     0,  1854,     0,     0,
       0,     0,     0,    17,    18,     0,     0,     0,     0,     0,
    1853,     0,     0,   744,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    20,     0,
       0,     0,     0,     0,     0,  1856,     0,     0,     0,     0,
       0,  1838,  1839,  1857,    21,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1858,     0,
      22,     0,     0,     0,     0,    23,     0,     0,    24,     0,
       0,     0,     0,  -687,  -687,  1841,  1856,     0,     0,     0,
       0,     0,  -687,     0,  1857,     0,  1844,     0,     0,     0,
       0,    25,     0,    26,  1845,     0,     0,     0,     0,  1858,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
    1859,     0,     0,     0,     0,  1847,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,  1860,     0,  1353,
      29,  1861,  1848,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1859,     0,     0,     0,     0,     0,     0,     0,     0,
    1853,     0,     0,     0,     0,     0,     0,     0,  1860,     0,
       0,     0,     0,     0,  1863,     0,     0,     0,     0,     0,
       0,     0,  1864,     0,     0,     0,     0,     0,     0,     0,
    1866,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2825,     0,     0,     0,     0,     0,  2829,     0,
       0,  3044,  3045,     0,     0,     0,   744,  3046,    30,  3047,
       0,  3048,  3049,  1864,     0,     0,  1856,     0,     0,     0,
       0,  1866,  2850,  2851,  1857,  1869,     0,  3050,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1858,
       0,    32,     0,     0,     0,   744,   744,  1872,     0,     0,
       0,    33,  2880,     0,   744,     0,     0,     0,     0,     0,
       0,     0,  2891,     0,  2893,     0,  2895,     0,     0,  3051,
       0,    34,  3052,     0,    35,     0,    36,     0,     0,    37,
    3053,     0,    38,     0,     0,    39,     0,     0,  1872,     0,
      40,  1859,    41,     0,     0,     0,     0,  3054,     0,    42,
       0,  1873,     0,     0,    43,     0,     0,     0,  1860,     0,
       0,  2920,    44,     0,  3055,     0,  1874,    45,     0,  1875,
       0,    46,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3056,     0,  3057,     0,
       0,     0,  1873,  1876,     0,    47,     0,     0,     0,    48,
       0,  3058,  3059,     0,     0,  1877,     0,  1874,     0,     0,
    1875,     0,     0,  1864,     0,     0,     0,     0,   744,  2972,
       0,  1866,     0,  2976,   744,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1876,     0,     0,     0,     0,   744,
      49,  3060,     0,   744,     0,     0,  1877,     0,     0,     0,
       0,     0,     0,    50,     0,     0,     0,    51,     0,     0,
      52,     0,     0,     0,     0,    53,  3005,     0,     0,  3061,
     744,     0,     0,     0,     0,     0,     0,     0,  3062,  3063,
       0,  3064,     0,     0,     0,     0,     0,     0,  1872,  3010,
       0,    54,     0,     0,     0,     0,     0,     0,   744,     0,
       0,     0,     0,     0,     0,    55,     0,     0,     0,     0,
    3065,  3066,  3067,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3068,  3069,
    3070,     0,     0,     0,  3071,     0,     0,  3072,     0,     0,
       0,     0,  1873,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3073,  3074,  1874,     0,     0,
    1875,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3100,  3101,     0,     0,     0,     0,     0,
       0,  3674,     0,     0,  1876,     0,     0,     0,     0,     0,
    3075,  3076,     0,     0,     0,     0,  1877,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   744,     0,   744,
       0,   744,     0,     0,     0,  3077,     0,     0,     0,     0,
       0,     0,     0,   744,   744,     0,     0,     0,     0,     0,
       0,  3143,     0,     0,     0,     0,     0,     0,     0,     0,
     744,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     744,   744,     0,     0,     0,     0,     0,  3160,  3161,     0,
     744,     0,   744,  3078,     0,     0,     0,  3079,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3080,  3171,     0,
       0,     0,     0,  3173,     0,     0,  3174,     0,     0,  3175,
    3176,     0,     0,     0,     0,     0,     0,   744,     0,     0,
       0,     0,     0,  3674,  3674,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3189,     0,     0,     0,     0,     0,     0,     0,  3081,     0,
       0,  3082,     0,     0,  3083,  3084,  3085,  3086,     0,     0,
       0,  3189,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   744,     0,     0,     0,     0,     0,  3087,  3088,     0,
       0,     0,     0,     0,  3233,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3089,
       0,     0,  3189,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     744,     0,   744,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   744,     0,  3674,  3674,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3931,     0,     0,   744,
       0,     0,     0,   744,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   744,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     744,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   744,     0,  3674,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3674,   744,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3674,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   744,     0,     0,     0,     0,     0,     0,
       0,     0,   744,     0,     0,  3189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   744,  3674,  3455,  3456,     0,     0,     0,     0,
       0,     0,     0,  3005,     0,  3674,  3674,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   744,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3674,
       0,     0,     0,     0,     0,     0,   744,     0,     0,  3674,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   744,     0,     0,     0,
       0,     0,     0,  3674,     0,  3674,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3674,     0,     0,   744,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3674,     0,
    3674,     0,  3674,  3561,     0,     0,     0,     0,     0,  3674,
       0,     0,     0,     0,     0,     0,     0,     0,  3005,  3674,
       0,     0,  3568,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3674,  3674,     0,     0,     0,
       0,   744,     0,     0,     0,     0,     0,     0,     0,  3189,
       0,     0,     0,     0,     0,     0,  3674,  3674,     0,     0,
       0,  3674,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2972,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3005,     0,  3561,     0,
    3713,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3005,  3005,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3005,
    3754,     0,     0,     0,     0,     0,     0,     0,     0,  3759,
       0,  3761,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3787,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3005,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3887,
       0,  3888,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3896,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3005,     0,
       0,     0,  3561,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3005,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3996,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4001,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   138,  3189,   617,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,   620,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
    1565,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,  4046,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,   643,
     194,     0,   195,     0,     0,  4092,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,  4114,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,  4131,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,   655,     0,     0,   250,
    4185,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,  1566,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,   671,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,  1567,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,   718,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   617,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   618,     0,   146,   147,   148,   149,   150,   619,   152,
       0,   153,  3557,     0,   620,   154,   621,   622,   623,   155,
     624,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   625,   626,   163,     0,   164,   627,   628,
     166,     0,   167,   168,   169,   629,   171,     0,   630,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   631,   184,     0,   185,   632,   633,   186,     0,
       0,   187,   634,  3558,   635,     0,   636,   637,     0,   188,
     189,   190,   638,   639,   640,     0,     0,     0,     0,   641,
     193,   642,     0,     0,   643,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   644,     0,   217,   218,
     219,   645,   646,   220,   221,     0,   222,   223,   224,   647,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   648,   231,   649,   233,     0,   234,     0,
     650,     0,   235,   236,     0,   237,   651,     0,   238,   239,
       0,     0,     0,   652,   241,   242,   243,   653,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   654,   248,
     249,  3559,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   656,   259,   260,     0,     0,     0,     0,
       0,   657,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   658,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   659,   282,   283,   284,   285,   660,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   661,   293,
       0,     0,   662,   295,   663,   296,     0,   297,   664,   665,
     666,   667,   668,   302,   303,   304,   305,     0,   669,   306,
     307,     0,     0,   308,   309,   310,   311,   670,   671,   672,
     312,   313,     0,   673,   674,     0,   675,     0,   314,   315,
     676,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     677,   324,   325,   326,   327,   328,   678,   679,   680,   330,
     331,   332,   681,   682,   335,   683,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   684,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   685,   686,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,   687,   367,
     368,   369,   370,   371,   688,   373,   374,   375,     0,   689,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,   690,   691,   400,   401,     0,   402,
     692,   404,   405,   406,   693,   694,   407,   408,   409,   410,
     695,   411,   412,     0,     0,   413,   414,   415,     0,   696,
     416,   417,     0,   697,   698,   699,   700,     0,     0,     0,
       0,     0,   422,   423,     0,   701,   702,   703,   425,   426,
     427,   704,  3560,   428,   429,   705,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     706,   438,     0,     0,   707,   708,   709,   710,   439,     0,
       0,   440,   711,     0,   712,   441,   442,   443,   713,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   714,     0,     0,     0,   715,   716,     0,     0,     0,
       0,   717,   718,     0,     0,   719,   720,     0,     0,   721,
     722,   138,     0,   617,   140,   141,   142,   143,  2968,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,  2969,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,     0,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,  2970,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,   655,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,   671,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,  2971,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,     0,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,   718,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   617,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   618,     0,   146,   147,   148,   149,   150,   619,   152,
       0,   153,     0,     0,   620,   154,   621,   622,   623,   155,
     624,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   625,   626,   163,     0,   164,   627,   628,
     166,     0,   167,   168,   169,   629,   171,     0,   630,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   631,   184,     0,   185,   632,   633,   186,     0,
       0,   187,   634,  3558,   635,     0,   636,   637,     0,   188,
     189,   190,   638,   639,   640,     0,     0,     0,     0,   641,
     193,   642,     0,     0,   643,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   644,     0,   217,   218,
     219,   645,   646,   220,   221,     0,   222,   223,   224,   647,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   648,   231,   649,   233,     0,   234,     0,
     650,     0,   235,   236,     0,   237,   651,     0,   238,   239,
       0,     0,     0,   652,   241,   242,   243,   653,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   654,   248,
     249,  3559,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   656,   259,   260,     0,     0,     0,     0,
       0,   657,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   658,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   659,   282,   283,   284,   285,   660,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   661,   293,
       0,     0,   662,   295,   663,   296,     0,   297,   664,   665,
     666,   667,   668,   302,   303,   304,   305,     0,   669,   306,
     307,     0,     0,   308,   309,   310,   311,   670,   671,   672,
     312,   313,     0,   673,   674,     0,   675,     0,   314,   315,
     676,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     677,   324,   325,   326,   327,   328,   678,   679,   680,   330,
     331,   332,   681,   682,   335,   683,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   684,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   685,   686,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,   687,   367,
     368,   369,   370,   371,   688,   373,   374,   375,     0,   689,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,   690,   691,   400,   401,     0,   402,
     692,   404,   405,   406,   693,   694,   407,   408,   409,   410,
     695,   411,   412,     0,     0,   413,   414,   415,     0,   696,
     416,   417,     0,   697,   698,   699,   700,     0,     0,     0,
       0,     0,   422,   423,     0,   701,   702,   703,   425,   426,
     427,   704,  3560,   428,   429,   705,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     706,   438,     0,     0,   707,   708,   709,   710,   439,     0,
       0,   440,   711,     0,   712,   441,   442,   443,   713,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   714,     0,     0,     0,   715,   716,     0,     0,     0,
       0,   717,   718,     0,     0,   719,   720,     0,     0,   721,
     722,   138,     0,   617,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,   620,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,     0,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,   643,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,   655,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,   671,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,  1109,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,     0,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,  1110,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   617,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   618,     0,   146,   147,   148,   149,   150,   619,   152,
       0,   153,     0,     0,   620,   154,   621,   622,   623,   155,
     624,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   625,   626,   163,     0,   164,   627,   628,
     166,     0,   167,   168,   169,   629,   171,     0,   630,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   631,   184,     0,   185,   632,   633,   186,     0,
       0,   187,   634,     0,   635,     0,   636,   637,     0,   188,
     189,   190,   638,   639,   640,     0,     0,     0,     0,   641,
     193,   642,     0,     0,   643,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   644,     0,   217,   218,
     219,   645,   646,   220,   221,     0,   222,   223,   224,   647,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   648,   231,   649,   233,     0,   234,     0,
     650,     0,   235,   236,     0,   237,   651,     0,   238,   239,
       0,     0,     0,   652,   241,   242,   243,   653,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   654,   248,
     249,   655,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   656,   259,   260,     0,     0,     0,     0,
       0,   657,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   658,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   659,   282,   283,   284,   285,   660,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   661,   293,
       0,     0,   662,   295,   663,   296,     0,   297,   664,   665,
     666,   667,   668,   302,   303,   304,   305,     0,   669,   306,
     307,     0,     0,   308,   309,   310,   311,   670,   671,   672,
     312,   313,     0,   673,   674,     0,   675,     0,   314,   315,
     676,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     677,   324,   325,   326,   327,   328,   678,   679,   680,   330,
     331,   332,   681,   682,   335,   683,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   684,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   685,   686,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,   687,   367,
     368,   369,   370,   371,   688,   373,   374,   375,     0,   689,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,   690,   691,   400,   401,     0,   402,
     692,   404,   405,   406,   693,   694,   407,   408,   409,   410,
     695,   411,   412,     0,     0,   413,   414,   415,     0,   696,
     416,   417,     0,   697,   698,   699,   700,     0,     0,     0,
       0,     0,   422,   423,     0,   701,   702,   703,   425,   426,
     427,   704,     0,   428,   429,   705,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     706,   438,     0,     0,   707,   708,   709,   710,   439,     0,
       0,   440,   711,     0,   712,   441,   442,   443,   713,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   714,     0,     0,     0,   715,   716,     0,     0,     0,
       0,   717,   718,  1473,     0,   719,   720,     0,     0,   721,
     722,   138,     0,   617,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,   620,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,     0,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,   643,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,     0,     0,     0,
       0,   226,   227,  2053,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,   655,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,   671,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,     0,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,   718,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   617,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   618,     0,   146,   147,   148,   149,   150,   619,   152,
       0,   153,     0,     0,   620,   154,   621,   622,   623,   155,
     624,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   625,   626,   163,     0,   164,   627,   628,
     166,     0,   167,   168,   169,   629,   171,     0,   630,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   631,   184,     0,   185,   632,   633,   186,     0,
       0,   187,   634,     0,   635,     0,   636,   637,     0,   188,
     189,   190,   638,   639,   640,     0,     0,     0,     0,   641,
     193,   642,     0,     0,   643,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   644,     0,   217,   218,
     219,   645,   646,   220,   221,     0,   222,   223,   224,   647,
       0,   225,     0,     0,     0,     0,   226,   227,  2055,   228,
       0,   229,     0,   648,   231,   649,   233,     0,   234,     0,
     650,     0,   235,   236,     0,   237,   651,     0,   238,   239,
       0,     0,     0,   652,   241,   242,   243,   653,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   654,   248,
     249,   655,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   656,   259,   260,     0,     0,     0,     0,
       0,   657,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   658,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   659,   282,   283,   284,   285,   660,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   661,   293,
       0,     0,   662,   295,   663,   296,     0,   297,   664,   665,
     666,   667,   668,   302,   303,   304,   305,     0,   669,   306,
     307,     0,     0,   308,   309,   310,   311,   670,   671,   672,
     312,   313,     0,   673,   674,     0,   675,     0,   314,   315,
     676,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     677,   324,   325,   326,   327,   328,   678,   679,   680,   330,
     331,   332,   681,   682,   335,   683,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   684,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   685,   686,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,   687,   367,
     368,   369,   370,   371,   688,   373,   374,   375,     0,   689,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,   690,   691,   400,   401,     0,   402,
     692,   404,   405,   406,   693,   694,   407,   408,   409,   410,
     695,   411,   412,     0,     0,   413,   414,   415,     0,   696,
     416,   417,     0,   697,   698,   699,   700,     0,     0,     0,
       0,     0,   422,   423,     0,   701,   702,   703,   425,   426,
     427,   704,     0,   428,   429,   705,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     706,   438,     0,     0,   707,   708,   709,   710,   439,     0,
       0,   440,   711,     0,   712,   441,   442,   443,   713,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   714,     0,     0,     0,   715,   716,     0,     0,     0,
       0,   717,   718,     0,     0,   719,   720,     0,     0,   721,
     722,   138,     0,   617,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,   620,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,     0,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,   643,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,     0,     0,     0,
       0,   226,   227,  2057,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,   655,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,   671,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,     0,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,   718,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   617,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   618,     0,   146,   147,   148,   149,   150,   619,   152,
       0,   153,     0,     0,   620,   154,   621,   622,   623,   155,
     624,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   625,   626,   163,     0,   164,   627,   628,
     166,     0,   167,   168,   169,   629,   171,     0,   630,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   631,   184,     0,   185,   632,   633,   186,     0,
       0,   187,   634,     0,   635,     0,   636,   637,     0,   188,
     189,   190,   638,   639,   640,     0,     0,     0,     0,   641,
     193,   642,     0,     0,   643,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   644,     0,   217,   218,
     219,   645,   646,   220,   221,     0,   222,   223,   224,   647,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   648,   231,   649,   233,     0,   234,     0,
     650,     0,   235,   236,     0,   237,   651,     0,   238,   239,
       0,     0,     0,   652,   241,   242,   243,   653,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   654,   248,
     249,   655,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   656,   259,   260,     0,     0,     0,     0,
       0,   657,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   658,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   659,   282,   283,   284,   285,   660,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   661,   293,
       0,     0,   662,   295,   663,   296,     0,   297,   664,   665,
     666,   667,   668,   302,   303,   304,   305,     0,   669,   306,
     307,     0,     0,   308,   309,   310,   311,   670,   671,   672,
     312,   313,     0,   673,   674,     0,   675,     0,   314,   315,
     676,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     677,   324,   325,   326,   327,   328,   678,   679,   680,   330,
     331,   332,   681,   682,   335,   683,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   684,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   685,   686,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,   687,   367,
     368,   369,   370,   371,   688,   373,   374,   375,     0,   689,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,   690,   691,   400,   401,     0,   402,
     692,   404,   405,   406,   693,   694,   407,   408,   409,   410,
     695,   411,   412,     0,     0,   413,   414,   415,     0,   696,
     416,   417,     0,   697,   698,   699,   700,     0,     0,     0,
       0,     0,   422,   423,     0,   701,   702,   703,   425,   426,
     427,   704,     0,   428,   429,   705,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     706,   438,     0,     0,   707,   708,   709,   710,   439,     0,
       0,   440,   711,     0,   712,   441,   442,   443,   713,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   714,     0,     0,     0,   715,   716,     0,     0,     0,
       0,   717,   718,     0,     0,   719,   720,     0,     0,   721,
     722,   138,     0,   617,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,   620,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,     0,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,   643,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,   655,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,   671,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,     0,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,  1044,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   617,   140,
     141,   142,   143,  1597,     0,     0,     0,     0,  1598,     0,
       0,   618,     0,   146,   147,   148,   149,   150,   619,   152,
       0,   153,     0,     0,   620,   154,   621,   622,   623,   155,
     624,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   625,   626,   163,     0,   164,   627,   628,
     166,     0,   167,   168,   169,   629,   171,     0,   630,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   631,   184,     0,   185,   632,   633,   186,     0,
       0,   187,   634,     0,   635,     0,   636,   637,     0,   188,
     189,   190,   638,   639,   640,     0,     0,     0,     0,   641,
     193,   642,     0,     0,   643,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   644,     0,   217,   218,
     219,   645,   646,   220,   221,     0,   222,   223,   224,   647,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   648,   231,   649,   233,     0,   234,     0,
     650,     0,   235,   236,     0,   237,   651,     0,   238,   239,
       0,     0,     0,   652,   241,   242,   243,   653,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   654,   248,
     249,   655,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   656,   259,   260,     0,     0,     0,     0,
       0,   657,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   658,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   659,   282,   283,   284,   285,   660,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   661,   293,
       0,     0,   662,   295,   663,   296,     0,   297,   664,   665,
     666,   667,   668,   302,   303,   304,   305,     0,   669,   306,
     307,     0,     0,   308,   309,   310,   311,   670,     0,   672,
     312,   313,     0,   673,   674,     0,   675,     0,   314,   315,
     676,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     677,   324,   325,   326,   327,   328,   678,   679,   680,   330,
     331,   332,   681,   682,   335,   683,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   684,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   685,   686,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,   687,   367,
     368,   369,   370,   371,   688,   373,   374,   375,     0,   689,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,   690,   691,   400,   401,     0,   402,
     692,   404,   405,   406,   693,   694,   407,   408,   409,   410,
     695,   411,   412,     0,     0,   413,   414,   415,     0,   696,
     416,   417,     0,   697,   698,   699,   700,     0,     0,     0,
       0,     0,   422,   423,     0,   701,   702,   703,   425,   426,
     427,   704,     0,   428,   429,   705,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     706,   438,     0,     0,   707,   708,   709,   710,   439,     0,
       0,   440,   711,     0,   712,   441,   442,   443,   713,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   714,     0,     0,     0,   715,   716,     0,     0,     0,
       0,   717,   718,     0,     0,   719,   720,     0,     0,   721,
     722,   138,     0,   617,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,   620,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,     0,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,   643,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,  2441,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,   671,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,     0,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,   718,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   617,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   618,     0,   146,   147,   148,   149,   150,   619,   152,
       0,   153,     0,     0,   620,   154,   621,   622,   623,   155,
     624,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   625,   626,   163,     0,   164,   627,   628,
     166,     0,   167,   168,   169,   629,   171,     0,   630,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   631,   184,     0,   185,   632,   633,   186,     0,
       0,   187,   634,     0,   635,     0,   636,   637,     0,   188,
     189,   190,   638,   639,   640,     0,     0,     0,     0,   641,
     193,   642,     0,     0,   643,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   644,     0,   217,   218,
     219,   645,   646,   220,   221,     0,   222,   223,   224,   647,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   648,   231,   649,   233,     0,   234,     0,
     650,     0,   235,   236,     0,   237,   651,     0,   238,   239,
       0,     0,     0,   652,   241,   242,   243,   653,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   654,   248,
     249,  2501,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   656,   259,   260,     0,     0,     0,     0,
       0,   657,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   658,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   659,   282,   283,   284,   285,   660,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   661,   293,
       0,     0,   662,   295,   663,   296,     0,   297,   664,   665,
     666,   667,   668,   302,   303,   304,   305,     0,   669,   306,
     307,     0,     0,   308,   309,   310,   311,   670,   671,   672,
     312,   313,     0,   673,   674,     0,   675,     0,   314,   315,
     676,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     677,   324,   325,   326,   327,   328,   678,   679,   680,   330,
     331,   332,   681,   682,   335,   683,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   684,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   685,   686,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,   687,   367,
     368,   369,   370,   371,   688,   373,   374,   375,     0,   689,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,   690,   691,   400,   401,     0,   402,
     692,   404,   405,   406,   693,   694,   407,   408,   409,   410,
     695,   411,   412,     0,     0,   413,   414,   415,     0,   696,
     416,   417,     0,   697,   698,   699,   700,     0,     0,     0,
       0,     0,   422,   423,     0,   701,   702,   703,   425,   426,
     427,   704,     0,   428,   429,   705,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     706,   438,     0,     0,   707,   708,   709,   710,   439,     0,
       0,   440,   711,     0,   712,   441,   442,   443,   713,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   714,     0,     0,     0,   715,   716,     0,     0,     0,
       0,   717,   718,     0,     0,   719,   720,     0,     0,   721,
     722,   138,     0,   617,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,   620,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,     0,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,  3188,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,   655,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,   671,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,     0,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,   718,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   617,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   618,     0,   146,   147,   148,   149,   150,   619,   152,
       0,   153,     0,     0,   620,   154,   621,   622,   623,   155,
     624,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   625,   626,   163,     0,   164,   627,   628,
     166,     0,   167,   168,   169,   629,   171,     0,   630,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   631,   184,     0,   185,   632,   633,   186,     0,
       0,   187,   634,     0,   635,     0,   636,   637,     0,   188,
     189,   190,   638,   639,   640,     0,     0,     0,     0,   641,
     193,   642,     0,     0,   643,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   644,     0,   217,   218,
     219,   645,   646,   220,   221,     0,   222,   223,   224,   647,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   648,   231,   649,   233,     0,   234,     0,
     650,     0,   235,   236,     0,   237,   651,     0,   238,   239,
       0,     0,     0,   652,   241,   242,   243,   653,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   654,   248,
     249,   655,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   656,   259,   260,     0,     0,     0,     0,
       0,   657,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   658,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   659,   282,   283,   284,   285,   660,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   661,   293,
       0,     0,   662,   295,   663,   296,     0,   297,   664,   665,
     666,   667,   668,   302,   303,   304,   305,     0,   669,   306,
     307,     0,     0,   308,   309,   310,   311,   670,     0,   672,
     312,   313,     0,   673,   674,     0,   675,     0,   314,   315,
     676,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     677,   324,   325,   326,   327,   328,   678,   679,   680,   330,
     331,   332,   681,   682,   335,   683,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   684,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   685,   686,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,   687,   367,
     368,   369,   370,   371,   688,   373,   374,   375,     0,   689,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,   690,   691,   400,   401,     0,   402,
     692,   404,   405,   406,   693,   694,   407,   408,   409,   410,
     695,   411,   412,     0,     0,   413,   414,   415,     0,   696,
     416,   417,     0,   697,   698,   699,   700,     0,     0,     0,
       0,     0,   422,   423,     0,   701,   702,   703,   425,   426,
     427,   704,     0,   428,   429,   705,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     706,   438,     0,     0,   707,   708,   709,   710,   439,     0,
       0,   440,   711,     0,   712,   441,   442,   443,   713,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   714,     0,     0,     0,   715,   716,     0,     0,     0,
       0,   717,   718,     0,     0,   719,   720,     0,     0,   721,
     722,   138,     0,   617,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,   620,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,     0,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,   643,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,  1612,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,     0,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,     0,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,   718,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   617,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   618,     0,   146,   147,   148,   149,   150,   619,   152,
       0,   153,     0,     0,   620,   154,   621,   622,   623,   155,
     624,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   625,   626,   163,     0,   164,   627,   628,
     166,     0,   167,   168,   169,   629,   171,     0,   630,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   631,   184,     0,   185,   632,   633,   186,     0,
       0,   187,   634,     0,   635,     0,   636,   637,     0,   188,
     189,   190,   638,   639,   640,     0,     0,     0,     0,   641,
     193,   642,     0,     0,   643,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   644,     0,   217,   218,
     219,   645,   646,   220,   221,     0,   222,   223,   224,   647,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   648,   231,   649,   233,     0,   234,     0,
     650,     0,   235,   236,     0,   237,   651,     0,   238,   239,
       0,     0,     0,   652,   241,   242,   243,   653,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   654,   248,
     249,  1614,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   656,   259,   260,     0,     0,     0,     0,
       0,   657,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   658,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   659,   282,   283,   284,   285,   660,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   661,   293,
       0,     0,   662,   295,   663,   296,     0,   297,   664,   665,
     666,   667,   668,   302,   303,   304,   305,     0,   669,   306,
     307,     0,     0,   308,   309,   310,   311,   670,     0,   672,
     312,   313,     0,   673,   674,     0,   675,     0,   314,   315,
     676,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     677,   324,   325,   326,   327,   328,   678,   679,   680,   330,
     331,   332,   681,   682,   335,   683,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   684,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   685,   686,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,   687,   367,
     368,   369,   370,   371,   688,   373,   374,   375,     0,   689,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,   690,   691,   400,   401,     0,   402,
     692,   404,   405,   406,   693,   694,   407,   408,   409,   410,
     695,   411,   412,     0,     0,   413,   414,   415,     0,   696,
     416,   417,     0,   697,   698,   699,   700,     0,     0,     0,
       0,     0,   422,   423,     0,   701,   702,   703,   425,   426,
     427,   704,     0,   428,   429,   705,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     706,   438,     0,     0,   707,   708,   709,   710,   439,     0,
       0,   440,   711,     0,   712,   441,   442,   443,   713,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   714,     0,     0,     0,   715,   716,     0,     0,     0,
       0,   717,   718,     0,     0,   719,   720,     0,     0,   721,
     722,   138,     0,   617,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   618,     0,   146,   147,
     148,   149,   150,   619,   152,     0,   153,     0,     0,   620,
     154,   621,   622,   623,   155,   624,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   625,   626,
     163,     0,   164,   627,   628,   166,     0,   167,   168,   169,
     629,   171,     0,   630,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   631,   184,     0,
     185,   632,   633,   186,     0,     0,   187,   634,     0,   635,
       0,   636,   637,     0,   188,   189,   190,   638,   639,   640,
       0,     0,     0,     0,   641,   193,   642,     0,     0,   643,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   644,     0,   217,   218,   219,   645,   646,   220,   221,
       0,   222,   223,   224,   647,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   648,   231,
     649,   233,     0,   234,     0,   650,     0,   235,   236,     0,
     237,   651,     0,   238,   239,     0,     0,     0,   652,   241,
     242,   243,   653,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   654,   248,   249,   655,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   656,   259,
     260,     0,     0,     0,     0,     0,   657,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   658,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   659,   282,
     283,   284,   285,   660,   286,   287,  4021,     0,     0,     0,
     289,   290,   291,   661,   293,     0,     0,   662,   295,   663,
     296,     0,   297,   664,   665,   666,   667,   668,   302,   303,
     304,   305,     0,   669,   306,   307,     0,     0,   308,   309,
     310,   311,   670,     0,   672,   312,   313,     0,   673,   674,
       0,   675,     0,   314,   315,   676,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   677,   324,   325,   326,   327,
     328,   678,   679,   680,   330,   331,   332,   681,   682,   335,
     683,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   684,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     685,   686,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,   687,   367,   368,   369,   370,   371,   688,
     373,   374,   375,     0,   689,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,   690,
     691,   400,   401,     0,   402,   692,   404,   405,   406,   693,
     694,   407,   408,   409,   410,   695,   411,   412,     0,     0,
     413,   414,   415,     0,   696,   416,   417,     0,   697,   698,
     699,   700,     0,     0,     0,     0,     0,   422,   423,     0,
     701,   702,   703,   425,   426,   427,   704,     0,   428,   429,
     705,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   706,   438,     0,     0,   707,
     708,   709,   710,   439,     0,     0,   440,   711,     0,   712,
     441,   442,   443,   713,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   714,     0,     0,     0,
     715,   716,     0,     0,     0,     0,   717,   718,     0,     0,
     719,   720,     0,     0,   721,   722,   138,     0,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,  2286,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
     461,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,  1384,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,  1385,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,  2808,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,  2809,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,  -403,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,   464,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   449,     0,     0,   138,     0,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
    2351,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,  2286,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,   461,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,  1384,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,  1385,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,   464,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   449,
       0,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,  2351,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,  2173,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,     0,   449,     0,     0,
     138,     0,   139,   140,   141,   142,   143,     0,     0,  2587,
       0,     0,   144,     0,     0,   145,   722,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   449,     0,     0,     0,     0,
     138,     0,   139,   140,   141,   142,   143,  4167,     0,     0,
       0,     0,   144,  4168,   722,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   449,     0,     0,   138,     0,
     139,   140,   141,   142,   143,     0,  1048,     0,     0,     0,
     144,     0,     0,   145,   722,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,  1240,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,     0,   449,     0,     0,   138,     0,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,   495,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   449,     0,     0,     0,     0,   138,  2116,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
     495,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   449,     0,     0,   138,     0,   139,   140,   141,   142,
     143,     0,  2350,     0,     0,     0,   144,     0,     0,   145,
    2351,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   449,
       0,     0,     0,     0,   138,     0,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,  4168,   722,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,     0,   449,
       0,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,   495,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   555,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     556,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,     0,   449,     0,     0,
     138,     0,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,   495,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   449,     0,     0,   138,     0,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,   722,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,     0,   449,     0,     0,   138,     0,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,  2351,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   567,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,   135,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
       0,   449,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,  1584,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,   567,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,   135,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,     0,   449,     0,
     138,     0,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,  2625,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
     567,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,   135,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   449,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,     0,  3218,   146,   147,   148,   149,   150,   151,
       0,     0,  -295,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  3647,     0,   163,     0,   164,     0,
       0,     0,     0,   167,   168,  3648,   170,   171,     0,   172,
     173,     0,     0,   175,     0,   177,   178,   179,   180,     0,
     181,   182,     0,     0,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,     0,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,     0,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,     0,     0,     0,   217,
     218,   219,     0,     0,   220,   221,  3649,   222,   223,   224,
       0,     0,     0,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,     0,   236,     0,     0,     0,     0,     0,
     239,     0,     0,     0,   240,   241,   242,   243,  3650,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,     0,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,  3651,     0,     0,   255,     0,     0,     0,   257,
       0,     0,   258,  3652,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,  -250,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,     0,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,  3653,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     323,     0,     0,   325,   326,   327,     0,   329,     0,     0,
     330,   331,   332,   333,   334,     0,     0,     0,     0,     0,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,     0,     0,   358,     0,   360,  -250,     0,   361,     0,
       0,   363,     0,     0,     0,   365,   366,  3654,     0,     0,
       0,   368,   369,   370,   371,   372,   373,     0,   375,     0,
     376,     0,     0,     0,     0,   378,   379,   380,     0,     0,
       0,     0,   382,     0,     0,     0,   383,     0,   385,     0,
       0,   387,     0,     0,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,     0,   399,     0,     0,     0,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,     0,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
       0,     0,     0,     0,   434,     0,     0,   435,     0,     0,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,  -250,     0,     0,   445,     0,     0,   447,     0,
       0,   138,   449,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,  4193,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,   424,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,   138,   449,   139,   140,   141,
     142,   143,  1962,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,   138,
     449,   139,   140,   141,   142,   143,  2613,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,   138,   449,   139,   140,   141,   142,   143,
    2915,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,   138,   449,   139,
     140,   141,   142,   143,  3223,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,  2265,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
    2266,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,  2267,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,  2268,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,   964,   965,
       0,   312,   313,     0,     0,     0,     0,  2269,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,  4177,  4161,
    4178,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,  2270,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,   138,   449,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,  2461,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,  2619,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,  2101,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,   567,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,  2102,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,   135,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,   424,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,   138,   449,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,  2627,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,  2628,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,   567,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,   135,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,   138,
     449,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,  2461,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,  2619,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,   567,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,   135,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,   138,   449,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,   924,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,   567,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,   135,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,   138,   449,   139,
     140,   141,   142,   143,  1278,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,   567,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
     135,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,   138,   449,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,   902,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,   903,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,   904,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,   424,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,   138,   449,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,  2461,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,   567,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,   135,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,   138,
     449,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,  2666,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,   567,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,   135,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,   138,   449,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,   567,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,   135,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,   138,   449,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
    2609,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
     135,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,   138,   449,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,  4094,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,  4095,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,   424,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,   138,   449,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,  1000,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,   138,
     449,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,  1380,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,   138,   449,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,  2198,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,  2199,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,   138,   449,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,  2361,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,   138,   449,   139,   140,   141,   142,   143,  2706,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,   424,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,   138,   449,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,   135,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,   138,
     449,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,  2198,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,   138,   449,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,   138,   449,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,  1662,   224,
       0,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,  1663,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,   138,   449,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,     0,  -295,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,     0,     0,     0,     0,   162,  3647,     0,
     163,     0,   164,     0,     0,     0,     0,   167,   168,  3648,
     170,   171,     0,   172,   173,     0,     0,   175,     0,   177,
     178,   179,   180,     0,   181,   182,     0,     0,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,     0,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,     0,     0,     0,   202,   203,
     204,     0,  -265,  -265,   205,     0,  -265,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
       0,     0,     0,   217,   218,   219,     0,     0,   220,   221,
    3649,   222,   223,   224,     0,     0,     0,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,     0,   236,     0,
       0,     0,     0,     0,   239,     0,     0,     0,   240,   241,
     242,   243,  3650,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,     0,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,  3651,     0,     0,   255,
       0,     0,     0,   257,     0,     0,   258,  3652,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,  -250,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,     0,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,  3653,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   322,   323,     0,     0,   325,   326,   327,
       0,   329,     0,     0,   330,   331,   332,   333,   334,     0,
       0,     0,     0,     0,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,     0,     0,   358,     0,   360,
    -250,     0,   361,     0,     0,   363,     0,     0,     0,   365,
     366,  3654,     0,     0,     0,   368,   369,   370,   371,   372,
     373,     0,   375,     0,   376,     0,     0,     0,     0,   378,
     379,   380,     0,     0,     0,     0,   382,     0,     0,     0,
     383,     0,   385,     0,     0,   387,     0,     0,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,     0,   399,     0,
       0,     0,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,     0,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,     0,     0,     0,     0,   434,     0,
       0,   435,     0,     0,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,  -250,     0,     0,   445,
       0,     0,   447,     0,     0,   138,   449,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,     0,
    -295,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,     0,     0,     0,
       0,   162,  3647,     0,   163,     0,   164,     0,     0,     0,
       0,   167,   168,  3648,   170,   171,     0,   172,   173,     0,
       0,   175,     0,   177,   178,   179,   180,     0,   181,   182,
       0,     0,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,     0,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,     0,
       0,     0,   202,   203,   204,     0,  -286,     0,   205,     0,
    -286,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,     0,     0,     0,   217,   218,   219,
       0,     0,   220,   221,  3649,   222,   223,   224,     0,     0,
       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,     0,   236,     0,     0,     0,     0,     0,   239,     0,
       0,     0,   240,   241,   242,   243,  3650,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,     0,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
    3651,     0,     0,   255,     0,     0,     0,   257,     0,     0,
     258,  3652,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,  -250,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,     0,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,  3653,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   322,   323,     0,
       0,   325,   326,   327,     0,   329,     0,     0,   330,   331,
     332,   333,   334,     0,     0,     0,     0,     0,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,     0,
       0,   358,     0,   360,  -250,     0,   361,     0,     0,   363,
       0,     0,     0,   365,   366,  3654,     0,     0,     0,   368,
     369,   370,   371,   372,   373,     0,   375,     0,   376,     0,
       0,     0,     0,   378,   379,   380,     0,     0,     0,     0,
     382,     0,     0,     0,   383,     0,   385,     0,     0,   387,
       0,     0,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,     0,   399,     0,     0,     0,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,     0,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,     0,     0,
       0,     0,   434,     0,     0,   435,     0,     0,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,  -286,     0,
    -250,     0,     0,   445,     0,     0,   447,     0,     0,   138,
     449,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,     0,  -295,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,     0,     0,     0,     0,   162,  3647,     0,   163,     0,
     164,     0,     0,     0,     0,   167,   168,  3648,   170,   171,
       0,   172,   173,     0,     0,   175,     0,   177,   178,   179,
     180,     0,   181,   182,     0,     0,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,     0,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,     0,     0,     0,   202,   203,   204,     0,
    -283,     0,   205,     0,  -283,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,     0,     0,
       0,   217,   218,   219,     0,     0,   220,   221,  3649,   222,
     223,   224,     0,     0,     0,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,     0,   236,     0,     0,     0,
       0,     0,   239,     0,     0,     0,   240,   241,   242,   243,
    3650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,     0,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,  3651,     0,     0,   255,     0,     0,
       0,   257,     0,     0,   258,  3652,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,  -250,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,     0,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,  3653,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   322,   323,     0,     0,   325,   326,   327,     0,   329,
       0,     0,   330,   331,   332,   333,   334,     0,     0,     0,
       0,     0,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,     0,     0,   358,     0,   360,  -250,     0,
     361,     0,     0,   363,     0,     0,     0,   365,   366,  3654,
       0,     0,     0,   368,   369,   370,   371,   372,   373,     0,
     375,     0,   376,     0,     0,     0,     0,   378,   379,   380,
       0,     0,     0,     0,   382,     0,     0,     0,   383,     0,
     385,     0,     0,   387,     0,     0,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,     0,   399,     0,     0,     0,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
       0,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,     0,     0,     0,     0,   434,     0,     0,   435,
       0,     0,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,  -283,     0,  -250,     0,     0,   445,     0,     0,
     447,     0,     0,   138,   449,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -295,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3647,     0,   163,     0,   164,     0,     0,     0,     0,   167,
     168,  3648,   170,   171,     0,   172,   173,     0,     0,   175,
       0,   177,   178,   179,   180,     0,   181,   182,     0,     0,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,     0,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,     0,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,  3997,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,     0,     0,     0,   217,   218,   219,     0,     0,
     220,   221,  3649,   222,   223,   224,     0,     0,     0,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,     0,
     236,     0,     0,     0,     0,     0,   239,     0,     0,     0,
     240,   241,   242,   243,  3650,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,     0,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,  3651,     0,
       0,   255,     0,     0,     0,   257,     0,     0,   258,  3652,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,  -250,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,     0,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,  3653,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,     0,     0,   325,
     326,   327,     0,   329,     0,     0,   330,   331,   332,   333,
     334,     0,     0,     0,     0,     0,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,     0,     0,   358,
       0,   360,  -250,     0,   361,     0,     0,   363,     0,     0,
       0,   365,   366,  3654,     0,     0,     0,   368,   369,   370,
     371,   372,   373,     0,   375,     0,   376,     0,     0,     0,
       0,   378,   379,   380,     0,     0,     0,     0,   382,     0,
       0,     0,   383,     0,   385,     0,     0,   387,     0,     0,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,     0,
     399,     0,     0,     0,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,     0,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,     0,     0,     0,     0,
     434,     0,     0,   435,     0,     0,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,  -250,     0,
       0,   445,     0,     0,   447,     0,     0,   138,   449,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,     0,  -295,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  3647,     0,   163,     0,   164,     0,
       0,     0,     0,   167,   168,  3648,   170,   171,     0,   172,
     173,     0,     0,   175,     0,   177,   178,   179,   180,     0,
     181,   182,     0,     0,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,     0,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,     0,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,  -288,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,     0,     0,     0,   217,
     218,   219,     0,     0,   220,   221,  3649,   222,   223,   224,
       0,     0,     0,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,     0,   236,     0,     0,     0,     0,     0,
     239,     0,     0,     0,   240,   241,   242,   243,  3650,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,     0,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,  3651,     0,     0,   255,     0,     0,     0,   257,
       0,     0,   258,  3652,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,  -250,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,     0,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,  3653,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     323,     0,     0,   325,   326,   327,     0,   329,     0,     0,
     330,   331,   332,   333,   334,     0,     0,     0,     0,     0,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,     0,     0,   358,     0,   360,  -250,     0,   361,     0,
       0,   363,     0,     0,     0,   365,   366,  3654,     0,     0,
       0,   368,   369,   370,   371,   372,   373,     0,   375,     0,
     376,     0,     0,     0,     0,   378,   379,   380,     0,     0,
       0,     0,   382,     0,     0,     0,   383,     0,   385,     0,
       0,   387,     0,     0,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,     0,   399,     0,     0,     0,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,     0,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
       0,     0,     0,     0,   434,     0,     0,   435,     0,     0,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,  -250,     0,     0,   445,     0,     0,   447,     0,
       0,   138,   449,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,     0,  -295,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,     0,     0,     0,     0,   162,  3647,     0,
     163,     0,   164,     0,     0,     0,     0,   167,   168,  3648,
     170,   171,     0,   172,   173,     0,     0,   175,     0,   177,
     178,   179,   180,     0,   181,   182,     0,     0,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,     0,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,     0,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,  4099,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
       0,     0,     0,   217,   218,   219,     0,     0,   220,   221,
    3649,   222,   223,   224,     0,     0,     0,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,     0,   236,     0,
       0,     0,     0,     0,   239,     0,     0,     0,   240,   241,
     242,   243,  3650,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,     0,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,  3651,     0,     0,   255,
       0,     0,     0,   257,     0,     0,   258,  3652,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,  -250,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,     0,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,  3653,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   322,   323,     0,     0,   325,   326,   327,
       0,   329,     0,     0,   330,   331,   332,   333,   334,     0,
       0,     0,     0,     0,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,     0,     0,   358,     0,   360,
    -250,     0,   361,     0,     0,   363,     0,     0,     0,   365,
     366,  3654,     0,     0,     0,   368,   369,   370,   371,   372,
     373,     0,   375,     0,   376,     0,     0,     0,     0,   378,
     379,   380,     0,     0,     0,     0,   382,     0,     0,     0,
     383,     0,   385,     0,     0,   387,     0,     0,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,     0,   399,     0,
       0,     0,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,     0,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,     0,     0,     0,     0,   434,     0,
       0,   435,     0,     0,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,  -250,     0,     0,   445,
       0,     0,   447,     0,     0,   138,   449,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,     0,
    -295,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,     0,     0,     0,
       0,   162,  3647,     0,   163,     0,   164,     0,     0,     0,
       0,   167,   168,  3648,   170,   171,     0,   172,   173,     0,
       0,   175,     0,   177,   178,   179,   180,     0,   181,   182,
       0,     0,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,     0,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,     0,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
    4141,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,     0,     0,     0,   217,   218,   219,
       0,     0,   220,   221,  3649,   222,   223,   224,     0,     0,
       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,     0,   236,     0,     0,     0,     0,     0,   239,     0,
       0,     0,   240,   241,   242,   243,  3650,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,     0,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
    3651,     0,     0,   255,     0,     0,     0,   257,     0,     0,
     258,  3652,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,  -250,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,     0,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,  3653,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   322,   323,     0,
       0,   325,   326,   327,     0,   329,     0,     0,   330,   331,
     332,   333,   334,     0,     0,     0,     0,     0,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,     0,
       0,   358,     0,   360,  -250,     0,   361,     0,     0,   363,
       0,     0,     0,   365,   366,  3654,     0,     0,     0,   368,
     369,   370,   371,   372,   373,     0,   375,     0,   376,     0,
       0,     0,     0,   378,   379,   380,     0,     0,     0,     0,
     382,     0,     0,     0,   383,     0,   385,     0,     0,   387,
       0,     0,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,     0,   399,     0,     0,     0,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,     0,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,     0,     0,
       0,     0,   434,     0,     0,   435,     0,     0,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
    -250,     0,     0,   445,     0,     0,   447,     0,     0,   138,
     449,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,     0,  -295,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,     0,     0,     0,     0,   162,  3647,     0,   163,     0,
     164,     0,     0,     0,     0,   167,   168,  3648,   170,   171,
       0,   172,   173,     0,     0,   175,     0,   177,   178,   179,
     180,     0,   181,   182,     0,     0,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,     0,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,     0,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,  -269,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,     0,     0,
       0,   217,   218,   219,     0,     0,   220,   221,  3649,   222,
     223,   224,     0,     0,     0,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,     0,   236,     0,     0,     0,
       0,     0,   239,     0,     0,     0,   240,   241,   242,   243,
    3650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,     0,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,  3651,     0,     0,   255,     0,     0,
       0,   257,     0,     0,   258,  3652,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,  -250,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,     0,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,  3653,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   322,   323,     0,     0,   325,   326,   327,     0,   329,
       0,     0,   330,   331,   332,   333,   334,     0,     0,     0,
       0,     0,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,     0,     0,   358,     0,   360,  -250,     0,
     361,     0,     0,   363,     0,     0,     0,   365,   366,  3654,
       0,     0,     0,   368,   369,   370,   371,   372,   373,     0,
     375,     0,   376,     0,     0,     0,     0,   378,   379,   380,
       0,     0,     0,     0,   382,     0,     0,     0,   383,     0,
     385,     0,     0,   387,     0,     0,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,     0,   399,     0,     0,     0,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
       0,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,     0,     0,     0,     0,   434,     0,     0,   435,
       0,     0,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,  -250,     0,     0,   445,     0,     0,
     447,     0,     0,   138,   449,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -295,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3647,     0,   163,     0,   164,     0,     0,     0,     0,   167,
     168,  3648,   170,   171,     0,   172,   173,     0,     0,   175,
       0,   177,   178,   179,   180,     0,   181,   182,     0,     0,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,     0,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,     0,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,     0,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,     0,     0,     0,   217,   218,   219,     0,     0,
     220,   221,  3649,   222,   223,   224,     0,     0,     0,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,     0,
     236,     0,     0,     0,     0,     0,   239,     0,     0,     0,
     240,   241,   242,   243,  3650,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,     0,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,  3651,     0,
       0,   255,     0,     0,     0,   257,     0,     0,   258,  3652,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,  -250,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,     0,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,  3653,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,     0,     0,   325,
     326,   327,     0,   329,     0,     0,   330,   331,   332,   333,
     334,     0,     0,     0,     0,     0,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,     0,     0,   358,
       0,   360,  -250,     0,   361,     0,     0,   363,     0,     0,
       0,   365,   366,  3654,     0,     0,     0,   368,   369,   370,
     371,   372,   373,     0,   375,     0,   376,     0,     0,     0,
       0,   378,   379,   380,     0,     0,     0,     0,   382,     0,
       0,     0,   383,     0,   385,     0,     0,   387,     0,     0,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,     0,
     399,     0,     0,     0,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,     0,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,     0,     0,     0,     0,
     434,     0,     0,   435,     0,     0,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,  -250,     0,
       0,   445,     0,     0,   447,     0,     0,   138,   449,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,     0,  -295,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  3647,     0,   163,     0,   164,     0,
       0,     0,     0,   167,   168,  3648,   170,   171,     0,   172,
     173,     0,     0,   175,     0,   177,   178,   179,   180,     0,
     181,   182,     0,     0,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,     0,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,     0,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,     0,     0,     0,   217,
     218,   219,     0,     0,   220,   221,  3649,   222,   223,   224,
       0,     0,     0,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,     0,   236,     0,     0,     0,     0,     0,
     239,     0,     0,     0,   240,   241,   242,   243,  3650,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,     0,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,  3651,     0,     0,   255,     0,     0,     0,   257,
       0,     0,   258,  3652,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,  -250,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,     0,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,  3653,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     323,     0,     0,   325,   326,   327,     0,   329,     0,     0,
     330,   331,   332,   333,   334,     0,     0,     0,     0,     0,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,     0,     0,   358,     0,   360,  -250,     0,   361,     0,
       0,   363,     0,     0,     0,   365,   366,  3654,     0,     0,
       0,   368,   369,   370,   371,   372,   373,     0,   375,     0,
     376,     0,     0,     0,     0,   378,   379,   380,     0,     0,
       0,     0,   382,     0,     0,     0,   383,     0,   385,     0,
       0,   387,     0,     0,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,     0,   399,     0,     0,     0,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,     0,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
       0,     0,     0,     0,   434,     0,     0,  4000,     0,     0,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,  -250,     0,     0,   445,     0,     0,   447,     0,
       0,   138,   449,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,     0,     0,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,     0,     0,     0,     0,   162,     0,     0,
     163,     0,   164,     0,     0,     0,     0,   167,   168,     0,
     170,   171,     0,   172,   173,     0,     0,   175,     0,   177,
     178,   179,   180,     0,   181,   182,     0,     0,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,     0,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,     0,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,     0,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
       0,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,     0,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,     0,   236,     0,
       0,     0,     0,     0,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,     0,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,     0,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,     0,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   322,   323,     0,     0,   325,   326,   327,
       0,   329,     0,     0,   330,   331,   332,   333,   334,     0,
       0,     0,     0,     0,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,     0,     0,   358,     0,   360,
       0,     0,   361,     0,     0,   363,     0,     0,     0,   365,
     366,     0,     0,     0,     0,   368,   369,   370,   371,   372,
     373,     0,   375,     0,   376,     0,     0,     0,     0,   378,
     379,   380,     0,     0,     0,     0,   382,     0,     0,     0,
     383,     0,   385,     0,     0,   387,     0,     0,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,     0,   399,     0,
       0,     0,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,     0,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,     0,     0,     0,     0,   434,     0,
       0,   435,     0,     0,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
       0,     0,   447,     0,     0,     0,   449
};

static const yytype_int16 yycheck[] =
{
       7,   528,   738,   602,   603,   528,   917,   635,   636,   831,
    1101,   640,   593,    20,     5,   549,    23,   952,   918,   121,
    1679,  2024,   620,  1004,  1101,    32,  1221,     7,  1072,  1578,
     754,   998,   999,   856,  1816,    42,    21,  1045,   478,  1281,
    2177,  2247,   882,  2208,   672,    30,    53,  2317,  2134,   563,
     858,    36,  1124,  2643,  2594,  1642,  2201,  2202,  2203,  1131,
     883,  1979,  1364,  1036,   922,  3030,  1984,   695,   697,  2665,
    2436,   700,   922,  2343,   882,  3007,  1372,  1165,  1957,   707,
     708,   709,  1068,  1069,  1835,  2420,    93,  2422,  1132,  1133,
    3001,  1764,  1136,  1137,  1138,  1139,   659,  1141,  1142,  1143,
    1144,  1145,  1146,  1147,  1148,  1833,  2192,   535,   115,  2235,
     117,  2212,  2213,   120,   121,   122,  2774,   715,   716,   717,
    1902,  1939,  2312,  1836,  1426,  1907,   607,  1840,    16,   727,
     137,  1913,  1914,  2298,  1939,  1917,  1295,   117,  1851,  2228,
     120,    18,    18,  1354,  1833,   726,  3255,  2236,  1861,  1788,
    1789,    15,    16,  1312,    33,  1705,    71,  2322,  2323,    24,
      29,  2455,  1928,  1322,  1323,    97,  1805,  3063,  3064,    16,
     581,  3067,    61,  1807,    15,    16,    15,    16,   589,   590,
      18,  1678,  2424,  1822,  1823,  2452,  1961,   127,  1988,  2456,
    3086,    50,    58,   113,   148,    62,  3092,  1888,    60,  1838,
    1839,   113,  1841,  2280,    23,  1844,  1845,  3264,  2291,  1848,
      90,  1939,   233,  2013,  1853,    57,    58,  2017,  1857,  1858,
    1859,  1860,   142,   113,    18,  1864,   224,  1866,  1779,    20,
     142,    60,  3561,  1872,   884,    60,  1875,  1876,  1877,  1825,
    2040,  2041,   756,   180,   843,   233,  2046,  2276,  2277,   349,
    1939,   158,   142,   110,   142,    63,  1451,    35,    42,   146,
      15,    16,  3557,  2063,  2064,   142,    57,    58,    33,   146,
     146,   280,   207,    66,    93,   338,  1364,   198,    15,    16,
     177,    50,    11,   166,  1923,  1924,  1925,  1926,    76,   424,
    1022,    35,   125,  3204,     8,  2095,   924,  1033,  2294,   813,
     115,   177,   440,    15,    16,    15,    16,    20,   146,    15,
      16,   173,   207,    15,    16,  3623,    65,    12,   137,   417,
      33,    15,    16,    12,   114,    15,    16,  2581,   247,    12,
      15,    16,   382,   136,    47,   136,    12,   136,  1426,   365,
     229,  2220,    15,    16,    57,    58,   757,   212,   173,   508,
     399,  1087,   146,   469,   237,  1091,  2936,   117,    15,    16,
      40,   463,  2391,  2392,    15,    16,   117,    18,    15,    16,
      15,    16,   327,   519,   210,    61,   457,   976,   977,   978,
     389,   196,    20,   540,   152,   114,   282,  3352,    99,   177,
     818,    65,    19,  3289,   528,    33,   481,   499,   234,   591,
     485,   479,  3298,   571,   261,   592,   593,   599,  2662,    47,
     326,   327,   180,  2188,   825,   142,    78,   195,   552,    57,
      58,   286,  3318,   378,  3004,   593,   476,  3323,  3360,   507,
     349,   126,  2399,   223,  1334,   592,   325,   126,  1162,   598,
     521,    15,    16,   126,   340,   382,   329,   593,   457,   264,
     126,   195,   166,   591,    15,    16,   463,   217,   465,  2241,
     355,  3769,   295,  1286,   599,   177,  1289,   177,   174,    74,
     264,   313,  1035,   523,  1297,   482,   264,  2234,   335,   486,
     415,  2626,   508,   390,   348,  1048,   535,   351,   495,   605,
    2587,   118,   499,   593,   501,   593,  1354,    15,    16,   210,
     507,  1324,  1325,  3832,  1354,  1807,   513,  3418,  2714,   348,
      15,    16,   351,  2658,   564,   280,   246,  2299,   380,  2301,
     247,    15,    16,   365,  2650,   420,  2308,   130,   535,   536,
     593,  1833,   316,   172,  3466,   946,  3831,  1135,  1346,  2321,
     528,    15,    16,   229,  1632,  2327,  1127,   554,   100,   429,
     571,   103,  2280,  2696,  1152,   380,   563,   350,   565,  2438,
    2342,   482,   449,   422,   552,  1609,   503,  1425,   207,   576,
     577,  3628,  2814,   402,   581,  1425,  1620,  1017,  1018,  1623,
     587,  2399,   589,   590,  1880,   158,   394,   594,   595,   478,
     457,  2280,   599,   348,  2399,   593,   351,   577,  1038,  1758,
     394,   490,   609,   610,   611,  2296,  2683,  1047,   615,  2300,
    2693,   348,   566,    10,   351,  2698,  2699,   532,  3208,  1059,
    1060,  1061,   351,  2314,  2315,  2259,  1928,  2393,    15,    16,
    1603,  1071,   564,  2324,  2717,  3567,   348,  1939,   348,   351,
    1364,   351,   348,  2443,  2194,   351,   348,    15,    16,   351,
     519,   753,   659,   422,   348,   129,  3252,   351,   348,  2350,
    2435,   351,  2159,   348,   604,  3774,   351,  2467,  2307,  1319,
    2470,  2399,   519,   530,  2811,   348,  2227,   597,   351,   541,
    2319,   519,  2482,   571,  2484,   597,   593,   576,   507,    15,
      16,   348,  2278,   559,   351,  2691,   593,   348,    15,    16,
     351,   348,  1426,   348,   351,  2505,   351,   597,   142,   597,
    2399,  1922,   591,   720,   578,   722,   541,   593,  3683,  1807,
     597,  2600,  2601,    15,    16,    15,    16,   389,   593,  2420,
     508,  2390,   596,   482,   593,    15,    16,   578,  1470,   578,
     747,   748,   749,  2543,   751,   752,   753,   538,   755,   756,
     757,  3045,  3046,   592,   593,   857,   598,   576,  2397,  3053,
    1171,  2790,  3056,  3057,   508,   568,  3698,   568,   748,   568,
      15,    16,   752,   207,   348,   755,  1290,   351,  3710,  3073,
    3047,   575,    15,    16,  1212,   792,   546,   348,   468,  1270,
     351,  3387,   503,  3087,  2939,   546,   803,   552,  3092,  3093,
    3094,  3095,    15,    16,   490,  2942,   813,   814,   482,   489,
      50,   818,  1240,  1224,  3081,  3082,   807,   390,   825,    15,
      16,  3753,  3089,   578,  2791,   538,    15,    16,  1239,  3096,
     348,   436,  2977,   351,   514,  1358,    15,    16,   593,   569,
    1928,   578,   569,   348,   158,   448,   351,  3037,  2945,   562,
     857,  1939,  3817,   207,   348,   592,   593,   351,   263,    15,
      16,    15,    16,   142,   296,  2991,   578,  2953,   578,  2995,
     597,  3014,   578,   343,   348,   172,   578,   351,   591,  3813,
     592,  3247,  3540,   593,   578,   406,   592,  3783,   578,  3785,
     592,   593,   330,   578,  2651,  2652,    70,   290,   592,   593,
     538,  3833,  2991,   593,    54,   578,  2995,   592,   593,   131,
     207,   918,   551,   171,   180,  1755,  1851,    15,    16,   592,
     593,   578,    15,    16,  2927,  1748,    22,   578,  3011,   188,
      41,   578,   132,   578,  1757,   592,   593,  1760,  1761,   946,
     595,  2820,   949,   950,  1784,   592,   593,  1755,   593,   247,
     178,  1379,   508,  1434,  3544,  2683,   477,  2259,   210,  1522,
     512,   348,   177,   515,   351,  2009,    15,    16,   247,  2642,
    2212,  2213,   231,  2791,    15,    16,  1784,   550,  2280,   146,
     348,   415,  1963,   351,   803,   382,  2791,   111,   110,   996,
      15,    16,   363,  1000,  2683,   814,    15,    16,    15,    16,
    3932,    45,  3598,  2754,   578,    15,    16,   174,    24,   414,
     171,  2083,  1114,    15,    16,   110,    20,   578,    77,   593,
     593,  3356,   348,   134,  1622,   351,  3651,  3652,  1035,    33,
    3941,   348,   593,   177,   351,    94,    66,  3138,   212,  3971,
    2026,  1048,  2755,    47,  2239,  1579,   168,   140,    31,  1151,
    2346,   349,  2711,    57,    58,    68,   348,   153,   348,   351,
     578,   351,  2221,  2791,  1922,   440,   420,   161,   348,  3435,
    2870,   351,  1922,   578,   506,   593,   390,    15,    16,   476,
     224,  2089,  2090,  1807,   578,    12,  2177,  3232,   593,   329,
     349,  2393,   391,   280,  1101,   113,   751,  2399,   222,   593,
    2177,   533,  2791,   348,   578,  1704,   351,  1114,   323,  2082,
     282,    15,    16,  3239,  3240,   348,   382,   375,   351,  2092,
     150,  3000,   110,  3719,  1638,   113,   523,   565,  1230,   599,
    4064,   950,   431,   361,  2721,   348,    15,    16,   351,   261,
     602,   603,    15,    16,  1151,   573,  2237,   264,   192,  1156,
     324,  3691,   348,   353,  1161,   351,   330,   115,  4123,   348,
    2237,    51,   351,   597,  1171,   570,   261,   564,   340,   348,
      60,  2259,   351,  1687,  1688,    15,    16,   996,   185,   329,
     168,  1000,   422,   317,    15,    16,    15,    16,    15,    16,
     139,   578,   348,  1716,   348,   351,   212,   351,   591,   126,
     149,  1208,   110,  1210,  1928,  1212,   593,   195,   448,   435,
     578,    15,    16,   335,   375,  1939,   591,  1224,   440,  3809,
     591,  3358,  1213,  1230,    24,   593,   400,   114,   456,    15,
      16,  3827,  1239,  1240,  3152,  2326,   550,   503,   215,   333,
     335,   224,   540,  1250,   231,  2440,   253,   224,   166,  2326,
     348,  1258,   578,   351,   551,   348,    15,    16,   351,  1361,
     168,   578,  3858,   246,  1271,  1272,  1273,  1274,  1275,  1276,
     286,    24,   396,   261,  1265,   346,   593,   394,    15,    16,
    1287,  1288,   449,  1290,    15,    16,   578,   195,   578,  1296,
     569,  1271,  1272,  1273,   593,  1275,    15,    16,   578,   348,
      96,   593,   351,   593,   316,  2393,   264,   348,  1288,  1316,
     351,  2399,   486,   593,   330,   333,  1296,    70,   597,   237,
     350,   457,   440,   348,    15,    16,   351,   585,   340,   348,
    3021,   348,   351,   578,   351,   177,   223,   177,   348,  3929,
     364,   351,  1161,    15,    16,   578,   348,   335,   593,   351,
    3041,    15,    16,   261,  1361,   440,   152,   370,  2293,  2294,
     593,   258,   536,   253,   488,   578,   482,   440,  1375,   591,
     370,   384,  1379,   595,   508,    18,  1367,   354,  4003,  4004,
     593,  2683,   578,    89,   180,   409,   253,  1378,   797,   578,
     434,   565,   261,    15,    16,  3601,   503,   593,   347,   578,
     534,    15,    16,   127,   593,   247,   159,   177,   530,  3546,
     348,   527,   212,   351,   593,   312,   108,    15,    16,   591,
     403,    56,   578,  1430,   578,  1432,  1433,   335,  1435,  1436,
     174,   525,     0,    15,    16,   530,   423,   593,   445,   593,
     177,  1448,   440,  1450,   348,   207,    89,   351,   542,    15,
      16,   221,  1432,  1433,   370,  1274,  2437,  1276,   575,   212,
     248,   440,  3380,   251,   331,  2537,   335,   440,   231,   348,
     486,   142,   351,   591,   339,   348,   440,   595,   351,   242,
     578,   377,    12,   945,   176,   578,   286,   500,  2086,  2791,
     359,  2582,   901,   166,   592,    15,    16,  1316,   146,   142,
     365,   212,   264,   146,   146,  2582,   591,   213,   348,   522,
     202,   351,   256,   177,  3600,  1522,  1523,   348,   591,   348,
     351,   348,   351,   158,   351,   231,  2570,   162,   188,   578,
     591,   174,   994,   286,   538,  2259,   242,   578,   599,   174,
     552,  1643,   530,   592,   348,   188,  2145,   351,   329,   565,
     193,   592,   455,   578,   558,   559,  1375,   482,   507,   578,
    2000,   578,   348,   215,   237,   351,   349,   592,   578,   593,
     213,   324,   224,   592,   503,   592,   578,   330,   221,   349,
    1587,   500,   592,   307,   503,   482,   382,   152,   231,   348,
     592,   114,   351,   591,  3148,  3254,   126,  3151,  2038,   242,
      15,    16,  3263,   391,   247,   297,    15,    16,   391,   301,
     316,   348,   591,   256,   351,   592,   308,   348,   591,   330,
     351,    24,   530,  1630,    15,    16,   407,   591,   390,   348,
     549,  1638,   351,    15,    16,   560,  1643,     8,   152,   599,
     578,   544,  1649,   508,  1651,  3306,   465,   192,   431,  1656,
    1657,   519,  1659,   224,   592,    16,  2096,   348,    29,   294,
     351,   530,    15,    16,   427,  1672,   180,   486,  1675,  2393,
      15,    16,   243,   316,   578,  2399,   348,   206,   581,   351,
    1687,  1688,  1689,  1690,   348,    15,    16,   351,   592,   234,
    1697,  1698,  1699,  3838,  1685,   552,   388,   340,  3968,   578,
    3865,   188,   354,  2791,  1695,   578,   349,   503,  1715,    15,
      16,    15,    16,   592,    24,    15,    16,  1724,   503,   592,
     192,   427,    57,    58,    15,    16,   348,   523,  1719,   351,
    3733,    66,   500,   486,   348,   503,   593,   351,   578,   382,
     505,   144,   599,    15,    16,   210,   438,   578,   210,   578,
     348,   578,  1759,   351,   559,   390,  2691,   562,    15,    16,
      70,   592,   234,   592,  1771,   592,   348,  3321,   564,   351,
    3324,  1778,  2594,  3803,   578,   486,   430,   210,    15,    16,
     317,   487,   348,  2306,   427,   351,    15,    16,   592,   203,
     206,   205,   578,  2633,    15,    16,   317,  3579,  3580,  3581,
    3582,  1792,    70,    15,    16,   448,   592,    15,    16,   212,
    1801,  1802,   565,    15,    16,    15,    16,  2825,  2641,   578,
    2755,  1812,  1813,  1814,  1815,  2633,  1817,  1818,   348,  3383,
    3760,   351,  3762,   592,   144,  1937,   185,  1656,  1657,   511,
    1659,   578,  2850,  2851,   487,    15,    16,   578,   188,   159,
     161,   505,    30,  1672,   565,  2946,  1675,   592,   593,   578,
     343,   592,   586,   587,   588,   589,   221,  1874,   317,  2946,
    1689,  1690,  2880,   592,   123,   567,   144,  1979,  1697,  1698,
    1699,  1888,  1984,   286,   592,   593,  3529,   578,   580,   138,
     596,    73,  1899,    75,    72,   549,  3138,   540,   585,    15,
      16,   592,   212,    46,   253,   592,   578,   177,  2999,   552,
     564,   592,  1903,  1904,   578,  1906,   585,  1908,  1909,  1910,
    1911,  1912,  2999,   592,  1915,  1916,   569,   330,   571,   597,
    1937,   113,    16,   348,   186,  1942,   351,   571,  1945,   348,
    1759,  3032,   351,   552,   212,  1952,  1953,  1954,  1955,   592,
     593,  1958,   134,   596,   597,  3032,   578,   348,   593,  1778,
     351,  3991,   140,   264,   578,  1945,   348,   934,   935,   351,
     592,   508,  1979,  2075,   394,   599,   286,  1984,   592,   345,
     578,   127,  3531,    96,   593,   167,   547,   508,  3134,  3135,
     599,   591,   341,   413,   592,   348,   578,   534,   351,   440,
     476,   440,  2104,   348,   971,   173,   351,   448,  3651,  3652,
     592,     6,   578,   534,   324,   326,   327,   415,   348,    11,
     330,   351,   333,   443,   542,   543,   592,   545,  2468,   547,
     144,   283,   284,   591,  3834,  3835,   288,   289,  3820,   591,
    3235,   591,   348,   127,   348,   351,   593,   351,   348,  3016,
    3017,   351,   591,  3692,   591,   171,   324,   348,   578,   508,
     351,  4091,   330,  4093,    69,  2579,   591,  2791,  2075,   591,
     591,   110,   592,   110,   591,  3734,   348,   592,   593,   351,
      69,   591,    16,   486,   197,   534,  4116,   592,   593,   591,
    2097,   348,  2532,  3101,   351,   591,   445,  2104,   212,   591,
    2202,  3740,  2204,  2205,  3743,  3744,  3745,  3746,   508,  2623,
     591,   348,  3203,  3259,   351,   556,   557,   556,   557,   348,
     268,   269,   351,  4153,  4154,   552,  3203,   348,  4131,   168,
     351,   168,   400,  1952,  1953,  1954,   348,   592,   593,   351,
     348,   591,   591,   351,  2246,  2247,   348,   591,   348,   351,
     591,   351,   591,  2160,   591,  3136,   195,   591,   511,  3802,
    3803,   307,   565,   578,   203,   592,   593,   591,   173,   578,
    2177,  2556,  2557,  2558,   592,   593,   486,   592,   348,   592,
     593,   351,  3053,   592,   173,  3056,  3057,   578,  2195,  2196,
     593,   110,  3851,   127,   591,  2202,   578,  2204,  2205,   377,
     599,   592,  3073,    33,  2195,   210,   592,   593,  3847,  3848,
     592,  2596,  2597,  2598,   525,  2317,   330,  3856,   486,   401,
     398,   210,   261,   307,   261,   578,    15,    16,    58,   234,
    2237,   542,   348,   578,   591,   351,   592,   593,   155,  2246,
    2247,  2343,   340,   356,   591,   234,   110,   592,   578,   168,
     428,   381,   365,   591,  3897,   565,   404,   405,  3158,   375,
     373,    11,   592,   530,   531,   591,   533,   591,   536,  3912,
     100,   591,   578,   103,   578,    56,   195,   591,   578,  2286,
     430,   111,  3925,   593,  2291,     6,   592,   578,   592,  2296,
     511,   552,   592,  2300,   591,  2302,   335,   565,   335,   592,
     593,   592,  2287,   481,   168,  2312,   578,  2314,  2315,   591,
    2317,   591,  2297,  2304,  2305,  3552,  3553,  2324,  2303,  2326,
     592,   578,   591,  3469,  3470,   593,  3472,  3473,  2335,   591,
     110,  4113,   592,   593,    55,   592,  2343,  2936,  2329,   486,
    2325,   578,   261,  2350,  2351,  2330,    96,   460,  3991,   578,
     591,  2336,  2337,    12,   340,   592,   591,   578,    18,   364,
    4003,  4004,   593,   592,   114,    31,   578,   451,   452,   591,
     578,  2969,   486,   307,   591,   380,   578,   158,   578,   346,
     592,   162,    41,  1197,   592,   591,  1200,   591,   168,  1203,
     592,   380,   592,   174,   591,     3,   591,   261,  2389,    57,
      58,     9,    10,   591,  4047,  3004,   592,   593,   578,   130,
     136,   137,  2419,  2420,  4057,   195,   335,   592,   593,  2859,
     591,    29,   592,    82,    60,   592,   593,    35,    87,    89,
     180,    39,   591,    69,   592,   593,   549,   591,   584,   585,
     586,   587,   588,   589,    80,  3283,  3284,   591,  4091,   591,
    4093,   565,   592,   593,   592,   593,   591,   207,  3296,   591,
    4103,   127,   578,   591,  3302,  3702,   591,  2907,   591,  3706,
     591,   335,   591,  4116,   591,  4118,   591,  4120,   500,   593,
    2487,   261,   142,   591,  4127,   591,   146,  3325,   318,   591,
    3328,   530,   591,   530,  4137,   591,  2487,   591,   582,   583,
     584,   585,   586,   587,   588,   589,   591,   257,  3571,  3572,
    4153,  4154,   172,   294,   174,   591,  2335,   451,   452,  3118,
      12,  2701,   130,   592,   593,   591,  3461,  3462,   188,   592,
     593,  4174,  4175,   193,  3771,  3772,  4179,   173,   592,   593,
      25,   592,   593,   179,  3588,    60,  2553,   207,  2555,  2556,
    2557,  2558,  2732,   213,    69,   335,   592,   593,   224,  2566,
    2740,   221,   591,  2743,  2949,    80,   591,   226,   592,   593,
     591,   231,  2579,   591,   210,  2582,   592,   593,   592,   593,
     246,    66,   242,   592,   593,    70,   207,   247,   591,  2596,
    2597,  2598,   592,   593,   592,   593,   256,   591,   234,  3499,
    2419,   591,  2609,  1088,  1089,  3505,   327,   591,  2615,   390,
    2617,   530,  2714,   592,   593,   591,  2623,   591,  2609,   461,
     104,   105,   106,   107,   108,   455,  3149,    48,   113,   592,
     593,   177,   382,   258,   126,  1657,   295,  1659,   592,   593,
    3731,   307,   592,   593,    48,   127,   146,   147,   582,   583,
     584,   585,   586,   587,   588,   589,   316,   593,   173,   340,
     326,   327,   435,   127,   179,   540,   530,   527,    25,    26,
     592,   593,   393,    35,   395,  1697,  1698,  1699,   592,   593,
     340,   181,   592,   593,   586,   515,  2693,   467,   151,   349,
     190,  2698,  2699,   448,  2701,   210,   446,   592,   593,   358,
      57,    58,    59,   591,   196,  3713,   247,  2714,   174,    66,
    2717,   592,   593,    70,   544,   199,   200,   201,   202,   234,
     482,    78,   382,   482,  2715,  2732,   482,   227,   364,   592,
     593,   280,  2723,  2740,   592,   593,  2743,   403,   238,   592,
     593,   103,    99,   500,   380,   258,  2753,  2566,   110,   234,
     530,   501,   143,   503,    79,  2762,   113,   593,  2765,   116,
     224,   342,  2769,   592,   593,   265,   496,   427,  2775,   480,
     481,   592,  2779,   484,   485,  2782,   142,   488,   113,   490,
     592,   593,  2789,   592,   593,   451,   452,   144,   448,   592,
     593,   592,   593,    99,  2801,  2775,   462,   592,   593,   161,
    3844,  2808,  3849,  3850,   463,   598,   168,  3477,  3478,  2917,
    2918,   127,  2819,   297,     6,   299,   300,   301,  2955,  2956,
     320,   591,    70,  3422,   308,   307,    98,   487,   464,  3186,
    3187,     4,    89,   195,   439,   564,    54,   407,   497,    70,
     155,   326,   327,   307,    99,  3474,  3475,  3476,   333,  3940,
      81,    99,   204,   210,   593,   340,  2958,   593,   599,    66,
      12,   218,   568,   508,   592,   380,   126,   592,     9,  3691,
     593,   246,  2974,   127,   592,   599,   233,   592,   591,   599,
     540,   144,  3510,   491,  3784,   592,    48,   599,   593,   598,
     593,   551,   552,   571,  2901,   380,   144,   500,   591,   261,
     280,   509,   127,   253,   388,   541,  3950,   280,   516,   569,
     593,   571,   363,  3436,   593,   519,   582,   583,   584,   585,
     586,   587,   588,   589,   593,   519,  3366,  2934,   285,   537,
     593,   593,   592,   593,   224,   586,   596,   597,    96,  2946,
    2947,   593,  2949,   225,   174,   302,  2765,   498,   163,   464,
     174,  2958,   593,   437,   438,   317,   213,  2964,   545,   444,
     593,   459,   210,   368,   340,   122,   328,  2974,   591,   451,
     452,   333,   592,   335,   231,  2982,  4020,   469,   470,   471,
     472,   473,   474,   475,   593,   242,   593,   451,   452,  2808,
     146,   307,  2999,   146,   152,   487,   146,   146,  3532,   224,
     357,   146,   146,   146,  3011,   236,   146,   146,   365,   146,
     478,   146,   146,    89,  3021,  3643,  3023,   146,   146,   146,
      15,    16,   180,   146,   593,  3032,   541,   547,   551,   574,
    3037,    46,   180,   340,  3041,   340,   504,   285,   340,   593,
     592,   177,   592,   586,   592,   592,   177,   758,   592,   585,
    3152,   593,   210,   307,   302,   592,   541,   592,  4149,   316,
     591,   593,   592,   592,   592,   592,   592,  3594,   592,   211,
     592,   592,  4149,   592,   305,   432,   324,   593,   592,   449,
     591,  4172,   307,   567,   591,   589,   591,   593,   569,   592,
     394,   593,   591,   492,   591,   579,   580,   186,   329,   257,
    4191,   583,   584,   585,   586,   587,   588,   589,   599,   104,
     105,   106,   107,   108,  4191,  3106,  3218,   177,   582,   583,
     584,   585,   586,   587,   588,   589,  3133,  3134,  3135,   486,
     592,  4031,  4032,  3124,  4034,   451,   452,   213,   457,   120,
     389,   593,   174,   593,   501,  3152,   508,   504,   448,    46,
     512,   314,   620,   515,   476,   231,   476,   625,    89,   476,
     439,   392,    70,   525,   476,   476,   242,    69,   530,   364,
     427,   528,   534,    81,   364,   364,  4076,   519,  4078,  4079,
     122,   232,   232,   540,   122,   364,    46,   655,  1010,  1011,
    1012,  3198,   501,   501,   364,   362,  3203,   451,   452,   364,
    1022,   410,  3304,   671,   199,   200,   201,   202,   257,   364,
     591,  3218,   552,   121,   599,    35,  3815,   198,   592,   377,
     140,  3748,   584,   585,   382,   355,   451,   452,   592,   592,
     487,  1053,  3813,   220,  1056,   220,   593,   592,   486,   599,
     316,   592,   177,  3234,   572,   476,   572,   715,   716,   717,
     718,   592,  3259,   501,  4165,   599,   599,  1079,  1080,   727,
     599,  1083,   592,   256,   340,   599,   582,   583,   584,   585,
     586,   587,   588,   589,   519,   146,   599,   258,  3380,   519,
    1102,  1103,   213,   103,  3269,   519,   508,   575,   446,   253,
     110,    46,   593,   591,   591,   166,   519,  3304,   346,   280,
     231,   177,   297,   177,   299,   300,   301,   177,   221,   177,
     181,   242,   599,   308,  3305,   599,  3839,   228,   571,   190,
     593,   335,  3329,   352,   231,   231,   298,    99,   236,  3336,
     584,   585,   586,   587,   588,   589,  3438,    99,   234,   234,
     591,   161,   519,   501,  3351,   591,   345,   505,   168,  3340,
     592,   427,   599,   348,   593,   188,   351,   582,   583,   584,
     585,   586,   587,   588,   589,   523,   237,   238,   424,   349,
     508,   591,    96,  3380,   364,   195,   586,   591,   599,   591,
     591,   222,   222,   188,   592,   316,   592,   592,   592,   188,
     592,   549,   592,   388,   265,   334,   599,   305,   334,   592,
     381,   586,   248,   591,   207,   364,   564,   340,   389,   340,
     592,   487,   593,   593,   592,   599,   177,  3424,   326,   327,
     546,   329,   224,   244,    66,   268,    25,    26,   340,   593,
     231,  3438,   593,   231,   234,   378,   340,   234,   419,   593,
     340,   261,   437,   438,    70,    18,   340,   340,   461,    46,
    3457,  4187,   323,   247,   440,   179,    46,   571,    57,    58,
      59,   364,  3469,  3470,   442,  3472,  3473,    66,   592,   591,
     591,    70,   591,   591,  4073,   591,   457,   592,   591,    78,
     133,  3488,   240,  4064,   392,   953,   210,   593,   188,   450,
     591,   591,   146,   592,   231,   231,   427,   317,   593,  3601,
      99,   482,   113,   591,   113,   592,   591,   376,   379,   599,
      74,   457,   129,   333,   113,   335,   461,   116,   436,   500,
     592,   592,   503,   593,   592,    18,    46,   592,   592,   592,
     592,  3538,  3539,   257,  4133,    33,   304,   592,  1006,  1007,
     592,   236,  3549,  4070,   389,   144,   592,  1015,  1016,  1017,
    1018,  1019,  1020,  1021,   349,   571,   487,   349,  1026,   221,
     591,  1029,  1030,   591,  1032,   592,  1034,   592,   476,   593,
    1038,    46,   567,  1041,  1042,  1043,  1044,  4158,  1046,  1047,
    3587,   599,   593,   578,   579,   580,  1054,  1055,   193,  1057,
    1058,  1059,  1060,  1061,  3601,  1063,   304,   552,  1066,  1067,
     552,   394,  1070,  1071,  1072,  1073,  1074,  1075,  1076,  1077,
    1078,   210,  4193,  1081,  1082,   591,  1084,   508,  1086,   218,
     508,   591,  1090,   591,  1092,  1093,   591,   546,   591,   591,
     562,   591,   562,  1455,   233,   113,  1104,  1105,   234,   234,
     333,  3648,  1110,   335,  3897,  1113,  3653,   246,   592,    46,
     591,   335,  1120,  1121,  1122,   592,  1124,   304,   157,  3912,
      46,    46,   234,  1131,  1132,  1133,    13,  1135,  1136,  1137,
    1138,  1139,  3925,  1141,  1142,  1143,  1144,  1145,  1146,  1147,
    1148,   508,   508,   593,  1152,  1153,   285,   503,   508,   508,
     556,   592,   512,   592,    16,   515,   552,   552,   221,   328,
     557,   593,  1524,   302,   480,   525,  1528,   571,   424,   233,
     530,   335,   433,   592,   534,   593,   346,   546,   491,   269,
    3539,   174,   446,   141,  3731,    30,   591,   600,    23,   591,
    3737,   568,   591,   174,  1556,   360,    16,   591,    33,    34,
     464,    88,   592,   592,   592,   510,   122,   122,   144,   591,
    3852,   382,    68,  3760,   146,  3762,   402,  3764,   357,     5,
     568,   177,    57,    58,   584,   585,   365,    30,  3587,    60,
     117,   346,    67,    60,    69,  3782,   334,   501,   593,   503,
     592,   505,   492,   130,   249,   504,    46,    46,  3795,    84,
    1258,    86,   221,    88,  4047,   591,   140,   346,  1266,   346,
     591,   121,    97,   129,  4057,   152,    46,   154,   597,    46,
     139,    46,    16,   140,   568,   206,   263,   541,   165,   597,
     600,   135,   112,   592,   591,   549,   592,    46,    46,    46,
     272,    52,   592,   432,   597,   433,   592,   146,   140,   186,
     511,   593,   191,   593,   597,  3852,   207,   592,   143,   144,
    4103,   593,    52,   148,  3861,  3846,   151,   414,   335,   174,
     591,   174,   174,   210,   570,  4118,  3968,  4120,   511,   113,
     217,   249,   448,  3658,  4127,   557,   175,  1918,  2108,  2275,
    3112,   603,  3349,   178,  4137,   180,  3816,   486,  3685,  4010,
     185,   931,   187,  4011,  3347,  3351,  3537,  4193,  4145,  3529,
    3529,  3529,   501,  3529,  3529,   504,   625,  3529,  3529,   256,
    3529,  3529,  4155,  3529,   209,   210,  4044,  3890,  4044,   214,
    3529,  4174,  4175,  4025,  4004,  3529,  4179,  3529,  3915,   528,
    3916,   969,  1370,  3940,  1632,  3545,   655,   232,  1372,  2328,
    2571,   540,  2934,  3842,  3588,  3737,  3200,  4020,  3950,  1425,
    4027,  4070,   671,  3748,   473,  1880,  3127,  3465,   253,  2794,
    2420,  3968,  3041,  2353,  3955,  3956,  2289,  1888,  3021,  3097,
    3497,  3313,  3064,  3064,  3268,  3304,  3839,  3025,  2974,  3986,
    3987,  3768,  3491,  3781,  3634,   280,    12,    12,  3771,  3694,
    3772,  1439,   591,  1461,  3702,  1950,  3549,  3706,  3505,   718,
     266,   267,   268,   269,   270,   271,  1766,   273,   274,   275,
     276,   277,   278,   279,  1887,   281,  3273,   312,  4025,  2346,
    3023,  1331,  1689,  2172,  1421,  3022,   950,   322,  2566,  2139,
    2186,   548,  3596,   844,  1704,  2487,   383,  4013,  2489,  3709,
    1985,  1048,  4049,  1155,  2238,  2989,  3616,  3464,   343,  4056,
    3986,  2093,  2782,  3987,  1089,   402,  3032,  1346,  3458,  4133,
    3438,   408,  2191,  1955,  3850,  1212,  4168,  2135,  1536,   416,
    3203,  1240,  2176,  2999,   369,  2941,  2940,    12,    13,  4172,
    3940,   538,   616,  1448,  1756,  1279,   381,   382,   528,  1648,
     385,   386,  2753,   440,  1245,  2923,  4018,  1565,  1566,  1567,
    4066,  4191,  3977,  3306,  1710,  4038,   453,   454,  2946,  2625,
    4117,  2982,  1258,  1581,  3229,  4122,  3446,  1675,   520,   826,
    3577,  1205,  2553,  1248,  3583,   830,   521,  1430,  2069,  2522,
    1109,   469,   469,   603,   603,  1603,   603,    -1,   404,   405,
      -1,  1609,  4149,    -1,  1612,    -1,  1614,    -1,   495,    -1,
     445,  4158,  1620,    88,  1622,  1623,    -1,    -1,    -1,    -1,
      -1,  4168,   457,    -1,    -1,  4172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   523,    -1,    -1,    -1,
      -1,    -1,   117,    -1,  4191,    -1,  4193,   482,    -1,    -1,
      -1,   486,    -1,    -1,    -1,   130,    -1,    -1,    -1,   546,
      -1,   548,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1684,   152,    -1,   154,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     165,    -1,    -1,    -1,   953,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,    -1,    -1,
      -1,   566,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,
      -1,    -1,   217,    -1,    -1,    -1,    -1,  1006,  1007,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1015,  1016,    -1,    -1,
    1019,  1020,  1021,    -1,    -1,    -1,    -1,  1026,    -1,    -1,
    1029,  1030,    -1,  1032,    -1,  1034,    -1,    -1,    -1,    -1,
      -1,   256,  1041,  1042,  1043,  1044,    -1,  1046,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1054,  1055,    -1,  1057,  1058,
      -1,    -1,    -1,    -1,  1063,    -1,    -1,  1066,  1067,    -1,
      -1,  1070,    -1,    -1,  1073,  1074,  1075,  1076,  1077,  1078,
      -1,    -1,  1081,  1082,    -1,  1084,    -1,  1086,    -1,    -1,
      -1,  1090,    -1,  1092,  1093,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1104,  1105,    -1,    -1,    -1,
      -1,  1110,     6,    -1,  1113,    -1,    -1,    -1,    -1,    13,
      14,  1120,  1121,  1122,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1901,  1153,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    59,    60,    -1,   383,    -1,
      64,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    78,    -1,    -1,   402,    -1,    -1,
      -1,    85,    -1,   408,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   416,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1965,    -1,   113,
      -1,  1969,   116,    -1,    -1,   440,  1974,  1975,    -1,   123,
     124,    -1,    -1,    -1,    -1,  1983,   130,    -1,   453,   454,
      -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,   142,  1997,
     144,  1999,  2000,    -1,  2002,  2003,  2004,  2005,  2006,  1258,
      -1,  2009,    -1,    -1,    -1,    -1,    -1,  1266,    -1,    -1,
    2018,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
     495,    -1,    -1,  2031,    -1,  2033,    -1,  2035,  2036,  2037,
    2038,    -1,    -1,    -1,  2042,  2043,  2044,    -1,    -1,    -1,
      -1,  2049,  2050,  2051,    -1,  2053,    -1,  2055,   523,  2057,
      -1,  2059,    -1,  2061,   208,    -1,   210,    -1,  2066,    -1,
      -1,    -1,    -1,    -1,   218,    -1,    -1,    -1,  2076,    -1,
      -1,   546,    -1,   548,    -1,  2083,    -1,    -1,  2086,   233,
      -1,    -1,    -1,    -1,  2092,    -1,    -1,    -1,  2096,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,   302,    -1,
      -1,    -1,   306,    -1,    -1,    -1,    -1,    -1,    48,    49,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    59,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    12,    13,    -1,    -1,    -1,    -1,
     344,    -1,    -1,    -1,    -1,   349,    -1,    -1,    88,    -1,
      -1,    -1,  1461,   357,    -1,    -1,    -1,    -1,    -1,    -1,
     364,   365,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,
     130,    -1,    -1,   397,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   142,    -1,    -1,   409,   410,   411,   412,    -1,
      88,    -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1536,   432,    -1,
     170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,
      -1,   191,   130,    -1,   194,    -1,  1565,  1566,  1567,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,    -1,   154,   217,    -1,   219,
      -1,    -1,   486,    -1,    -1,    -1,    -1,   165,    -1,    -1,
      -1,    -1,    -1,    -1,  1603,   235,    -1,   501,    -1,    -1,
     504,    -1,    -1,  1612,    -1,  1614,    -1,    -1,   186,    -1,
      -1,    -1,   252,    -1,    -1,    -1,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   210,    -1,    -1,    -1,   540,    -1,    -1,   217,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1684,    -1,    -1,   256,    -1,
      -1,    -1,    -1,  2441,    -1,    -1,    -1,    -1,    -1,  2447,
      -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   344,    -1,    -1,    -1,    -1,    -1,
    2468,    -1,    -1,  2471,  2472,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,    -1,    -1,
      -1,    -1,    -1,  2501,    -1,    -1,    -1,   387,    -1,    -1,
      -1,    -1,    -1,  2511,    -1,  2513,    -1,  2515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   407,    -1,    -1,
     410,    -1,   412,    -1,  2532,   415,    -1,    -1,   418,  2537,
      -1,   421,    -1,    -1,    -1,    -1,   426,    -1,   428,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,
     440,    -1,  2560,    -1,    -1,   383,    -1,    -1,   448,    -1,
      -1,    -1,  2570,   453,    -1,    -1,    -1,   457,    -1,    -1,
      -1,    -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,    -1,
     408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   416,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2618,    -1,   440,    -1,  2622,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   526,    -1,    -1,    -1,
      -1,    -1,  1901,    -1,    -1,    -1,    -1,    -1,    -1,   539,
      -1,    -1,    -1,   543,    -1,    -1,   546,  2665,    -1,    -1,
      -1,   551,    -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2688,    -1,    -1,    -1,    -1,    -1,    -1,   577,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   523,    -1,    -1,    -1,    -1,
      -1,   591,    -1,    -1,    -1,    -1,  1965,    -1,    -1,    -1,
    1969,    -1,    -1,    -1,    -1,  1974,  1975,    -1,   546,    -1,
     548,    -1,    -1,    -1,  1983,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1997,    -1,
    1999,    -1,    -1,  2002,  2003,  2004,  2005,  2006,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2018,
      -1,    -1,    -1,    -1,  2772,  2773,    -1,    -1,    -1,    -1,
      -1,    -1,  2031,    -1,  2033,    -1,  2035,  2036,  2037,    -1,
      -1,    -1,    -1,  2042,  2043,  2044,    -1,    -1,    -1,    -1,
    2049,  2050,  2051,    -1,  2053,    -1,  2055,    -1,  2057,    -1,
    2059,    -1,  2061,    -1,    -1,    -1,    -1,  2066,    -1,    -1,
      -1,     6,    -1,    -1,    -1,    -1,    -1,  2076,    13,    -1,
      -1,    -1,  2830,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      25,    26,    -1,  2092,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2856,  2857,
      -1,  2859,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    59,    -1,    -1,    13,    14,  2877,
      -1,    25,    26,    -1,  2882,    70,    -1,  2885,    -1,    -1,
    2888,  2889,    28,    78,    -1,    -1,    -1,    -1,    34,    -1,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2907,
      -1,    -1,    48,    49,    99,    59,    -1,    -1,    -1,    55,
      -1,  2919,    -1,    59,    60,    -1,    70,    -1,   113,    -1,
      -1,   116,    -1,    -1,    78,    -1,    72,    -1,   123,    -1,
      -1,    -1,  2940,    -1,    -1,   130,    -1,    -1,    -1,    -1,
      -1,    -1,    88,   138,    -1,    99,    -1,    -1,    -1,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,
      -1,  2969,   116,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,   118,   119,    -1,  2983,    -1,   172,    -1,    -1,
      -1,    -1,    -1,   129,   130,    -1,    -1,    -1,    -1,    -1,
     144,    -1,    -1,  3001,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,
      -1,    -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,
      -1,    25,    26,   218,   170,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,
     186,    -1,    -1,    -1,    -1,   191,    -1,    -1,   194,    -1,
      -1,    -1,    -1,    57,    58,    59,   210,    -1,    -1,    -1,
      -1,    -1,    66,    -1,   218,    -1,    70,    -1,    -1,    -1,
      -1,   217,    -1,   219,    78,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,
     285,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   252,   302,    -1,   113,
     256,   306,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,   349,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     365,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2441,    -1,    -1,    -1,    -1,    -1,  2447,    -1,
      -1,    32,    33,    -1,    -1,    -1,  3204,    38,   344,    40,
      -1,    42,    43,   357,    -1,    -1,   210,    -1,    -1,    -1,
      -1,   365,  2471,  2472,   218,   410,    -1,    58,   364,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,   377,    -1,    -1,    -1,  3243,  3244,   432,    -1,    -1,
      -1,   387,  2501,    -1,  3252,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2511,    -1,  2513,    -1,  2515,    -1,    -1,   100,
      -1,   407,   103,    -1,   410,    -1,   412,    -1,    -1,   415,
     111,    -1,   418,    -1,    -1,   421,    -1,    -1,   432,    -1,
     426,   285,   428,    -1,    -1,    -1,    -1,   128,    -1,   435,
      -1,   486,    -1,    -1,   440,    -1,    -1,    -1,   302,    -1,
      -1,  2560,   448,    -1,   145,    -1,   501,   453,    -1,   504,
      -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,   169,    -1,
      -1,    -1,   486,   528,    -1,   481,    -1,    -1,    -1,   485,
      -1,   182,   183,    -1,    -1,   540,    -1,   501,    -1,    -1,
     504,    -1,    -1,   357,    -1,    -1,    -1,    -1,  3366,  2618,
      -1,   365,    -1,  2622,  3372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,    -1,  3387,
     526,   222,    -1,  3391,    -1,    -1,   540,    -1,    -1,    -1,
      -1,    -1,    -1,   539,    -1,    -1,    -1,   543,    -1,    -1,
     546,    -1,    -1,    -1,    -1,   551,  2665,    -1,    -1,   250,
    3418,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   259,   260,
      -1,   262,    -1,    -1,    -1,    -1,    -1,    -1,   432,  2688,
      -1,   577,    -1,    -1,    -1,    -1,    -1,    -1,  3446,    -1,
      -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,    -1,    -1,
     291,   292,   293,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   309,   310,
     311,    -1,    -1,    -1,   315,    -1,    -1,   318,    -1,    -1,
      -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   336,   337,   501,    -1,    -1,
     504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2772,  2773,    -1,    -1,    -1,    -1,    -1,
      -1,  3529,    -1,    -1,   528,    -1,    -1,    -1,    -1,    -1,
     371,   372,    -1,    -1,    -1,    -1,   540,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3555,    -1,  3557,
      -1,  3559,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3571,  3572,    -1,    -1,    -1,    -1,    -1,
      -1,  2830,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3598,  3599,    -1,    -1,    -1,    -1,    -1,  2856,  2857,    -1,
    3608,    -1,  3610,   444,    -1,    -1,    -1,   448,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   458,  2877,    -1,
      -1,    -1,    -1,  2882,    -1,    -1,  2885,    -1,    -1,  2888,
    2889,    -1,    -1,    -1,    -1,    -1,    -1,  3645,    -1,    -1,
      -1,    -1,    -1,  3651,  3652,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2919,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,   518,    -1,    -1,
      -1,  2940,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3719,    -1,    -1,    -1,    -1,    -1,   558,   559,    -1,
      -1,    -1,    -1,    -1,  2983,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   580,
      -1,    -1,  3001,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3788,    -1,  3790,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3800,    -1,  3802,  3803,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3824,    -1,    -1,  3827,
      -1,    -1,    -1,  3831,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3844,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3858,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3895,    -1,  3897,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3912,  3913,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3925,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3941,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3950,    -1,    -1,  3204,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3990,  3991,  3243,  3244,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3252,    -1,  4003,  4004,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4020,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4047,
      -1,    -1,    -1,    -1,    -1,    -1,  4054,    -1,    -1,  4057,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4084,    -1,    -1,    -1,
      -1,    -1,    -1,  4091,    -1,  4093,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4103,    -1,    -1,  4106,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4116,    -1,
    4118,    -1,  4120,  3372,    -1,    -1,    -1,    -1,    -1,  4127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3387,  4137,
      -1,    -1,  3391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4153,  4154,    -1,    -1,    -1,
      -1,  4159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3418,
      -1,    -1,    -1,    -1,    -1,    -1,  4174,  4175,    -1,    -1,
      -1,  4179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3555,    -1,  3557,    -1,
    3559,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3571,  3572,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3598,
    3599,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3608,
      -1,  3610,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3645,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3719,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3788,
      -1,  3790,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3800,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3827,    -1,
      -1,    -1,  3831,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3858,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3895,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3913,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,  3941,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      44,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,  3990,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,  4054,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,  4084,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,  4106,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
    4159,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,   239,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    93,    -1,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,
      -1,   590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,
     599,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    93,    -1,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,
      -1,   590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,
     599,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    -1,    93,    -1,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,   530,    -1,   532,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,
      -1,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
     599,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    -1,    93,    -1,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,   530,    -1,   532,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,
      -1,   590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,
     599,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,   177,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    -1,    93,    -1,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,   530,    -1,   532,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,
      -1,   590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,
     599,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    -1,    93,    -1,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,    -1,   332,   333,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,   530,    -1,   532,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,
      -1,   590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,
     599,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    -1,    93,    -1,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,   530,    -1,   532,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,
      -1,   590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,
     599,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    -1,    93,    -1,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,    -1,   332,   333,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,   530,    -1,   532,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,
      -1,   590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,
     599,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    -1,    93,    -1,    95,    96,    -1,    98,
      99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
     189,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,
     219,   220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,    -1,   332,   333,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,   530,    -1,   532,   533,   534,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,    -1,   563,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,
      -1,   590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,
     599,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    -1,    93,
      -1,    95,    96,    -1,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,   303,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,    -1,    -1,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,    -1,   332,   333,
      -1,   335,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,    -1,   563,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,   585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,
     594,   595,    -1,    -1,   598,   599,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    80,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,   234,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,   246,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,   464,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
     599,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,   234,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,   464,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   599,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,   592,
      -1,    -1,    17,    -1,    -1,    20,   599,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,   592,    -1,    -1,
      -1,    -1,    17,   598,   599,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,   591,    -1,    -1,    -1,
      17,    -1,    -1,    20,   599,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,   221,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,   599,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,    -1,     5,   586,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
     599,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,   591,    -1,    -1,    -1,    17,    -1,    -1,    20,
     599,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,   598,   599,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   599,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   599,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,   599,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,   599,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,   245,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   598,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,   245,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   598,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
     245,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,   598,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,
      78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,    -1,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,
     198,    -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,    -1,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,   230,    -1,    -1,   233,    -1,    -1,    -1,   237,
      -1,    -1,   240,   241,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
     358,    -1,    -1,   361,   362,   363,    -1,   365,    -1,    -1,
     368,   369,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,
      -1,   419,    -1,    -1,    -1,   423,   424,   425,    -1,    -1,
      -1,   429,   430,   431,   432,   433,   434,    -1,   436,    -1,
     438,    -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,    -1,   482,    -1,    -1,    -1,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,    -1,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
      -1,    -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,   570,    -1,    -1,   573,    -1,    -1,   576,    -1,
      -1,     5,   580,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,   593,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,
      -1,   485,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,     5,   580,     7,     8,     9,
      10,    11,   586,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,
     580,     7,     8,     9,    10,    11,   586,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,     5,   580,     7,     8,     9,    10,    11,
     586,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,     5,   580,     7,
       8,     9,    10,    11,   586,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,   110,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,   195,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,    -1,    -1,    -1,    -1,   335,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,   467,
     468,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,   530,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,     5,   580,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,   113,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,   146,    -1,   148,    -1,   150,   151,   152,   153,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,   245,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,
      -1,   485,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,     5,   580,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,   245,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,
     580,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,   245,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,     5,   580,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    93,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,   245,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,     5,   580,     7,
       8,     9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,   245,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,     5,   580,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,   195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,
      -1,   485,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,     5,   580,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,   245,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,
     580,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,   245,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,     5,   580,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,   245,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,     5,   580,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      18,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,     5,   580,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    83,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,
      -1,   485,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,     5,   580,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,
     580,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,     5,   580,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,     5,   580,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,     5,   580,     7,     8,     9,    10,    11,    12,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,
      -1,   485,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,     5,   580,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,
     580,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,     5,   580,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,     5,   580,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,     5,   580,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,
      74,    75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
      -1,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
     164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,   230,    -1,    -1,   233,
      -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
      -1,   365,    -1,    -1,   368,   369,   370,   371,   372,    -1,
      -1,    -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,
     414,    -1,   416,    -1,    -1,   419,    -1,    -1,    -1,   423,
     424,   425,    -1,    -1,    -1,   429,   430,   431,   432,   433,
     434,    -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,
     444,   445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,    -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,    -1,   482,    -1,
      -1,    -1,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,    -1,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,    -1,    -1,    -1,    -1,   542,    -1,
      -1,   545,    -1,    -1,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,   570,    -1,    -1,   573,
      -1,    -1,   576,    -1,    -1,     5,   580,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      -1,    71,    -1,    73,    74,    75,    76,    -1,    78,    79,
      -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
      -1,    -1,   132,   133,   134,    -1,   136,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,    -1,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,   164,   165,   166,   167,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,    -1,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
     230,    -1,    -1,   233,    -1,    -1,    -1,   237,    -1,    -1,
     240,   241,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,    -1,   365,    -1,    -1,   368,   369,
     370,   371,   372,    -1,    -1,    -1,    -1,    -1,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
      -1,   411,    -1,   413,   414,    -1,   416,    -1,    -1,   419,
      -1,    -1,    -1,   423,   424,   425,    -1,    -1,    -1,   429,
     430,   431,   432,   433,   434,    -1,   436,    -1,   438,    -1,
      -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,    -1,   482,    -1,    -1,    -1,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,    -1,    -1,
      -1,    -1,   542,    -1,    -1,   545,    -1,    -1,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,   568,    -1,
     570,    -1,    -1,   573,    -1,    -1,   576,    -1,    -1,     5,
     580,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,
      56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,    75,
      76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,    -1,    -1,    -1,   132,   133,   134,    -1,
     136,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,    -1,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,   164,   165,
     166,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,    -1,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,    -1,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,   230,    -1,    -1,   233,    -1,    -1,
      -1,   237,    -1,    -1,   240,   241,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   357,   358,    -1,    -1,   361,   362,   363,    -1,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,    -1,
     416,    -1,    -1,   419,    -1,    -1,    -1,   423,   424,   425,
      -1,    -1,    -1,   429,   430,   431,   432,   433,   434,    -1,
     436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,   445,
      -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,    -1,
     456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,    -1,   482,    -1,    -1,    -1,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
      -1,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,   545,
      -1,    -1,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,   568,    -1,   570,    -1,    -1,   573,    -1,    -1,
     576,    -1,    -1,     5,   580,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    -1,    71,
      -1,    73,    74,    75,    76,    -1,    78,    79,    -1,    -1,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,    -1,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
     202,   203,   204,   205,   206,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,    -1,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,   230,    -1,
      -1,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,    -1,   365,    -1,    -1,   368,   369,   370,   371,
     372,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,    -1,   411,
      -1,   413,   414,    -1,   416,    -1,    -1,   419,    -1,    -1,
      -1,   423,   424,   425,    -1,    -1,    -1,   429,   430,   431,
     432,   433,   434,    -1,   436,    -1,   438,    -1,    -1,    -1,
      -1,   443,   444,   445,    -1,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,    -1,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,    -1,
     482,    -1,    -1,    -1,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,    -1,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,    -1,    -1,    -1,    -1,
     542,    -1,    -1,   545,    -1,    -1,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,   570,    -1,
      -1,   573,    -1,    -1,   576,    -1,    -1,     5,   580,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,
      78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,    -1,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,
     198,    -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,    -1,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,   230,    -1,    -1,   233,    -1,    -1,    -1,   237,
      -1,    -1,   240,   241,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
     358,    -1,    -1,   361,   362,   363,    -1,   365,    -1,    -1,
     368,   369,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,
      -1,   419,    -1,    -1,    -1,   423,   424,   425,    -1,    -1,
      -1,   429,   430,   431,   432,   433,   434,    -1,   436,    -1,
     438,    -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,    -1,   482,    -1,    -1,    -1,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,    -1,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
      -1,    -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,   570,    -1,    -1,   573,    -1,    -1,   576,    -1,
      -1,     5,   580,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,
      74,    75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
      -1,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
     164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,   230,    -1,    -1,   233,
      -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
      -1,   365,    -1,    -1,   368,   369,   370,   371,   372,    -1,
      -1,    -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,
     414,    -1,   416,    -1,    -1,   419,    -1,    -1,    -1,   423,
     424,   425,    -1,    -1,    -1,   429,   430,   431,   432,   433,
     434,    -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,
     444,   445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,    -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,    -1,   482,    -1,
      -1,    -1,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,    -1,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,    -1,    -1,    -1,    -1,   542,    -1,
      -1,   545,    -1,    -1,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,   570,    -1,    -1,   573,
      -1,    -1,   576,    -1,    -1,     5,   580,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      -1,    71,    -1,    73,    74,    75,    76,    -1,    78,    79,
      -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,    -1,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,    -1,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,   164,   165,   166,   167,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,    -1,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
     230,    -1,    -1,   233,    -1,    -1,    -1,   237,    -1,    -1,
     240,   241,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,    -1,
      -1,   361,   362,   363,    -1,   365,    -1,    -1,   368,   369,
     370,   371,   372,    -1,    -1,    -1,    -1,    -1,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
      -1,   411,    -1,   413,   414,    -1,   416,    -1,    -1,   419,
      -1,    -1,    -1,   423,   424,   425,    -1,    -1,    -1,   429,
     430,   431,   432,   433,   434,    -1,   436,    -1,   438,    -1,
      -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,    -1,   482,    -1,    -1,    -1,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,    -1,    -1,
      -1,    -1,   542,    -1,    -1,   545,    -1,    -1,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
     570,    -1,    -1,   573,    -1,    -1,   576,    -1,    -1,     5,
     580,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,
      56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,    75,
      76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,    -1,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,    -1,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,   164,   165,
     166,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,    -1,   198,    -1,    -1,    -1,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,    -1,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,   230,    -1,    -1,   233,    -1,    -1,
      -1,   237,    -1,    -1,   240,   241,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   357,   358,    -1,    -1,   361,   362,   363,    -1,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,    -1,
     416,    -1,    -1,   419,    -1,    -1,    -1,   423,   424,   425,
      -1,    -1,    -1,   429,   430,   431,   432,   433,   434,    -1,
     436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,   445,
      -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,    -1,
     456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,    -1,   482,    -1,    -1,    -1,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
      -1,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,   545,
      -1,    -1,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,
     576,    -1,    -1,     5,   580,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    -1,    71,
      -1,    73,    74,    75,    76,    -1,    78,    79,    -1,    -1,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,    -1,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
     202,   203,   204,   205,   206,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,    -1,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,   230,    -1,
      -1,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   357,   358,    -1,    -1,   361,
     362,   363,    -1,   365,    -1,    -1,   368,   369,   370,   371,
     372,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,    -1,   411,
      -1,   413,   414,    -1,   416,    -1,    -1,   419,    -1,    -1,
      -1,   423,   424,   425,    -1,    -1,    -1,   429,   430,   431,
     432,   433,   434,    -1,   436,    -1,   438,    -1,    -1,    -1,
      -1,   443,   444,   445,    -1,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,    -1,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,    -1,
     482,    -1,    -1,    -1,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,    -1,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,    -1,    -1,    -1,    -1,
     542,    -1,    -1,   545,    -1,    -1,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,   570,    -1,
      -1,   573,    -1,    -1,   576,    -1,    -1,     5,   580,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,
      78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,    -1,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,   164,   165,   166,   167,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,
     198,    -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,    -1,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,   230,    -1,    -1,   233,    -1,    -1,    -1,   237,
      -1,    -1,   240,   241,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
     358,    -1,    -1,   361,   362,   363,    -1,   365,    -1,    -1,
     368,   369,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,
      -1,   419,    -1,    -1,    -1,   423,   424,   425,    -1,    -1,
      -1,   429,   430,   431,   432,   433,   434,    -1,   436,    -1,
     438,    -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,    -1,   482,    -1,    -1,    -1,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,    -1,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
      -1,    -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,   570,    -1,    -1,   573,    -1,    -1,   576,    -1,
      -1,     5,   580,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,
      74,    75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
      -1,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,    -1,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,
      -1,   365,    -1,    -1,   368,   369,   370,   371,   372,    -1,
      -1,    -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,
      -1,    -1,   416,    -1,    -1,   419,    -1,    -1,    -1,   423,
     424,    -1,    -1,    -1,    -1,   429,   430,   431,   432,   433,
     434,    -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,
     444,   445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,    -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,    -1,   482,    -1,
      -1,    -1,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,    -1,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,    -1,    -1,    -1,    -1,   542,    -1,
      -1,   545,    -1,    -1,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
      -1,    -1,   576,    -1,    -1,    -1,   580
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    28,    30,    34,    48,    49,    55,    59,
      60,    72,    88,   109,   117,   118,   119,   129,   130,   142,
     154,   170,   186,   191,   194,   217,   219,   235,   252,   256,
     344,   364,   377,   387,   407,   410,   412,   415,   418,   421,
     426,   428,   435,   440,   448,   453,   457,   481,   485,   526,
     539,   543,   546,   551,   577,   591,   602,   605,   606,   607,
     608,   609,   611,   616,   618,   623,   653,   785,   930,   968,
     971,   979,   981,   983,   986,   991,   993,   994,   999,  1002,
    1007,  1011,  1019,  1020,  1185,  1187,  1195,  1198,  1223,  1231,
    1242,  1248,  1261,  1264,  1267,  1273,  1277,  1281,  1283,  1284,
    1330,  1347,  1353,  1355,  1362,  1364,  1389,  1395,  1396,  1397,
    1398,  1445,  1453,  1454,    11,    96,   114,   180,   207,   257,
     382,   446,   501,   964,  1414,  1415,  1416,  1419,   253,   331,
    1001,   500,   503,  1349,  1390,   508,  1321,   210,     5,     7,
       8,     9,    10,    11,    17,    20,    22,    23,    24,    25,
      26,    27,    28,    30,    34,    38,    41,    42,    43,    45,
      47,    48,    51,    54,    56,    57,    59,    61,    62,    63,
      64,    65,    67,    68,    70,    71,    72,    73,    74,    75,
      76,    78,    79,    81,    82,    84,    87,    90,    98,    99,
     100,   103,   108,   109,   114,   116,   120,   122,   123,   124,
     125,   129,   132,   133,   134,   138,   140,   141,   143,   144,
     145,   148,   150,   151,   152,   153,   154,   157,   158,   159,
     162,   163,   165,   166,   167,   170,   175,   176,   178,   180,
     182,   183,   184,   185,   187,   191,   192,   194,   197,   198,
     202,   203,   204,   205,   208,   209,   212,   214,   218,   219,
     223,   225,   226,   228,   229,   233,   236,   237,   240,   243,
     244,   250,   251,   253,   255,   257,   258,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     280,   281,   283,   284,   285,   286,   288,   289,   290,   294,
     295,   296,   297,   298,   301,   302,   304,   306,   308,   309,
     310,   311,   312,   313,   314,   315,   318,   319,   322,   323,
     324,   325,   329,   330,   337,   338,   339,   341,   342,   343,
     345,   356,   357,   358,   360,   361,   362,   363,   364,   365,
     368,   369,   370,   371,   372,   373,   377,   378,   379,   381,
     383,   384,   385,   386,   388,   389,   390,   393,   397,   398,
     399,   400,   401,   404,   405,   406,   408,   409,   411,   412,
     413,   416,   418,   419,   421,   423,   424,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   438,   439,   443,   444,
     445,   446,   450,   454,   455,   456,   457,   459,   460,   461,
     462,   463,   470,   471,   473,   474,   477,   480,   481,   482,
     485,   486,   488,   489,   490,   491,   492,   495,   496,   497,
     498,   500,   501,   504,   505,   506,   509,   510,   512,   513,
     514,   515,   521,   522,   526,   527,   528,   529,   532,   533,
     535,   536,   538,   539,   542,   545,   547,   549,   550,   557,
     560,   564,   565,   566,   567,   573,   574,   576,   577,   580,
     647,  1320,  1324,  1328,  1329,   280,  1349,  1349,   573,  1391,
      96,   179,   257,   446,   464,   501,   505,   541,   549,   629,
     630,   833,   834,   835,   908,   909,   910,  1232,  1186,    96,
     152,   180,   210,   257,   382,   446,   501,   505,   523,   549,
     564,  1194,  1324,  1001,   646,   599,  1317,  1319,  1324,   617,
    1196,   370,    78,   389,  1282,    99,   210,   503,  1349,  1001,
     786,  1324,  1278,   435,   549,  1349,  1001,  1199,  1274,  1349,
     646,  1391,  1324,  1022,  1024,  1025,   346,  1332,  1249,   481,
     485,   457,   521,   457,   503,  1243,   370,  1354,  1224,  1324,
      30,    72,   140,   377,   398,   428,   481,  1447,   440,   591,
    1021,     0,   142,   603,   377,   158,   363,  1265,  1317,  1324,
     146,   941,  1324,   146,   647,   188,   647,   245,  1321,  1324,
    1326,   734,   735,   738,   761,  1324,   503,   152,   936,  1414,
    1349,   982,  1391,  1008,  1009,  1317,   654,   599,   519,   984,
     995,    16,  1392,   206,   836,   188,  1326,   736,   761,   646,
     351,  1411,  1415,  1416,  1417,  1418,  1419,   503,   834,   210,
     210,   210,   207,   264,   390,  1240,  1241,     7,    20,    27,
      33,    35,    36,    37,    39,    52,    53,    57,    58,    64,
      67,    81,    85,    86,    91,    93,    95,    96,   101,   102,
     103,   108,   110,   113,   155,   160,   161,   168,   182,   184,
     189,   195,   202,   206,   217,   220,   242,   250,   261,   282,
     287,   297,   301,   303,   307,   308,   309,   310,   311,   317,
     326,   327,   328,   332,   333,   335,   339,   359,   365,   366,
     367,   371,   372,   374,   388,   414,   415,   427,   433,   438,
     483,   484,   489,   493,   494,   499,   508,   512,   513,   514,
     515,   524,   525,   526,   530,   534,   549,   553,   554,   555,
     556,   561,   563,   567,   580,   584,   585,   590,   591,   594,
     595,   598,   599,  1040,  1041,  1042,  1043,  1047,  1050,  1051,
    1052,  1053,  1054,  1055,  1069,  1076,  1078,  1090,  1304,  1306,
    1308,  1309,  1313,  1315,  1320,  1324,   206,  1193,  1193,  1193,
    1324,   188,  1193,  1193,   761,  1193,   646,  1193,  1349,   612,
    1268,    12,    13,    88,   117,   130,   152,   154,   165,   186,
     210,   217,   256,   383,   402,   408,   416,   440,   453,   454,
     495,   523,   546,   548,  1365,  1367,  1369,  1370,  1324,   343,
      63,   394,   599,  1326,   115,   196,   264,  1201,  1324,  1040,
    1285,   221,  1317,  1348,  1349,    46,   787,   177,    33,   280,
    1253,  1279,  1324,   646,  1003,  1349,   115,   264,  1202,  1230,
     280,   389,   457,  1275,  1276,   980,    12,  1363,  1367,   519,
    1392,  1023,    12,   126,   196,   469,   470,   471,   472,   473,
     474,   475,   487,  1029,  1030,  1031,  1331,    23,    34,    57,
      58,    67,    69,    84,    86,    88,    97,   144,   148,   151,
     178,   180,   185,   187,   209,   210,   214,   232,   253,   280,
     312,   322,   343,   369,   381,   382,   385,   386,   445,   457,
     486,   503,   566,   881,   907,  1250,  1253,  1254,  1256,  1338,
     973,   974,   973,   973,   571,   972,   973,  1190,  1317,  1324,
    1349,  1230,    35,   195,   508,  1305,  1322,  1446,  1446,  1446,
    1446,  1446,  1024,  1021,   592,   597,  1324,  1263,  1262,   296,
     506,   533,   932,   547,    93,  1326,  1327,   934,   740,   762,
    1324,   933,   345,     6,    55,   130,   327,   393,   395,   763,
    1317,   647,   476,  1420,  1421,   935,   992,  1189,  1190,   224,
     593,  1015,  1016,   591,   655,  1324,   619,  1189,  1189,    54,
     329,   329,   407,  1393,   326,   327,  1046,  1324,   739,   762,
     173,     6,  1327,  1380,  1381,   415,    10,   382,   523,   633,
    1035,  1413,  1421,  1429,  1433,  1434,  1440,   633,  1035,  1412,
    1421,  1429,  1434,  1440,  1414,  1419,   836,  1324,  1324,  1324,
     177,  1233,  1237,  1238,  1324,  1240,   591,   591,   591,  1050,
     591,   591,   591,  1040,  1095,   591,   591,   591,   591,   591,
     591,   591,   591,   591,  1039,  1039,   591,  1039,   591,   591,
     591,   534,   591,  1304,   591,   591,   591,   591,   591,   591,
     591,   591,   591,   591,   591,  1040,   591,   591,   591,  1093,
    1094,  1313,  1324,   591,   591,   591,   591,   591,   591,   591,
     591,   591,  1040,   591,  1039,   591,   591,   591,   591,   591,
     591,   591,   591,   591,   591,   591,   591,   591,   591,   591,
     591,   591,   591,   591,   591,  1039,   591,  1304,   591,   591,
     591,  1304,   591,   591,    35,   195,   508,   591,  1039,  1039,
    1039,   591,   591,   591,   591,   591,  1050,  1050,  1050,   440,
     591,  1040,  1408,  1324,  1079,  1324,    15,    16,   348,   351,
     578,  1044,  1045,   146,   147,   181,   190,   227,   238,   265,
     320,  1048,    31,   127,   224,   246,   307,   403,   451,   452,
     462,   582,   583,   584,   585,   586,   587,   588,   589,  1046,
    1050,    66,   350,   593,  1322,   591,   599,   155,  1324,   647,
    1324,   340,   762,   647,  1326,   772,  1254,   647,  1327,  1379,
    1189,  1193,   552,   613,   120,   198,   258,   280,   381,   389,
     419,   457,   482,   500,  1269,  1270,  1349,   381,  1368,   430,
     430,   505,   549,   564,   346,  1372,   500,  1374,    62,   457,
    1371,    97,   564,  1373,   340,   593,    18,   146,  1139,  1140,
    1356,  1324,   964,   461,    76,   177,   264,  1286,  1291,    48,
     177,  1317,  1350,  1351,  1000,   248,   251,   391,   788,   792,
     598,   610,  1321,   258,  1004,  1327,  1005,  1006,  1317,   987,
     221,  1190,  1203,  1204,    48,   593,  1189,  1368,   340,   435,
    1394,  1393,   540,  1399,  1400,   586,  1033,  1034,  1035,  1031,
    1333,  1334,  1335,   151,   448,   246,   569,  1260,   527,   591,
      96,   152,   180,   382,   503,   523,   564,  1260,    12,   844,
    1326,   247,  1159,  1161,   177,   224,  1255,  1257,    65,   482,
     174,   482,   482,   482,   280,   500,    65,   482,    12,    41,
      82,    87,   226,   295,   358,   463,   497,  1244,  1245,  1246,
     198,   482,   482,   527,  1159,  1260,  1257,   258,   143,    68,
     370,   384,   500,   522,   482,   560,   970,   406,   477,   975,
     976,   969,    79,   964,   593,   342,  1449,   496,  1450,   231,
     423,  1448,   592,  1400,  1402,  1403,  1404,   142,   604,  1019,
    1266,  1305,  1324,   113,   831,   832,   841,   842,   890,    99,
    1039,   598,   648,     6,   741,   648,   591,    98,   758,   758,
     758,     4,   931,   937,   439,   564,  1421,  1189,   519,   593,
     113,  1010,  1324,  1009,   210,   234,   905,  1017,   656,   657,
    1040,   266,   267,   268,   269,   270,   271,   273,   274,   275,
     276,   277,   278,   279,   281,   404,   405,   620,   621,   622,
     158,   390,   985,    56,   158,   162,   174,   294,   390,   996,
     997,   998,    54,   407,   155,   628,   741,    99,   758,   204,
     593,  1035,  1035,  1035,   152,   180,   180,  1421,  1317,   911,
     912,   911,   911,  1191,  1192,  1317,  1318,  1324,   593,  1235,
     599,  1239,  1040,  1040,    12,   126,  1086,  1141,  1086,  1086,
    1086,   568,  1097,  1040,  1040,  1090,  1090,  1040,  1040,  1040,
     126,  1086,  1141,   592,  1040,   592,  1040,  1040,  1040,  1040,
    1313,   591,  1408,   104,   105,   106,   107,   108,   199,   200,
     201,   202,   297,   299,   300,   301,   308,   388,   437,   438,
     567,   579,   580,  1135,  1137,  1090,   100,   103,   512,   515,
    1138,   126,  1081,  1040,  1040,  1040,  1040,  1135,  1040,  1090,
    1094,     9,   593,   599,   126,  1086,  1040,  1040,   126,  1086,
    1040,  1040,  1090,  1090,  1090,  1040,  1035,  1074,  1075,  1040,
    1040,  1075,  1075,  1040,  1090,  1043,  1040,  1040,  1040,  1040,
    1040,  1040,  1086,  1086,  1040,  1040,   126,  1086,  1040,  1040,
     176,  1136,  1137,  1136,  1040,    44,   239,   520,  1040,  1040,
     592,  1314,  1315,  1324,  1086,  1086,  1040,  1040,  1409,  1409,
     592,   593,   592,  1040,   598,  1080,  1326,   599,  1040,  1040,
    1040,  1042,   161,   333,   525,   542,  1046,    12,    17,  1042,
    1049,  1043,  1043,   591,  1050,  1043,  1043,  1043,  1043,   246,
    1043,  1043,   220,  1043,   220,  1043,  1043,  1043,  1043,  1043,
      31,   224,   246,   403,  1326,  1050,  1040,  1073,  1074,  1324,
     599,  1317,   772,   330,   565,   773,   774,   144,   593,    50,
     422,   965,  1189,   598,   614,   615,    48,   571,   593,  1271,
     500,   591,  1382,  1382,  1382,  1382,   180,   382,   503,  1366,
    1370,  1324,   166,   323,  1324,  1357,  1358,  1203,  1321,   280,
     253,  1290,  1012,   280,  1140,   593,  1189,   791,   790,   363,
     798,   192,   234,  1326,    29,   519,  1280,   593,   519,   593,
     519,  1189,  1204,  1200,  1276,   177,   593,   180,   382,  1366,
    1324,    12,   126,  1406,   593,  1026,  1037,  1040,  1311,  1324,
     593,   185,   253,   341,   445,  1336,  1337,  1340,  1341,   224,
    1258,  1321,  1040,   586,   836,   647,   647,   647,  1317,   647,
    1317,   258,   312,   482,  1252,  1252,   261,   335,   530,  1162,
    1163,  1306,  1260,  1324,   647,  1260,  1327,   174,  1255,   647,
    1260,   225,   498,   163,   174,  1247,   593,  1255,  1317,  1257,
    1255,  1255,  1260,  1260,   545,   977,   593,   977,   459,   440,
     591,   595,  1098,  1099,  1100,  1101,  1102,  1111,  1112,  1119,
    1305,   368,  1451,   349,  1155,  1161,  1405,   832,    66,   881,
     122,  1326,    70,    81,   236,   305,   329,   392,   476,   650,
     652,   399,   535,   759,   760,   212,   755,   756,   757,   764,
     772,   774,    96,   197,   356,   365,   373,   460,   549,   631,
     632,  1321,    24,   286,   749,   750,   751,   764,   765,   766,
     772,   774,   742,   743,   749,     6,    13,    14,    25,    26,
      55,    59,    60,    64,    70,    78,    85,    99,   116,   123,
     124,   130,   138,   144,   172,   208,   210,   218,   233,   285,
     302,   306,   344,   349,   357,   364,   365,   397,   409,   410,
     411,   412,   432,   486,   501,   504,   528,   540,   783,   838,
     840,   841,   842,   942,   946,   948,   951,   957,   958,   959,
    1151,   340,   641,   938,   114,   223,  1317,  1321,  1190,   591,
     592,   593,   146,   146,   146,   146,   146,   146,   146,   146,
     146,   146,   146,   146,   146,   146,   146,   146,   593,   547,
     997,   830,   831,    70,   324,   400,   536,   752,   753,   754,
     764,   768,   769,   770,   771,   772,   774,   574,   551,   737,
      46,  1381,   180,   647,   647,   836,   647,  1324,   624,   528,
     552,   919,   340,   340,   340,   593,  1236,  1234,   599,  1239,
    1238,   177,   586,  1324,  1140,   593,   592,  1086,   592,  1087,
     592,   592,   592,  1040,   136,   568,  1096,    18,   592,   552,
     592,   592,   592,   593,   552,   593,  1091,  1141,   592,   586,
     592,   593,   593,   592,   592,   592,   592,   177,   592,   593,
    1077,   592,   593,   593,   593,   585,   593,   592,   592,   591,
    1313,  1324,  1086,   592,   592,   592,  1086,   592,   593,   592,
     592,   592,   592,   592,  1040,   592,   593,   592,   592,   592,
     592,   593,   592,   224,   592,   593,   593,   593,   593,   592,
     592,   592,   593,   177,   593,  1086,   592,   592,   592,   593,
     593,   593,   592,   177,  1040,   177,  1040,   177,  1040,   177,
     592,   593,   592,   592,   592,   592,   593,   592,  1022,  1021,
    1090,   596,   185,   253,   445,  1339,   449,  1324,   161,   333,
     525,   542,   591,    16,  1040,  1408,   150,  1146,  1043,  1040,
    1040,  1043,   591,  1050,  1043,   592,   591,   599,  1324,  1188,
     773,   146,   449,  1214,  1215,  1327,   965,  1326,   593,   394,
    1270,  1189,  1272,  1324,  1383,  1384,   586,  1317,  1324,  1378,
    1378,  1378,   146,   166,   181,   190,   237,   238,   265,   323,
     379,  1359,  1361,   569,  1142,  1197,   211,  1013,  1014,  1317,
     264,   394,   575,  1352,  1351,   591,   796,   796,   110,   168,
     195,   261,   335,   530,  1166,  1169,  1170,   492,   799,   789,
     591,  1040,  1321,  1327,  1327,  1006,  1317,   158,   390,   550,
     988,   989,   990,   440,   448,   556,   557,   591,   826,  1205,
    1208,  1321,   186,  1378,  1378,  1378,  1401,  1034,   177,   221,
    1027,  1028,  1154,  1155,  1180,  1036,   599,  1334,   113,   521,
    1324,  1343,   313,   365,   598,   881,  1342,  1321,   177,  1259,
     592,  1324,   338,   593,   457,  1260,   389,  1159,  1246,  1260,
    1255,  1317,  1260,  1260,   622,   978,   976,  1118,  1324,    89,
     213,   231,   242,   316,   427,   487,  1110,   448,   593,  1317,
    1118,   593,   174,  1452,    46,  1159,  1215,  1215,   314,  1321,
     476,   476,   476,   476,   476,   439,  1321,  1321,  1215,   593,
     757,  1321,  1321,  1321,  1321,   110,   168,   195,   261,   335,
     530,  1165,  1321,  1321,   592,   593,  1215,  1215,   593,   751,
     744,   745,   764,   765,   766,    69,    80,   364,   852,   855,
     856,   903,   905,   909,   910,   963,   963,   364,  1215,  1215,
     963,  1215,   364,   364,  1215,  1215,   519,   122,  1215,   232,
     501,   173,   364,   380,   905,   963,   232,  1215,   501,   122,
    1215,  1215,  1215,  1215,   963,   364,    46,  1215,   784,  1215,
     364,   362,    18,   146,   519,   967,   364,   364,  1215,   125,
     295,  1324,  1215,  1215,  1215,   838,   593,   782,   783,   946,
     591,   599,   851,   857,  1316,  1324,    74,   436,   410,   939,
    1422,   380,  1131,  1132,  1133,  1324,  1040,  1165,  1321,  1321,
     110,   168,   261,   335,   530,  1167,  1321,  1165,  1321,  1321,
    1321,  1321,  1321,  1165,  1165,  1321,  1321,  1165,   621,  1215,
    1215,  1215,  1215,   593,   754,  1326,   257,   159,   746,   747,
     748,   764,   765,   766,   767,   770,   771,   772,   774,   365,
     508,  1324,  1441,     8,    29,   732,   647,   591,   424,   246,
     591,   776,   837,   839,   840,    45,   192,   434,   924,   924,
    1317,  1317,  1317,  1192,  1324,   552,  1142,  1324,  1099,   599,
    1239,   220,  1040,   592,   355,  1059,  1040,   511,  1040,  1040,
     140,    33,    58,   100,   103,   111,   318,   455,   515,   544,
    1088,    33,   882,  1326,  1040,   882,  1088,   592,  1092,  1059,
     592,   220,   220,  1040,  1040,  1090,  1040,  1040,  1040,  1040,
    1040,  1043,   592,  1059,   592,  1059,  1040,  1036,   177,  1056,
    1075,   572,   572,  1040,  1040,  1040,  1040,  1040,  1090,  1059,
    1059,   220,  1040,  1040,  1040,   592,  1059,  1040,  1040,  1040,
    1040,   177,  1040,   177,  1040,   177,  1040,  1040,  1059,  1059,
    1040,  1407,  1407,   592,   599,   599,   599,  1326,  1040,  1408,
    1042,   592,   593,   592,  1050,  1135,  1135,    16,  1040,  1408,
    1146,   207,   420,  1058,  1059,  1089,  1090,  1324,   843,  1326,
     615,   256,   592,   593,   599,   599,   519,   519,   519,  1360,
    1143,  1160,  1161,  1205,   508,  1323,   593,  1015,   575,   253,
    1035,    46,   591,   806,   796,   793,   794,   795,  1324,   519,
     989,   827,  1206,   591,  1211,  1216,  1211,   592,   826,  1207,
    1310,  1311,  1314,  1324,  1209,   346,   177,   177,   177,  1020,
     131,  1099,  1181,   174,   256,  1032,  1180,  1160,  1028,    18,
    1038,  1321,  1324,   586,  1324,   599,   228,   599,  1214,   113,
     882,   883,  1214,   174,  1214,   598,  1326,    33,   113,   885,
     886,  1326,  1167,  1251,   148,   566,  1163,  1163,   571,   335,
    1142,  1255,   593,  1113,  1118,  1098,   231,   231,   352,  1120,
     231,   242,   427,  1120,  1111,  1098,  1226,  1227,  1314,  1100,
    1140,  1115,  1116,  1165,   298,  1156,   113,   887,   889,  1326,
     883,    99,    99,   114,   223,   203,   775,  1166,   757,   632,
     775,   775,   751,   593,   745,   927,  1316,  1001,    60,   173,
     380,   541,   854,   904,   853,   854,   927,   905,   906,   906,
    1316,  1001,  1167,  1165,  1316,  1165,    12,   947,   955,   956,
    1324,  1001,  1321,  1321,   881,  1215,  1165,   234,   955,   234,
    1316,  1316,   843,  1215,   166,   237,   329,   846,  1165,  1167,
    1167,  1316,  1001,  1152,  1153,  1314,   113,  1165,   787,  1321,
    1001,  1317,  1001,  1001,    73,    75,   113,   134,   167,   401,
     845,  1165,   843,   591,     6,   130,   959,   849,   850,   851,
     852,  1324,     8,   166,   966,   402,   853,   895,   858,   599,
     327,   378,    22,   153,   635,   519,   123,   138,   637,   591,
    1423,   592,   593,  1321,  1166,   775,   775,   754,   345,   188,
    1215,   593,   748,   508,   424,   591,   117,   217,   546,   733,
     634,  1435,   111,   222,   396,   488,   848,  1317,   246,   364,
     777,   782,   849,   782,   593,   839,   625,   626,   627,   599,
    1099,  1154,  1239,  1142,  1140,  1040,   592,  1059,   591,  1040,
     511,   591,   874,   875,   875,   591,   869,   870,   874,   875,
     222,   222,   592,   592,   592,   592,   592,  1059,  1090,  1059,
    1040,  1040,   592,   592,   349,  1083,   593,   593,   592,   593,
     592,   224,  1070,  1071,  1059,  1059,   592,  1038,   166,   237,
    1057,  1058,   188,   188,   592,   592,   592,   593,   592,   592,
    1040,   592,   174,   592,   592,   593,  1059,   592,   593,   593,
     592,  1040,   592,  1040,   592,  1040,   592,   592,   592,  1410,
    1410,   599,   928,   592,  1090,  1042,   592,   593,   592,   334,
     334,  1059,   592,  1384,   586,   586,  1380,  1380,  1380,   591,
    1040,   340,  1221,  1287,  1014,   207,  1018,   804,  1043,   792,
     364,   807,   808,   592,   593,  1327,  1029,  1212,  1213,  1314,
    1217,   593,   591,  1208,   592,   592,   593,   599,  1399,   177,
    1380,  1380,  1380,  1142,  1142,   132,   353,  1176,  1177,  1182,
     546,   224,  1321,  1324,   599,  1324,   244,  1324,    12,    33,
     113,   340,  1040,  1346,    66,   888,  1040,  1327,   339,   365,
     508,  1345,  1339,  1214,  1159,   268,  1260,   622,  1402,  1114,
     596,   231,  1111,  1120,  1120,   231,   340,   340,   552,   593,
    1225,  1214,  1129,  1130,  1029,  1040,  1157,  1312,   745,   949,
    1040,   234,   234,   906,   927,   912,   927,   927,   130,   448,
     947,   960,   944,   593,  1166,   883,  1321,   927,   965,  1321,
     961,   947,   593,    19,   118,  1158,   947,   952,   947,  1272,
     592,   593,  1324,  1317,    32,    33,    38,    40,    42,    43,
      58,   100,   103,   111,   128,   145,   167,   169,   182,   183,
     222,   250,   259,   260,   262,   291,   292,   293,   309,   310,
     311,   315,   318,   336,   337,   371,   372,   396,   444,   448,
     458,   509,   512,   515,   516,   517,   518,   558,   559,   580,
     859,   862,   863,   864,   865,   866,   867,   868,  1324,   378,
    1040,  1040,   340,   641,   647,   340,    70,   642,  1324,  1424,
      18,  1132,   591,  1324,   775,   748,   848,  1442,   340,   340,
     658,   659,   661,  1324,   461,  1317,   826,   592,   207,   415,
     779,  1292,   839,   591,   591,   591,  1324,  1142,   247,  1164,
    1135,   364,  1060,  1040,   110,   261,   335,   530,    20,    33,
      47,   538,   881,   891,   335,  1135,  1135,    46,   442,  1082,
    1040,  1040,  1090,    42,   316,   592,   571,  1072,  1059,   591,
     591,  1040,  1135,  1040,  1040,  1040,  1040,   592,   592,   592,
     592,  1324,   592,  1090,   417,  1385,  1385,  1385,   113,  1040,
    1219,  1220,   133,  1292,   240,  1036,   192,   234,   809,   592,
     593,   795,  1033,   593,  1214,  1218,  1219,  1216,  1210,  1208,
    1310,  1324,  1380,  1160,   188,  1147,  1323,  1323,   598,  1178,
    1179,  1326,   450,   586,   394,   413,   443,  1344,   889,  1214,
     591,   591,  1343,  1040,   146,   592,  1101,  1098,  1111,   231,
     231,  1098,  1111,  1104,  1103,  1105,  1227,  1142,  1220,  1127,
    1128,  1033,   593,  1158,   363,   591,   950,   927,   912,   591,
     911,   911,   113,   113,   857,   996,   956,   888,   859,   943,
    1153,   953,   955,   945,   592,   850,   896,   874,   874,   875,
     869,   376,   860,   869,   869,   891,    58,   558,   863,   865,
     891,   891,    58,   559,   559,   562,   869,   861,   875,   875,
     891,   874,   875,    25,    66,    70,   113,   333,   340,   380,
     444,   541,   877,   878,   879,   894,  1046,   562,   874,   891,
      33,   874,   892,   874,   874,   875,   591,   870,   876,   599,
    1135,   457,  1321,   129,   940,   592,   593,  1425,  1426,   631,
     461,   215,   224,   354,   662,   663,   664,   665,  1035,   436,
     592,   593,   660,  1321,   592,   592,   837,    18,   829,   925,
     926,  1324,   925,   925,  1163,   592,    46,   349,   391,   431,
    1061,  1065,  1066,   592,   592,   592,   592,   892,    20,   538,
     881,   893,   892,   882,   593,   592,   592,  1084,  1305,   592,
     592,   593,   592,   304,   236,   389,   349,   349,   592,   592,
     592,   592,   592,   592,   592,    61,   229,   325,   478,   490,
     576,  1376,  1377,   571,  1386,  1386,  1386,   592,   593,  1222,
     221,   592,   591,   797,   591,   810,  1324,   808,   828,  1213,
    1220,   592,  1402,    46,   193,  1144,  1183,  1326,   593,   304,
      71,   532,   394,  1345,   508,   508,  1214,  1321,  1140,   340,
    1107,  1111,  1111,   340,  1109,  1040,  1040,   591,  1154,   172,
     207,   551,  1122,  1123,  1126,  1117,  1312,  1166,   807,   591,
     591,   925,   591,   591,   103,   512,   515,   584,   585,  1307,
    1308,   966,   877,  1001,   954,   988,   282,   340,   591,   897,
     899,   900,   901,   455,   544,   581,   871,   872,   873,   591,
     871,   871,   891,   562,   871,   591,   891,   871,   887,  1321,
     328,   880,  1307,   546,   113,   234,   879,   234,   333,   891,
     892,   891,   892,   871,   335,   871,  1324,   636,   643,   644,
    1324,   440,   591,  1427,   592,  1321,   592,   593,   660,  1430,
     635,  1436,   661,   859,   778,   782,   591,   826,   592,   593,
    1158,   591,   592,   592,  1090,    46,   592,    31,    92,   220,
     531,  1040,  1067,   882,   892,   335,  1085,  1312,  1040,   304,
     157,    46,    46,   508,   508,   508,    16,  1375,   186,   283,
     284,   288,   289,  1387,  1388,  1220,   234,   503,  1035,   800,
     802,   803,  1324,   556,   811,   847,  1028,  1160,  1148,  1145,
    1154,   881,   884,  1179,   592,   592,  1346,    16,  1106,   552,
    1108,   552,  1134,  1324,  1164,   905,   905,  1123,   847,  1158,
     592,   925,   925,   592,   925,   925,  1309,  1309,   962,   221,
     178,   361,   456,   117,   546,   898,  1324,   901,   873,   929,
    1305,   929,  1039,   328,   557,   480,   638,    52,    63,   164,
     206,   230,   241,   343,   425,   645,   683,   685,   686,   687,
     689,   690,   691,   692,   693,   694,   696,   704,   705,   708,
     719,   722,   724,   725,  1320,  1325,  1329,  1022,  1021,   571,
    1428,  1443,   664,  1324,  1317,   640,   641,   424,  1402,   779,
     826,   780,   233,   913,   916,   919,   920,   921,   926,   335,
     571,   914,   918,   920,   923,   915,   917,   920,   922,  1062,
    1312,  1067,   433,  1040,   171,   375,  1068,  1068,   592,   593,
    1158,   592,  1062,  1062,  1376,   346,  1165,  1165,  1165,  1165,
    1388,   546,  1317,   804,   491,   805,   592,   593,   224,   243,
      70,    99,   210,   285,   302,   324,   501,   823,   824,   825,
    1254,  1032,  1149,  1312,  1040,  1160,   883,  1184,   269,  1040,
     591,  1040,   591,   592,   593,   174,  1121,  1121,   592,   592,
     913,   592,   592,   966,   591,    50,   329,   422,   448,   902,
     902,   592,   593,   592,   593,   592,  1039,  1040,   141,   639,
     706,   709,  1324,   177,   323,   697,   684,  1325,  1325,  1324,
     688,   606,   263,   414,   570,   728,    30,   726,   600,   592,
      51,    60,   253,   649,   859,   174,   637,  1437,   592,  1399,
    1215,   921,  1158,   592,   360,   923,   922,   593,  1064,  1065,
    1158,    16,  1135,  1312,   592,   592,  1228,  1229,  1314,  1288,
    1036,  1166,   801,   803,   591,   510,  1215,   122,   122,  1215,
    1215,  1215,  1215,   591,   818,   825,   144,   571,   593,  1150,
    1158,   382,  1171,    68,  1293,   146,  1134,  1134,  1324,   188,
     231,   349,  1125,  1124,   895,   913,   914,   915,   807,     5,
     113,   333,   899,  1324,   891,  1305,   891,  1040,  1040,   568,
     711,   715,   177,  1324,   699,   700,  1040,   667,   682,   683,
     685,   687,   689,   691,   692,   693,   694,   696,   704,   719,
     722,   724,   667,   729,   727,   720,   723,  1402,    60,   346,
      60,   121,   650,   651,  1046,  1444,  1035,   642,   859,   781,
    1165,  1320,  1312,   334,  1063,  1067,  1068,  1158,  1059,  1059,
     593,  1214,   884,   592,   805,   815,   816,   817,  1043,   290,
     591,   812,   813,   814,  1321,  1215,  1215,   261,   335,   530,
    1168,  1169,  1168,  1166,  1326,   492,   819,   820,  1215,    90,
     429,  1312,  1324,   139,   149,   347,   507,  1294,  1295,   249,
    1296,  1167,   592,   592,    46,    46,   591,   591,   592,   707,
     716,   136,   715,   718,   221,   140,  1040,   140,   682,   597,
     545,  1040,   668,   728,   726,   346,   346,   121,   682,  1431,
     129,  1438,  1402,  1158,   166,   237,  1229,  1220,  1289,   592,
     593,   290,   817,  1321,  1321,   821,   592,   593,   843,  1158,
    1172,    46,    46,   139,    46,  1295,   479,   507,  1297,  1298,
      16,  1131,  1133,   568,   710,   712,  1040,   667,   140,   695,
     206,   511,   263,   597,   731,   129,   112,   666,   669,   721,
    1325,   721,   135,   643,   649,  1063,  1293,   816,   592,   592,
     822,  1326,   820,   591,  1305,  1305,    46,  1305,    46,    46,
    1298,   272,   592,   592,   713,   712,   718,   717,    52,   698,
    1324,   701,  1040,   730,    83,   156,   674,   680,  1324,   140,
     682,   597,   433,  1439,  1296,   823,  1035,  1173,  1174,  1175,
    1305,  1305,  1305,   146,  1040,   140,   511,   593,   667,   140,
     667,   191,   593,   670,    77,    94,   597,  1432,   682,   207,
    1299,  1040,   592,   593,  1165,   714,    52,   667,  1324,   702,
     414,   140,   174,  1324,   859,   174,   174,   682,   335,   591,
    1300,  1036,  1175,   511,   136,   137,   703,   570,   671,   113,
     681,   467,   677,  1165,   672,   673,   249,   592,   598,  1301,
    1302,  1314,   448,  1303,   667,   667,   699,   466,   468,   675,
     676,   677,   679,  1046,  1324,  1040,   557,   678,  1019,  1326,
     592,   593,  1228,   593,   682,   175,  1322,  1302,   676
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 1560 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:
#line 1572 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                ! lip->stmt_prepare_mode &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:
#line 1597 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:
#line 1670 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:
#line 1685 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:
#line 1695 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:
#line 1702 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:
#line 1712 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:
#line 1719 "sql_yacc.yy"
    {}
    break;

  case 73:
#line 1734 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:
#line 1746 "sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:
#line 1754 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:
#line 1765 "sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 77:
#line 1771 "sql_yacc.yy"
    {}
    break;

  case 80:
#line 1781 "sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:
#line 1785 "sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:
#line 1789 "sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:
#line 1793 "sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:
#line 1797 "sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:
#line 1801 "sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 86:
#line 1806 "sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:
#line 1810 "sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:
#line 1814 "sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:
#line 1818 "sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:
#line 1822 "sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:
#line 1826 "sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 93:
#line 1835 "sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:
#line 1839 "sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /*
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors.
               We need to do it in this file, because only there we know that
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 95:
#line 1855 "sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:
#line 1859 "sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 97:
#line 1870 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
          }
    break;

  case 98:
#line 1888 "sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
          }
    break;

  case 99:
#line 1903 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 100:
#line 1908 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str))
              MYSQL_YYABORT;
          }
    break;

  case 101:
#line 1914 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 102:
#line 1919 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str))
              MYSQL_YYABORT;
          }
    break;

  case 103:
#line 1925 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 104:
#line 1930 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str))
              MYSQL_YYABORT;
          }
    break;

  case 105:
#line 1935 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 106:
#line 1940 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 107:
#line 1947 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 108:
#line 1953 "sql_yacc.yy"
    {}
    break;

  case 109:
#line 1955 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 110:
#line 1959 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 111:
#line 1963 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 112:
#line 1967 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 113:
#line 1978 "sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 116:
#line 1992 "sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 117:
#line 1996 "sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 118:
#line 2000 "sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 119:
#line 2004 "sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 120:
#line 2008 "sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 121:
#line 2012 "sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 122:
#line 2016 "sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 123:
#line 2023 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 124:
#line 2043 "sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 125:
#line 2054 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 127:
#line 2061 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 128:
#line 2067 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 129:
#line 2069 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 130:
#line 2075 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 131:
#line 2081 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 132:
#line 2090 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 133:
#line 2097 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 135:
#line 2105 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 136:
#line 2111 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 138:
#line 2117 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 139:
#line 2123 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 140:
#line 2131 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 141:
#line 2133 "sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 142:
#line 2140 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 143:
#line 2183 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 157:
#line 2215 "sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 158:
#line 2230 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 159:
#line 2246 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 160:
#line 2264 "sql_yacc.yy"
    {}
    break;

  case 161:
#line 2265 "sql_yacc.yy"
    {}
    break;

  case 162:
#line 2269 "sql_yacc.yy"
    {}
    break;

  case 163:
#line 2270 "sql_yacc.yy"
    {}
    break;

  case 164:
#line 2276 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 165:
#line 2278 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 166:
#line 2280 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 167:
#line 2282 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 168:
#line 2284 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 169:
#line 2286 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 170:
#line 2288 "sql_yacc.yy"
    {}
    break;

  case 171:
#line 2293 "sql_yacc.yy"
    { }
    break;

  case 172:
#line 2294 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 173:
#line 2295 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 174:
#line 2300 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 175:
#line 2304 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 176:
#line 2311 "sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 177:
#line 2319 "sql_yacc.yy"
    {}
    break;

  case 182:
#line 2335 "sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 183:
#line 2339 "sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 188:
#line 2357 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 189:
#line 2377 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 194:
#line 2414 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 195:
#line 2439 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 196:
#line 2440 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 197:
#line 2441 "sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 198:
#line 2442 "sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 199:
#line 2446 "sql_yacc.yy"
    {}
    break;

  case 201:
#line 2451 "sql_yacc.yy"
    {}
    break;

  case 203:
#line 2457 "sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 204:
#line 2461 "sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 205:
#line 2487 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 206:
#line 2495 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);

            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->dflt= dflt_value_item;

              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 207:
#line 2552 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

	    if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 208:
#line 2567 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
	                              ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 209:
#line 2589 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
	          sp->add_instr(i) ||
	          sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 210:
#line 2621 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
	    if (i == NULL ||
                sp->add_instr(i) ||
	        ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 211:
#line 2646 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 212:
#line 2650 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 213:
#line 2669 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 214:
#line 2670 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 215:
#line 2676 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 216:
#line 2678 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 217:
#line 2683 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 218:
#line 2706 "sql_yacc.yy"
    { /* mysql errno */
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 219:
#line 2714 "sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, 5);
            (yyval.spcondtype)->sqlstate[5]= '\0';
          }
    break;

  case 220:
#line 2730 "sql_yacc.yy"
    {}
    break;

  case 221:
#line 2731 "sql_yacc.yy"
    {}
    break;

  case 222:
#line 2736 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 223:
#line 2740 "sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 224:
#line 2749 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 225:
#line 2756 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 226:
#line 2763 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 227:
#line 2773 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 228:
#line 2788 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 229:
#line 2805 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 230:
#line 2806 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 244:
#line 2827 "sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 245:
#line 2829 "sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 246:
#line 2833 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 247:
#line 2842 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 248:
#line 2890 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 249:
#line 2892 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 250:
#line 2918 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 251:
#line 2924 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 252:
#line 2933 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 253:
#line 2986 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 254:
#line 3029 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 255:
#line 3049 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 256:
#line 3066 "sql_yacc.yy"
    {}
    break;

  case 257:
#line 3071 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 261:
#line 3097 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 262:
#line 3117 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 263:
#line 3139 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 264:
#line 3141 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
	        sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 265:
#line 3157 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 266:
#line 3169 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 272:
#line 3189 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 273:
#line 3195 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 274:
#line 3208 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 275:
#line 3216 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 276:
#line 3224 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 281:
#line 3242 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 282:
#line 3246 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 283:
#line 3258 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 284:
#line 3267 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 285:
#line 3271 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 286:
#line 3281 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 287:
#line 3290 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 289:
#line 3305 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 290:
#line 3323 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 291:
#line 3340 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 292:
#line 3341 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 293:
#line 3346 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 294:
#line 3362 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 295:
#line 3378 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 296:
#line 3385 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 297:
#line 3393 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 298:
#line 3402 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 299:
#line 3430 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 300:
#line 3440 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 301:
#line 3442 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
	    /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 302:
#line 3458 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 303:
#line 3469 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 304:
#line 3471 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 305:
#line 3490 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 306:
#line 3492 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 307:
#line 3497 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 308:
#line 3499 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 309:
#line 3501 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 313:
#line 3535 "sql_yacc.yy"
    {}
    break;

  case 314:
#line 3537 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 315:
#line 3547 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE;
          }
    break;

  case 316:
#line 3553 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE;
          }
    break;

  case 321:
#line 3576 "sql_yacc.yy"
    {}
    break;

  case 368:
#line 3670 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 369:
#line 3678 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 370:
#line 3686 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 371:
#line 3694 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 372:
#line 3706 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 373:
#line 3718 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 374:
#line 3723 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 375:
#line 3728 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 376:
#line 3736 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 377:
#line 3744 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 378:
#line 3752 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 379:
#line 3760 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 380:
#line 3768 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 381:
#line 3776 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 382:
#line 3784 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 383:
#line 3797 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 384:
#line 3810 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 387:
#line 3829 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 388:
#line 3834 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 389:
#line 3846 "sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 390:
#line 3848 "sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 391:
#line 3898 "sql_yacc.yy"
    {}
    break;

  case 392:
#line 3901 "sql_yacc.yy"
    {}
    break;

  case 393:
#line 3903 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 394:
#line 3917 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 395:
#line 3935 "sql_yacc.yy"
    {}
    break;

  case 396:
#line 3938 "sql_yacc.yy"
    {
             Select->set_braces(1);
             Lex->create_select_start_with_brace= TRUE;
           }
    break;

  case 397:
#line 3942 "sql_yacc.yy"
    {}
    break;

  case 398:
#line 3946 "sql_yacc.yy"
    {}
    break;

  case 399:
#line 3948 "sql_yacc.yy"
    {
            Select->set_braces(0);
            Lex->create_select_start_with_brace= FALSE;
          }
    break;

  case 400:
#line 3952 "sql_yacc.yy"
    {}
    break;

  case 401:
#line 3954 "sql_yacc.yy"
    {
            Select->set_braces(1);
            Lex->create_select_start_with_brace= TRUE;
          }
    break;

  case 402:
#line 3958 "sql_yacc.yy"
    {}
    break;

  case 403:
#line 3986 "sql_yacc.yy"
    {}
    break;

  case 405:
#line 3992 "sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX *lex= Lex;
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-partition");
              MYSQL_YYABORT;
            }
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     "partitioning", "--with-partition");
            MYSQL_YYABORT;
#endif

          }
    break;

  case 407:
#line 4024 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 408:
#line 4036 "sql_yacc.yy"
    {}
    break;

  case 410:
#line 4045 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->list_of_part_fields= TRUE;
            lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 411:
#line 4051 "sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 412:
#line 4052 "sql_yacc.yy"
    {}
    break;

  case 413:
#line 4054 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 414:
#line 4055 "sql_yacc.yy"
    {}
    break;

  case 415:
#line 4057 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 416:
#line 4058 "sql_yacc.yy"
    {}
    break;

  case 417:
#line 4062 "sql_yacc.yy"
    {}
    break;

  case 418:
#line 4064 "sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 419:
#line 4068 "sql_yacc.yy"
    {}
    break;

  case 420:
#line 4069 "sql_yacc.yy"
    {}
    break;

  case 421:
#line 4073 "sql_yacc.yy"
    {}
    break;

  case 422:
#line 4074 "sql_yacc.yy"
    {}
    break;

  case 423:
#line 4079 "sql_yacc.yy"
    {
            if (Lex->part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 424:
#line 4090 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_part_fields= FALSE;
            lex->part_info->part_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->part_func_string= func_string;
            lex->part_info->part_func_len= expr_len;
          }
    break;

  case 425:
#line 4105 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_subpart_fields= FALSE;
            lex->part_info->subpart_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->subpart_func_string= func_string;
            lex->part_info->subpart_func_len= expr_len;
          }
    break;

  case 426:
#line 4120 "sql_yacc.yy"
    {}
    break;

  case 427:
#line 4122 "sql_yacc.yy"
    {
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            lex->part_info->no_parts= no_parts;
            lex->part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 428:
#line 4137 "sql_yacc.yy"
    {}
    break;

  case 429:
#line 4139 "sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 430:
#line 4140 "sql_yacc.yy"
    {}
    break;

  case 431:
#line 4143 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->subpart_type= HASH_PARTITION;
            lex->part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 432:
#line 4148 "sql_yacc.yy"
    {}
    break;

  case 433:
#line 4152 "sql_yacc.yy"
    {}
    break;

  case 434:
#line 4153 "sql_yacc.yy"
    {}
    break;

  case 435:
#line 4158 "sql_yacc.yy"
    {
            if (Lex->part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 436:
#line 4169 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 437:
#line 4184 "sql_yacc.yy"
    {}
    break;

  case 438:
#line 4186 "sql_yacc.yy"
    {
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->no_subparts= no_parts;
            lex->part_info->use_default_no_subpartitions= FALSE;
          }
    break;

  case 439:
#line 4201 "sql_yacc.yy"
    {}
    break;

  case 440:
#line 4203 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->no_parts != 0)
            {
              if (part_info->no_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->no_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 441:
#line 4225 "sql_yacc.yy"
    {}
    break;

  case 442:
#line 4226 "sql_yacc.yy"
    {}
    break;

  case 443:
#line 4231 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 444:
#line 4251 "sql_yacc.yy"
    {}
    break;

  case 445:
#line 4256 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 446:
#line 4266 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (lex->part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (lex->part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 447:
#line 4287 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 448:
#line 4302 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= LIST_PARTITION;
          }
    break;

  case 449:
#line 4320 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            lex->part_info->defined_max_value= TRUE;
            lex->part_info->curr_part_elem->max_value= TRUE;
            lex->part_info->curr_part_elem->range_value= LONGLONG_MAX;
          }
    break;

  case 450:
#line 4332 "sql_yacc.yy"
    {
            if (Lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            if (Lex->part_info->curr_part_elem->has_null_value)
            {
              my_parse_error(ER(ER_NULL_IN_VALUES_LESS_THAN));
              MYSQL_YYABORT;
            }
          }
    break;

  case 453:
#line 4353 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (!((yyvsp[(2) - (3)].p_elem_value)->unsigned_flag))
              part_info->curr_part_elem->signed_flag= TRUE;
            part_info->curr_part_elem->range_value= (yyvsp[(2) - (3)].p_elem_value)->value;
          }
    break;

  case 454:
#line 4362 "sql_yacc.yy"
    {}
    break;

  case 455:
#line 4363 "sql_yacc.yy"
    {}
    break;

  case 456:
#line 4368 "sql_yacc.yy"
    {
            part_elem_value *value_ptr= (yyvsp[(1) - (1)].p_elem_value);
            partition_info *part_info= Lex->part_info;
            if (!value_ptr->unsigned_flag)
              part_info->curr_part_elem->signed_flag= TRUE;
            if (!value_ptr->null_value &&
               part_info->curr_part_elem->
                list_val_list.push_back(value_ptr))
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
          }
    break;

  case 457:
#line 4385 "sql_yacc.yy"
    {
            Item *part_expr= (yyvsp[(1) - (1)].item);
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Name_resolution_context *context= &lex->current_select->context;
            TABLE_LIST *save_list= context->table_list;
            const char *save_where= thd->where;

            context->table_list= 0;
            thd->where= "partition function";

            part_elem_value *value_ptr=
              (part_elem_value*)sql_alloc(sizeof(part_elem_value));
            if (!value_ptr)
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
            if (part_expr->walk(&Item::check_partition_func_processor, 0,
                                NULL))
            {
              my_error(ER_PARTITION_FUNCTION_IS_NOT_ALLOWED, MYF(0));
              MYSQL_YYABORT;
            }
            if (part_expr->fix_fields(YYTHD, (Item**)0) ||
                ((context->table_list= save_list), FALSE) ||
                (!part_expr->const_item()) ||
                (!lex->safe_to_cache_query))
            {
              my_error(ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR, MYF(0));
              MYSQL_YYABORT;
            }
            thd->where= save_where;
            value_ptr->value= part_expr->val_int();
            value_ptr->unsigned_flag= TRUE;
            if (!part_expr->unsigned_flag &&
                value_ptr->value < 0)
              value_ptr->unsigned_flag= FALSE;
            if ((value_ptr->null_value= part_expr->null_value))
            {
              if (Lex->part_info->curr_part_elem->has_null_value)
              {
                my_error(ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              Lex->part_info->curr_part_elem->has_null_value= TRUE;
            }
            else if (part_expr->result_type() != INT_RESULT)
            {
              my_parse_error(ER(ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.p_elem_value)= value_ptr;
          }
    break;

  case 458:
#line 4443 "sql_yacc.yy"
    {
            if (Lex->part_info->no_subparts != 0 &&
                !Lex->part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 459:
#line 4456 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (part_info->no_subparts != 0)
            {
              if (part_info->no_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->no_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 460:
#line 4482 "sql_yacc.yy"
    {}
    break;

  case 461:
#line 4483 "sql_yacc.yy"
    {}
    break;

  case 462:
#line 4488 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_no_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 463:
#line 4521 "sql_yacc.yy"
    {}
    break;

  case 464:
#line 4526 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 465:
#line 4530 "sql_yacc.yy"
    {}
    break;

  case 466:
#line 4531 "sql_yacc.yy"
    {}
    break;

  case 467:
#line 4535 "sql_yacc.yy"
    {}
    break;

  case 468:
#line 4536 "sql_yacc.yy"
    {}
    break;

  case 469:
#line 4541 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 470:
#line 4543 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            lex->part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 471:
#line 4549 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 472:
#line 4551 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 473:
#line 4553 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 474:
#line 4555 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 475:
#line 4557 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 476:
#line 4559 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 477:
#line 4568 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->lock_option= TL_READ_DEFAULT;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;

            if (lex->sql_command == SQLCOM_CREATE_TABLE &&
                (lex->create_info.options & HA_LEX_CREATE_IF_NOT_EXISTS))
            {
              Lex_input_stream *lip= YYLIP;

              if (lex->spcont)
                lex->create_select_pos= lip->get_tok_start() -
                  lex->sphead->m_tmp_query;
              else
                lex->create_select_pos= lip->get_tok_start() - lip->get_buf();
              lex->create_select_in_comment= (lip->in_comment == DISCARD_COMMENT);
            }
          }
    break;

  case 478:
#line 4597 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 479:
#line 4601 "sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 480:
#line 4611 "sql_yacc.yy"
    {}
    break;

  case 481:
#line 4612 "sql_yacc.yy"
    {}
    break;

  case 482:
#line 4616 "sql_yacc.yy"
    {}
    break;

  case 483:
#line 4617 "sql_yacc.yy"
    {}
    break;

  case 484:
#line 4621 "sql_yacc.yy"
    {}
    break;

  case 485:
#line 4622 "sql_yacc.yy"
    {}
    break;

  case 486:
#line 4626 "sql_yacc.yy"
    {}
    break;

  case 487:
#line 4627 "sql_yacc.yy"
    {}
    break;

  case 488:
#line 4631 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 489:
#line 4632 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 490:
#line 4636 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 491:
#line 4637 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 492:
#line 4641 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 493:
#line 4645 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 494:
#line 4646 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 502:
#line 4667 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 503:
#line 4672 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            WARN_DEPRECATED(yythd, "6.0", "TYPE=storage_engine",
                            "'ENGINE=storage_engine'");
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 504:
#line 4679 "sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 505:
#line 4684 "sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 506:
#line 4689 "sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 507:
#line 4694 "sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 508:
#line 4699 "sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 509:
#line 4704 "sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 510:
#line 4709 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 511:
#line 4724 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 512:
#line 4730 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 513:
#line 4735 "sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 514:
#line 4740 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 515:
#line 4745 "sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 516:
#line 4750 "sql_yacc.yy"
    {
            /* Move the union list to the merge_list */
            LEX *lex=Lex;
            TABLE_LIST *table_list= lex->select_lex.get_table_list();
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->create_info.merge_list.elements--;
            lex->create_info.merge_list.first= table_list->next_local;
            lex->select_lex.table_list.elements=1;
            lex->select_lex.table_list.next= &(table_list->next_local);
            table_list->next_local= 0;
            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 519:
#line 4765 "sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 520:
#line 4770 "sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 521:
#line 4775 "sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 522:
#line 4780 "sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 523:
#line 4782 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 524:
#line 4784 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 525:
#line 4786 "sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 526:
#line 4792 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 527:
#line 4800 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 528:
#line 4818 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
              {
                my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                         (yyvsp[(4) - (4)].charset)->name, cinfo->default_table_charset->csname);
                MYSQL_YYABORT;
              }
              Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
              Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 529:
#line 4835 "sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 530:
#line 4858 "sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 531:
#line 4871 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 532:
#line 4872 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 533:
#line 4873 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 534:
#line 4874 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 535:
#line 4875 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 536:
#line 4876 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 537:
#line 4880 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 538:
#line 4881 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 539:
#line 4882 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 540:
#line 4886 "sql_yacc.yy"
    {}
    break;

  case 542:
#line 4891 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 543:
#line 4892 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 544:
#line 4893 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 545:
#line 4894 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 551:
#line 4910 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 552:
#line 4917 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 553:
#line 4923 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 554:
#line 4929 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 555:
#line 4935 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].simple_string) ? (yyvsp[(3) - (8)].simple_string) : (yyvsp[(1) - (8)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 556:
#line 4940 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(1) - (8)].simple_string) ? (yyvsp[(1) - (8)].simple_string) : (yyvsp[(4) - (8)].simple_string);
            const char *fkey_name = (yyvsp[(4) - (8)].simple_string) ? (yyvsp[(4) - (8)].simple_string) : key_name;
            Key *key= new Foreign_key(fkey_name, lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, key_name,
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 557:
#line 4960 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 558:
#line 4964 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 562:
#line 4979 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; }
    break;

  case 563:
#line 4980 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 564:
#line 4984 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(2) - (2)].simple_string); }
    break;

  case 565:
#line 4989 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 566:
#line 4998 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 567:
#line 5011 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 568:
#line 5012 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 569:
#line 5013 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 570:
#line 5015 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 571:
#line 5020 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 572:
#line 5024 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 573:
#line 5029 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 574:
#line 5034 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 575:
#line 5038 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 576:
#line 5043 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 577:
#line 5048 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 578:
#line 5054 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 579:
#line 5059 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 580:
#line 5065 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 581:
#line 5069 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 582:
#line 5074 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 583:
#line 5079 "sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 584:
#line 5097 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 585:
#line 5099 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 586:
#line 5101 "sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /*
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 587:
#line 5114 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 588:
#line 5116 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 589:
#line 5121 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 590:
#line 5126 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 591:
#line 5138 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 592:
#line 5143 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 593:
#line 5148 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 594:
#line 5153 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 595:
#line 5155 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 596:
#line 5157 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 597:
#line 5159 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 598:
#line 5161 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 599:
#line 5163 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 600:
#line 5165 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 601:
#line 5167 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 602:
#line 5169 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 603:
#line 5171 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 604:
#line 5173 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 605:
#line 5175 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 606:
#line 5177 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 607:
#line 5179 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 608:
#line 5187 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 609:
#line 5188 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 610:
#line 5190 "sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 611:
#line 5194 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 612:
#line 5195 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 613:
#line 5196 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 614:
#line 5197 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 615:
#line 5198 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 616:
#line 5202 "sql_yacc.yy"
    {}
    break;

  case 617:
#line 5206 "sql_yacc.yy"
    {}
    break;

  case 618:
#line 5207 "sql_yacc.yy"
    {}
    break;

  case 619:
#line 5211 "sql_yacc.yy"
    {}
    break;

  case 620:
#line 5212 "sql_yacc.yy"
    {}
    break;

  case 621:
#line 5216 "sql_yacc.yy"
    {}
    break;

  case 622:
#line 5217 "sql_yacc.yy"
    {}
    break;

  case 623:
#line 5218 "sql_yacc.yy"
    {}
    break;

  case 624:
#line 5219 "sql_yacc.yy"
    {}
    break;

  case 625:
#line 5220 "sql_yacc.yy"
    {}
    break;

  case 626:
#line 5224 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 627:
#line 5225 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 628:
#line 5226 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 629:
#line 5227 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 630:
#line 5228 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 631:
#line 5233 "sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 632:
#line 5238 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 633:
#line 5240 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 634:
#line 5245 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 635:
#line 5247 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 636:
#line 5249 "sql_yacc.yy"
    {}
    break;

  case 637:
#line 5254 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 638:
#line 5262 "sql_yacc.yy"
    {}
    break;

  case 639:
#line 5263 "sql_yacc.yy"
    {}
    break;

  case 640:
#line 5267 "sql_yacc.yy"
    {}
    break;

  case 641:
#line 5268 "sql_yacc.yy"
    {}
    break;

  case 642:
#line 5272 "sql_yacc.yy"
    {}
    break;

  case 643:
#line 5273 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 644:
#line 5274 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 645:
#line 5278 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 646:
#line 5279 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 647:
#line 5280 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 648:
#line 5281 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 649:
#line 5284 "sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 650:
#line 5285 "sql_yacc.yy"
    { }
    break;

  case 651:
#line 5288 "sql_yacc.yy"
    {}
    break;

  case 652:
#line 5289 "sql_yacc.yy"
    {}
    break;

  case 653:
#line 5293 "sql_yacc.yy"
    {}
    break;

  case 654:
#line 5294 "sql_yacc.yy"
    {}
    break;

  case 655:
#line 5298 "sql_yacc.yy"
    {}
    break;

  case 657:
#line 5303 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 658:
#line 5304 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 659:
#line 5305 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 660:
#line 5307 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 661:
#line 5313 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 662:
#line 5315 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 663:
#line 5321 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 664:
#line 5327 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 665:
#line 5333 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 666:
#line 5338 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 667:
#line 5340 "sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 668:
#line 5356 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 669:
#line 5362 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 670:
#line 5366 "sql_yacc.yy"
    {}
    break;

  case 671:
#line 5367 "sql_yacc.yy"
    {}
    break;

  case 672:
#line 5372 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 673:
#line 5379 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 674:
#line 5383 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 675:
#line 5384 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 676:
#line 5388 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 677:
#line 5389 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 678:
#line 5394 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 679:
#line 5402 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 680:
#line 5406 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 681:
#line 5407 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 682:
#line 5412 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 683:
#line 5422 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 684:
#line 5423 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 685:
#line 5427 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 686:
#line 5428 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 687:
#line 5432 "sql_yacc.yy"
    {}
    break;

  case 688:
#line 5433 "sql_yacc.yy"
    {}
    break;

  case 689:
#line 5437 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 690:
#line 5438 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 691:
#line 5439 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 692:
#line 5441 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 693:
#line 5449 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 694:
#line 5450 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 695:
#line 5454 "sql_yacc.yy"
    { }
    break;

  case 696:
#line 5455 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 697:
#line 5459 "sql_yacc.yy"
    { Lex->charset= NULL; }
    break;

  case 698:
#line 5460 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 699:
#line 5462 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 700:
#line 5470 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (2)].charset); }
    break;

  case 703:
#line 5480 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->fk_delete_opt= lex->fk_update_opt= lex->fk_match_option= 0;
            lex->ref_list.empty();
          }
    break;

  case 704:
#line 5486 "sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (4)].table);
          }
    break;

  case 705:
#line 5492 "sql_yacc.yy"
    {}
    break;

  case 706:
#line 5493 "sql_yacc.yy"
    {}
    break;

  case 707:
#line 5498 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 708:
#line 5505 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 709:
#line 5514 "sql_yacc.yy"
    {}
    break;

  case 710:
#line 5515 "sql_yacc.yy"
    {}
    break;

  case 711:
#line 5519 "sql_yacc.yy"
    {}
    break;

  case 712:
#line 5520 "sql_yacc.yy"
    {}
    break;

  case 713:
#line 5524 "sql_yacc.yy"
    { Lex->fk_delete_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 714:
#line 5525 "sql_yacc.yy"
    { Lex->fk_update_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 715:
#line 5526 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 716:
#line 5527 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 717:
#line 5528 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 718:
#line 5532 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 719:
#line 5533 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 720:
#line 5534 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 721:
#line 5535 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 722:
#line 5536 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 723:
#line 5540 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 724:
#line 5544 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 725:
#line 5545 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 726:
#line 5549 "sql_yacc.yy"
    {}
    break;

  case 727:
#line 5550 "sql_yacc.yy"
    {}
    break;

  case 728:
#line 5554 "sql_yacc.yy"
    {}
    break;

  case 730:
#line 5559 "sql_yacc.yy"
    {}
    break;

  case 731:
#line 5560 "sql_yacc.yy"
    {}
    break;

  case 732:
#line 5561 "sql_yacc.yy"
    {}
    break;

  case 733:
#line 5565 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 734:
#line 5566 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 735:
#line 5570 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 736:
#line 5575 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 737:
#line 5587 "sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 740:
#line 5604 "sql_yacc.yy"
    {}
    break;

  case 742:
#line 5609 "sql_yacc.yy"
    {}
    break;

  case 744:
#line 5614 "sql_yacc.yy"
    {}
    break;

  case 752:
#line 5634 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 753:
#line 5635 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 754:
#line 5640 "sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 759:
#line 5655 "sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 760:
#line 5667 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 761:
#line 5668 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 762:
#line 5669 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 763:
#line 5673 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 764:
#line 5674 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 765:
#line 5679 "sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 766:
#line 5685 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str).str,(uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 767:
#line 5698 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; /* Default length */ }
    break;

  case 768:
#line 5699 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 769:
#line 5703 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 770:
#line 5704 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 771:
#line 5708 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 772:
#line 5709 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 773:
#line 5717 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 774:
#line 5740 "sql_yacc.yy"
    {}
    break;

  case 775:
#line 5742 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 776:
#line 5747 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 777:
#line 5756 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 778:
#line 5767 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 779:
#line 5778 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 780:
#line 5785 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 781:
#line 5796 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 782:
#line 5803 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 783:
#line 5814 "sql_yacc.yy"
    {}
    break;

  case 784:
#line 5821 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 785:
#line 5833 "sql_yacc.yy"
    {}
    break;

  case 786:
#line 5835 "sql_yacc.yy"
    {
            /*
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 787:
#line 5855 "sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 788:
#line 5868 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 789:
#line 5873 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 790:
#line 5878 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 791:
#line 5883 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 792:
#line 5888 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 793:
#line 5897 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 794:
#line 5898 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 795:
#line 5899 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 796:
#line 5900 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 797:
#line 5904 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 798:
#line 5906 "sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname);
            (yyval.num)= 1;
          }
    break;

  case 799:
#line 5917 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 800:
#line 5918 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 801:
#line 5922 "sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 802:
#line 5923 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 804:
#line 5928 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 805:
#line 5929 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 811:
#line 5946 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 812:
#line 5951 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 813:
#line 5958 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 815:
#line 5968 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 816:
#line 5976 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_CHECK;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->check_opt.init();
          }
    break;

  case 818:
#line 5985 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 820:
#line 5994 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.no_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 822:
#line 6005 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 823:
#line 6012 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 825:
#line 6020 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 826:
#line 6032 "sql_yacc.yy"
    {}
    break;

  case 828:
#line 6038 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 829:
#line 6043 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 830:
#line 6051 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 832:
#line 6066 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 833:
#line 6070 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 834:
#line 6074 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 835:
#line 6081 "sql_yacc.yy"
    {}
    break;

  case 836:
#line 6082 "sql_yacc.yy"
    {}
    break;

  case 837:
#line 6087 "sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 840:
#line 6107 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 841:
#line 6115 "sql_yacc.yy"
    { }
    break;

  case 842:
#line 6117 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 843:
#line 6121 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 844:
#line 6125 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 846:
#line 6132 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 847:
#line 6141 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 849:
#line 6154 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 850:
#line 6163 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 851:
#line 6167 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 852:
#line 6176 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 853:
#line 6185 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 854:
#line 6191 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 855:
#line 6197 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 856:
#line 6206 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 857:
#line 6215 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 858:
#line 6234 "sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 859:
#line 6255 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
          }
    break;

  case 860:
#line 6260 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_FORCE;
          }
    break;

  case 861:
#line 6264 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 862:
#line 6271 "sql_yacc.yy"
    {}
    break;

  case 863:
#line 6272 "sql_yacc.yy"
    {}
    break;

  case 864:
#line 6276 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 865:
#line 6277 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 866:
#line 6281 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 867:
#line 6282 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 868:
#line 6283 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 869:
#line 6287 "sql_yacc.yy"
    {}
    break;

  case 870:
#line 6288 "sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 871:
#line 6289 "sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 872:
#line 6293 "sql_yacc.yy"
    {}
    break;

  case 873:
#line 6294 "sql_yacc.yy"
    {}
    break;

  case 874:
#line 6295 "sql_yacc.yy"
    {}
    break;

  case 875:
#line 6296 "sql_yacc.yy"
    {}
    break;

  case 876:
#line 6305 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 877:
#line 6314 "sql_yacc.yy"
    {}
    break;

  case 878:
#line 6316 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 879:
#line 6323 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 880:
#line 6331 "sql_yacc.yy"
    {}
    break;

  case 881:
#line 6333 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 882:
#line 6342 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 883:
#line 6350 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 884:
#line 6352 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 885:
#line 6358 "sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 886:
#line 6360 "sql_yacc.yy"
    {}
    break;

  case 889:
#line 6369 "sql_yacc.yy"
    {}
    break;

  case 890:
#line 6370 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 891:
#line 6371 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 892:
#line 6375 "sql_yacc.yy"
    {}
    break;

  case 893:
#line 6377 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 896:
#line 6398 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RESTORE_TABLE;
          }
    break;

  case 897:
#line 6402 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 898:
#line 6409 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BACKUP_TABLE;
          }
    break;

  case 899:
#line 6413 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 900:
#line 6420 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
          }
    break;

  case 901:
#line 6425 "sql_yacc.yy"
    {}
    break;

  case 902:
#line 6429 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 903:
#line 6430 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 904:
#line 6431 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 905:
#line 6436 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 906:
#line 6444 "sql_yacc.yy"
    {}
    break;

  case 907:
#line 6448 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 908:
#line 6449 "sql_yacc.yy"
    {}
    break;

  case 909:
#line 6453 "sql_yacc.yy"
    {}
    break;

  case 910:
#line 6454 "sql_yacc.yy"
    {}
    break;

  case 911:
#line 6458 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 912:
#line 6459 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 913:
#line 6460 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 914:
#line 6465 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 915:
#line 6473 "sql_yacc.yy"
    {}
    break;

  case 916:
#line 6478 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 917:
#line 6486 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 918:
#line 6499 "sql_yacc.yy"
    {}
    break;

  case 919:
#line 6503 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 920:
#line 6504 "sql_yacc.yy"
    {}
    break;

  case 921:
#line 6508 "sql_yacc.yy"
    {}
    break;

  case 922:
#line 6509 "sql_yacc.yy"
    {}
    break;

  case 923:
#line 6513 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 924:
#line 6514 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 925:
#line 6515 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 926:
#line 6516 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 927:
#line 6517 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 928:
#line 6518 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 929:
#line 6523 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 930:
#line 6531 "sql_yacc.yy"
    {}
    break;

  case 931:
#line 6535 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 932:
#line 6536 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 933:
#line 6537 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 934:
#line 6542 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 935:
#line 6546 "sql_yacc.yy"
    {}
    break;

  case 936:
#line 6548 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 937:
#line 6555 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 938:
#line 6560 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 941:
#line 6573 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 942:
#line 6586 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 945:
#line 6600 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 946:
#line 6608 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 947:
#line 6609 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 948:
#line 6614 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
          }
    break;

  case 949:
#line 6619 "sql_yacc.yy"
    {}
    break;

  case 952:
#line 6629 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 953:
#line 6637 "sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE,
                                        global_system_variables.old_mode ?
                                        INDEX_HINT_MASK_JOIN :
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 955:
#line 6648 "sql_yacc.yy"
    { }
    break;

  case 957:
#line 6654 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 958:
#line 6655 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 959:
#line 6665 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 962:
#line 6679 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (sel->set_braces(1))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                !sel->master_unit()->first_select()->braces &&
                sel->master_unit()->first_select()->linkage ==
                UNION_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                sel->master_unit()->fake_select_lex)
            {
 	       my_error(ER_WRONG_USAGE, MYF(0),
                        "CUBE/ROLLUP", "ORDER BY");
               MYSQL_YYABORT;
            }
            /* select in braces, can't contain global parameters */
            if (sel->master_unit()->fake_select_lex)
              sel->master_unit()->global_parameters=
                 sel->master_unit()->fake_select_lex;
          }
    break;

  case 964:
#line 6713 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 966:
#line 6732 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 967:
#line 6740 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 969:
#line 6747 "sql_yacc.yy"
    {}
    break;

  case 974:
#line 6757 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                (TABLE_LIST *) Select->table_list.first;
          }
    break;

  case 977:
#line 6772 "sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 980:
#line 6787 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 981:
#line 6789 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Lex->lock_option=  TL_READ_HIGH_PRIORITY;
            Lex->current_select->lock_option= TL_READ_HIGH_PRIORITY;
          }
    break;

  case 982:
#line 6795 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 983:
#line 6796 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 984:
#line 6797 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 985:
#line 6799 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 986:
#line 6805 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 987:
#line 6811 "sql_yacc.yy"
    {
            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 988:
#line 6817 "sql_yacc.yy"
    {
            Lex->thd->infinidb_vtable.override_largeside_estimate=1;
          }
    break;

  case 989:
#line 6821 "sql_yacc.yy"
    {
            /*
             Honor this flag only if SQL_NO_CACHE wasn't specified AND
             we are parsing the outermost SELECT in the query.
            */
            if (Lex->select_lex.sql_cache != SELECT_LEX::SQL_NO_CACHE &&
                Lex->current_select == &Lex->select_lex)
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 990:
#line 6834 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 992:
#line 6840 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->current_select->lock_option= TL_WRITE;
            lex->safe_to_cache_query=0;
            lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 993:
#line 6848 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->current_select->lock_option= TL_READ_WITH_SHARED_LOCKS;
            lex->safe_to_cache_query=0;
          }
    break;

  case 996:
#line 6861 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 997:
#line 6876 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 998:
#line 6901 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 999:
#line 6907 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1000:
#line 6913 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); /* table.* */ }
    break;

  case 1001:
#line 6914 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1002:
#line 6918 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1003:
#line 6919 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1004:
#line 6920 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1005:
#line 6921 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1006:
#line 6922 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1007:
#line 6926 "sql_yacc.yy"
    {}
    break;

  case 1008:
#line 6927 "sql_yacc.yy"
    {}
    break;

  case 1009:
#line 6933 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1010:
#line 6984 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1011:
#line 6991 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1012:
#line 7034 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1013:
#line 7040 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1014:
#line 7046 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:
#line 7052 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1016:
#line 7058 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1017:
#line 7064 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1018:
#line 7070 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1020:
#line 7080 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:
#line 7086 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1022:
#line 7092 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1023:
#line 7098 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1024:
#line 7104 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1026:
#line 7114 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1027:
#line 7120 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1028:
#line 7130 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1029:
#line 7136 "sql_yacc.yy"
    {
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1030:
#line 7144 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1031:
#line 7150 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1032:
#line 7160 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1033:
#line 7166 "sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1034:
#line 7175 "sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1035:
#line 7185 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1036:
#line 7191 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1037:
#line 7201 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1038:
#line 7207 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1040:
#line 7220 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1041:
#line 7226 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1042:
#line 7232 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1043:
#line 7238 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1044:
#line 7244 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1045:
#line 7250 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1046:
#line 7256 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1047:
#line 7262 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1048:
#line 7268 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1049:
#line 7274 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1050:
#line 7280 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1051:
#line 7286 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1052:
#line 7292 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1053:
#line 7298 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1063:
#line 7327 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1064:
#line 7328 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1065:
#line 7329 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1066:
#line 7330 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1067:
#line 7331 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1068:
#line 7332 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1069:
#line 7336 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1070:
#line 7337 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1077:
#line 7348 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:
#line 7364 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:
#line 7370 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1084:
#line 7374 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:
#line 7380 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:
#line 7386 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:
#line 7392 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:
#line 7398 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1089:
#line 7400 "sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:
#line 7407 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:
#line 7414 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:
#line 7420 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1093:
#line 7422 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1094:
#line 7431 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:
#line 7438 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:
#line 7446 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:
#line 7452 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:
#line 7459 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:
#line 7465 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:
#line 7479 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:
#line 7487 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:
#line 7502 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:
#line 7508 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1104:
#line 7514 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1105:
#line 7522 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:
#line 7528 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:
#line 7534 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:
#line 7540 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:
#line 7546 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1110:
#line 7561 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:
#line 7573 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:
#line 7579 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1113:
#line 7585 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1114:
#line 7591 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1115:
#line 7597 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1116:
#line 7603 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1117:
#line 7609 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:
#line 7615 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1119:
#line 7621 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:
#line 7627 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:
#line 7633 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:
#line 7639 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:
#line 7645 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:
#line 7651 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:
#line 7657 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:
#line 7663 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:
#line 7669 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1128:
#line 7677 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:
#line 7698 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:
#line 7705 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:
#line 7711 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1132:
#line 7718 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1133:
#line 7725 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1134:
#line 7733 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:
#line 7740 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:
#line 7746 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:
#line 7752 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:
#line 7758 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1139:
#line 7765 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1140:
#line 7772 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:
#line 7778 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:
#line 7785 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:
#line 7791 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:
#line 7797 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:
#line 7803 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:
#line 7809 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:
#line 7815 "sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe();
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1148:
#line 7833 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1149:
#line 7843 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:
#line 7849 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:
#line 7855 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1152:
#line 7862 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1153:
#line 7869 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1154:
#line 7884 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:
#line 7890 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:
#line 7896 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:
#line 7902 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:
#line 7908 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1159:
#line 7915 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:
#line 7921 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:
#line 7927 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:
#line 7933 "sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:
#line 7939 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1164:
#line 7951 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:
#line 7957 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:
#line 7963 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:
#line 7969 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:
#line 7975 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:
#line 7987 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:
#line 7993 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1171:
#line 8009 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1172:
#line 8015 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1173:
#line 8022 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1174:
#line 8029 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1175:
#line 8036 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1176:
#line 8043 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1177:
#line 8050 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1178:
#line 8054 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1179:
#line 8067 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_window_func *builder;
            Item *item= NULL;

            builder= find_native_window_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              ((Create_window_func*)builder)->respectNulls = 1;
              item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].item_list));
              if (!item)
                MYSQL_YYABORT;
              ((Item_func_window*)item)->window_ctx((yyvsp[(5) - (5)].Window_context));
              (yyval.item) = item;
            }
            else
            {
              LEX_STRING args[1];
              args[0] = (yyvsp[(1) - (5)].lex_str);
              IDB_set_error(YYTHD, logging::ERR_WF_FUNCTION_NOT_EXISTS, args, 1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1180:
#line 8092 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_window_func *builder = NULL;
            Item *item= NULL;

            builder= find_native_window_function_builder_nulls(thd, (yyvsp[(1) - (6)].lex_str));
            if (builder)
            {
              ((Create_window_func*)builder)->respectNulls = (yyvsp[(5) - (6)].num);
              item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].item_list));
              if (!item)
                MYSQL_YYABORT;
              ((Item_func_window*)item)->window_ctx((yyvsp[(6) - (6)].Window_context));
              (yyval.item) = item;
            }
            else
            {
              builder= find_native_window_function_builder(thd, (yyvsp[(1) - (6)].lex_str));
              if (builder)
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
              }
              else
              {
                LEX_STRING args[1];
                args[0] = (yyvsp[(1) - (6)].lex_str);
                IDB_set_error(YYTHD, logging::ERR_WF_FUNCTION_NOT_EXISTS, args, 1);
                MYSQL_YYABORT;
              }
              MYSQL_YYABORT;
            }
          }
    break;

  case 1181:
#line 8128 "sql_yacc.yy"
    {
              LEX_STRING funcname= { C_STRING_WITH_LEN("SUM") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_sum(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1182:
#line 8136 "sql_yacc.yy"
    {
              // order by clause is not allowed for distinct
              if ((yyvsp[(6) - (6)].Window_context)->ordering)
              {
                IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
                MYSQL_YYABORT;
              }
              LEX_STRING funcname= { C_STRING_WITH_LEN("SUM_DISTINCT") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_sum(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1183:
#line 8150 "sql_yacc.yy"
    {
              LEX_STRING funcname= { C_STRING_WITH_LEN("AVG") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_avg(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1184:
#line 8158 "sql_yacc.yy"
    {
              // order by clause is not allowed for distinct
              if ((yyvsp[(6) - (6)].Window_context)->ordering)
              {
                IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
                MYSQL_YYABORT;
              }
              LEX_STRING funcname= { C_STRING_WITH_LEN("AVG_DISTINCT") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_avg(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1185:
#line 8172 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT(*)") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, (yyvsp[(6) - (6)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1186:
#line 8180 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1187:
#line 8188 "sql_yacc.yy"
    {
            Item* item = NULL;
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT_DISTINCT") };
            if ((yyvsp[(4) - (6)].item_list))
            {
              List_iterator_fast<Item> it(*(yyvsp[(4) - (6)].item_list));
              item = it++;
              if ((yyvsp[(4) - (6)].item_list)->elements != 1 || !item)
              {
                LEX_STRING args[1];
                args[0] = funcname;
                IDB_set_error(YYTHD, logging::ERR_WF_WRONG_ARGS, args, 1);
                MYSQL_YYABORT;
              }
            }

            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, item, (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1188:
#line 8216 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("MIN") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_hybrid(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1189:
#line 8224 "sql_yacc.yy"
    {
            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            LEX_STRING funcname= { C_STRING_WITH_LEN("MIN_DISTINCT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_hybrid(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1190:
#line 8238 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("MAX") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_hybrid(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1191:
#line 8246 "sql_yacc.yy"
    {
            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            LEX_STRING funcname= { C_STRING_WITH_LEN("MAX_DISTINCT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_hybrid(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1192:
#line 8260 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("VAR_POP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1193:
#line 8268 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("VAR_SAMP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1194:
#line 8276 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("STDDEV_POP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1195:
#line 8284 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("STDDEV_SAMP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1196:
#line 8293 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("NTH_VALUE") };
            Create_window_func *builder = & Create_window_func_nth_value::s_singleton;
            DBUG_ASSERT(builder);
            ((Create_window_func_nth_value*)builder)->fromFirst = (yyvsp[(5) - (7)].num);
            ((Create_window_func_nth_value*)builder)->respectNulls = (yyvsp[(6) - (7)].num);
            (yyval.item) = builder->create(YYTHD, funcname, (yyvsp[(3) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            ((Item_func_window*)(yyval.item))->window_ctx((yyvsp[(7) - (7)].Window_context));
          }
    break;

  case 1197:
#line 8306 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("PERCENTILE_CONT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_percentile(funcname, (yyvsp[(3) - (12)].item), (yyvsp[(10) - (12)].list), (yyvsp[(12) - (12)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:
#line 8314 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("PERCENTILE_DISC") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_percentile(funcname, (yyvsp[(3) - (12)].item), (yyvsp[(10) - (12)].list), (yyvsp[(12) - (12)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:
#line 8323 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1200:
#line 8324 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1201:
#line 8325 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1202:
#line 8328 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1203:
#line 8329 "sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1204:
#line 8332 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1205:
#line 8333 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1206:
#line 8337 "sql_yacc.yy"
    {
            if (Select->parsing_place == IN_ON)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, idb_on_clause_err_str);
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_WHERE)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, idb_where_clause_err_str);
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_HAVING)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, idb_having_clause_err_str);
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_GROUP_BY)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, idb_group_by_clause_err_str);
              MYSQL_YYABORT;
            }
            (yyval.Window_context) = new Window_context();
            (yyval.Window_context)->setPartitions((yyvsp[(3) - (5)].item_list));
            (yyval.Window_context)->setOrders((yyvsp[(4) - (5)].ordering));
          }
    break;

  case 1207:
#line 8364 "sql_yacc.yy"
    { (yyval.item_list) = 0; }
    break;

  case 1208:
#line 8365 "sql_yacc.yy"
    { (yyval.item_list) = (yyvsp[(3) - (3)].item_list); }
    break;

  case 1209:
#line 8369 "sql_yacc.yy"
    { (yyval.ordering) = 0; }
    break;

  case 1210:
#line 8371 "sql_yacc.yy"
    {
            IDB_set_error(YYTHD, logging::ERR_WF_WINDOW_WITHOUT_ORDER, NULL, 0);
            MYSQL_YYABORT;
          }
    break;

  case 1211:
#line 8376 "sql_yacc.yy"
    {
            /*
            If RANGE is specified, order list shall contain a single <sort key> SK.
            The declared type of SK shall be numeric, date, or interval. The declared type of UVS shall be
            numeric if the declared type of SK is numeric -- reference ANSI-SQL 2003
            */
            if ((yyvsp[(3) - (4)].list) && (yyvsp[(3) - (4)].list)->elements > 1 && (yyvsp[(4) - (4)].frame) && (yyvsp[(4) - (4)].frame)->isRange &&
                (((yyvsp[(4) - (4)].frame)->start && (yyvsp[(4) - (4)].frame)->start->bound == PRECEDING) ||
                ((yyvsp[(4) - (4)].frame)->end && (yyvsp[(4) - (4)].frame)->end->bound == FOLLOWING)))
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_ORDER_KEY, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.ordering) = new Ordering();
            (yyval.ordering)->orders = (yyvsp[(3) - (4)].list);
            (yyval.ordering)->frame = (yyvsp[(4) - (4)].frame);
          }
    break;

  case 1212:
#line 8397 "sql_yacc.yy"
    {
            if (add_to_list(YYTHD, *(yyvsp[(1) - (5)].list), (yyvsp[(3) - (5)].item),(bool) (yyvsp[(4) - (5)].num), (uint)(yyvsp[(5) - (5)].num)))
              MYSQL_YYABORT;
            (yyval.list) = (yyvsp[(1) - (5)].list);
          }
    break;

  case 1213:
#line 8403 "sql_yacc.yy"
    {
            (yyval.list) = new SQL_LIST();
            (yyval.list)->elements= 0;
            (yyval.list)->first= 0;
            (yyval.list)->next= &((yyval.list)->first);
            if ((yyval.list) == NULL)
              MYSQL_YYABORT;
            if (add_to_list(YYTHD, *(yyval.list), (yyvsp[(1) - (3)].item), (bool) (yyvsp[(2) - (3)].num), (uint) (yyvsp[(3) - (3)].num)))
              MYSQL_YYABORT;
          }
    break;

  case 1214:
#line 8416 "sql_yacc.yy"
    { (yyval.num)= 2; }
    break;

  case 1215:
#line 8417 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1216:
#line 8418 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1217:
#line 8422 "sql_yacc.yy"
    { (yyval.frame)= 0; }
    break;

  case 1218:
#line 8423 "sql_yacc.yy"
    { (yyval.frame)= (yyvsp[(1) - (1)].frame); }
    break;

  case 1219:
#line 8428 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (5)].boundary)->bound == UNBOUNDED_FOLLOWING || (yyvsp[(5) - (5)].boundary)->bound == UNBOUNDED_PRECEDING ||
                ((yyvsp[(3) - (5)].boundary)->bound == CURRENT_ROW && (yyvsp[(5) - (5)].boundary)->bound == PRECEDING) ||
                ((yyvsp[(3) - (5)].boundary)->bound == FOLLOWING && (yyvsp[(5) - (5)].boundary)->bound == PRECEDING) ||
                ((yyvsp[(3) - (5)].boundary)->bound == FOLLOWING && (yyvsp[(5) - (5)].boundary)->bound == CURRENT_ROW))
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_WINDOW, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.frame) = new Frame();
            (yyval.frame)->start = (yyvsp[(3) - (5)].boundary);
            (yyval.frame)->end = (yyvsp[(5) - (5)].boundary);
            (yyval.frame)->isRange = (yyvsp[(1) - (5)].num);
          }
    break;

  case 1220:
#line 8443 "sql_yacc.yy"
    {
            if ((yyvsp[(2) - (2)].boundary)->bound == FOLLOWING || (yyvsp[(2) - (2)].boundary)->bound == UNBOUNDED_FOLLOWING)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_WINDOW, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.frame) = new Frame();
            (yyval.frame)->start = (yyvsp[(2) - (2)].boundary);
            (yyval.frame)->isRange = (yyvsp[(1) - (2)].num);
          }
    break;

  case 1221:
#line 8455 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1222:
#line 8456 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1223:
#line 8461 "sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = ((yyvsp[(2) - (2)].bound) == PRECEDING? UNBOUNDED_PRECEDING : UNBOUNDED_FOLLOWING);
          }
    break;

  case 1224:
#line 8466 "sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = CURRENT_ROW;
          }
    break;

  case 1225:
#line 8471 "sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = (yyvsp[(2) - (2)].bound);
            (yyval.boundary)->item = (yyvsp[(1) - (2)].item);
          }
    break;

  case 1226:
#line 8477 "sql_yacc.yy"
    {
            // @todo interval range support
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = (yyvsp[(4) - (4)].bound);
            (yyval.boundary)->item = new (YYTHD->mem_root) Item_interval((yyvsp[(2) - (4)].item), (yyvsp[(3) - (4)].interval));
          }
    break;

  case 1227:
#line 8486 "sql_yacc.yy"
    { (yyval.bound)= PRECEDING; }
    break;

  case 1228:
#line 8487 "sql_yacc.yy"
    { (yyval.bound)= FOLLOWING; }
    break;

  case 1229:
#line 8505 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (4)].lex_str).str, (yyvsp[(1) - (4)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            //$<udf>$= udf;
#endif
         // }
         // opt_udf_expr_list ')'
         // {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (4)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (4)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              //udf_func *udf= $<udf>3;

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(3) - (4)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1230:
#line 8578 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1231:
#line 8620 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1232:
#line 8622 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1233:
#line 8626 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1234:
#line 8627 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1235:
#line 8631 "sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1236:
#line 8632 "sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1237:
#line 8636 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1238:
#line 8637 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1239:
#line 8642 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1240:
#line 8649 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1241:
#line 8657 "sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /*
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1242:
#line 8683 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:
#line 8689 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:
#line 8695 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:
#line 8701 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:
#line 8707 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:
#line 8713 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:
#line 8722 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:
#line 8743 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count_distinct(* (yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:
#line 8750 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:
#line 8761 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:
#line 8767 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:
#line 8773 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:
#line 8779 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:
#line 8785 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:
#line 8791 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:
#line 8797 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:
#line 8803 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:
#line 8809 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:
#line 8815 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1261:
#line 8819 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1262:
#line 8835 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1263:
#line 8843 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1264:
#line 8850 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1265:
#line 8860 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1266:
#line 8868 "sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe();
          }
    break;

  case 1267:
#line 8883 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1268:
#line 8884 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1269:
#line 8889 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:
#line 8894 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1272:
#line 8900 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1274:
#line 8917 "sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1275:
#line 8919 "sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1276:
#line 8924 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1277:
#line 8933 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1278:
#line 8941 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1279:
#line 8943 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1280:
#line 8945 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1281:
#line 8947 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1282:
#line 8949 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1283:
#line 8951 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1284:
#line 8953 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1285:
#line 8955 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1286:
#line 8957 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1287:
#line 8959 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1288:
#line 8961 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1289:
#line 8965 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1290:
#line 8966 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1291:
#line 8971 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1292:
#line 8978 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1293:
#line 8986 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1294:
#line 8995 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item_list)= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1295:
#line 9002 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1296:
#line 9003 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1297:
#line 9008 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1298:
#line 9015 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1299:
#line 9022 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1300:
#line 9023 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1301:
#line 9027 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1302:
#line 9028 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1303:
#line 9033 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1304:
#line 9041 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1305:
#line 9050 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1306:
#line 9052 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1307:
#line 9060 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1308:
#line 9071 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1309:
#line 9072 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1310:
#line 9077 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1311:
#line 9079 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1312:
#line 9099 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1313:
#line 9101 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1314:
#line 9104 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1315:
#line 9112 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1316:
#line 9119 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1317:
#line 9127 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1318:
#line 9135 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1319:
#line 9139 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1320:
#line 9141 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1321:
#line 9149 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1322:
#line 9157 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1323:
#line 9165 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1324:
#line 9169 "sql_yacc.yy"
    {
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list);
          }
    break;

  case 1325:
#line 9175 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1326:
#line 9185 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1327:
#line 9193 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1328:
#line 9202 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1329:
#line 9206 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1330:
#line 9213 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1331:
#line 9223 "sql_yacc.yy"
    {}
    break;

  case 1332:
#line 9224 "sql_yacc.yy"
    {}
    break;

  case 1333:
#line 9225 "sql_yacc.yy"
    {}
    break;

  case 1334:
#line 9230 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1335:
#line 9235 "sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                Lex->lock_option,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1336:
#line 9244 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1337:
#line 9266 "sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */

            if (!((yyvsp[(3) - (6)].table_list) || (yyvsp[(6) - (6)].lex_str_ptr)) && (yyvsp[(2) - (6)].select_lex)->embedding &&
                !(yyvsp[(2) - (6)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (6)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(6) - (6)].lex_str_ptr), 0,
                                               TL_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(4) - (6)].num) || (yyvsp[(6) - (6)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (6)].table_list);
            }
          }
    break;

  case 1338:
#line 9318 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1339:
#line 9324 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1340:
#line 9340 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1341:
#line 9357 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1343:
#line 9364 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1344:
#line 9369 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1345:
#line 9394 "sql_yacc.yy"
    {}
    break;

  case 1346:
#line 9395 "sql_yacc.yy"
    {}
    break;

  case 1347:
#line 9400 "sql_yacc.yy"
    {
            (yyval.num)= global_system_variables.old_mode ?
                  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL;
          }
    break;

  case 1348:
#line 9404 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1349:
#line 9405 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1350:
#line 9406 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1351:
#line 9410 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1352:
#line 9411 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1353:
#line 9416 "sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1355:
#line 9421 "sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1360:
#line 9434 "sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1362:
#line 9438 "sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1364:
#line 9443 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1365:
#line 9444 "sql_yacc.yy"
    {}
    break;

  case 1366:
#line 9449 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1367:
#line 9451 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1370:
#line 9461 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1371:
#line 9472 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1372:
#line 9484 "sql_yacc.yy"
    {}
    break;

  case 1373:
#line 9485 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1374:
#line 9486 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1375:
#line 9487 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1376:
#line 9488 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1377:
#line 9489 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1378:
#line 9490 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1379:
#line 9491 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1380:
#line 9492 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1381:
#line 9493 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1382:
#line 9494 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1383:
#line 9495 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1384:
#line 9499 "sql_yacc.yy"
    {}
    break;

  case 1385:
#line 9500 "sql_yacc.yy"
    {
                                  (yyval.interval_time_st)=INTERVAL_MICROSECOND;
                                  /*
                                    FRAC_SECOND was mistakenly implemented with
                                    a wrong resolution. According to the ODBC
                                    standard it should be nanoseconds, not
                                    microseconds. Changing it to nanoseconds
                                    in MySQL would mean making TIMESTAMPDIFF
                                    and TIMESTAMPADD to return DECIMAL, since
                                    the return value would be too big for BIGINT
                                    Hence we just deprecate the incorrect
                                    implementation without changing its
                                    resolution.
                                  */
                                  WARN_DEPRECATED(yythd, VER_CELOSIA, "FRAC_SECOND", "MICROSECOND");
                                }
    break;

  case 1386:
#line 9519 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1387:
#line 9520 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1388:
#line 9521 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1389:
#line 9522 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1390:
#line 9523 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1391:
#line 9524 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1392:
#line 9525 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1393:
#line 9526 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1394:
#line 9527 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1395:
#line 9531 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1396:
#line 9532 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1397:
#line 9533 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1398:
#line 9534 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1402:
#line 9544 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1403:
#line 9546 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1406:
#line 9559 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1407:
#line 9561 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1408:
#line 9565 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1410:
#line 9577 "sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1411:
#line 9581 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1412:
#line 9592 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1413:
#line 9597 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1415:
#line 9615 "sql_yacc.yy"
    {
            Select->parsing_place= IN_GROUP_BY;
          }
    break;

  case 1417:
#line 9623 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1418:
#line 9625 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1419:
#line 9629 "sql_yacc.yy"
    {}
    break;

  case 1420:
#line 9631 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT; /* To be deleted in 5.1 */
          }
    break;

  case 1421:
#line 9644 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1425:
#line 9671 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1428:
#line 9690 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements ||
                   first_sl->select_limit) &&
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1430:
#line 9725 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1431:
#line 9727 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1432:
#line 9731 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1433:
#line 9732 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1434:
#line 9733 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1435:
#line 9738 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1436:
#line 9744 "sql_yacc.yy"
    {}
    break;

  case 1437:
#line 9748 "sql_yacc.yy"
    {}
    break;

  case 1438:
#line 9749 "sql_yacc.yy"
    {}
    break;

  case 1439:
#line 9753 "sql_yacc.yy"
    {}
    break;

  case 1440:
#line 9758 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1441:
#line 9765 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1442:
#line 9772 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1443:
#line 9782 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1444:
#line 9786 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1445:
#line 9792 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1446:
#line 9798 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1447:
#line 9807 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1448:
#line 9812 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1449:
#line 9820 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1450:
#line 9821 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1451:
#line 9822 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1452:
#line 9823 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1453:
#line 9824 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1454:
#line 9825 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1455:
#line 9829 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1456:
#line 9830 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1457:
#line 9831 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1458:
#line 9832 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1459:
#line 9833 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1460:
#line 9837 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1461:
#line 9838 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1462:
#line 9839 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1463:
#line 9840 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1464:
#line 9841 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1465:
#line 9845 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1466:
#line 9846 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1467:
#line 9847 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1468:
#line 9848 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1469:
#line 9853 "sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1473:
#line 9864 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1475:
#line 9894 "sql_yacc.yy"
    {}
    break;

  case 1476:
#line 9895 "sql_yacc.yy"
    {}
    break;

  case 1479:
#line 9905 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1480:
#line 9916 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe &&
                  (!(lex->result= new select_dumpvar(lex->nest_level))))
              MYSQL_YYABORT;
          }
    break;

  case 1481:
#line 9923 "sql_yacc.yy"
    {}
    break;

  case 1483:
#line 9928 "sql_yacc.yy"
    {}
    break;

  case 1484:
#line 9933 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1485:
#line 9952 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1486:
#line 9984 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1488:
#line 9996 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange, lex->nest_level)))
              MYSQL_YYABORT;
          }
    break;

  case 1489:
#line 10004 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1491:
#line 10007 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange, lex->nest_level)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1492:
#line 10019 "sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1493:
#line 10030 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1494:
#line 10036 "sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1495:
#line 10047 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (6)].num);
            lex->drop_if_exists= (yyvsp[(4) - (6)].num);
          }
    break;

  case 1496:
#line 10053 "sql_yacc.yy"
    {}
    break;

  case 1497:
#line 10054 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1498:
#line 10068 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1499:
#line 10075 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1500:
#line 10098 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1501:
#line 10119 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1502:
#line 10131 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1503:
#line 10135 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (5)].num);
          }
    break;

  case 1504:
#line 10141 "sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1505:
#line 10147 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1506:
#line 10154 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1507:
#line 10159 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1508:
#line 10164 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1511:
#line 10179 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1514:
#line 10192 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option ))
              MYSQL_YYABORT;
          }
    break;

  case 1515:
#line 10201 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1516:
#line 10202 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1517:
#line 10206 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1518:
#line 10207 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1519:
#line 10215 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR;
            mysql_init_select(lex);
            /* for subselects */
            lex->lock_option= TL_READ_DEFAULT;
          }
    break;

  case 1520:
#line 10225 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1521:
#line 10230 "sql_yacc.yy"
    {}
    break;

  case 1522:
#line 10235 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1523:
#line 10242 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1524:
#line 10247 "sql_yacc.yy"
    {}
    break;

  case 1525:
#line 10252 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1526:
#line 10264 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1527:
#line 10265 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1528:
#line 10266 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1529:
#line 10270 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1530:
#line 10271 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1531:
#line 10275 "sql_yacc.yy"
    {}
    break;

  case 1532:
#line 10276 "sql_yacc.yy"
    {}
    break;

  case 1533:
#line 10281 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1534:
#line 10289 "sql_yacc.yy"
    {}
    break;

  case 1535:
#line 10290 "sql_yacc.yy"
    {}
    break;

  case 1536:
#line 10291 "sql_yacc.yy"
    {}
    break;

  case 1537:
#line 10293 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1539:
#line 10303 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1540:
#line 10304 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1541:
#line 10308 "sql_yacc.yy"
    {}
    break;

  case 1542:
#line 10309 "sql_yacc.yy"
    {}
    break;

  case 1543:
#line 10311 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1544:
#line 10312 "sql_yacc.yy"
    {}
    break;

  case 1545:
#line 10314 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1546:
#line 10315 "sql_yacc.yy"
    {}
    break;

  case 1551:
#line 10330 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1552:
#line 10339 "sql_yacc.yy"
    {}
    break;

  case 1553:
#line 10340 "sql_yacc.yy"
    {}
    break;

  case 1554:
#line 10344 "sql_yacc.yy"
    {}
    break;

  case 1555:
#line 10345 "sql_yacc.yy"
    {}
    break;

  case 1556:
#line 10350 "sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1557:
#line 10355 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1558:
#line 10363 "sql_yacc.yy"
    {}
    break;

  case 1560:
#line 10369 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1561:
#line 10374 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1562:
#line 10381 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1563:
#line 10383 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1565:
#line 10392 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1567:
#line 10400 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->lock_option= TL_UNLOCK; /* Will be set later */
            lex->duplicates= DUP_ERROR;
          }
    break;

  case 1568:
#line 10409 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1569:
#line 10427 "sql_yacc.yy"
    {}
    break;

  case 1572:
#line 10437 "sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1575:
#line 10450 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) ||
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1576:
#line 10459 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1577:
#line 10460 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1578:
#line 10467 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            lex->lock_option= TL_WRITE_DEFAULT;
            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1579:
#line 10475 "sql_yacc.yy"
    {}
    break;

  case 1580:
#line 10480 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1581:
#line 10486 "sql_yacc.yy"
    {}
    break;

  case 1582:
#line 10488 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1583:
#line 10490 "sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1584:
#line 10495 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1585:
#line 10497 "sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1586:
#line 10504 "sql_yacc.yy"
    {}
    break;

  case 1587:
#line 10505 "sql_yacc.yy"
    {}
    break;

  case 1588:
#line 10510 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (3)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(3) - (3)].lex_str_ptr),
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1589:
#line 10522 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(5) - (5)].lex_str_ptr),
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1590:
#line 10536 "sql_yacc.yy"
    {}
    break;

  case 1591:
#line 10537 "sql_yacc.yy"
    {}
    break;

  case 1592:
#line 10541 "sql_yacc.yy"
    {}
    break;

  case 1593:
#line 10542 "sql_yacc.yy"
    {}
    break;

  case 1594:
#line 10546 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1595:
#line 10547 "sql_yacc.yy"
    { Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1596:
#line 10548 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1597:
#line 10553 "sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
          }
    break;

  case 1604:
#line 10577 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1605:
#line 10581 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1606:
#line 10585 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1607:
#line 10589 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1608:
#line 10593 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1609:
#line 10597 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1610:
#line 10601 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1611:
#line 10605 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1612:
#line 10609 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1613:
#line 10616 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1614:
#line 10620 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1615:
#line 10629 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1616:
#line 10638 "sql_yacc.yy"
    {}
    break;

  case 1617:
#line 10643 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1618:
#line 10650 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1619:
#line 10658 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1620:
#line 10666 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1621:
#line 10674 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1622:
#line 10682 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1623:
#line 10690 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            WARN_DEPRECATED(yythd, "6.0", "SHOW PLUGIN", "'SHOW PLUGINS'");
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1624:
#line 10698 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1625:
#line 10705 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1626:
#line 10707 "sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1627:
#line 10709 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1628:
#line 10724 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
            Lex->mi.log_file_name = (yyvsp[(8) - (16)].lex_str).str;
            Lex->mi.pos = (yyvsp[(12) - (16)].ulonglong_number);
            Lex->mi.server_id = (yyvsp[(16) - (16)].ulong_num);
          }
    break;

  case 1629:
#line 10731 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1630:
#line 10735 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1631:
#line 10739 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1633:
#line 10744 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1634:
#line 10753 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_COLUMN_TYPES;
          }
    break;

  case 1635:
#line 10758 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            WARN_DEPRECATED(yythd, "6.0", "SHOW TABLE TYPES", "'SHOW [STORAGE] ENGINES'");
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1636:
#line 10766 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1637:
#line 10773 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1638:
#line 10778 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1639:
#line 10783 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1640:
#line 10788 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1641:
#line 10790 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1642:
#line 10792 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1643:
#line 10794 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1644:
#line 10796 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1645:
#line 10798 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1646:
#line 10805 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1647:
#line 10813 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_STATUS;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW INNODB STATUS", "'SHOW ENGINE INNODB STATUS'");
          }
    break;

  case 1648:
#line 10825 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_MUTEX;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW MUTEX STATUS", "'SHOW ENGINE INNODB MUTEX'");
          }
    break;

  case 1649:
#line 10837 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1650:
#line 10839 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1651:
#line 10847 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1652:
#line 10854 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1653:
#line 10861 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1654:
#line 10871 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1655:
#line 10878 "sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1656:
#line 10884 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1657:
#line 10893 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1658:
#line 10901 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1659:
#line 10905 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1660:
#line 10909 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1661:
#line 10916 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1662:
#line 10923 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1663:
#line 10929 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1664:
#line 10936 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1665:
#line 10943 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1666:
#line 10953 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1667:
#line 10963 "sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1668:
#line 10971 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1669:
#line 10973 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1670:
#line 10975 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1675:
#line 10989 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1676:
#line 10990 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1677:
#line 10994 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1678:
#line 10995 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1681:
#line 11004 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1682:
#line 11005 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1683:
#line 11009 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1684:
#line 11010 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1686:
#line 11016 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1687:
#line 11023 "sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1688:
#line 11033 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1689:
#line 11044 "sql_yacc.yy"
    {}
    break;

  case 1690:
#line 11046 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1691:
#line 11048 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1694:
#line 11060 "sql_yacc.yy"
    {}
    break;

  case 1695:
#line 11061 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1696:
#line 11062 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1697:
#line 11066 "sql_yacc.yy"
    {}
    break;

  case 1698:
#line 11067 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1699:
#line 11069 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1700:
#line 11083 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1701:
#line 11090 "sql_yacc.yy"
    {}
    break;

  case 1704:
#line 11100 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES; }
    break;

  case 1705:
#line 11101 "sql_yacc.yy"
    {}
    break;

  case 1706:
#line 11103 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
    break;

  case 1707:
#line 11105 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1708:
#line 11107 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1709:
#line 11109 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1710:
#line 11111 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1711:
#line 11113 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1712:
#line 11115 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1713:
#line 11117 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1714:
#line 11119 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1715:
#line 11121 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1716:
#line 11125 "sql_yacc.yy"
    {}
    break;

  case 1717:
#line 11126 "sql_yacc.yy"
    {}
    break;

  case 1718:
#line 11131 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1719:
#line 11136 "sql_yacc.yy"
    {}
    break;

  case 1722:
#line 11145 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1723:
#line 11146 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1724:
#line 11147 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1725:
#line 11152 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1726:
#line 11158 "sql_yacc.yy"
    {}
    break;

  case 1728:
#line 11167 "sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1729:
#line 11171 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1730:
#line 11183 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1731:
#line 11192 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1732:
#line 11193 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1733:
#line 11194 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1734:
#line 11201 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1735:
#line 11212 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD DATA");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1736:
#line 11223 "sql_yacc.yy"
    {}
    break;

  case 1737:
#line 11225 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            WARN_DEPRECATED(yythd, "6.0", "LOAD TABLE FROM MASTER",
                            "MySQL Administrator (mysqldump, mysql)");
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD TABLE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(3) - (5)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1738:
#line 11242 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->lock_option= (yyvsp[(1) - (4)].lock_type);
            lex->local_file=  (yyvsp[(2) - (4)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(4) - (4)].lex_str).str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 1739:
#line 11253 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(9) - (9)].table), NULL, TL_OPTION_UPDATING,
                                           lex->lock_option))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1740:
#line 11263 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(11) - (11)].charset); }
    break;

  case 1741:
#line 11266 "sql_yacc.yy"
    {}
    break;

  case 1742:
#line 11268 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
            WARN_DEPRECATED(yythd, "6.0", "LOAD DATA FROM MASTER",
                            "mysqldump or future "
                            "BACKUP/RESTORE DATABASE facility");
          }
    break;

  case 1743:
#line 11277 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1744:
#line 11278 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1745:
#line 11282 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1746:
#line 11284 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1747:
#line 11295 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1748:
#line 11299 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1749:
#line 11300 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1750:
#line 11301 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1755:
#line 11316 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1756:
#line 11321 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1757:
#line 11328 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1758:
#line 11333 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1763:
#line 11351 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1764:
#line 11356 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1766:
#line 11365 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1767:
#line 11372 "sql_yacc.yy"
    {}
    break;

  case 1768:
#line 11373 "sql_yacc.yy"
    {}
    break;

  case 1769:
#line 11374 "sql_yacc.yy"
    {}
    break;

  case 1770:
#line 11379 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1771:
#line 11381 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1772:
#line 11385 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1773:
#line 11387 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1774:
#line 11395 "sql_yacc.yy"
    {}
    break;

  case 1775:
#line 11396 "sql_yacc.yy"
    {}
    break;

  case 1776:
#line 11403 "sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1777:
#line 11427 "sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1778:
#line 11439 "sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1779:
#line 11450 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1780:
#line 11469 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1781:
#line 11477 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1782:
#line 11489 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1783:
#line 11504 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1784:
#line 11524 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1785:
#line 11525 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1786:
#line 11527 "sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1787:
#line 11534 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1788:
#line 11535 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1789:
#line 11537 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1790:
#line 11544 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1791:
#line 11550 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1792:
#line 11556 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1793:
#line 11562 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1794:
#line 11568 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1795:
#line 11597 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1796:
#line 11624 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1797:
#line 11625 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1798:
#line 11626 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1799:
#line 11631 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1800:
#line 11641 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1801:
#line 11651 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1802:
#line 11657 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1803:
#line 11666 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1804:
#line 11680 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1805:
#line 11681 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1806:
#line 11686 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1807:
#line 11695 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1808:
#line 11710 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1809:
#line 11715 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1810:
#line 11761 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1811:
#line 11766 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1812:
#line 11783 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1813:
#line 11788 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1814:
#line 11867 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1815:
#line 11892 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1816:
#line 11922 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1817:
#line 11924 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1818:
#line 11940 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1819:
#line 11949 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1820:
#line 11954 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1821:
#line 11960 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1822:
#line 11966 "sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1823:
#line 11976 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1824:
#line 11982 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1825:
#line 11991 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1826:
#line 12000 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1827:
#line 12002 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, (yyvsp[(1) - (1)].lex_str).str + wlen);
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1828:
#line 12031 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1829:
#line 12047 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1830:
#line 12063 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1831:
#line 12079 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1832:
#line 12081 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1833:
#line 12091 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1834:
#line 12093 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1835:
#line 12103 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1836:
#line 12104 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1837:
#line 12105 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1838:
#line 12110 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1839:
#line 12124 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1840:
#line 12143 "sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /*
              empty LEX_USER means current_user and
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1841:
#line 12157 "sql_yacc.yy"
    {}
    break;

  case 1842:
#line 12158 "sql_yacc.yy"
    {}
    break;

  case 1843:
#line 12159 "sql_yacc.yy"
    {}
    break;

  case 1844:
#line 12160 "sql_yacc.yy"
    {}
    break;

  case 1845:
#line 12161 "sql_yacc.yy"
    {}
    break;

  case 1846:
#line 12162 "sql_yacc.yy"
    {}
    break;

  case 1847:
#line 12163 "sql_yacc.yy"
    {}
    break;

  case 1848:
#line 12164 "sql_yacc.yy"
    {}
    break;

  case 1849:
#line 12165 "sql_yacc.yy"
    {}
    break;

  case 1850:
#line 12166 "sql_yacc.yy"
    {}
    break;

  case 1851:
#line 12167 "sql_yacc.yy"
    {}
    break;

  case 1852:
#line 12168 "sql_yacc.yy"
    {}
    break;

  case 1853:
#line 12169 "sql_yacc.yy"
    {}
    break;

  case 1854:
#line 12170 "sql_yacc.yy"
    {}
    break;

  case 1855:
#line 12171 "sql_yacc.yy"
    {}
    break;

  case 1856:
#line 12172 "sql_yacc.yy"
    {}
    break;

  case 1857:
#line 12173 "sql_yacc.yy"
    {}
    break;

  case 1858:
#line 12174 "sql_yacc.yy"
    {}
    break;

  case 1859:
#line 12175 "sql_yacc.yy"
    {}
    break;

  case 1860:
#line 12176 "sql_yacc.yy"
    {}
    break;

  case 1861:
#line 12177 "sql_yacc.yy"
    {}
    break;

  case 1862:
#line 12178 "sql_yacc.yy"
    {}
    break;

  case 1863:
#line 12179 "sql_yacc.yy"
    {}
    break;

  case 1864:
#line 12180 "sql_yacc.yy"
    {}
    break;

  case 1865:
#line 12181 "sql_yacc.yy"
    {}
    break;

  case 1866:
#line 12182 "sql_yacc.yy"
    {}
    break;

  case 1867:
#line 12183 "sql_yacc.yy"
    {}
    break;

  case 1868:
#line 12184 "sql_yacc.yy"
    {}
    break;

  case 1869:
#line 12185 "sql_yacc.yy"
    {}
    break;

  case 1870:
#line 12186 "sql_yacc.yy"
    {}
    break;

  case 1871:
#line 12187 "sql_yacc.yy"
    {}
    break;

  case 1872:
#line 12188 "sql_yacc.yy"
    {}
    break;

  case 1873:
#line 12189 "sql_yacc.yy"
    {}
    break;

  case 1874:
#line 12190 "sql_yacc.yy"
    {}
    break;

  case 1875:
#line 12191 "sql_yacc.yy"
    {}
    break;

  case 1876:
#line 12192 "sql_yacc.yy"
    {}
    break;

  case 1877:
#line 12193 "sql_yacc.yy"
    {}
    break;

  case 1878:
#line 12194 "sql_yacc.yy"
    {}
    break;

  case 1879:
#line 12195 "sql_yacc.yy"
    {}
    break;

  case 1880:
#line 12196 "sql_yacc.yy"
    {}
    break;

  case 1881:
#line 12197 "sql_yacc.yy"
    {}
    break;

  case 1882:
#line 12198 "sql_yacc.yy"
    {}
    break;

  case 1883:
#line 12199 "sql_yacc.yy"
    {}
    break;

  case 1884:
#line 12200 "sql_yacc.yy"
    {}
    break;

  case 1885:
#line 12201 "sql_yacc.yy"
    {}
    break;

  case 1886:
#line 12202 "sql_yacc.yy"
    {}
    break;

  case 1887:
#line 12203 "sql_yacc.yy"
    {}
    break;

  case 1888:
#line 12204 "sql_yacc.yy"
    {}
    break;

  case 1889:
#line 12205 "sql_yacc.yy"
    {}
    break;

  case 1890:
#line 12206 "sql_yacc.yy"
    {}
    break;

  case 1891:
#line 12216 "sql_yacc.yy"
    {}
    break;

  case 1892:
#line 12217 "sql_yacc.yy"
    {}
    break;

  case 1893:
#line 12218 "sql_yacc.yy"
    {}
    break;

  case 1894:
#line 12219 "sql_yacc.yy"
    {}
    break;

  case 1895:
#line 12220 "sql_yacc.yy"
    {}
    break;

  case 1896:
#line 12221 "sql_yacc.yy"
    {}
    break;

  case 1897:
#line 12222 "sql_yacc.yy"
    {}
    break;

  case 1898:
#line 12223 "sql_yacc.yy"
    {}
    break;

  case 1899:
#line 12224 "sql_yacc.yy"
    {}
    break;

  case 1900:
#line 12225 "sql_yacc.yy"
    {}
    break;

  case 1901:
#line 12226 "sql_yacc.yy"
    {}
    break;

  case 1902:
#line 12227 "sql_yacc.yy"
    {}
    break;

  case 1903:
#line 12228 "sql_yacc.yy"
    {}
    break;

  case 1904:
#line 12229 "sql_yacc.yy"
    {}
    break;

  case 1905:
#line 12230 "sql_yacc.yy"
    {}
    break;

  case 1906:
#line 12231 "sql_yacc.yy"
    {}
    break;

  case 1907:
#line 12232 "sql_yacc.yy"
    {}
    break;

  case 1908:
#line 12233 "sql_yacc.yy"
    {}
    break;

  case 1909:
#line 12234 "sql_yacc.yy"
    {}
    break;

  case 1910:
#line 12235 "sql_yacc.yy"
    {}
    break;

  case 1911:
#line 12236 "sql_yacc.yy"
    {}
    break;

  case 1912:
#line 12237 "sql_yacc.yy"
    {}
    break;

  case 1913:
#line 12238 "sql_yacc.yy"
    {}
    break;

  case 1914:
#line 12239 "sql_yacc.yy"
    {}
    break;

  case 1915:
#line 12240 "sql_yacc.yy"
    {}
    break;

  case 1916:
#line 12241 "sql_yacc.yy"
    {}
    break;

  case 1917:
#line 12242 "sql_yacc.yy"
    {}
    break;

  case 1918:
#line 12243 "sql_yacc.yy"
    {}
    break;

  case 1919:
#line 12244 "sql_yacc.yy"
    {}
    break;

  case 1920:
#line 12245 "sql_yacc.yy"
    {}
    break;

  case 1921:
#line 12246 "sql_yacc.yy"
    {}
    break;

  case 1922:
#line 12247 "sql_yacc.yy"
    {}
    break;

  case 1923:
#line 12248 "sql_yacc.yy"
    {}
    break;

  case 1924:
#line 12249 "sql_yacc.yy"
    {}
    break;

  case 1925:
#line 12250 "sql_yacc.yy"
    {}
    break;

  case 1926:
#line 12251 "sql_yacc.yy"
    {}
    break;

  case 1927:
#line 12252 "sql_yacc.yy"
    {}
    break;

  case 1928:
#line 12253 "sql_yacc.yy"
    {}
    break;

  case 1929:
#line 12254 "sql_yacc.yy"
    {}
    break;

  case 1930:
#line 12255 "sql_yacc.yy"
    {}
    break;

  case 1931:
#line 12256 "sql_yacc.yy"
    {}
    break;

  case 1932:
#line 12257 "sql_yacc.yy"
    {}
    break;

  case 1933:
#line 12258 "sql_yacc.yy"
    {}
    break;

  case 1934:
#line 12259 "sql_yacc.yy"
    {}
    break;

  case 1935:
#line 12260 "sql_yacc.yy"
    {}
    break;

  case 1936:
#line 12261 "sql_yacc.yy"
    {}
    break;

  case 1937:
#line 12262 "sql_yacc.yy"
    {}
    break;

  case 1938:
#line 12263 "sql_yacc.yy"
    {}
    break;

  case 1939:
#line 12264 "sql_yacc.yy"
    {}
    break;

  case 1940:
#line 12265 "sql_yacc.yy"
    {}
    break;

  case 1941:
#line 12266 "sql_yacc.yy"
    {}
    break;

  case 1942:
#line 12267 "sql_yacc.yy"
    {}
    break;

  case 1943:
#line 12268 "sql_yacc.yy"
    {}
    break;

  case 1944:
#line 12269 "sql_yacc.yy"
    {}
    break;

  case 1945:
#line 12270 "sql_yacc.yy"
    {}
    break;

  case 1946:
#line 12271 "sql_yacc.yy"
    {}
    break;

  case 1947:
#line 12272 "sql_yacc.yy"
    {}
    break;

  case 1948:
#line 12273 "sql_yacc.yy"
    {}
    break;

  case 1949:
#line 12274 "sql_yacc.yy"
    {}
    break;

  case 1950:
#line 12275 "sql_yacc.yy"
    {}
    break;

  case 1951:
#line 12276 "sql_yacc.yy"
    {}
    break;

  case 1952:
#line 12277 "sql_yacc.yy"
    {}
    break;

  case 1953:
#line 12278 "sql_yacc.yy"
    {}
    break;

  case 1954:
#line 12279 "sql_yacc.yy"
    {}
    break;

  case 1955:
#line 12280 "sql_yacc.yy"
    {}
    break;

  case 1956:
#line 12281 "sql_yacc.yy"
    {}
    break;

  case 1957:
#line 12282 "sql_yacc.yy"
    {}
    break;

  case 1958:
#line 12283 "sql_yacc.yy"
    {}
    break;

  case 1959:
#line 12284 "sql_yacc.yy"
    {}
    break;

  case 1960:
#line 12285 "sql_yacc.yy"
    {}
    break;

  case 1961:
#line 12286 "sql_yacc.yy"
    {}
    break;

  case 1962:
#line 12287 "sql_yacc.yy"
    {}
    break;

  case 1963:
#line 12288 "sql_yacc.yy"
    {}
    break;

  case 1964:
#line 12289 "sql_yacc.yy"
    {}
    break;

  case 1965:
#line 12290 "sql_yacc.yy"
    {}
    break;

  case 1966:
#line 12291 "sql_yacc.yy"
    {}
    break;

  case 1967:
#line 12292 "sql_yacc.yy"
    {}
    break;

  case 1968:
#line 12293 "sql_yacc.yy"
    {}
    break;

  case 1969:
#line 12294 "sql_yacc.yy"
    {}
    break;

  case 1970:
#line 12295 "sql_yacc.yy"
    {}
    break;

  case 1971:
#line 12296 "sql_yacc.yy"
    {}
    break;

  case 1972:
#line 12297 "sql_yacc.yy"
    {}
    break;

  case 1973:
#line 12298 "sql_yacc.yy"
    {}
    break;

  case 1974:
#line 12299 "sql_yacc.yy"
    {}
    break;

  case 1975:
#line 12300 "sql_yacc.yy"
    {}
    break;

  case 1976:
#line 12301 "sql_yacc.yy"
    {}
    break;

  case 1977:
#line 12302 "sql_yacc.yy"
    {}
    break;

  case 1978:
#line 12303 "sql_yacc.yy"
    {}
    break;

  case 1979:
#line 12304 "sql_yacc.yy"
    {}
    break;

  case 1980:
#line 12305 "sql_yacc.yy"
    {}
    break;

  case 1981:
#line 12306 "sql_yacc.yy"
    {}
    break;

  case 1982:
#line 12307 "sql_yacc.yy"
    {}
    break;

  case 1983:
#line 12308 "sql_yacc.yy"
    {}
    break;

  case 1984:
#line 12309 "sql_yacc.yy"
    {}
    break;

  case 1985:
#line 12310 "sql_yacc.yy"
    {}
    break;

  case 1986:
#line 12311 "sql_yacc.yy"
    {}
    break;

  case 1987:
#line 12312 "sql_yacc.yy"
    {}
    break;

  case 1988:
#line 12313 "sql_yacc.yy"
    {}
    break;

  case 1989:
#line 12314 "sql_yacc.yy"
    {}
    break;

  case 1990:
#line 12315 "sql_yacc.yy"
    {}
    break;

  case 1991:
#line 12316 "sql_yacc.yy"
    {}
    break;

  case 1992:
#line 12317 "sql_yacc.yy"
    {}
    break;

  case 1993:
#line 12318 "sql_yacc.yy"
    {}
    break;

  case 1994:
#line 12319 "sql_yacc.yy"
    {}
    break;

  case 1995:
#line 12320 "sql_yacc.yy"
    {}
    break;

  case 1996:
#line 12321 "sql_yacc.yy"
    {}
    break;

  case 1997:
#line 12322 "sql_yacc.yy"
    {}
    break;

  case 1998:
#line 12323 "sql_yacc.yy"
    {}
    break;

  case 1999:
#line 12324 "sql_yacc.yy"
    {}
    break;

  case 2000:
#line 12325 "sql_yacc.yy"
    {}
    break;

  case 2001:
#line 12326 "sql_yacc.yy"
    {}
    break;

  case 2002:
#line 12327 "sql_yacc.yy"
    {}
    break;

  case 2003:
#line 12328 "sql_yacc.yy"
    {}
    break;

  case 2004:
#line 12329 "sql_yacc.yy"
    {}
    break;

  case 2005:
#line 12330 "sql_yacc.yy"
    {}
    break;

  case 2006:
#line 12331 "sql_yacc.yy"
    {}
    break;

  case 2007:
#line 12332 "sql_yacc.yy"
    {}
    break;

  case 2008:
#line 12333 "sql_yacc.yy"
    {}
    break;

  case 2009:
#line 12334 "sql_yacc.yy"
    {}
    break;

  case 2010:
#line 12335 "sql_yacc.yy"
    {}
    break;

  case 2011:
#line 12336 "sql_yacc.yy"
    {}
    break;

  case 2012:
#line 12337 "sql_yacc.yy"
    {}
    break;

  case 2013:
#line 12338 "sql_yacc.yy"
    {}
    break;

  case 2014:
#line 12339 "sql_yacc.yy"
    {}
    break;

  case 2015:
#line 12340 "sql_yacc.yy"
    {}
    break;

  case 2016:
#line 12341 "sql_yacc.yy"
    {}
    break;

  case 2017:
#line 12342 "sql_yacc.yy"
    {}
    break;

  case 2018:
#line 12343 "sql_yacc.yy"
    {}
    break;

  case 2019:
#line 12344 "sql_yacc.yy"
    {}
    break;

  case 2020:
#line 12345 "sql_yacc.yy"
    {}
    break;

  case 2021:
#line 12346 "sql_yacc.yy"
    {}
    break;

  case 2022:
#line 12347 "sql_yacc.yy"
    {}
    break;

  case 2023:
#line 12348 "sql_yacc.yy"
    {}
    break;

  case 2024:
#line 12349 "sql_yacc.yy"
    {}
    break;

  case 2025:
#line 12350 "sql_yacc.yy"
    {}
    break;

  case 2026:
#line 12351 "sql_yacc.yy"
    {}
    break;

  case 2027:
#line 12352 "sql_yacc.yy"
    {}
    break;

  case 2028:
#line 12353 "sql_yacc.yy"
    {}
    break;

  case 2029:
#line 12354 "sql_yacc.yy"
    {}
    break;

  case 2030:
#line 12355 "sql_yacc.yy"
    {}
    break;

  case 2031:
#line 12356 "sql_yacc.yy"
    {}
    break;

  case 2032:
#line 12357 "sql_yacc.yy"
    {}
    break;

  case 2033:
#line 12358 "sql_yacc.yy"
    {}
    break;

  case 2034:
#line 12359 "sql_yacc.yy"
    {}
    break;

  case 2035:
#line 12360 "sql_yacc.yy"
    {}
    break;

  case 2036:
#line 12361 "sql_yacc.yy"
    {}
    break;

  case 2037:
#line 12362 "sql_yacc.yy"
    {}
    break;

  case 2038:
#line 12363 "sql_yacc.yy"
    {}
    break;

  case 2039:
#line 12364 "sql_yacc.yy"
    {}
    break;

  case 2040:
#line 12365 "sql_yacc.yy"
    {}
    break;

  case 2041:
#line 12366 "sql_yacc.yy"
    {}
    break;

  case 2042:
#line 12367 "sql_yacc.yy"
    {}
    break;

  case 2043:
#line 12368 "sql_yacc.yy"
    {}
    break;

  case 2044:
#line 12369 "sql_yacc.yy"
    {}
    break;

  case 2045:
#line 12370 "sql_yacc.yy"
    {}
    break;

  case 2046:
#line 12371 "sql_yacc.yy"
    {}
    break;

  case 2047:
#line 12372 "sql_yacc.yy"
    {}
    break;

  case 2048:
#line 12373 "sql_yacc.yy"
    {}
    break;

  case 2049:
#line 12374 "sql_yacc.yy"
    {}
    break;

  case 2050:
#line 12375 "sql_yacc.yy"
    {}
    break;

  case 2051:
#line 12376 "sql_yacc.yy"
    {}
    break;

  case 2052:
#line 12377 "sql_yacc.yy"
    {}
    break;

  case 2053:
#line 12378 "sql_yacc.yy"
    {}
    break;

  case 2054:
#line 12379 "sql_yacc.yy"
    {}
    break;

  case 2055:
#line 12380 "sql_yacc.yy"
    {}
    break;

  case 2056:
#line 12381 "sql_yacc.yy"
    {}
    break;

  case 2057:
#line 12382 "sql_yacc.yy"
    {}
    break;

  case 2058:
#line 12383 "sql_yacc.yy"
    {}
    break;

  case 2059:
#line 12384 "sql_yacc.yy"
    {}
    break;

  case 2060:
#line 12385 "sql_yacc.yy"
    {}
    break;

  case 2061:
#line 12386 "sql_yacc.yy"
    {}
    break;

  case 2062:
#line 12387 "sql_yacc.yy"
    {}
    break;

  case 2063:
#line 12388 "sql_yacc.yy"
    {}
    break;

  case 2064:
#line 12389 "sql_yacc.yy"
    {}
    break;

  case 2065:
#line 12390 "sql_yacc.yy"
    {}
    break;

  case 2066:
#line 12391 "sql_yacc.yy"
    {}
    break;

  case 2067:
#line 12392 "sql_yacc.yy"
    {}
    break;

  case 2068:
#line 12393 "sql_yacc.yy"
    {}
    break;

  case 2069:
#line 12394 "sql_yacc.yy"
    {}
    break;

  case 2070:
#line 12395 "sql_yacc.yy"
    {}
    break;

  case 2071:
#line 12396 "sql_yacc.yy"
    {}
    break;

  case 2072:
#line 12397 "sql_yacc.yy"
    {}
    break;

  case 2073:
#line 12398 "sql_yacc.yy"
    {}
    break;

  case 2074:
#line 12399 "sql_yacc.yy"
    {}
    break;

  case 2075:
#line 12400 "sql_yacc.yy"
    {}
    break;

  case 2076:
#line 12401 "sql_yacc.yy"
    {}
    break;

  case 2077:
#line 12402 "sql_yacc.yy"
    {}
    break;

  case 2078:
#line 12403 "sql_yacc.yy"
    {}
    break;

  case 2079:
#line 12404 "sql_yacc.yy"
    {}
    break;

  case 2080:
#line 12405 "sql_yacc.yy"
    {}
    break;

  case 2081:
#line 12406 "sql_yacc.yy"
    {}
    break;

  case 2082:
#line 12407 "sql_yacc.yy"
    {}
    break;

  case 2083:
#line 12408 "sql_yacc.yy"
    {}
    break;

  case 2084:
#line 12409 "sql_yacc.yy"
    {}
    break;

  case 2085:
#line 12410 "sql_yacc.yy"
    {}
    break;

  case 2086:
#line 12411 "sql_yacc.yy"
    {}
    break;

  case 2087:
#line 12412 "sql_yacc.yy"
    {}
    break;

  case 2088:
#line 12413 "sql_yacc.yy"
    {}
    break;

  case 2089:
#line 12414 "sql_yacc.yy"
    {}
    break;

  case 2090:
#line 12415 "sql_yacc.yy"
    {}
    break;

  case 2091:
#line 12416 "sql_yacc.yy"
    {}
    break;

  case 2092:
#line 12417 "sql_yacc.yy"
    {}
    break;

  case 2093:
#line 12418 "sql_yacc.yy"
    {}
    break;

  case 2094:
#line 12419 "sql_yacc.yy"
    {}
    break;

  case 2095:
#line 12420 "sql_yacc.yy"
    {}
    break;

  case 2096:
#line 12421 "sql_yacc.yy"
    {}
    break;

  case 2097:
#line 12422 "sql_yacc.yy"
    {}
    break;

  case 2098:
#line 12423 "sql_yacc.yy"
    {}
    break;

  case 2099:
#line 12424 "sql_yacc.yy"
    {}
    break;

  case 2100:
#line 12425 "sql_yacc.yy"
    {}
    break;

  case 2101:
#line 12426 "sql_yacc.yy"
    {}
    break;

  case 2102:
#line 12427 "sql_yacc.yy"
    {}
    break;

  case 2103:
#line 12428 "sql_yacc.yy"
    {}
    break;

  case 2104:
#line 12429 "sql_yacc.yy"
    {}
    break;

  case 2105:
#line 12430 "sql_yacc.yy"
    {}
    break;

  case 2106:
#line 12431 "sql_yacc.yy"
    {}
    break;

  case 2107:
#line 12432 "sql_yacc.yy"
    {}
    break;

  case 2108:
#line 12433 "sql_yacc.yy"
    {}
    break;

  case 2109:
#line 12434 "sql_yacc.yy"
    {}
    break;

  case 2110:
#line 12435 "sql_yacc.yy"
    {}
    break;

  case 2111:
#line 12436 "sql_yacc.yy"
    {}
    break;

  case 2112:
#line 12437 "sql_yacc.yy"
    {}
    break;

  case 2113:
#line 12438 "sql_yacc.yy"
    {}
    break;

  case 2114:
#line 12439 "sql_yacc.yy"
    {}
    break;

  case 2115:
#line 12440 "sql_yacc.yy"
    {}
    break;

  case 2116:
#line 12441 "sql_yacc.yy"
    {}
    break;

  case 2117:
#line 12442 "sql_yacc.yy"
    {}
    break;

  case 2118:
#line 12443 "sql_yacc.yy"
    {}
    break;

  case 2119:
#line 12444 "sql_yacc.yy"
    {}
    break;

  case 2120:
#line 12445 "sql_yacc.yy"
    {}
    break;

  case 2121:
#line 12446 "sql_yacc.yy"
    {}
    break;

  case 2122:
#line 12447 "sql_yacc.yy"
    {}
    break;

  case 2123:
#line 12448 "sql_yacc.yy"
    {}
    break;

  case 2124:
#line 12449 "sql_yacc.yy"
    {}
    break;

  case 2125:
#line 12450 "sql_yacc.yy"
    {}
    break;

  case 2126:
#line 12451 "sql_yacc.yy"
    {}
    break;

  case 2127:
#line 12452 "sql_yacc.yy"
    {}
    break;

  case 2128:
#line 12453 "sql_yacc.yy"
    {}
    break;

  case 2129:
#line 12454 "sql_yacc.yy"
    {}
    break;

  case 2130:
#line 12455 "sql_yacc.yy"
    {}
    break;

  case 2131:
#line 12456 "sql_yacc.yy"
    {}
    break;

  case 2132:
#line 12457 "sql_yacc.yy"
    {}
    break;

  case 2133:
#line 12458 "sql_yacc.yy"
    {}
    break;

  case 2134:
#line 12459 "sql_yacc.yy"
    {}
    break;

  case 2135:
#line 12460 "sql_yacc.yy"
    {}
    break;

  case 2136:
#line 12461 "sql_yacc.yy"
    {}
    break;

  case 2137:
#line 12462 "sql_yacc.yy"
    {}
    break;

  case 2138:
#line 12463 "sql_yacc.yy"
    {}
    break;

  case 2139:
#line 12464 "sql_yacc.yy"
    {}
    break;

  case 2140:
#line 12465 "sql_yacc.yy"
    {}
    break;

  case 2141:
#line 12466 "sql_yacc.yy"
    {}
    break;

  case 2142:
#line 12467 "sql_yacc.yy"
    {}
    break;

  case 2143:
#line 12468 "sql_yacc.yy"
    {}
    break;

  case 2144:
#line 12469 "sql_yacc.yy"
    {}
    break;

  case 2145:
#line 12470 "sql_yacc.yy"
    {}
    break;

  case 2146:
#line 12471 "sql_yacc.yy"
    {}
    break;

  case 2147:
#line 12472 "sql_yacc.yy"
    {}
    break;

  case 2148:
#line 12473 "sql_yacc.yy"
    {}
    break;

  case 2149:
#line 12474 "sql_yacc.yy"
    {}
    break;

  case 2150:
#line 12475 "sql_yacc.yy"
    {}
    break;

  case 2151:
#line 12476 "sql_yacc.yy"
    {}
    break;

  case 2152:
#line 12483 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2153:
#line 12493 "sql_yacc.yy"
    {}
    break;

  case 2154:
#line 12497 "sql_yacc.yy"
    {}
    break;

  case 2155:
#line 12498 "sql_yacc.yy"
    {}
    break;

  case 2158:
#line 12507 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2159:
#line 12538 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2160:
#line 12589 "sql_yacc.yy"
    {}
    break;

  case 2161:
#line 12590 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2162:
#line 12591 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2163:
#line 12592 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2164:
#line 12596 "sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2165:
#line 12597 "sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2166:
#line 12601 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2167:
#line 12602 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2168:
#line 12603 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2169:
#line 12604 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2170:
#line 12608 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2171:
#line 12609 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2172:
#line 12610 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2173:
#line 12611 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2176:
#line 12621 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2177:
#line 12663 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2178:
#line 12682 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2179:
#line 12693 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2180:
#line 12706 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2181:
#line 12720 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2182:
#line 12735 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2183:
#line 12754 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->priv_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2184:
#line 12781 "sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2185:
#line 12794 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2186:
#line 12821 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2187:
#line 12864 "sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2188:
#line 12877 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2189:
#line 12878 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2190:
#line 12879 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2191:
#line 12880 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2192:
#line 12884 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2193:
#line 12886 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2194:
#line 12895 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2195:
#line 12906 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2196:
#line 12907 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2197:
#line 12909 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2198:
#line 12915 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2199:
#line 12921 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2200:
#line 12932 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2201:
#line 12943 "sql_yacc.yy"
    {}
    break;

  case 2206:
#line 12958 "sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type))
              MYSQL_YYABORT;
            /* If table is to be write locked, protect from a impending GRL. */
            if (lock_type >= TL_WRITE_ALLOW_WRITE)
              Lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 2207:
#line 12969 "sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2208:
#line 12970 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2209:
#line 12971 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2210:
#line 12972 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2211:
#line 12977 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2212:
#line 12988 "sql_yacc.yy"
    {}
    break;

  case 2213:
#line 12997 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2214:
#line 13009 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2215:
#line 13021 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2216:
#line 13040 "sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
          }
    break;

  case 2217:
#line 13046 "sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2218:
#line 13047 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2219:
#line 13051 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2220:
#line 13052 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2221:
#line 13056 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2222:
#line 13057 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2223:
#line 13058 "sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2224:
#line 13059 "sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2225:
#line 13061 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2226:
#line 13069 "sql_yacc.yy"
    {}
    break;

  case 2227:
#line 13073 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2228:
#line 13074 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2229:
#line 13075 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2230:
#line 13076 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2231:
#line 13077 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2232:
#line 13084 "sql_yacc.yy"
    {}
    break;

  case 2233:
#line 13089 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2234:
#line 13095 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2235:
#line 13106 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2236:
#line 13117 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2237:
#line 13124 "sql_yacc.yy"
    {}
    break;

  case 2238:
#line 13130 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2239:
#line 13137 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2240:
#line 13149 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2243:
#line 13167 "sql_yacc.yy"
    {}
    break;

  case 2244:
#line 13169 "sql_yacc.yy"
    {
            Lex->all_privileges= 1;
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2249:
#line 13187 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2250:
#line 13188 "sql_yacc.yy"
    {}
    break;

  case 2251:
#line 13190 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2252:
#line 13191 "sql_yacc.yy"
    {}
    break;

  case 2253:
#line 13193 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2254:
#line 13194 "sql_yacc.yy"
    {}
    break;

  case 2255:
#line 13196 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2256:
#line 13197 "sql_yacc.yy"
    {}
    break;

  case 2257:
#line 13198 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2258:
#line 13199 "sql_yacc.yy"
    {}
    break;

  case 2259:
#line 13200 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2260:
#line 13201 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2261:
#line 13202 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2262:
#line 13203 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2263:
#line 13204 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2264:
#line 13205 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2265:
#line 13206 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2266:
#line 13207 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2267:
#line 13208 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2268:
#line 13209 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2269:
#line 13210 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2270:
#line 13211 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2271:
#line 13212 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2272:
#line 13213 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2273:
#line 13214 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2274:
#line 13215 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2275:
#line 13216 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2276:
#line 13217 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2277:
#line 13218 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2278:
#line 13219 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2279:
#line 13220 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2280:
#line 13221 "sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2281:
#line 13222 "sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2282:
#line 13226 "sql_yacc.yy"
    {}
    break;

  case 2283:
#line 13227 "sql_yacc.yy"
    {}
    break;

  case 2286:
#line 13237 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2287:
#line 13247 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2288:
#line 13257 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2289:
#line 13270 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2290:
#line 13285 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2291:
#line 13298 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2292:
#line 13311 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2293:
#line 13323 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2294:
#line 13328 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2295:
#line 13336 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2296:
#line 13341 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2297:
#line 13349 "sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff=
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff=
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2298:
#line 13376 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); }
    break;

  case 2299:
#line 13378 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2300:
#line 13383 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2304:
#line 13397 "sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2306:
#line 13426 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2307:
#line 13430 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2308:
#line 13434 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2309:
#line 13438 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2310:
#line 13444 "sql_yacc.yy"
    {}
    break;

  case 2312:
#line 13449 "sql_yacc.yy"
    {}
    break;

  case 2313:
#line 13450 "sql_yacc.yy"
    {}
    break;

  case 2314:
#line 13454 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2315:
#line 13456 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2316:
#line 13462 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2317:
#line 13468 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2318:
#line 13474 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2319:
#line 13483 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2320:
#line 13488 "sql_yacc.yy"
    {}
    break;

  case 2321:
#line 13492 "sql_yacc.yy"
    {}
    break;

  case 2322:
#line 13493 "sql_yacc.yy"
    {}
    break;

  case 2323:
#line 13498 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 1); }
    break;

  case 2324:
#line 13499 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2325:
#line 13500 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2326:
#line 13505 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 2); }
    break;

  case 2327:
#line 13506 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2328:
#line 13507 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2329:
#line 13511 "sql_yacc.yy"
    {}
    break;

  case 2330:
#line 13512 "sql_yacc.yy"
    {}
    break;

  case 2331:
#line 13517 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            lex->tx_chain= (yyvsp[(3) - (4)].num);
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2332:
#line 13527 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            lex->tx_chain= (yyvsp[(3) - (4)].num);
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2333:
#line 13535 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2334:
#line 13544 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2335:
#line 13553 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2336:
#line 13566 "sql_yacc.yy"
    {}
    break;

  case 2338:
#line 13572 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result &&
               (lex->result->get_nest_level() == -1 ||
                lex->result->get_nest_level() == lex->nest_level))
              {
                /*
                   Only the last SELECT can have INTO unless the INTO and UNION
                   are at different nest levels. In version 5.1 and above, INTO
                   will onle be allowed at top level.
                */
                my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
                MYSQL_YYABORT;
              }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* This counter shouldn't be incremented for UNION parts */
            Lex->nest_level--;
            if (mysql_new_select(lex, 0))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage=UNION_TYPE;
            if ((yyvsp[(2) - (2)].num)) /* UNION DISTINCT - remember position */
              lex->current_select->master_unit()->union_distinct=
                lex->current_select;
          }
    break;

  case 2339:
#line 13602 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2340:
#line 13612 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2341:
#line 13613 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2342:
#line 13614 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2343:
#line 13618 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2344:
#line 13634 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2347:
#line 13647 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2348:
#line 13648 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2349:
#line 13649 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2350:
#line 13653 "sql_yacc.yy"
    {
          (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
        }
    break;

  case 2351:
#line 13660 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (5)].select_lex);
        }
    break;

  case 2352:
#line 13665 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (6)].select_lex);
        }
    break;

  case 2353:
#line 13670 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union
              after the parenthesis, e.g.
              (SELECT .. ) UNION ...  becomes
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2354:
#line 13691 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            /*
              Set the required lock level for the tables associated with the
              current sub-select. This will overwrite previous lock options set
              using st_select_lex::add_table_to_list in any of the following
              rules: single_multi, table_wild_one, load_data, table_alias_ref,
              table_factor.
              The default lock level is TL_READ_DEFAULT but it can be modified
              with query options specific for a certain (sub-)SELECT.
            */
            lex->current_select->
              set_lock_for_tables(lex->current_select->lock_option);

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2355:
#line 13727 "sql_yacc.yy"
    {}
    break;

  case 2356:
#line 13729 "sql_yacc.yy"
    {}
    break;

  case 2357:
#line 13731 "sql_yacc.yy"
    {}
    break;

  case 2371:
#line 13764 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2372:
#line 13778 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2373:
#line 13791 "sql_yacc.yy"
    {}
    break;

  case 2374:
#line 13793 "sql_yacc.yy"
    {}
    break;

  case 2375:
#line 13795 "sql_yacc.yy"
    {}
    break;

  case 2376:
#line 13800 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2377:
#line 13805 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2378:
#line 13807 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2379:
#line 13809 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2380:
#line 13814 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2381:
#line 13816 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2382:
#line 13818 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2383:
#line 13823 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 2385:
#line 13836 "sql_yacc.yy"
    {}
    break;

  case 2387:
#line 13842 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2388:
#line 13847 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2389:
#line 13854 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2390:
#line 13863 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2393:
#line 13885 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2394:
#line 13887 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2395:
#line 13889 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2396:
#line 13891 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2397:
#line 13908 "sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2398:
#line 13914 "sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2399:
#line 13919 "sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2400:
#line 13949 "sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 2401:
#line 13982 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2402:
#line 14000 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2403:
#line 14023 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2404:
#line 14055 "sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2405:
#line 14059 "sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2406:
#line 14067 "sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2407:
#line 14090 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2408:
#line 14099 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2409:
#line 14155 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2410:
#line 14179 "sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2411:
#line 14188 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2412:
#line 14196 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2413:
#line 14204 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2414:
#line 14218 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2415:
#line 14222 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2416:
#line 14226 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2417:
#line 14230 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2418:
#line 14234 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2419:
#line 14238 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2420:
#line 14245 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2421:
#line 14252 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2422:
#line 14259 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2423:
#line 14268 "sql_yacc.yy"
    {}
    break;

  case 2424:
#line 14269 "sql_yacc.yy"
    {}
    break;

  case 2425:
#line 14273 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2426:
#line 14274 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2427:
#line 14275 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2428:
#line 14279 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2429:
#line 14280 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2430:
#line 14285 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2431:
#line 14287 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2433:
#line 14292 "sql_yacc.yy"
    {}
    break;

  case 2434:
#line 14293 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2435:
#line 14298 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2436:
#line 14308 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;


/* Line 1267 of yacc.c.  */
#line 33435 "sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



