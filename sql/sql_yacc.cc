
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 33 "sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().

** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "mysql_priv.h"
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "item_create_window_function.h"
#include "item_window_function.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

const LEX_STRING null_lex_str= {0,0};

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  /* Push an error into the error stack */
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  (yytext ? yytext : ""),
                  lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == &sys_autocommit)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}


static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}


static bool add_create_index (LEX *lex, Key::Keytype type, const char *name, 
  KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Line 189 of yacc.c  */
#line 691 "sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CHAIN_SYM = 309,
     CHANGE = 310,
     CHANGED = 311,
     CHARSET = 312,
     CHAR_SYM = 313,
     CHECKSUM_SYM = 314,
     CHECK_SYM = 315,
     CIPHER_SYM = 316,
     CLIENT_SYM = 317,
     CLOSE_SYM = 318,
     COALESCE = 319,
     CODE_SYM = 320,
     COLLATE_SYM = 321,
     COLLATION_SYM = 322,
     COLUMNS = 323,
     COLUMN_SYM = 324,
     COMMENT_SYM = 325,
     COMMITTED_SYM = 326,
     COMMIT_SYM = 327,
     COMPACT_SYM = 328,
     COMPLETION_SYM = 329,
     COMPRESSED_SYM = 330,
     CONCURRENT = 331,
     CONDITION_SYM = 332,
     CONNECTION_SYM = 333,
     CONSISTENT_SYM = 334,
     CONSTRAINT = 335,
     CONTAINS_SYM = 336,
     CONTEXT_SYM = 337,
     CONTINUE_SYM = 338,
     CONTRIBUTORS_SYM = 339,
     CONVERT_SYM = 340,
     COUNT_SYM = 341,
     CPU_SYM = 342,
     CREATE = 343,
     CROSS = 344,
     CUBE_SYM = 345,
     CURDATE = 346,
     CURRENT_SYM = 347,
     CURRENT_USER = 348,
     CURSOR_SYM = 349,
     CURTIME = 350,
     DATABASE = 351,
     DATABASES = 352,
     DATAFILE_SYM = 353,
     DATA_SYM = 354,
     DATETIME = 355,
     DATE_ADD_INTERVAL = 356,
     DATE_SUB_INTERVAL = 357,
     DATE_SYM = 358,
     DAY_HOUR_SYM = 359,
     DAY_MICROSECOND_SYM = 360,
     DAY_MINUTE_SYM = 361,
     DAY_SECOND_SYM = 362,
     DAY_SYM = 363,
     DEALLOCATE_SYM = 364,
     DECIMAL_NUM = 365,
     DECIMAL_SYM = 366,
     DECLARE_SYM = 367,
     DEFAULT = 368,
     DEFINER_SYM = 369,
     DELAYED_SYM = 370,
     DELAY_KEY_WRITE_SYM = 371,
     DELETE_SYM = 372,
     DESC = 373,
     DESCRIBE = 374,
     DES_KEY_FILE = 375,
     DETERMINISTIC_SYM = 376,
     DIRECTORY_SYM = 377,
     DISABLE_SYM = 378,
     DISCARD = 379,
     DISK_SYM = 380,
     DISTINCT = 381,
     DIV_SYM = 382,
     DOUBLE_SYM = 383,
     DO_SYM = 384,
     DROP = 385,
     DUAL_SYM = 386,
     DUMPFILE = 387,
     DUPLICATE_SYM = 388,
     DYNAMIC_SYM = 389,
     EACH_SYM = 390,
     ELSE = 391,
     ELSEIF_SYM = 392,
     ENABLE_SYM = 393,
     ENCLOSED = 394,
     END = 395,
     ENDS_SYM = 396,
     END_OF_INPUT = 397,
     ENGINES_SYM = 398,
     ENGINE_SYM = 399,
     ENUM = 400,
     EQ = 401,
     EQUAL_SYM = 402,
     ERRORS = 403,
     ESCAPED = 404,
     ESCAPE_SYM = 405,
     EVENTS_SYM = 406,
     EVENT_SYM = 407,
     EVERY_SYM = 408,
     EXECUTE_SYM = 409,
     EXISTS = 410,
     EXIT_SYM = 411,
     EXPANSION_SYM = 412,
     EXTENDED_SYM = 413,
     EXTENT_SIZE_SYM = 414,
     EXTRACT_SYM = 415,
     FALSE_SYM = 416,
     FAST_SYM = 417,
     FAULTS_SYM = 418,
     FETCH_SYM = 419,
     FILE_SYM = 420,
     FIRST_SYM = 421,
     FIXED_SYM = 422,
     FLOAT_NUM = 423,
     FLOAT_SYM = 424,
     FLUSH_SYM = 425,
     FOLLOWING_SYM = 426,
     FORCE_SYM = 427,
     FOREIGN = 428,
     FOR_SYM = 429,
     FOUND_SYM = 430,
     FRAC_SECOND_SYM = 431,
     FROM = 432,
     FULL = 433,
     FULLTEXT_SYM = 434,
     FUNCTION_SYM = 435,
     GE = 436,
     GEOMETRYCOLLECTION = 437,
     GEOMETRY_SYM = 438,
     GET_FORMAT = 439,
     GLOBAL_SYM = 440,
     GRANT = 441,
     GRANTS = 442,
     GROUP_SYM = 443,
     GROUP_CONCAT_SYM = 444,
     GT_SYM = 445,
     HANDLER_SYM = 446,
     HASH_SYM = 447,
     HAVING = 448,
     HELP_SYM = 449,
     HEX_NUM = 450,
     HIGH_PRIORITY = 451,
     HOST_SYM = 452,
     HOSTS_SYM = 453,
     HOUR_MICROSECOND_SYM = 454,
     HOUR_MINUTE_SYM = 455,
     HOUR_SECOND_SYM = 456,
     HOUR_SYM = 457,
     IDENT = 458,
     IDENTIFIED_SYM = 459,
     IDENT_QUOTED = 460,
     IF = 461,
     IGNORE_SYM = 462,
     IMPORT = 463,
     INDEXES = 464,
     INDEX_SYM = 465,
     INFILE = 466,
     INITIAL_SIZE_SYM = 467,
     INNER_SYM = 468,
     INNOBASE_SYM = 469,
     INOUT_SYM = 470,
     INSENSITIVE_SYM = 471,
     INSERT = 472,
     INSERT_METHOD = 473,
     INSTALL_SYM = 474,
     INTERVAL_SYM = 475,
     INTO = 476,
     INT_SYM = 477,
     INVOKER_SYM = 478,
     IN_SYM = 479,
     IO_SYM = 480,
     IPC_SYM = 481,
     IS = 482,
     ISOLATION = 483,
     ISSUER_SYM = 484,
     ITERATE_SYM = 485,
     JOIN_SYM = 486,
     KEYS = 487,
     KEY_BLOCK_SIZE = 488,
     KEY_SYM = 489,
     KILL_SYM = 490,
     LANGUAGE_SYM = 491,
     LAST_SYM = 492,
     LE = 493,
     LEADING = 494,
     LEAVES = 495,
     LEAVE_SYM = 496,
     LEFT = 497,
     LESS_SYM = 498,
     LEVEL_SYM = 499,
     LEX_HOSTNAME = 500,
     LIKE = 501,
     LIMIT = 502,
     LINEAR_SYM = 503,
     LINES = 504,
     LINESTRING = 505,
     LIST_SYM = 506,
     LOAD = 507,
     LOCAL_SYM = 508,
     LOCATOR_SYM = 509,
     LOCKS_SYM = 510,
     LOCK_SYM = 511,
     LOGFILE_SYM = 512,
     LOGS_SYM = 513,
     LONGBLOB = 514,
     LONGTEXT = 515,
     LONG_NUM = 516,
     LONG_SYM = 517,
     LOOP_SYM = 518,
     LOW_PRIORITY = 519,
     LT = 520,
     MASTER_CONNECT_RETRY_SYM = 521,
     MASTER_HOST_SYM = 522,
     MASTER_LOG_FILE_SYM = 523,
     MASTER_LOG_POS_SYM = 524,
     MASTER_PASSWORD_SYM = 525,
     MASTER_PORT_SYM = 526,
     MASTER_SERVER_ID_SYM = 527,
     MASTER_SSL_CAPATH_SYM = 528,
     MASTER_SSL_CA_SYM = 529,
     MASTER_SSL_CERT_SYM = 530,
     MASTER_SSL_CIPHER_SYM = 531,
     MASTER_SSL_KEY_SYM = 532,
     MASTER_SSL_SYM = 533,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 534,
     MASTER_SYM = 535,
     MASTER_USER_SYM = 536,
     MATCH = 537,
     MAX_CONNECTIONS_PER_HOUR = 538,
     MAX_QUERIES_PER_HOUR = 539,
     MAX_ROWS = 540,
     MAX_SIZE_SYM = 541,
     MAX_SYM = 542,
     MAX_UPDATES_PER_HOUR = 543,
     MAX_USER_CONNECTIONS_SYM = 544,
     MAX_VALUE_SYM = 545,
     MEDIUMBLOB = 546,
     MEDIUMINT = 547,
     MEDIUMTEXT = 548,
     MEDIUM_SYM = 549,
     MEMORY_SYM = 550,
     MERGE_SYM = 551,
     MICROSECOND_SYM = 552,
     MIGRATE_SYM = 553,
     MINUTE_MICROSECOND_SYM = 554,
     MINUTE_SECOND_SYM = 555,
     MINUTE_SYM = 556,
     MIN_ROWS = 557,
     MIN_SYM = 558,
     MODE_SYM = 559,
     MODIFIES_SYM = 560,
     MODIFY_SYM = 561,
     MOD_SYM = 562,
     MONTH_SYM = 563,
     MULTILINESTRING = 564,
     MULTIPOINT = 565,
     MULTIPOLYGON = 566,
     MUTEX_SYM = 567,
     NAMES_SYM = 568,
     NAME_SYM = 569,
     NATIONAL_SYM = 570,
     NATURAL = 571,
     NCHAR_STRING = 572,
     NCHAR_SYM = 573,
     NDBCLUSTER_SYM = 574,
     NE = 575,
     NEG = 576,
     NEW_SYM = 577,
     NEXT_SYM = 578,
     NODEGROUP_SYM = 579,
     NONE_SYM = 580,
     NOT2_SYM = 581,
     NOT_SYM = 582,
     NOW_SYM = 583,
     NO_SYM = 584,
     NO_WAIT_SYM = 585,
     NO_WRITE_TO_BINLOG = 586,
     NTH_VALUE_SYM = 587,
     NULL_SYM = 588,
     NULLS_SYM = 589,
     NUM = 590,
     NUMERIC_SYM = 591,
     NVARCHAR_SYM = 592,
     OFFSET_SYM = 593,
     OLD_PASSWORD = 594,
     ON = 595,
     ONE_SHOT_SYM = 596,
     ONE_SYM = 597,
     OPEN_SYM = 598,
     OPTIMIZE = 599,
     OPTIONS_SYM = 600,
     OPTION = 601,
     OPTIONALLY = 602,
     OR2_SYM = 603,
     ORDER_SYM = 604,
     OR_OR_SYM = 605,
     OR_SYM = 606,
     OUTER = 607,
     OUTFILE = 608,
     OUT_SYM = 609,
     OVER_SYM = 610,
     OWNER_SYM = 611,
     PACK_KEYS_SYM = 612,
     PAGE_SYM = 613,
     PARAM_MARKER = 614,
     PARSER_SYM = 615,
     PARTIAL = 616,
     PARTITIONING_SYM = 617,
     PARTITIONS_SYM = 618,
     PARTITION_SYM = 619,
     PASSWORD = 620,
     PERCENTILE_CONT_SYM = 621,
     PERCENTILE_DISC_SYM = 622,
     PHASE_SYM = 623,
     PLUGINS_SYM = 624,
     PLUGIN_SYM = 625,
     POINT_SYM = 626,
     POLYGON = 627,
     PORT_SYM = 628,
     POSITION_SYM = 629,
     PRECEDING_SYM = 630,
     PRECISION = 631,
     PREPARE_SYM = 632,
     PRESERVE_SYM = 633,
     PREV_SYM = 634,
     PRIMARY_SYM = 635,
     PRIVILEGES = 636,
     PROCEDURE = 637,
     PROCESS = 638,
     PROCESSLIST_SYM = 639,
     PROFILE_SYM = 640,
     PROFILES_SYM = 641,
     PURGE = 642,
     QUARTER_SYM = 643,
     QUERY_SYM = 644,
     QUICK = 645,
     RANGE_SYM = 646,
     READS_SYM = 647,
     READ_ONLY_SYM = 648,
     READ_SYM = 649,
     READ_WRITE_SYM = 650,
     REAL = 651,
     REBUILD_SYM = 652,
     RECOVER_SYM = 653,
     REDOFILE_SYM = 654,
     REDO_BUFFER_SIZE_SYM = 655,
     REDUNDANT_SYM = 656,
     REFERENCES = 657,
     REGEXP = 658,
     RELAY_LOG_FILE_SYM = 659,
     RELAY_LOG_POS_SYM = 660,
     RELAY_THREAD = 661,
     RELEASE_SYM = 662,
     RELOAD = 663,
     REMOVE_SYM = 664,
     RENAME = 665,
     REORGANIZE_SYM = 666,
     REPAIR = 667,
     REPEATABLE_SYM = 668,
     REPEAT_SYM = 669,
     REPLACE = 670,
     REPLICATION = 671,
     REQUIRE_SYM = 672,
     RESET_SYM = 673,
     RESOURCES = 674,
     RESPECT_SYM = 675,
     RESTORE_SYM = 676,
     RESTRICT = 677,
     RESUME_SYM = 678,
     RETURNS_SYM = 679,
     RETURN_SYM = 680,
     REVOKE = 681,
     RIGHT = 682,
     ROLLBACK_SYM = 683,
     ROLLUP_SYM = 684,
     ROUTINE_SYM = 685,
     ROWS_SYM = 686,
     ROW_FORMAT_SYM = 687,
     ROW_SYM = 688,
     RTREE_SYM = 689,
     SAVEPOINT_SYM = 690,
     SCHEDULE_SYM = 691,
     SECOND_MICROSECOND_SYM = 692,
     SECOND_SYM = 693,
     SECURITY_SYM = 694,
     SELECT_SYM = 695,
     SENSITIVE_SYM = 696,
     SEPARATOR_SYM = 697,
     SERIALIZABLE_SYM = 698,
     SERIAL_SYM = 699,
     SESSION_SYM = 700,
     SERVER_SYM = 701,
     SERVER_OPTIONS = 702,
     SET = 703,
     SET_VAR = 704,
     SHARE_SYM = 705,
     SHIFT_LEFT = 706,
     SHIFT_RIGHT = 707,
     SHOW = 708,
     SHUTDOWN = 709,
     SIGNED_SYM = 710,
     SIMPLE_SYM = 711,
     SLAVE = 712,
     SMALLINT = 713,
     SNAPSHOT_SYM = 714,
     SOCKET_SYM = 715,
     SONAME_SYM = 716,
     SOUNDS_SYM = 717,
     SOURCE_SYM = 718,
     SPATIAL_SYM = 719,
     SPECIFIC_SYM = 720,
     SQLEXCEPTION_SYM = 721,
     SQLSTATE_SYM = 722,
     SQLWARNING_SYM = 723,
     SQL_BIG_RESULT = 724,
     SQL_BUFFER_RESULT = 725,
     SQL_CACHE_SYM = 726,
     SQL_CALC_FOUND_ROWS = 727,
     SQL_NO_CACHE_SYM = 728,
     INFINIDB_ORDERED_SYM = 729,
     SQL_SMALL_RESULT = 730,
     SQL_SYM = 731,
     SQL_THREAD = 732,
     SSL_SYM = 733,
     STARTING = 734,
     STARTS_SYM = 735,
     START_SYM = 736,
     STATUS_SYM = 737,
     STDDEV_SAMP_SYM = 738,
     STD_SYM = 739,
     STOP_SYM = 740,
     STORAGE_SYM = 741,
     STRAIGHT_JOIN = 742,
     STRING_SYM = 743,
     SUBDATE_SYM = 744,
     SUBJECT_SYM = 745,
     SUBPARTITIONS_SYM = 746,
     SUBPARTITION_SYM = 747,
     SUBSTRING = 748,
     SUM_SYM = 749,
     SUPER_SYM = 750,
     SUSPEND_SYM = 751,
     SWAPS_SYM = 752,
     SWITCHES_SYM = 753,
     SYSDATE = 754,
     TABLES = 755,
     TABLESPACE = 756,
     TABLE_REF_PRIORITY = 757,
     TABLE_SYM = 758,
     TABLE_CHECKSUM_SYM = 759,
     TEMPORARY = 760,
     TEMPTABLE_SYM = 761,
     TERMINATED = 762,
     TEXT_STRING = 763,
     TEXT_SYM = 764,
     THAN_SYM = 765,
     THEN_SYM = 766,
     TIMESTAMP = 767,
     TIMESTAMP_ADD = 768,
     TIMESTAMP_DIFF = 769,
     TIME_SYM = 770,
     TINYBLOB = 771,
     TINYINT = 772,
     TINYTEXT = 773,
     TO_SYM = 774,
     TRAILING = 775,
     TRANSACTION_SYM = 776,
     TRIGGERS_SYM = 777,
     TRIGGER_SYM = 778,
     TRIM = 779,
     TRUE_SYM = 780,
     TRUNCATE_SYM = 781,
     TYPES_SYM = 782,
     TYPE_SYM = 783,
     UDF_RETURNS_SYM = 784,
     ULONGLONG_NUM = 785,
     UNBOUNDED_SYM = 786,
     UNCOMMITTED_SYM = 787,
     UNDEFINED_SYM = 788,
     UNDERSCORE_CHARSET = 789,
     UNDOFILE_SYM = 790,
     UNDO_BUFFER_SIZE_SYM = 791,
     UNDO_SYM = 792,
     UNICODE_SYM = 793,
     UNINSTALL_SYM = 794,
     UNION_SYM = 795,
     UNIQUE_SYM = 796,
     UNKNOWN_SYM = 797,
     UNLOCK_SYM = 798,
     UNSIGNED = 799,
     UNTIL_SYM = 800,
     UPDATE_SYM = 801,
     UPGRADE_SYM = 802,
     USAGE = 803,
     USER = 804,
     USE_FRM = 805,
     USE_SYM = 806,
     USING = 807,
     UTC_DATE_SYM = 808,
     UTC_TIMESTAMP_SYM = 809,
     UTC_TIME_SYM = 810,
     VALUES = 811,
     VALUE_SYM = 812,
     VARBINARY = 813,
     VARCHAR = 814,
     VARIABLES = 815,
     VARIANCE_SYM = 816,
     VARYING = 817,
     VAR_SAMP_SYM = 818,
     VIEW_SYM = 819,
     WAIT_SYM = 820,
     WARNINGS = 821,
     WEEK_SYM = 822,
     WHEN_SYM = 823,
     WHERE = 824,
     WHILE_SYM = 825,
     WITH = 826,
     WITHIN = 827,
     WORK_SYM = 828,
     WRAPPER_SYM = 829,
     WRITE_SYM = 830,
     X509_SYM = 831,
     XA_SYM = 832,
     XOR = 833,
     YEAR_MONTH_SYM = 834,
     YEAR_SYM = 835,
     ZEROFILL = 836
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CHAIN_SYM 309
#define CHANGE 310
#define CHANGED 311
#define CHARSET 312
#define CHAR_SYM 313
#define CHECKSUM_SYM 314
#define CHECK_SYM 315
#define CIPHER_SYM 316
#define CLIENT_SYM 317
#define CLOSE_SYM 318
#define COALESCE 319
#define CODE_SYM 320
#define COLLATE_SYM 321
#define COLLATION_SYM 322
#define COLUMNS 323
#define COLUMN_SYM 324
#define COMMENT_SYM 325
#define COMMITTED_SYM 326
#define COMMIT_SYM 327
#define COMPACT_SYM 328
#define COMPLETION_SYM 329
#define COMPRESSED_SYM 330
#define CONCURRENT 331
#define CONDITION_SYM 332
#define CONNECTION_SYM 333
#define CONSISTENT_SYM 334
#define CONSTRAINT 335
#define CONTAINS_SYM 336
#define CONTEXT_SYM 337
#define CONTINUE_SYM 338
#define CONTRIBUTORS_SYM 339
#define CONVERT_SYM 340
#define COUNT_SYM 341
#define CPU_SYM 342
#define CREATE 343
#define CROSS 344
#define CUBE_SYM 345
#define CURDATE 346
#define CURRENT_SYM 347
#define CURRENT_USER 348
#define CURSOR_SYM 349
#define CURTIME 350
#define DATABASE 351
#define DATABASES 352
#define DATAFILE_SYM 353
#define DATA_SYM 354
#define DATETIME 355
#define DATE_ADD_INTERVAL 356
#define DATE_SUB_INTERVAL 357
#define DATE_SYM 358
#define DAY_HOUR_SYM 359
#define DAY_MICROSECOND_SYM 360
#define DAY_MINUTE_SYM 361
#define DAY_SECOND_SYM 362
#define DAY_SYM 363
#define DEALLOCATE_SYM 364
#define DECIMAL_NUM 365
#define DECIMAL_SYM 366
#define DECLARE_SYM 367
#define DEFAULT 368
#define DEFINER_SYM 369
#define DELAYED_SYM 370
#define DELAY_KEY_WRITE_SYM 371
#define DELETE_SYM 372
#define DESC 373
#define DESCRIBE 374
#define DES_KEY_FILE 375
#define DETERMINISTIC_SYM 376
#define DIRECTORY_SYM 377
#define DISABLE_SYM 378
#define DISCARD 379
#define DISK_SYM 380
#define DISTINCT 381
#define DIV_SYM 382
#define DOUBLE_SYM 383
#define DO_SYM 384
#define DROP 385
#define DUAL_SYM 386
#define DUMPFILE 387
#define DUPLICATE_SYM 388
#define DYNAMIC_SYM 389
#define EACH_SYM 390
#define ELSE 391
#define ELSEIF_SYM 392
#define ENABLE_SYM 393
#define ENCLOSED 394
#define END 395
#define ENDS_SYM 396
#define END_OF_INPUT 397
#define ENGINES_SYM 398
#define ENGINE_SYM 399
#define ENUM 400
#define EQ 401
#define EQUAL_SYM 402
#define ERRORS 403
#define ESCAPED 404
#define ESCAPE_SYM 405
#define EVENTS_SYM 406
#define EVENT_SYM 407
#define EVERY_SYM 408
#define EXECUTE_SYM 409
#define EXISTS 410
#define EXIT_SYM 411
#define EXPANSION_SYM 412
#define EXTENDED_SYM 413
#define EXTENT_SIZE_SYM 414
#define EXTRACT_SYM 415
#define FALSE_SYM 416
#define FAST_SYM 417
#define FAULTS_SYM 418
#define FETCH_SYM 419
#define FILE_SYM 420
#define FIRST_SYM 421
#define FIXED_SYM 422
#define FLOAT_NUM 423
#define FLOAT_SYM 424
#define FLUSH_SYM 425
#define FOLLOWING_SYM 426
#define FORCE_SYM 427
#define FOREIGN 428
#define FOR_SYM 429
#define FOUND_SYM 430
#define FRAC_SECOND_SYM 431
#define FROM 432
#define FULL 433
#define FULLTEXT_SYM 434
#define FUNCTION_SYM 435
#define GE 436
#define GEOMETRYCOLLECTION 437
#define GEOMETRY_SYM 438
#define GET_FORMAT 439
#define GLOBAL_SYM 440
#define GRANT 441
#define GRANTS 442
#define GROUP_SYM 443
#define GROUP_CONCAT_SYM 444
#define GT_SYM 445
#define HANDLER_SYM 446
#define HASH_SYM 447
#define HAVING 448
#define HELP_SYM 449
#define HEX_NUM 450
#define HIGH_PRIORITY 451
#define HOST_SYM 452
#define HOSTS_SYM 453
#define HOUR_MICROSECOND_SYM 454
#define HOUR_MINUTE_SYM 455
#define HOUR_SECOND_SYM 456
#define HOUR_SYM 457
#define IDENT 458
#define IDENTIFIED_SYM 459
#define IDENT_QUOTED 460
#define IF 461
#define IGNORE_SYM 462
#define IMPORT 463
#define INDEXES 464
#define INDEX_SYM 465
#define INFILE 466
#define INITIAL_SIZE_SYM 467
#define INNER_SYM 468
#define INNOBASE_SYM 469
#define INOUT_SYM 470
#define INSENSITIVE_SYM 471
#define INSERT 472
#define INSERT_METHOD 473
#define INSTALL_SYM 474
#define INTERVAL_SYM 475
#define INTO 476
#define INT_SYM 477
#define INVOKER_SYM 478
#define IN_SYM 479
#define IO_SYM 480
#define IPC_SYM 481
#define IS 482
#define ISOLATION 483
#define ISSUER_SYM 484
#define ITERATE_SYM 485
#define JOIN_SYM 486
#define KEYS 487
#define KEY_BLOCK_SIZE 488
#define KEY_SYM 489
#define KILL_SYM 490
#define LANGUAGE_SYM 491
#define LAST_SYM 492
#define LE 493
#define LEADING 494
#define LEAVES 495
#define LEAVE_SYM 496
#define LEFT 497
#define LESS_SYM 498
#define LEVEL_SYM 499
#define LEX_HOSTNAME 500
#define LIKE 501
#define LIMIT 502
#define LINEAR_SYM 503
#define LINES 504
#define LINESTRING 505
#define LIST_SYM 506
#define LOAD 507
#define LOCAL_SYM 508
#define LOCATOR_SYM 509
#define LOCKS_SYM 510
#define LOCK_SYM 511
#define LOGFILE_SYM 512
#define LOGS_SYM 513
#define LONGBLOB 514
#define LONGTEXT 515
#define LONG_NUM 516
#define LONG_SYM 517
#define LOOP_SYM 518
#define LOW_PRIORITY 519
#define LT 520
#define MASTER_CONNECT_RETRY_SYM 521
#define MASTER_HOST_SYM 522
#define MASTER_LOG_FILE_SYM 523
#define MASTER_LOG_POS_SYM 524
#define MASTER_PASSWORD_SYM 525
#define MASTER_PORT_SYM 526
#define MASTER_SERVER_ID_SYM 527
#define MASTER_SSL_CAPATH_SYM 528
#define MASTER_SSL_CA_SYM 529
#define MASTER_SSL_CERT_SYM 530
#define MASTER_SSL_CIPHER_SYM 531
#define MASTER_SSL_KEY_SYM 532
#define MASTER_SSL_SYM 533
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 534
#define MASTER_SYM 535
#define MASTER_USER_SYM 536
#define MATCH 537
#define MAX_CONNECTIONS_PER_HOUR 538
#define MAX_QUERIES_PER_HOUR 539
#define MAX_ROWS 540
#define MAX_SIZE_SYM 541
#define MAX_SYM 542
#define MAX_UPDATES_PER_HOUR 543
#define MAX_USER_CONNECTIONS_SYM 544
#define MAX_VALUE_SYM 545
#define MEDIUMBLOB 546
#define MEDIUMINT 547
#define MEDIUMTEXT 548
#define MEDIUM_SYM 549
#define MEMORY_SYM 550
#define MERGE_SYM 551
#define MICROSECOND_SYM 552
#define MIGRATE_SYM 553
#define MINUTE_MICROSECOND_SYM 554
#define MINUTE_SECOND_SYM 555
#define MINUTE_SYM 556
#define MIN_ROWS 557
#define MIN_SYM 558
#define MODE_SYM 559
#define MODIFIES_SYM 560
#define MODIFY_SYM 561
#define MOD_SYM 562
#define MONTH_SYM 563
#define MULTILINESTRING 564
#define MULTIPOINT 565
#define MULTIPOLYGON 566
#define MUTEX_SYM 567
#define NAMES_SYM 568
#define NAME_SYM 569
#define NATIONAL_SYM 570
#define NATURAL 571
#define NCHAR_STRING 572
#define NCHAR_SYM 573
#define NDBCLUSTER_SYM 574
#define NE 575
#define NEG 576
#define NEW_SYM 577
#define NEXT_SYM 578
#define NODEGROUP_SYM 579
#define NONE_SYM 580
#define NOT2_SYM 581
#define NOT_SYM 582
#define NOW_SYM 583
#define NO_SYM 584
#define NO_WAIT_SYM 585
#define NO_WRITE_TO_BINLOG 586
#define NTH_VALUE_SYM 587
#define NULL_SYM 588
#define NULLS_SYM 589
#define NUM 590
#define NUMERIC_SYM 591
#define NVARCHAR_SYM 592
#define OFFSET_SYM 593
#define OLD_PASSWORD 594
#define ON 595
#define ONE_SHOT_SYM 596
#define ONE_SYM 597
#define OPEN_SYM 598
#define OPTIMIZE 599
#define OPTIONS_SYM 600
#define OPTION 601
#define OPTIONALLY 602
#define OR2_SYM 603
#define ORDER_SYM 604
#define OR_OR_SYM 605
#define OR_SYM 606
#define OUTER 607
#define OUTFILE 608
#define OUT_SYM 609
#define OVER_SYM 610
#define OWNER_SYM 611
#define PACK_KEYS_SYM 612
#define PAGE_SYM 613
#define PARAM_MARKER 614
#define PARSER_SYM 615
#define PARTIAL 616
#define PARTITIONING_SYM 617
#define PARTITIONS_SYM 618
#define PARTITION_SYM 619
#define PASSWORD 620
#define PERCENTILE_CONT_SYM 621
#define PERCENTILE_DISC_SYM 622
#define PHASE_SYM 623
#define PLUGINS_SYM 624
#define PLUGIN_SYM 625
#define POINT_SYM 626
#define POLYGON 627
#define PORT_SYM 628
#define POSITION_SYM 629
#define PRECEDING_SYM 630
#define PRECISION 631
#define PREPARE_SYM 632
#define PRESERVE_SYM 633
#define PREV_SYM 634
#define PRIMARY_SYM 635
#define PRIVILEGES 636
#define PROCEDURE 637
#define PROCESS 638
#define PROCESSLIST_SYM 639
#define PROFILE_SYM 640
#define PROFILES_SYM 641
#define PURGE 642
#define QUARTER_SYM 643
#define QUERY_SYM 644
#define QUICK 645
#define RANGE_SYM 646
#define READS_SYM 647
#define READ_ONLY_SYM 648
#define READ_SYM 649
#define READ_WRITE_SYM 650
#define REAL 651
#define REBUILD_SYM 652
#define RECOVER_SYM 653
#define REDOFILE_SYM 654
#define REDO_BUFFER_SIZE_SYM 655
#define REDUNDANT_SYM 656
#define REFERENCES 657
#define REGEXP 658
#define RELAY_LOG_FILE_SYM 659
#define RELAY_LOG_POS_SYM 660
#define RELAY_THREAD 661
#define RELEASE_SYM 662
#define RELOAD 663
#define REMOVE_SYM 664
#define RENAME 665
#define REORGANIZE_SYM 666
#define REPAIR 667
#define REPEATABLE_SYM 668
#define REPEAT_SYM 669
#define REPLACE 670
#define REPLICATION 671
#define REQUIRE_SYM 672
#define RESET_SYM 673
#define RESOURCES 674
#define RESPECT_SYM 675
#define RESTORE_SYM 676
#define RESTRICT 677
#define RESUME_SYM 678
#define RETURNS_SYM 679
#define RETURN_SYM 680
#define REVOKE 681
#define RIGHT 682
#define ROLLBACK_SYM 683
#define ROLLUP_SYM 684
#define ROUTINE_SYM 685
#define ROWS_SYM 686
#define ROW_FORMAT_SYM 687
#define ROW_SYM 688
#define RTREE_SYM 689
#define SAVEPOINT_SYM 690
#define SCHEDULE_SYM 691
#define SECOND_MICROSECOND_SYM 692
#define SECOND_SYM 693
#define SECURITY_SYM 694
#define SELECT_SYM 695
#define SENSITIVE_SYM 696
#define SEPARATOR_SYM 697
#define SERIALIZABLE_SYM 698
#define SERIAL_SYM 699
#define SESSION_SYM 700
#define SERVER_SYM 701
#define SERVER_OPTIONS 702
#define SET 703
#define SET_VAR 704
#define SHARE_SYM 705
#define SHIFT_LEFT 706
#define SHIFT_RIGHT 707
#define SHOW 708
#define SHUTDOWN 709
#define SIGNED_SYM 710
#define SIMPLE_SYM 711
#define SLAVE 712
#define SMALLINT 713
#define SNAPSHOT_SYM 714
#define SOCKET_SYM 715
#define SONAME_SYM 716
#define SOUNDS_SYM 717
#define SOURCE_SYM 718
#define SPATIAL_SYM 719
#define SPECIFIC_SYM 720
#define SQLEXCEPTION_SYM 721
#define SQLSTATE_SYM 722
#define SQLWARNING_SYM 723
#define SQL_BIG_RESULT 724
#define SQL_BUFFER_RESULT 725
#define SQL_CACHE_SYM 726
#define SQL_CALC_FOUND_ROWS 727
#define SQL_NO_CACHE_SYM 728
#define INFINIDB_ORDERED_SYM 729
#define SQL_SMALL_RESULT 730
#define SQL_SYM 731
#define SQL_THREAD 732
#define SSL_SYM 733
#define STARTING 734
#define STARTS_SYM 735
#define START_SYM 736
#define STATUS_SYM 737
#define STDDEV_SAMP_SYM 738
#define STD_SYM 739
#define STOP_SYM 740
#define STORAGE_SYM 741
#define STRAIGHT_JOIN 742
#define STRING_SYM 743
#define SUBDATE_SYM 744
#define SUBJECT_SYM 745
#define SUBPARTITIONS_SYM 746
#define SUBPARTITION_SYM 747
#define SUBSTRING 748
#define SUM_SYM 749
#define SUPER_SYM 750
#define SUSPEND_SYM 751
#define SWAPS_SYM 752
#define SWITCHES_SYM 753
#define SYSDATE 754
#define TABLES 755
#define TABLESPACE 756
#define TABLE_REF_PRIORITY 757
#define TABLE_SYM 758
#define TABLE_CHECKSUM_SYM 759
#define TEMPORARY 760
#define TEMPTABLE_SYM 761
#define TERMINATED 762
#define TEXT_STRING 763
#define TEXT_SYM 764
#define THAN_SYM 765
#define THEN_SYM 766
#define TIMESTAMP 767
#define TIMESTAMP_ADD 768
#define TIMESTAMP_DIFF 769
#define TIME_SYM 770
#define TINYBLOB 771
#define TINYINT 772
#define TINYTEXT 773
#define TO_SYM 774
#define TRAILING 775
#define TRANSACTION_SYM 776
#define TRIGGERS_SYM 777
#define TRIGGER_SYM 778
#define TRIM 779
#define TRUE_SYM 780
#define TRUNCATE_SYM 781
#define TYPES_SYM 782
#define TYPE_SYM 783
#define UDF_RETURNS_SYM 784
#define ULONGLONG_NUM 785
#define UNBOUNDED_SYM 786
#define UNCOMMITTED_SYM 787
#define UNDEFINED_SYM 788
#define UNDERSCORE_CHARSET 789
#define UNDOFILE_SYM 790
#define UNDO_BUFFER_SIZE_SYM 791
#define UNDO_SYM 792
#define UNICODE_SYM 793
#define UNINSTALL_SYM 794
#define UNION_SYM 795
#define UNIQUE_SYM 796
#define UNKNOWN_SYM 797
#define UNLOCK_SYM 798
#define UNSIGNED 799
#define UNTIL_SYM 800
#define UPDATE_SYM 801
#define UPGRADE_SYM 802
#define USAGE 803
#define USER 804
#define USE_FRM 805
#define USE_SYM 806
#define USING 807
#define UTC_DATE_SYM 808
#define UTC_TIMESTAMP_SYM 809
#define UTC_TIME_SYM 810
#define VALUES 811
#define VALUE_SYM 812
#define VARBINARY 813
#define VARCHAR 814
#define VARIABLES 815
#define VARIANCE_SYM 816
#define VARYING 817
#define VAR_SAMP_SYM 818
#define VIEW_SYM 819
#define WAIT_SYM 820
#define WARNINGS 821
#define WEEK_SYM 822
#define WHEN_SYM 823
#define WHERE 824
#define WHILE_SYM 825
#define WITH 826
#define WITHIN 827
#define WORK_SYM 828
#define WRAPPER_SYM 829
#define WRITE_SYM 830
#define X509_SYM 831
#define XA_SYM 832
#define XOR 833
#define YEAR_MONTH_SYM 834
#define YEAR_SYM 835
#define ZEROFILL 836




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 641 "sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  struct st_lex *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  struct Window_context *Window_context;
  struct Ordering *ordering;
  struct Frame *frame;
  struct Boundary *boundary;
  enum BOUND bound;
  SQL_LIST *list;



/* Line 214 of yacc.c  */
#line 1941 "sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 691 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 1958 "sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  551
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   48995

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  601
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  852
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2434
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4196

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   836

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   594,     2,     2,     2,   588,   583,     2,
     591,   592,   586,   585,   593,   584,   599,   587,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   600,   597,
       2,     2,     2,     2,   598,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   589,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   595,   582,   596,   590,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   228,   232,   236,   240,   244,   245,   253,
     254,   267,   268,   281,   282,   295,   296,   303,   304,   308,
     313,   318,   322,   325,   336,   338,   342,   345,   348,   351,
     354,   357,   360,   363,   364,   378,   379,   386,   389,   390,
     392,   396,   398,   399,   402,   403,   406,   407,   409,   413,
     418,   419,   422,   423,   426,   428,   430,   432,   434,   436,
     438,   440,   442,   444,   446,   448,   450,   452,   453,   457,
     459,   460,   463,   464,   467,   470,   473,   476,   479,   483,
     487,   489,   491,   493,   496,   500,   504,   505,   510,   511,
     515,   516,   518,   522,   524,   525,   527,   531,   533,   534,
     538,   539,   541,   545,   547,   552,   553,   555,   557,   559,
     560,   564,   567,   571,   572,   576,   577,   583,   589,   590,
     598,   604,   605,   608,   610,   612,   614,   618,   620,   622,
     626,   627,   629,   631,   633,   635,   638,   640,   642,   646,
     647,   650,   652,   654,   656,   658,   660,   662,   664,   666,
     668,   670,   672,   674,   676,   677,   683,   684,   687,   688,
     692,   693,   696,   699,   702,   705,   706,   713,   716,   717,
     720,   722,   724,   728,   729,   730,   731,   739,   740,   743,
     746,   748,   750,   751,   752,   761,   762,   769,   771,   774,
     776,   779,   780,   781,   788,   789,   790,   797,   798,   801,
     802,   808,   809,   811,   812,   818,   819,   822,   823,   829,
     834,   835,   836,   845,   846,   854,   856,   858,   860,   862,
     864,   867,   872,   878,   879,   884,   889,   894,   898,   902,
     905,   908,   909,   912,   914,   917,   921,   923,   925,   927,
     929,   931,   934,   938,   940,   942,   944,   946,   948,   950,
     952,   954,   956,   958,   961,   965,   967,   969,   971,   973,
     975,   977,   979,   982,   986,   988,   990,   992,   994,   996,
     998,  1000,  1002,  1004,  1007,  1011,  1013,  1015,  1017,  1020,
    1023,  1026,  1028,  1030,  1032,  1034,  1037,  1041,  1045,  1049,
    1053,  1057,  1061,  1065,  1069,  1074,  1075,  1077,  1079,  1081,
    1083,  1085,  1088,  1092,  1095,  1100,  1106,  1107,  1113,  1114,
    1115,  1121,  1122,  1130,  1131,  1133,  1134,  1138,  1139,  1143,
    1149,  1155,  1156,  1161,  1162,  1166,  1167,  1171,  1172,  1174,
    1175,  1177,  1179,  1183,  1185,  1191,  1197,  1198,  1201,  1202,
    1203,  1211,  1212,  1222,  1224,  1228,  1230,  1232,  1233,  1236,
    1237,  1241,  1243,  1247,  1248,  1255,  1257,  1258,  1263,  1269,
    1271,  1273,  1275,  1279,  1283,  1285,  1289,  1291,  1293,  1294,
    1298,  1300,  1304,  1305,  1310,  1312,  1313,  1315,  1318,  1320,
    1324,  1329,  1333,  1337,  1341,  1346,  1351,  1355,  1356,  1357,
    1364,  1365,  1367,  1368,  1370,  1372,  1375,  1377,  1379,  1380,
    1382,  1384,  1387,  1389,  1390,  1394,  1395,  1397,  1399,  1402,
    1404,  1407,  1411,  1415,  1419,  1423,  1427,  1431,  1435,  1439,
    1443,  1447,  1451,  1455,  1459,  1463,  1467,  1473,  1475,  1477,
    1481,  1486,  1491,  1494,  1497,  1500,  1504,  1508,  1513,  1518,
    1520,  1522,  1524,  1526,  1528,  1530,  1532,  1534,  1536,  1538,
    1540,  1542,  1545,  1547,  1549,  1551,  1553,  1555,  1559,  1561,
    1563,  1566,  1569,  1577,  1586,  1595,  1604,  1613,  1616,  1619,
    1620,  1622,  1625,  1626,  1628,  1631,  1632,  1637,  1641,  1645,
    1649,  1651,  1654,  1656,  1658,  1662,  1665,  1669,  1672,  1675,
    1677,  1681,  1685,  1688,  1692,  1694,  1696,  1699,  1701,  1703,
    1706,  1708,  1710,  1712,  1715,  1719,  1722,  1726,  1729,  1732,
    1736,  1740,  1744,  1745,  1752,  1753,  1760,  1763,  1765,  1767,
    1769,  1771,  1773,  1775,  1777,  1779,  1781,  1783,  1785,  1788,
    1791,  1793,  1796,  1798,  1801,  1805,  1808,  1810,  1812,  1814,
    1816,  1818,  1820,  1822,  1825,  1826,  1828,  1830,  1836,  1837,
    1839,  1842,  1844,  1846,  1848,  1850,  1854,  1858,  1862,  1866,
    1867,  1869,  1870,  1872,  1873,  1875,  1878,  1880,  1882,  1885,
    1888,  1893,  1895,  1899,  1902,  1904,  1907,  1910,  1913,  1916,
    1918,  1921,  1923,  1925,  1927,  1929,  1931,  1932,  1935,  1937,
    1939,  1941,  1943,  1945,  1946,  1949,  1951,  1953,  1954,  1956,
    1957,  1960,  1962,  1965,  1969,  1972,  1973,  1975,  1976,  1978,
    1980,  1983,  1984,  1986,  1987,  1992,  1994,  1999,  2003,  2005,
    2006,  2008,  2011,  2013,  2017,  2021,  2024,  2027,  2030,  2032,
    2034,  2037,  2040,  2043,  2045,  2048,  2051,  2053,  2055,  2056,
    2058,  2060,  2062,  2064,  2065,  2067,  2069,  2071,  2072,  2074,
    2077,  2078,  2080,  2081,  2083,  2084,  2086,  2088,  2091,  2093,
    2096,  2098,  2101,  2104,  2107,  2111,  2113,  2115,  2117,  2119,
    2123,  2125,  2127,  2129,  2134,  2137,  2139,  2144,  2145,  2147,
    2148,  2151,  2153,  2157,  2158,  2165,  2166,  2172,  2180,  2181,
    2187,  2188,  2194,  2195,  2201,  2202,  2207,  2208,  2219,  2223,
    2228,  2232,  2236,  2244,  2245,  2249,  2251,  2256,  2257,  2261,
    2262,  2265,  2266,  2268,  2269,  2272,  2275,  2278,  2281,  2283,
    2285,  2287,  2291,  2296,  2297,  2304,  2309,  2310,  2316,  2317,
    2324,  2329,  2331,  2334,  2336,  2338,  2339,  2345,  2346,  2350,
    2353,  2354,  2360,  2361,  2362,  2369,  2371,  2375,  2377,  2379,
    2383,  2386,  2390,  2393,  2398,  2399,  2406,  2407,  2408,  2417,
    2422,  2427,  2431,  2435,  2438,  2441,  2448,  2454,  2458,  2464,
    2466,  2468,  2470,  2471,  2473,  2474,  2476,  2477,  2479,  2481,
    2482,  2485,  2487,  2488,  2490,  2492,  2494,  2495,  2501,  2505,
    2506,  2512,  2516,  2520,  2521,  2525,  2526,  2529,  2531,  2535,
    2536,  2538,  2540,  2541,  2544,  2546,  2550,  2551,  2558,  2559,
    2566,  2567,  2573,  2574,  2576,  2578,  2579,  2586,  2587,  2589,
    2591,  2594,  2596,  2598,  2600,  2601,  2607,  2610,  2611,  2617,
    2618,  2620,  2622,  2625,  2627,  2629,  2631,  2633,  2635,  2638,
    2639,  2645,  2646,  2648,  2650,  2651,  2656,  2661,  2665,  2671,
    2673,  2677,  2681,  2687,  2689,  2693,  2696,  2698,  2700,  2701,
    2708,  2710,  2714,  2718,  2719,  2722,  2723,  2728,  2729,  2732,
    2734,  2737,  2742,  2745,  2749,  2750,  2754,  2755,  2756,  2763,
    2766,  2768,  2770,  2773,  2776,  2785,  2790,  2791,  2793,  2796,
    2798,  2800,  2802,  2804,  2806,  2808,  2810,  2812,  2814,  2816,
    2818,  2820,  2821,  2824,  2829,  2833,  2835,  2837,  2842,  2843,
    2844,  2846,  2848,  2849,  2852,  2855,  2857,  2859,  2860,  2863,
    2867,  2871,  2875,  2878,  2882,  2887,  2891,  2896,  2900,  2905,
    2907,  2911,  2916,  2920,  2924,  2931,  2933,  2939,  2946,  2952,
    2960,  2967,  2976,  2982,  2989,  2994,  2999,  3005,  3009,  3014,
    3016,  3020,  3024,  3028,  3032,  3036,  3040,  3046,  3052,  3056,
    3060,  3064,  3068,  3072,  3076,  3078,  3080,  3082,  3084,  3086,
    3088,  3090,  3092,  3094,  3096,  3098,  3100,  3102,  3104,  3106,
    3108,  3110,  3112,  3114,  3116,  3118,  3120,  3122,  3126,  3128,
    3130,  3132,  3134,  3138,  3141,  3144,  3147,  3150,  3154,  3158,
    3164,  3171,  3176,  3181,  3189,  3192,  3199,  3205,  3212,  3219,
    3224,  3229,  3235,  3240,  3247,  3250,  3255,  3260,  3265,  3276,
    3283,  3292,  3299,  3304,  3309,  3316,  3321,  3326,  3331,  3338,
    3343,  3351,  3359,  3367,  3374,  3381,  3388,  3395,  3399,  3404,
    3411,  3420,  3423,  3426,  3431,  3440,  3449,  3456,  3463,  3466,
    3471,  3478,  3485,  3494,  3503,  3510,  3519,  3526,  3529,  3534,
    3543,  3552,  3555,  3558,  3561,  3566,  3571,  3576,  3581,  3585,
    3594,  3599,  3606,  3611,  3616,  3621,  3628,  3637,  3644,  3649,
    3656,  3658,  3665,  3670,  3675,  3680,  3685,  3690,  3697,  3702,
    3708,  3715,  3721,  3728,  3734,  3741,  3748,  3754,  3761,  3767,
    3774,  3780,  3787,  3793,  3799,  3805,  3811,  3819,  3832,  3845,
    3846,  3849,  3852,  3853,  3855,  3858,  3861,  3867,  3868,  3872,
    3873,  3875,  3880,  3886,  3890,  3891,  3894,  3897,  3898,  3900,
    3906,  3909,  3911,  3913,  3916,  3919,  3922,  3927,  3929,  3931,
    3936,  3943,  3946,  3950,  3951,  3956,  3957,  3961,  3962,  3964,
    3966,  3970,  3975,  3980,  3986,  3991,  3996,  4001,  4007,  4012,
    4018,  4023,  4029,  4034,  4040,  4045,  4050,  4055,  4060,  4065,
    4071,  4072,  4081,  4082,  4086,  4090,  4092,  4097,  4098,  4100,
    4101,  4104,  4105,  4106,  4111,  4116,  4119,  4120,  4124,  4127,
    4131,  4134,  4136,  4139,  4141,  4144,  4146,  4148,  4150,  4153,
    4154,  4156,  4158,  4162,  4164,  4168,  4170,  4174,  4175,  4177,
    4178,  4181,  4186,  4192,  4194,  4196,  4198,  4200,  4205,  4207,
    4211,  4215,  4219,  4220,  4227,  4228,  4235,  4236,  4245,  4250,
    4251,  4260,  4261,  4272,  4279,  4280,  4289,  4290,  4301,  4308,
    4310,  4313,  4316,  4317,  4322,  4326,  4333,  4334,  4338,  4339,
    4340,  4346,  4347,  4349,  4350,  4352,  4353,  4356,  4360,  4364,
    4366,  4368,  4369,  4377,  4378,  4386,  4388,  4391,  4392,  4393,
    4396,  4397,  4400,  4401,  4403,  4405,  4407,  4409,  4413,  4415,
    4419,  4421,  4423,  4425,  4427,  4429,  4431,  4433,  4435,  4437,
    4439,  4441,  4443,  4445,  4447,  4449,  4451,  4453,  4455,  4457,
    4459,  4461,  4463,  4465,  4467,  4469,  4471,  4473,  4474,  4476,
    4478,  4479,  4482,  4483,  4485,  4486,  4487,  4491,  4492,  4493,
    4497,  4500,  4501,  4502,  4503,  4509,  4514,  4517,  4518,  4521,
    4524,  4528,  4532,  4534,  4537,  4538,  4540,  4541,  4546,  4551,
    4554,  4555,  4557,  4559,  4560,  4562,  4563,  4565,  4568,  4570,
    4574,  4578,  4580,  4582,  4584,  4586,  4587,  4590,  4592,  4594,
    4596,  4598,  4600,  4602,  4604,  4606,  4608,  4610,  4612,  4614,
    4616,  4618,  4620,  4622,  4624,  4626,  4628,  4630,  4632,  4634,
    4636,  4637,  4638,  4645,  4646,  4648,  4652,  4654,  4658,  4659,
    4662,  4666,  4668,  4671,  4673,  4674,  4678,  4679,  4680,  4688,
    4691,  4693,  4694,  4698,  4705,  4706,  4713,  4718,  4725,  4730,
    4735,  4740,  4746,  4751,  4756,  4762,  4769,  4774,  4776,  4780,
    4782,  4784,  4788,  4790,  4791,  4794,  4795,  4797,  4798,  4799,
    4808,  4809,  4810,  4817,  4818,  4820,  4822,  4824,  4826,  4828,
    4831,  4833,  4835,  4837,  4841,  4846,  4847,  4851,  4855,  4857,
    4860,  4863,  4864,  4868,  4869,  4875,  4879,  4881,  4885,  4887,
    4891,  4893,  4895,  4896,  4898,  4899,  4904,  4905,  4907,  4911,
    4913,  4915,  4917,  4918,  4919,  4926,  4927,  4928,  4940,  4944,
    4946,  4950,  4954,  4956,  4960,  4961,  4963,  4964,  4969,  4970,
    4977,  4978,  4984,  4985,  4992,  4994,  4998,  5002,  5008,  5009,
    5012,  5013,  5016,  5018,  5020,  5022,  5026,  5027,  5029,  5030,
    5032,  5034,  5038,  5040,  5042,  5045,  5048,  5051,  5053,  5055,
    5057,  5059,  5060,  5064,  5065,  5069,  5072,  5077,  5082,  5086,
    5091,  5096,  5099,  5101,  5105,  5109,  5116,  5133,  5136,  5139,
    5140,  5147,  5153,  5156,  5159,  5162,  5164,  5166,  5168,  5174,
    5180,  5183,  5186,  5188,  5193,  5197,  5200,  5203,  5206,  5210,
    5213,  5216,  5218,  5222,  5227,  5231,  5235,  5238,  5241,  5245,
    5249,  5253,  5257,  5261,  5265,  5269,  5273,  5275,  5277,  5279,
    5281,  5283,  5284,  5286,  5287,  5290,  5291,  5293,  5295,  5297,
    5298,  5301,  5302,  5305,  5306,  5309,  5312,  5313,  5318,  5319,
    5324,  5326,  5328,  5329,  5331,  5333,  5334,  5336,  5338,  5339,
    5344,  5348,  5350,  5351,  5355,  5360,  5363,  5365,  5367,  5369,
    5371,  5373,  5375,  5377,  5379,  5380,  5382,  5383,  5387,  5391,
    5393,  5395,  5397,  5400,  5401,  5405,  5409,  5412,  5415,  5419,
    5420,  5422,  5424,  5427,  5428,  5433,  5439,  5440,  5441,  5442,
    5460,  5463,  5464,  5466,  5467,  5469,  5471,  5472,  5474,  5476,
    5477,  5480,  5483,  5485,  5489,  5494,  5498,  5502,  5503,  5506,
    5509,  5511,  5515,  5519,  5520,  5524,  5525,  5529,  5532,  5536,
    5538,  5540,  5543,  5544,  5547,  5549,  5551,  5554,  5557,  5559,
    5561,  5563,  5565,  5567,  5570,  5573,  5575,  5577,  5579,  5581,
    5583,  5585,  5587,  5590,  5593,  5596,  5599,  5602,  5604,  5606,
    5608,  5610,  5612,  5614,  5616,  5620,  5626,  5628,  5630,  5632,
    5634,  5636,  5640,  5645,  5651,  5653,  5659,  5663,  5666,  5668,
    5672,  5675,  5678,  5683,  5685,  5687,  5689,  5691,  5693,  5695,
    5697,  5699,  5701,  5703,  5705,  5707,  5709,  5711,  5715,  5718,
    5720,  5722,  5724,  5726,  5728,  5730,  5732,  5734,  5736,  5738,
    5740,  5742,  5744,  5746,  5748,  5750,  5752,  5754,  5756,  5758,
    5760,  5762,  5764,  5766,  5768,  5770,  5772,  5774,  5776,  5778,
    5780,  5782,  5784,  5786,  5788,  5790,  5792,  5794,  5796,  5798,
    5800,  5802,  5804,  5806,  5808,  5810,  5812,  5814,  5816,  5818,
    5820,  5822,  5824,  5826,  5828,  5830,  5832,  5834,  5836,  5838,
    5840,  5842,  5844,  5846,  5848,  5850,  5852,  5854,  5856,  5858,
    5860,  5862,  5864,  5866,  5868,  5870,  5872,  5874,  5876,  5878,
    5880,  5882,  5884,  5886,  5888,  5890,  5892,  5894,  5896,  5898,
    5900,  5902,  5904,  5906,  5908,  5910,  5912,  5914,  5916,  5918,
    5920,  5922,  5924,  5926,  5928,  5930,  5932,  5934,  5936,  5938,
    5940,  5942,  5944,  5946,  5948,  5950,  5952,  5954,  5956,  5958,
    5960,  5962,  5964,  5966,  5968,  5970,  5972,  5974,  5976,  5978,
    5980,  5982,  5984,  5986,  5988,  5990,  5992,  5994,  5996,  5998,
    6000,  6002,  6004,  6006,  6008,  6010,  6012,  6014,  6016,  6018,
    6020,  6022,  6024,  6026,  6028,  6030,  6032,  6034,  6036,  6038,
    6040,  6042,  6044,  6046,  6048,  6050,  6052,  6054,  6056,  6058,
    6060,  6062,  6064,  6066,  6068,  6070,  6072,  6074,  6076,  6078,
    6080,  6082,  6084,  6086,  6088,  6090,  6092,  6094,  6096,  6098,
    6100,  6102,  6104,  6106,  6108,  6110,  6112,  6114,  6116,  6118,
    6120,  6122,  6124,  6126,  6128,  6130,  6132,  6134,  6136,  6138,
    6140,  6142,  6144,  6146,  6148,  6150,  6152,  6154,  6156,  6158,
    6160,  6162,  6164,  6166,  6168,  6170,  6172,  6174,  6176,  6178,
    6180,  6182,  6184,  6186,  6188,  6190,  6192,  6194,  6196,  6198,
    6200,  6202,  6204,  6206,  6208,  6210,  6212,  6214,  6216,  6218,
    6220,  6222,  6224,  6226,  6228,  6230,  6232,  6234,  6236,  6238,
    6240,  6242,  6244,  6246,  6248,  6250,  6252,  6254,  6256,  6258,
    6260,  6262,  6264,  6266,  6268,  6270,  6272,  6274,  6276,  6278,
    6280,  6282,  6284,  6286,  6288,  6290,  6292,  6294,  6296,  6298,
    6300,  6302,  6304,  6306,  6308,  6310,  6312,  6314,  6316,  6318,
    6320,  6322,  6324,  6326,  6328,  6330,  6332,  6334,  6336,  6338,
    6340,  6341,  6346,  6347,  6349,  6351,  6355,  6356,  6359,  6361,
    6363,  6365,  6367,  6368,  6370,  6371,  6373,  6375,  6377,  6378,
    6381,  6384,  6387,  6389,  6392,  6397,  6403,  6408,  6415,  6418,
    6422,  6426,  6430,  6436,  6438,  6442,  6446,  6449,  6452,  6455,
    6457,  6459,  6464,  6469,  6471,  6473,  6475,  6477,  6479,  6480,
    6485,  6487,  6489,  6491,  6495,  6499,  6501,  6503,  6506,  6509,
    6510,  6514,  6519,  6523,  6524,  6532,  6534,  6537,  6539,  6541,
    6543,  6545,  6547,  6549,  6550,  6556,  6558,  6560,  6562,  6564,
    6566,  6570,  6577,  6584,  6591,  6599,  6603,  6612,  6621,  6630,
    6631,  6633,  6635,  6638,  6639,  6641,  6643,  6647,  6648,  6652,
    6653,  6657,  6658,  6662,  6663,  6667,  6669,  6671,  6673,  6675,
    6677,  6679,  6681,  6683,  6685,  6687,  6689,  6692,  6695,  6697,
    6701,  6704,  6707,  6710,  6713,  6716,  6719,  6722,  6725,  6727,
    6729,  6730,  6732,  6736,  6738,  6741,  6744,  6747,  6749,  6753,
    6757,  6759,  6761,  6765,  6767,  6771,  6776,  6782,  6784,  6785,
    6789,  6793,  6795,  6797,  6798,  6801,  6804,  6807,  6810,  6811,
    6814,  6817,  6819,  6822,  6825,  6828,  6831,  6834,  6835,  6839,
    6840,  6842,  6843,  6847,  6850,  6851,  6853,  6856,  6857,  6859,
    6864,  6869,  6875,  6878,  6882,  6883,  6885,  6886,  6891,  6892,
    6894,  6896,  6897,  6900,  6903,  6905,  6906,  6908,  6910,  6911,
    6917,  6924,  6925,  6926,  6929,  6932,  6936,  6938,  6940,  6942,
    6944,  6946,  6948,  6950,  6952,  6954,  6956,  6958,  6960,  6962,
    6963,  6967,  6969,  6972,  6974,  6977,  6981,  6985,  6989,  6990,
    6994,  6998,  6999,  7007,  7008,  7012,  7014,  7018,  7019,  7023,
    7026,  7031,  7032,  7036,  7041,  7046,  7047,  7048,  7049,  7066,
    7075,  7083,  7084,  7085,  7086,  7087,  7088,  7104,  7105,  7106,
    7107,  7108,  7121,  7126,  7131,  7135,  7140,  7144,  7147,  7149,
    7153,  7159,  7161,  7163,  7164,  7166,  7168,  7169,  7172,  7173,
    7174,  7178,  7179,  7182,  7188
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     602,     0,    -1,   142,    -1,    -1,   605,   603,   597,   604,
      -1,   605,   142,    -1,    -1,   142,    -1,   606,    -1,  1387,
      -1,   930,    -1,   991,    -1,   981,    -1,   993,    -1,   653,
      -1,   618,    -1,   994,    -1,   983,    -1,  1393,    -1,   623,
      -1,   607,    -1,  1229,    -1,  1259,    -1,  1183,    -1,  1185,
      -1,   611,    -1,  1265,    -1,  1362,    -1,  1353,    -1,   616,
      -1,  1193,    -1,  1451,    -1,  1279,    -1,  1282,    -1,  1345,
      -1,   999,    -1,  1007,    -1,   785,    -1,  1011,    -1,   609,
      -1,  1275,    -1,  1396,    -1,  1002,    -1,   986,    -1,  1196,
      -1,  1271,    -1,   979,    -1,  1360,    -1,  1394,    -1,  1395,
      -1,  1019,    -1,  1328,    -1,  1246,    -1,   968,    -1,   971,
      -1,  1240,    -1,  1452,    -1,  1351,    -1,  1221,    -1,  1281,
      -1,  1443,    -1,   608,   377,  1322,    -1,   109,    -1,   130,
      -1,   377,  1322,   177,   610,    -1,  1319,    -1,   598,  1324,
      -1,    -1,   154,  1322,   612,   613,    -1,    -1,   552,   614,
      -1,   614,   593,   615,    -1,   615,    -1,   598,  1324,    -1,
      -1,   194,   617,  1324,    -1,    -1,    55,   280,   519,   619,
     620,    -1,   621,    -1,   620,   593,   621,    -1,   267,   146,
    1319,    -1,   281,   146,  1319,    -1,   270,   146,  1319,    -1,
     271,   146,  1163,    -1,   266,   146,  1163,    -1,   278,   146,
    1163,    -1,   274,   146,  1319,    -1,   273,   146,  1319,    -1,
     275,   146,  1319,    -1,   276,   146,  1319,    -1,   277,   146,
    1319,    -1,   279,   146,  1163,    -1,   622,    -1,   268,   146,
    1319,    -1,   269,   146,  1165,    -1,   404,   146,  1319,    -1,
     405,   146,  1163,    -1,    -1,    88,   833,   503,   836,  1315,
     624,   776,    -1,    -1,    88,   908,   210,  1322,   912,   340,
    1315,   625,   591,   925,   592,   913,    -1,    -1,    88,   909,
     210,  1322,   911,   340,  1315,   626,   591,   925,   592,   914,
      -1,    -1,    88,   910,   210,  1322,   911,   340,  1315,   627,
     591,   925,   592,   915,    -1,    -1,    88,    96,   836,  1322,
     628,   830,    -1,    -1,    88,   629,  1409,    -1,    88,   549,
     646,  1378,    -1,    88,   257,   188,   739,    -1,    88,   501,
     736,    -1,    88,   630,    -1,   446,  1324,   173,    99,   574,
    1324,   345,   591,   631,   592,    -1,   632,    -1,   631,   593,
     632,    -1,   549,  1319,    -1,   197,  1319,    -1,    96,  1319,
      -1,   356,  1319,    -1,   365,  1319,    -1,   460,  1319,    -1,
     373,  1163,    -1,    -1,  1035,   152,   836,   647,   634,   340,
     436,   635,   640,   637,   642,   129,   643,    -1,    -1,   153,
    1040,  1133,   636,   638,   639,    -1,    22,  1040,    -1,    -1,
     138,    -1,   123,   340,   457,    -1,   123,    -1,    -1,   480,
    1040,    -1,    -1,   141,  1040,    -1,    -1,   641,    -1,   340,
      74,   378,    -1,   340,    74,   327,   378,    -1,    -1,    70,
    1319,    -1,    -1,   644,   645,    -1,   685,    -1,   687,    -1,
     683,    -1,   704,    -1,   722,    -1,   724,    -1,   719,    -1,
     689,    -1,   691,    -1,   692,    -1,   693,    -1,   694,    -1,
     696,    -1,    -1,  1322,   599,  1322,    -1,  1322,    -1,    -1,
     648,   650,    -1,    -1,   649,   651,    -1,    70,  1319,    -1,
     236,   476,    -1,   329,   476,    -1,    81,   476,    -1,   392,
     476,    99,    -1,   305,   476,    99,    -1,   652,    -1,   650,
      -1,   121,    -1,  1046,   121,    -1,   476,   439,   114,    -1,
     476,   439,   223,    -1,    -1,    49,   647,   654,   655,    -1,
      -1,   591,   656,   592,    -1,    -1,   657,    -1,   657,   593,
    1040,    -1,  1040,    -1,    -1,   659,    -1,   659,   593,   661,
      -1,   661,    -1,    -1,  1322,   660,   859,    -1,    -1,   663,
      -1,   663,   593,   664,    -1,   664,    -1,   665,   660,  1322,
     859,    -1,    -1,   224,    -1,   354,    -1,   215,    -1,    -1,
     666,   682,   597,    -1,   682,   597,    -1,   667,   682,   597,
      -1,    -1,   668,   669,   597,    -1,    -1,   112,   680,   670,
     859,   681,    -1,   112,  1322,    77,   174,   677,    -1,    -1,
     112,   674,   191,   174,   671,   675,   682,    -1,   112,  1322,
      94,   174,   672,    -1,    -1,   673,  1019,    -1,   156,    -1,
      83,    -1,   676,    -1,   675,   593,   676,    -1,   679,    -1,
    1163,    -1,   467,   678,  1320,    -1,    -1,   557,    -1,   677,
      -1,  1322,    -1,   468,    -1,  1046,   175,    -1,   466,    -1,
    1322,    -1,   680,   593,  1322,    -1,    -1,   113,  1040,    -1,
     685,    -1,   687,    -1,   683,    -1,   704,    -1,   722,    -1,
     724,    -1,   719,    -1,   689,    -1,   691,    -1,   692,    -1,
     693,    -1,   694,    -1,   696,    -1,    -1,   206,   684,   699,
     140,   206,    -1,    -1,   686,   606,    -1,    -1,   425,   688,
    1040,    -1,    -1,   690,   728,    -1,   241,  1323,    -1,   230,
    1323,    -1,   343,  1322,    -1,    -1,   164,   697,  1322,   221,
     695,   698,    -1,    63,  1322,    -1,    -1,   323,   177,    -1,
     177,    -1,  1322,    -1,   698,   593,  1322,    -1,    -1,    -1,
      -1,   700,  1040,   511,   701,   667,   702,   703,    -1,    -1,
     137,   699,    -1,   136,   667,    -1,   705,    -1,   708,    -1,
      -1,    -1,    52,   706,  1040,   707,   710,   718,   140,    52,
      -1,    -1,    52,   709,   711,   718,   140,    52,    -1,   712,
      -1,   710,   712,    -1,   715,    -1,   711,   715,    -1,    -1,
      -1,   568,   713,  1040,   714,   511,   667,    -1,    -1,    -1,
     568,   716,  1040,   717,   511,   667,    -1,    -1,   136,   667,
      -1,    -1,  1323,   600,   720,   728,   721,    -1,    -1,  1323,
      -1,    -1,  1323,   600,   723,   726,   721,    -1,    -1,   725,
     726,    -1,    -1,    30,   727,   668,   666,   140,    -1,   263,
     667,   140,   263,    -1,    -1,    -1,   570,   729,  1040,   129,
     730,   667,   140,   570,    -1,    -1,   414,   667,   545,   731,
    1040,   140,   414,    -1,    29,    -1,     8,    -1,   217,    -1,
     546,    -1,   117,    -1,   761,   763,    -1,   761,    55,   758,
     742,    -1,   761,     6,   758,   737,   746,    -1,    -1,   551,
     257,   188,  1322,    -1,   761,     6,   758,   749,    -1,   761,
     130,   758,   749,    -1,   762,   741,   752,    -1,   762,   741,
     755,    -1,     6,   759,    -1,     6,   760,    -1,    -1,   743,
     744,    -1,   745,    -1,   744,   745,    -1,   744,   593,   745,
      -1,   764,    -1,   765,    -1,   766,    -1,   747,    -1,   748,
      -1,   747,   748,    -1,   747,   593,   748,    -1,   764,    -1,
     765,    -1,   766,    -1,   767,    -1,   770,    -1,   772,    -1,
     774,    -1,   771,    -1,   750,    -1,   751,    -1,   750,   751,
      -1,   750,   593,   751,    -1,   764,    -1,   765,    -1,   766,
      -1,   772,    -1,   774,    -1,   753,    -1,   754,    -1,   753,
     754,    -1,   753,   593,   754,    -1,   764,    -1,   768,    -1,
     769,    -1,   770,    -1,   772,    -1,   774,    -1,   771,    -1,
     756,    -1,   757,    -1,   756,   757,    -1,   756,   593,   757,
      -1,   764,    -1,   772,    -1,   774,    -1,    98,  1319,    -1,
     535,  1319,    -1,   399,  1319,    -1,  1322,    -1,  1322,    -1,
     393,    -1,   395,    -1,   327,     4,    -1,   212,  1213,   775,
      -1,    24,  1213,   775,    -1,   286,  1213,   775,    -1,   159,
    1213,   775,    -1,   536,  1213,   775,    -1,   400,  1213,   775,
      -1,   324,  1213,  1164,    -1,    70,  1213,  1319,    -1,  1252,
     144,  1213,   843,    -1,    -1,   774,    -1,   565,    -1,   330,
      -1,  1164,    -1,   203,    -1,   591,   777,    -1,   837,   782,
     779,    -1,   246,  1315,    -1,   591,   246,  1315,   592,    -1,
     849,   592,   837,   782,   779,    -1,    -1,   782,   826,   592,
     778,  1400,    -1,    -1,    -1,  1290,   829,   826,   780,  1397,
      -1,    -1,  1290,   829,   591,   826,   592,   781,  1400,    -1,
      -1,   783,    -1,    -1,   364,   784,   787,    -1,    -1,   364,
     786,   787,    -1,    46,   788,   798,   799,   806,    -1,   792,
     234,   591,   793,   592,    -1,    -1,   792,   192,   789,   796,
      -1,    -1,   391,   790,   796,    -1,    -1,   251,   791,   796,
      -1,    -1,   248,    -1,    -1,   794,    -1,   795,    -1,   794,
     593,   795,    -1,  1322,    -1,   591,  1035,   804,  1036,   592,
      -1,   591,  1035,   804,  1036,   592,    -1,    -1,   363,  1164,
      -1,    -1,    -1,   492,    46,   792,   192,   797,   800,   805,
      -1,    -1,   492,    46,   792,   234,   591,   802,   592,   801,
     805,    -1,   803,    -1,   802,   593,   803,    -1,  1322,    -1,
    1043,    -1,    -1,   491,  1164,    -1,    -1,   591,   807,   592,
      -1,   808,    -1,   807,   593,   808,    -1,    -1,   364,   809,
     810,   811,   823,   818,    -1,  1322,    -1,    -1,   556,   243,
     510,   812,    -1,   556,   224,   591,   815,   592,    -1,   813,
      -1,   814,    -1,   290,    -1,   591,   290,   592,    -1,   591,
     817,   592,    -1,   816,    -1,   815,   593,   816,    -1,   817,
      -1,  1043,    -1,    -1,   591,   819,   592,    -1,   820,    -1,
     819,   593,   820,    -1,    -1,   492,   821,   822,   823,    -1,
    1324,    -1,    -1,   824,    -1,   824,   825,    -1,   825,    -1,
     501,  1213,  1324,    -1,  1252,   144,  1213,   843,    -1,   324,
    1213,  1164,    -1,   285,  1213,  1166,    -1,   302,  1213,  1166,
      -1,    99,   122,  1213,  1319,    -1,   210,   122,  1213,  1319,
      -1,    70,  1213,  1319,    -1,    -1,    -1,   440,   827,  1029,
    1033,   828,   847,    -1,    -1,    18,    -1,    -1,   831,    -1,
     832,    -1,   831,   832,    -1,   842,    -1,   841,    -1,    -1,
     834,    -1,   835,    -1,   835,   834,    -1,   505,    -1,    -1,
     206,  1046,   155,    -1,    -1,   839,    -1,   840,    -1,   840,
     838,    -1,   840,    -1,   840,   839,    -1,   840,   593,   839,
      -1,   144,  1213,   843,    -1,   528,  1213,   843,    -1,   285,
    1213,  1165,    -1,   302,  1213,  1165,    -1,    26,  1213,  1163,
      -1,   365,  1213,  1319,    -1,    70,  1213,  1319,    -1,    25,
    1213,  1165,    -1,   357,  1213,  1163,    -1,   357,  1213,   113,
      -1,    59,  1213,  1163,    -1,   504,  1213,  1163,    -1,   116,
    1213,  1163,    -1,   432,  1213,   845,    -1,   540,  1213,   591,
    1270,   592,    -1,   841,    -1,   842,    -1,   218,  1213,   846,
      -1,    99,   122,  1213,  1319,    -1,   210,   122,  1213,  1319,
      -1,   501,  1322,    -1,   486,   125,    -1,   486,   295,    -1,
      78,  1213,  1319,    -1,   233,  1213,  1163,    -1,   890,   881,
    1213,   883,    -1,   890,    66,  1213,   889,    -1,  1324,    -1,
    1324,    -1,   113,    -1,   167,    -1,   134,    -1,    75,    -1,
     401,    -1,    73,    -1,   329,    -1,   166,    -1,   237,    -1,
    1158,    -1,  1028,  1032,    -1,   488,    -1,   396,    -1,   111,
      -1,   222,    -1,   850,    -1,   849,   593,   850,    -1,   851,
      -1,   852,    -1,   857,   853,    -1,   857,   895,    -1,   903,
     927,   912,   591,   925,   592,   913,    -1,   909,   906,   927,
     911,   591,   925,   592,   914,    -1,   910,   906,   927,   911,
     591,   925,   592,   915,    -1,   855,   904,   927,   912,   591,
     925,   592,   913,    -1,   855,   173,   234,   927,   591,   925,
     592,   895,    -1,   856,   853,    -1,   855,   854,    -1,    -1,
     854,    -1,    60,  1040,    -1,    -1,   856,    -1,    80,   927,
      -1,    -1,  1314,   858,   859,   877,    -1,   867,   875,   871,
      -1,   868,   876,   871,    -1,   169,   869,   871,    -1,    38,
      -1,    38,   874,    -1,    43,    -1,    42,    -1,   863,   874,
     891,    -1,   863,   891,    -1,   864,   874,   892,    -1,   864,
     892,    -1,    33,   874,    -1,    33,    -1,   865,   874,   891,
      -1,   866,   874,   892,    -1,   558,   874,    -1,   580,   875,
     871,    -1,   103,    -1,   515,    -1,   512,   875,    -1,   100,
      -1,   516,    -1,    40,   875,    -1,   862,    -1,   291,    -1,
     259,    -1,   262,   558,    -1,   262,   865,   891,    -1,   518,
     891,    -1,   509,   875,   891,    -1,   293,   891,    -1,   260,
     891,    -1,   111,   869,   871,    -1,   336,   869,   871,    -1,
     167,   869,   871,    -1,    -1,   145,   860,   591,   929,   592,
     891,    -1,    -1,   448,   861,   591,   929,   592,   891,    -1,
     262,   891,    -1,   444,    -1,   183,    -1,   182,    -1,   371,
      -1,   310,    -1,   250,    -1,   309,    -1,   372,    -1,   311,
      -1,    58,    -1,   318,    -1,   315,    58,    -1,   863,   562,
      -1,   559,    -1,   315,   559,    -1,   337,    -1,   318,   559,
      -1,   315,    58,   562,    -1,   318,   562,    -1,   222,    -1,
     517,    -1,   458,    -1,   292,    -1,    32,    -1,   396,    -1,
     128,    -1,   128,   376,    -1,    -1,   874,    -1,   870,    -1,
     591,   335,   593,   335,   592,    -1,    -1,   872,    -1,   872,
     873,    -1,   873,    -1,   455,    -1,   544,    -1,   581,    -1,
     591,   261,   592,    -1,   591,   530,   592,    -1,   591,   110,
     592,    -1,   591,   335,   592,    -1,    -1,   874,    -1,    -1,
     870,    -1,    -1,   878,    -1,   878,   879,    -1,   879,    -1,
     333,    -1,  1046,   333,    -1,   113,   880,    -1,   340,   546,
     328,  1039,    -1,    25,    -1,   444,   113,   557,    -1,   894,
     234,    -1,   541,    -1,   541,   234,    -1,    70,  1319,    -1,
      66,   887,    -1,   328,  1039,    -1,  1305,    -1,    58,   448,
      -1,    57,    -1,  1324,    -1,    33,    -1,   882,    -1,   113,
      -1,    -1,   881,   883,    -1,  1324,    -1,    33,    -1,   885,
      -1,   113,    -1,  1324,    -1,    -1,    66,   889,    -1,   887,
      -1,   113,    -1,    -1,   113,    -1,    -1,    20,   892,    -1,
      47,    -1,   538,   892,    -1,   881,   882,   892,    -1,    33,
     893,    -1,    -1,    33,    -1,    -1,    20,    -1,   538,    -1,
     881,   882,    -1,    -1,   380,    -1,    -1,   402,  1315,   896,
     897,    -1,   899,    -1,   591,   898,   592,   899,    -1,   898,
     593,  1322,    -1,  1322,    -1,    -1,   900,    -1,   900,   901,
      -1,   901,    -1,   340,   117,   902,    -1,   340,   546,   902,
      -1,   282,   178,    -1,   282,   361,    -1,   282,   456,    -1,
     422,    -1,    50,    -1,   448,   333,    -1,   329,     5,    -1,
     448,   113,    -1,   905,    -1,   380,   234,    -1,   541,   906,
      -1,   234,    -1,   210,    -1,    -1,   905,    -1,   232,    -1,
     210,    -1,   209,    -1,    -1,   541,    -1,   179,    -1,   464,
      -1,    -1,   911,    -1,   911,   919,    -1,    -1,   916,    -1,
      -1,   918,    -1,    -1,   917,    -1,   921,    -1,   916,   921,
      -1,   922,    -1,   917,   922,    -1,   923,    -1,   918,   923,
      -1,   552,   924,    -1,   528,   924,    -1,   233,  1213,  1163,
      -1,   920,    -1,   919,    -1,   920,    -1,   920,    -1,   571,
     360,  1318,    -1,    45,    -1,   434,    -1,   192,    -1,   925,
     593,   926,  1156,    -1,   926,  1156,    -1,  1322,    -1,  1322,
     591,   335,   592,    -1,    -1,  1314,    -1,    -1,   599,  1322,
      -1,  1303,    -1,   929,   593,  1303,    -1,    -1,    13,   964,
     503,  1315,   931,   942,    -1,    -1,    13,    96,   941,   932,
     831,    -1,    13,    96,  1322,   547,    99,   122,   314,    -1,
      -1,    13,   382,   647,   933,   648,    -1,    -1,    13,   180,
     647,   934,   648,    -1,    -1,    13,  1417,  1412,   935,  1419,
      -1,    -1,    13,  1412,   936,  1419,    -1,    -1,    13,  1412,
     152,   647,   937,   938,   939,   637,   642,   940,    -1,    13,
     501,   738,    -1,    13,   257,   188,   740,    -1,    13,   501,
     735,    -1,    13,   501,   734,    -1,    13,   446,  1324,   345,
     591,   631,   592,    -1,    -1,   340,   436,   635,    -1,   641,
      -1,   340,   436,   635,   641,    -1,    -1,   410,   519,   647,
      -1,    -1,   129,   643,    -1,    -1,  1322,    -1,    -1,   124,
     501,    -1,   208,   501,    -1,   957,   782,    -1,   957,   946,
      -1,   946,    -1,   783,    -1,   948,    -1,   130,   364,   955,
      -1,   397,   364,  1001,   947,    -1,    -1,   344,   364,  1001,
     947,   943,  1001,    -1,    14,   364,  1001,   947,    -1,    -1,
      60,   364,   947,   944,   996,    -1,    -1,   412,   364,  1001,
     947,   945,   988,    -1,    64,   364,  1001,  1164,    -1,   951,
      -1,   409,   362,    -1,    12,    -1,   955,    -1,    -1,     6,
     364,  1001,   949,   950,    -1,    -1,   591,   807,   592,    -1,
     363,  1164,    -1,    -1,   411,   364,  1001,   952,   953,    -1,
      -1,    -1,   955,   954,   221,   591,   807,   592,    -1,   956,
      -1,   955,   593,   956,    -1,  1322,    -1,   959,    -1,   957,
     593,   959,    -1,     6,   963,    -1,   958,   851,   966,    -1,
       6,   852,    -1,   958,   591,   849,   592,    -1,    -1,    55,
     963,  1314,   960,   857,   966,    -1,    -1,    -1,   306,   963,
    1314,   961,   859,   877,   962,   966,    -1,   130,   963,  1314,
     965,    -1,   130,   173,   234,   927,    -1,   130,   380,   234,
      -1,   130,   905,  1314,    -1,   123,   232,    -1,   138,   232,
      -1,    13,   963,  1314,   448,   113,  1305,    -1,    13,   963,
    1314,   130,   113,    -1,   410,   967,  1315,    -1,    85,   519,
     881,   883,   888,    -1,   838,    -1,   172,    -1,  1149,    -1,
      -1,    69,    -1,    -1,   207,    -1,    -1,   422,    -1,    50,
      -1,    -1,     8,  1322,    -1,   166,    -1,    -1,   519,    -1,
     146,    -1,    18,    -1,    -1,   481,   457,   973,   969,   977,
      -1,   485,   457,   973,    -1,    -1,   457,   481,   973,   970,
     977,    -1,   457,   485,   973,    -1,   481,   521,   972,    -1,
      -1,   571,    79,   459,    -1,    -1,   974,   975,    -1,   976,
      -1,   975,   593,   976,    -1,    -1,   477,    -1,   406,    -1,
      -1,   545,   978,    -1,   622,    -1,   978,   593,   622,    -1,
      -1,   421,  1347,   980,  1187,   177,  1319,    -1,    -1,    28,
    1347,   982,  1187,   519,  1319,    -1,    -1,    59,  1347,   984,
    1187,   985,    -1,    -1,   390,    -1,   158,    -1,    -1,   412,
    1001,  1347,   987,  1187,   988,    -1,    -1,   989,    -1,   990,
      -1,   990,   989,    -1,   390,    -1,   158,    -1,   550,    -1,
      -1,    14,  1001,  1347,   992,  1187,    -1,    34,  1319,    -1,
      -1,    60,  1347,   995,  1187,   996,    -1,    -1,   997,    -1,
     998,    -1,   998,   997,    -1,   390,    -1,   162,    -1,   294,
      -1,   158,    -1,    56,    -1,   174,   547,    -1,    -1,   344,
    1001,  1347,  1000,  1187,    -1,    -1,   331,    -1,   253,    -1,
      -1,   410,  1347,  1003,  1005,    -1,   410,   549,   646,  1004,
      -1,  1325,   519,  1325,    -1,  1004,   593,  1325,   519,  1325,
      -1,  1006,    -1,  1005,   593,  1006,    -1,  1315,   519,  1315,
      -1,    48,   210,  1008,   224,  1010,    -1,  1009,    -1,  1008,
     593,  1009,    -1,  1315,  1015,    -1,  1322,    -1,   113,    -1,
      -1,   252,   210,   221,    48,  1012,  1013,    -1,  1014,    -1,
    1013,   593,  1014,    -1,  1315,  1015,  1018,    -1,    -1,  1016,
    1017,    -1,    -1,   905,   591,  1129,   592,    -1,    -1,   207,
     240,    -1,  1020,    -1,   440,  1022,    -1,   591,  1021,   592,
    1400,    -1,   440,  1024,    -1,   591,  1021,   592,    -1,    -1,
    1024,  1023,  1397,    -1,    -1,    -1,  1025,  1029,  1033,  1026,
    1027,  1032,    -1,  1152,  1158,    -1,  1178,    -1,  1028,    -1,
    1178,  1028,    -1,  1028,  1178,    -1,   177,  1097,  1140,  1145,
    1142,  1152,  1158,  1169,    -1,   177,   131,  1140,  1158,    -1,
      -1,  1030,    -1,  1030,  1031,    -1,  1031,    -1,   487,    -1,
     196,    -1,   126,    -1,   475,    -1,   469,    -1,   470,    -1,
     472,    -1,   473,    -1,   474,    -1,   471,    -1,    12,    -1,
      -1,   174,   546,    -1,   256,   224,   450,   304,    -1,  1033,
     593,  1034,    -1,  1034,    -1,   586,    -1,  1035,  1037,  1036,
    1038,    -1,    -1,    -1,  1309,    -1,  1040,    -1,    -1,    18,
    1322,    -1,    18,  1319,    -1,  1322,    -1,  1319,    -1,    -1,
     591,   592,    -1,  1040,  1044,  1040,    -1,  1040,   578,  1040,
      -1,  1040,  1045,  1040,    -1,   327,  1040,    -1,  1041,   227,
     525,    -1,  1041,   227,  1046,   525,    -1,  1041,   227,   161,
      -1,  1041,   227,  1046,   161,    -1,  1041,   227,   542,    -1,
    1041,   227,  1046,   542,    -1,  1041,    -1,  1041,   227,   333,
      -1,  1041,   227,  1046,   333,    -1,  1041,   147,  1042,    -1,
    1041,  1048,  1042,    -1,  1041,  1048,  1049,   591,  1406,   592,
      -1,  1042,    -1,  1043,   224,   591,  1406,   592,    -1,  1043,
    1046,   224,   591,  1406,   592,    -1,  1043,   224,   591,  1040,
     592,    -1,  1043,   224,   591,  1040,   593,  1090,   592,    -1,
    1043,  1046,   224,   591,  1040,   592,    -1,  1043,  1046,   224,
     591,  1040,   593,  1090,   592,    -1,  1043,    31,  1043,    16,
    1042,    -1,  1043,  1046,    31,  1043,    16,  1042,    -1,  1043,
     462,   246,  1043,    -1,  1043,   246,  1050,  1144,    -1,  1043,
    1046,   246,  1050,  1144,    -1,  1043,   403,  1043,    -1,  1043,
    1046,   403,  1043,    -1,  1043,    -1,  1043,   582,  1043,    -1,
    1043,   583,  1043,    -1,  1043,   451,  1043,    -1,  1043,   452,
    1043,    -1,  1043,   585,  1043,    -1,  1043,   584,  1043,    -1,
    1043,   585,   220,  1040,  1133,    -1,  1043,   584,   220,  1040,
    1133,    -1,  1043,   586,  1043,    -1,  1043,   587,  1043,    -1,
    1043,   588,  1043,    -1,  1043,   127,  1043,    -1,  1043,   307,
    1043,    -1,  1043,   589,  1043,    -1,  1050,    -1,   351,    -1,
     348,    -1,    16,    -1,    15,    -1,   327,    -1,   326,    -1,
     594,    -1,   326,    -1,   146,    -1,   181,    -1,   190,    -1,
     238,    -1,   265,    -1,   320,    -1,    12,    -1,    17,    -1,
    1311,    -1,  1051,    -1,  1052,    -1,  1055,    -1,  1069,    -1,
    1053,    -1,  1050,    66,  1324,    -1,  1306,    -1,  1304,    -1,
    1078,    -1,  1076,    -1,  1050,   350,  1050,    -1,   585,  1050,
      -1,   584,  1050,    -1,   590,  1050,    -1,  1047,  1050,    -1,
     591,  1406,   592,    -1,   591,  1040,   592,    -1,   591,  1040,
     593,  1090,   592,    -1,   433,   591,  1040,   593,  1090,   592,
      -1,   155,   591,  1406,   592,    -1,   595,  1322,  1040,   596,
      -1,   282,  1091,     9,   591,  1043,  1070,   592,    -1,    33,
    1050,    -1,    53,   591,  1040,    18,  1088,   592,    -1,    52,
    1093,  1095,  1094,   140,    -1,    85,   591,  1040,   593,  1088,
     592,    -1,    85,   591,  1040,   552,   882,   592,    -1,   113,
     591,  1311,   592,    -1,   556,   591,  1312,   592,    -1,   220,
    1040,  1133,   585,  1040,    -1,    58,   591,  1090,   592,    -1,
      58,   591,  1090,   552,   882,   592,    -1,    93,  1039,    -1,
     103,   591,  1040,   592,    -1,   108,   591,  1040,   592,    -1,
     202,   591,  1040,   592,    -1,   217,   591,  1040,   593,  1040,
     593,  1040,   593,  1040,   592,    -1,   220,   591,  1040,   593,
    1040,   592,    -1,   220,   591,  1040,   593,  1040,   593,  1090,
     592,    -1,   242,   591,  1040,   593,  1040,   592,    -1,   301,
     591,  1040,   592,    -1,   308,   591,  1040,   592,    -1,   427,
     591,  1040,   593,  1040,   592,    -1,   438,   591,  1040,   592,
      -1,   515,   591,  1040,   592,    -1,   512,   591,  1040,   592,
      -1,   512,   591,  1040,   593,  1040,   592,    -1,   524,   591,
    1040,   592,    -1,   524,   591,   239,  1040,   177,  1040,   592,
      -1,   524,   591,   520,  1040,   177,  1040,   592,    -1,   524,
     591,    44,  1040,   177,  1040,   592,    -1,   524,   591,   239,
     177,  1040,   592,    -1,   524,   591,   520,   177,  1040,   592,
      -1,   524,   591,    44,   177,  1040,   592,    -1,   524,   591,
    1040,   177,  1040,   592,    -1,   549,   591,   592,    -1,   580,
     591,  1040,   592,    -1,     7,   591,  1040,   593,  1040,   592,
      -1,     7,   591,  1040,   593,   220,  1040,  1133,   592,    -1,
      91,  1039,    -1,    95,  1039,    -1,    95,   591,  1040,   592,
      -1,   101,   591,  1040,   593,   220,  1040,  1133,   592,    -1,
     102,   591,  1040,   593,   220,  1040,  1133,   592,    -1,   160,
     591,  1133,   177,  1040,   592,    -1,   184,   591,  1136,   593,
    1040,   592,    -1,   328,  1039,    -1,   328,   591,  1040,   592,
      -1,   374,   591,  1043,   224,  1040,   592,    -1,   489,   591,
    1040,   593,  1040,   592,    -1,   489,   591,  1040,   593,   220,
    1040,  1133,   592,    -1,   493,   591,  1040,   593,  1040,   593,
    1040,   592,    -1,   493,   591,  1040,   593,  1040,   592,    -1,
     493,   591,  1040,   177,  1040,   174,  1040,   592,    -1,   493,
     591,  1040,   177,  1040,   592,    -1,   499,  1039,    -1,   499,
     591,  1040,   592,    -1,   513,   591,  1134,   593,  1040,   593,
    1040,   592,    -1,   514,   591,  1134,   593,  1040,   593,  1040,
     592,    -1,   553,  1039,    -1,   555,  1039,    -1,   554,  1039,
      -1,    20,   591,  1040,   592,    -1,    57,   591,  1040,   592,
      -1,    64,   591,  1090,   592,    -1,    67,   591,  1040,   592,
      -1,    96,   591,   592,    -1,   206,   591,  1040,   593,  1040,
     593,  1040,   592,    -1,   297,   591,  1040,   592,    -1,   307,
     591,  1040,   593,  1040,   592,    -1,   339,   591,  1040,   592,
      -1,   365,   591,  1040,   592,    -1,   388,   591,  1040,   592,
      -1,   414,   591,  1040,   593,  1040,   592,    -1,   415,   591,
    1040,   593,  1040,   593,  1040,   592,    -1,   526,   591,  1040,
     593,  1040,   592,    -1,   567,   591,  1040,   592,    -1,   567,
     591,  1040,   593,  1040,   592,    -1,  1054,    -1,    81,   591,
    1040,   593,  1040,   592,    -1,   182,   591,  1090,   592,    -1,
     250,   591,  1090,   592,    -1,   309,   591,  1090,   592,    -1,
     310,   591,  1090,   592,    -1,   311,   591,  1090,   592,    -1,
     371,   591,  1040,   593,  1040,   592,    -1,   372,   591,  1090,
     592,    -1,  1318,   591,  1073,   592,  1059,    -1,  1318,   591,
    1073,   592,  1058,  1059,    -1,   494,   591,  1086,   592,  1059,
      -1,   494,   591,   126,  1086,   592,  1059,    -1,    27,   591,
    1086,   592,  1059,    -1,    27,   591,   126,  1086,   592,  1059,
      -1,    86,   591,  1139,   586,   592,  1059,    -1,    86,   591,
    1086,   592,  1059,    -1,    86,   591,   126,  1090,   592,  1059,
      -1,   303,   591,  1086,   592,  1059,    -1,   303,   591,   126,
    1086,   592,  1059,    -1,   287,   591,  1086,   592,  1059,    -1,
     287,   591,   126,  1086,   592,  1059,    -1,   561,   591,  1086,
     592,  1059,    -1,   563,   591,  1086,   592,  1059,    -1,   484,
     591,  1086,   592,  1059,    -1,   483,   591,  1086,   592,  1059,
      -1,   332,   591,  1074,   592,  1056,  1057,  1059,    -1,   366,
     591,  1075,   592,   572,   188,   591,   349,    46,  1062,   592,
    1059,    -1,   367,   591,  1075,   592,   572,   188,   591,   349,
      46,  1062,   592,  1059,    -1,    -1,   177,   166,    -1,   177,
     237,    -1,    -1,  1058,    -1,   420,   334,    -1,   207,   334,
      -1,   355,   591,  1060,  1061,   592,    -1,    -1,   364,    46,
    1090,    -1,    -1,  1065,    -1,   349,    46,  1062,  1064,    -1,
    1062,   593,  1310,  1156,  1063,    -1,  1310,  1156,  1063,    -1,
      -1,   334,   166,    -1,   334,   237,    -1,    -1,  1065,    -1,
    1066,    31,  1067,    16,  1067,    -1,  1066,  1067,    -1,   431,
      -1,   391,    -1,   531,  1068,    -1,    92,   433,    -1,  1040,
    1068,    -1,   220,  1040,  1133,  1068,    -1,   375,    -1,   171,
      -1,  1318,   591,  1073,   592,    -1,  1322,   599,  1322,   591,
    1089,   592,    -1,  1071,  1072,    -1,   224,    42,   304,    -1,
      -1,   224,   316,   236,   304,    -1,    -1,   571,   389,   157,
      -1,    -1,  1074,    -1,  1075,    -1,  1074,   593,  1075,    -1,
    1035,  1040,  1036,  1038,    -1,    27,   591,  1086,   592,    -1,
      27,   591,   126,  1086,   592,    -1,    36,   591,  1086,   592,
      -1,    37,   591,  1086,   592,    -1,    39,   591,  1086,   592,
      -1,    86,   591,  1139,   586,   592,    -1,    86,   591,  1086,
     592,    -1,    86,   591,   126,  1090,   592,    -1,   303,   591,
    1086,   592,    -1,   303,   591,   126,  1086,   592,    -1,   287,
     591,  1086,   592,    -1,   287,   591,   126,  1086,   592,    -1,
     484,   591,  1086,   592,    -1,   561,   591,  1086,   592,    -1,
     483,   591,  1086,   592,    -1,   563,   591,  1086,   592,    -1,
     494,   591,  1086,   592,    -1,   494,   591,   126,  1086,   592,
      -1,    -1,   189,   591,  1081,  1077,  1090,  1083,  1082,   592,
      -1,    -1,   598,  1079,  1080,    -1,  1324,   449,  1040,    -1,
    1324,    -1,   598,  1337,  1324,   928,    -1,    -1,   126,    -1,
      -1,   442,  1303,    -1,    -1,    -1,   349,    46,  1084,  1085,
      -1,  1085,   593,  1310,  1156,    -1,  1310,  1156,    -1,    -1,
    1139,  1087,  1040,    -1,    33,   875,    -1,    58,   875,   891,
      -1,   318,   875,    -1,   455,    -1,   455,   222,    -1,   544,
      -1,   544,   222,    -1,   103,    -1,   515,    -1,   100,    -1,
     111,   869,    -1,    -1,  1090,    -1,  1040,    -1,  1090,   593,
    1040,    -1,  1092,    -1,   591,  1092,   592,    -1,  1311,    -1,
    1092,   593,  1311,    -1,    -1,  1040,    -1,    -1,   136,  1040,
      -1,   568,  1040,   511,  1040,    -1,  1095,   568,  1040,   511,
    1040,    -1,  1109,    -1,  1100,    -1,  1099,    -1,  1096,    -1,
     595,  1322,  1096,   596,    -1,  1098,    -1,  1099,   593,  1098,
      -1,  1096,  1108,  1096,    -1,  1096,   487,  1109,    -1,    -1,
    1096,  1108,  1096,   340,  1101,  1040,    -1,    -1,  1096,   487,
    1109,   340,  1102,  1040,    -1,    -1,  1096,  1108,  1096,   552,
    1103,   591,  1132,   592,    -1,  1096,   316,   231,  1109,    -1,
      -1,  1096,   242,  1118,   231,  1096,   340,  1104,  1040,    -1,
      -1,  1096,   242,  1118,   231,  1109,  1105,   552,   591,  1132,
     592,    -1,  1096,   316,   242,  1118,   231,  1109,    -1,    -1,
    1096,   427,  1118,   231,  1096,   340,  1106,  1040,    -1,    -1,
    1096,   427,  1118,   231,  1109,  1107,   552,   591,  1132,   592,
      -1,  1096,   316,   427,  1118,   231,  1109,    -1,   231,    -1,
     213,   231,    -1,    89,   231,    -1,    -1,  1110,  1315,  1138,
    1127,    -1,  1117,  1116,  1113,    -1,   591,  1116,  1111,  1400,
     592,  1138,    -1,    -1,  1116,  1112,  1099,    -1,    -1,    -1,
    1114,  1029,  1033,  1115,   847,    -1,    -1,   440,    -1,    -1,
     352,    -1,    -1,   174,   231,    -1,   174,   349,    46,    -1,
     174,   188,    46,    -1,   172,    -1,   207,    -1,    -1,  1120,
     905,  1119,  1122,   591,  1131,   592,    -1,    -1,   551,   905,
    1119,  1123,   591,  1129,   592,    -1,  1121,    -1,  1124,  1121,
      -1,    -1,    -1,  1126,  1124,    -1,    -1,  1128,  1125,    -1,
      -1,  1131,    -1,  1322,    -1,   380,    -1,  1130,    -1,  1131,
     593,  1130,    -1,  1322,    -1,  1132,   593,  1322,    -1,  1135,
      -1,   104,    -1,   105,    -1,   106,    -1,   107,    -1,   199,
      -1,   200,    -1,   201,    -1,   299,    -1,   300,    -1,   437,
      -1,   579,    -1,  1135,    -1,   176,    -1,   108,    -1,   567,
      -1,   202,    -1,   301,    -1,   308,    -1,   388,    -1,   438,
      -1,   297,    -1,   580,    -1,   103,    -1,   515,    -1,   100,
      -1,   512,    -1,    -1,    18,    -1,   146,    -1,    -1,  1137,
    1322,    -1,    -1,    12,    -1,    -1,    -1,   569,  1141,  1040,
      -1,    -1,    -1,   193,  1143,  1040,    -1,   150,  1050,    -1,
      -1,    -1,    -1,   188,    46,  1146,  1147,  1148,    -1,  1147,
     593,  1310,  1156,    -1,  1310,  1156,    -1,    -1,   571,    90,
      -1,   571,   429,    -1,   349,    46,  1150,    -1,  1150,   593,
    1151,    -1,  1151,    -1,  1312,  1156,    -1,    -1,  1153,    -1,
      -1,   349,    46,  1154,  1155,    -1,  1155,   593,  1310,  1156,
      -1,  1310,  1156,    -1,    -1,    19,    -1,   118,    -1,    -1,
    1159,    -1,    -1,  1159,    -1,   247,  1160,    -1,  1161,    -1,
    1161,   593,  1161,    -1,  1161,   338,  1161,    -1,  1304,    -1,
     530,    -1,   261,    -1,   335,    -1,    -1,   247,  1161,    -1,
     335,    -1,   195,    -1,   261,    -1,   530,    -1,   110,    -1,
     168,    -1,   335,    -1,   195,    -1,   261,    -1,   530,    -1,
    1167,    -1,   335,    -1,   530,    -1,   261,    -1,   110,    -1,
     168,    -1,   335,    -1,   530,    -1,   261,    -1,  1167,    -1,
    1168,    -1,   110,    -1,   168,    -1,    -1,    -1,   382,  1322,
    1170,   591,  1171,   592,    -1,    -1,  1172,    -1,  1172,   593,
    1173,    -1,  1173,    -1,  1035,  1040,  1036,    -1,    -1,  1175,
    1176,    -1,  1176,   593,  1177,    -1,  1177,    -1,   598,  1324,
      -1,  1324,    -1,    -1,   221,  1179,  1180,    -1,    -1,    -1,
     353,  1321,  1181,   884,  1182,  1291,  1294,    -1,   132,  1321,
      -1,  1174,    -1,    -1,   129,  1184,  1090,    -1,   130,  1192,
    1347,  1191,  1187,   965,    -1,    -1,   130,   210,  1322,   340,
    1315,  1186,    -1,   130,    96,  1191,  1322,    -1,   130,   180,
    1191,  1322,   599,  1322,    -1,   130,   180,  1191,  1322,    -1,
     130,   382,  1191,   647,    -1,   130,   549,   646,  1377,    -1,
     130,   564,  1191,  1187,   965,    -1,   130,   152,  1191,   647,
      -1,   130,   523,  1191,   647,    -1,   130,   501,   761,   772,
     773,    -1,   130,   257,   188,   762,   772,   773,    -1,   130,
     446,  1191,  1324,    -1,  1188,    -1,  1187,   593,  1188,    -1,
    1315,    -1,  1190,    -1,  1189,   593,  1190,    -1,  1316,    -1,
      -1,   206,   155,    -1,    -1,   505,    -1,    -1,    -1,   217,
    1194,  1199,   964,  1201,  1195,  1203,  1219,    -1,    -1,    -1,
     415,  1197,  1200,  1201,  1198,  1203,    -1,    -1,   264,    -1,
     115,    -1,   196,    -1,  1228,    -1,   115,    -1,   221,  1202,
      -1,  1202,    -1,  1188,    -1,  1206,    -1,   591,   592,  1206,
      -1,   591,  1205,   592,  1206,    -1,    -1,   448,  1204,  1210,
      -1,  1205,   593,  1308,    -1,  1308,    -1,   556,  1209,    -1,
     557,  1209,    -1,    -1,   826,  1207,  1397,    -1,    -1,   591,
     826,   592,  1208,  1400,    -1,  1209,   593,  1214,    -1,  1214,
      -1,  1210,   593,  1211,    -1,  1211,    -1,  1312,  1212,  1218,
      -1,   146,    -1,   449,    -1,    -1,  1212,    -1,    -1,   591,
    1215,  1216,   592,    -1,    -1,  1217,    -1,  1217,   593,  1218,
      -1,  1218,    -1,  1040,    -1,   113,    -1,    -1,    -1,   340,
     133,  1220,   234,   546,  1226,    -1,    -1,    -1,   546,  1222,
    1228,   964,  1097,   448,  1224,  1223,  1140,  1152,  1162,    -1,
    1224,   593,  1225,    -1,  1225,    -1,  1312,  1212,  1218,    -1,
    1226,   593,  1227,    -1,  1227,    -1,  1312,  1212,  1218,    -1,
      -1,   264,    -1,    -1,   117,  1230,  1238,  1231,    -1,    -1,
     177,  1315,  1232,  1140,  1152,  1162,    -1,    -1,  1235,  1233,
     177,  1097,  1140,    -1,    -1,   177,  1189,  1234,   552,  1097,
    1140,    -1,  1236,    -1,  1235,   593,  1236,    -1,  1322,  1237,
    1138,    -1,  1322,   599,  1322,  1237,  1138,    -1,    -1,   599,
     586,    -1,    -1,  1239,  1238,    -1,   390,    -1,   264,    -1,
     207,    -1,   526,  1241,  1188,    -1,    -1,   503,    -1,    -1,
    1243,    -1,  1244,    -1,  1243,   593,  1244,    -1,    87,    -1,
     295,    -1,    41,   225,    -1,    82,   498,    -1,   358,   163,
      -1,   226,    -1,   497,    -1,   463,    -1,    12,    -1,    -1,
     174,   389,   335,    -1,    -1,   453,  1247,  1248,    -1,    97,
    1258,    -1,  1254,   500,  1253,  1258,    -1,  1254,   522,  1253,
    1258,    -1,   151,  1253,  1258,    -1,   503,   482,  1253,  1258,
      -1,   343,   500,  1253,  1258,    -1,  1254,   370,    -1,   369,
      -1,   144,   844,  1250,    -1,   144,    12,  1250,    -1,  1254,
      68,  1255,  1315,  1253,  1258,    -1,   322,   280,   174,   457,
     571,   268,   146,  1319,    16,   269,   146,  1165,    16,   272,
     146,  1163,    -1,  1251,   258,    -1,   457,   198,    -1,    -1,
      34,   151,  1256,  1257,  1249,  1157,    -1,   907,  1255,  1315,
    1253,  1140,    -1,    69,   527,    -1,   503,   527,    -1,  1252,
     143,    -1,    23,    -1,    84,    -1,   381,    -1,    86,   591,
     586,   592,   566,    -1,    86,   591,   586,   592,   148,    -1,
     566,  1157,    -1,   148,  1157,    -1,   386,    -1,   385,  1242,
    1245,  1157,    -1,  1336,   482,  1258,    -1,   214,   482,    -1,
     312,   482,    -1,  1254,   384,    -1,  1336,   560,  1258,    -1,
     881,  1258,    -1,    67,  1258,    -1,   187,    -1,   187,   174,
    1325,    -1,    88,    96,   836,  1322,    -1,    88,   503,  1315,
      -1,    88,   564,  1315,    -1,   280,   482,    -1,   457,   482,
      -1,    88,   382,   647,    -1,    88,   180,   647,    -1,    88,
     523,   647,    -1,   382,   482,  1258,    -1,   180,   482,  1258,
      -1,   382,    65,   647,    -1,   180,    65,   647,    -1,    88,
     152,   647,    -1,   482,    -1,   312,    -1,   258,    -1,   280,
      -1,    33,    -1,    -1,   486,    -1,    -1,  1255,  1322,    -1,
      -1,   178,    -1,   177,    -1,   224,    -1,    -1,   224,  1319,
      -1,    -1,   177,  1165,    -1,    -1,   246,  1319,    -1,   569,
    1040,    -1,    -1,  1262,  1315,  1260,  1264,    -1,    -1,  1262,
    1263,  1261,  1019,    -1,   118,    -1,   119,    -1,    -1,   158,
      -1,   363,    -1,    -1,  1303,    -1,  1322,    -1,    -1,   170,
    1001,  1266,  1267,    -1,  1267,   593,  1268,    -1,  1268,    -1,
      -1,  1347,  1269,  1270,    -1,   500,   571,   394,   256,    -1,
     389,    48,    -1,   198,    -1,   381,    -1,   258,    -1,   482,
      -1,   457,    -1,   280,    -1,   120,    -1,   419,    -1,    -1,
    1187,    -1,    -1,   418,  1272,  1273,    -1,  1273,   593,  1274,
      -1,  1274,    -1,   457,    -1,   280,    -1,   389,    48,    -1,
      -1,   387,  1276,  1277,    -1,  1251,   258,  1278,    -1,   519,
    1319,    -1,    29,  1040,    -1,   235,  1280,  1040,    -1,    -1,
      78,    -1,   389,    -1,   551,  1322,    -1,    -1,   252,    99,
    1283,  1284,    -1,   252,   503,  1315,   177,   280,    -1,    -1,
      -1,    -1,  1289,  1288,   211,  1321,  1285,  1290,   221,   503,
    1315,  1286,   884,  1287,  1291,  1294,  1297,  1298,  1301,    -1,
     177,   280,    -1,    -1,   253,    -1,    -1,    76,    -1,   264,
      -1,    -1,   415,    -1,   207,    -1,    -1,    68,  1292,    -1,
    1292,  1293,    -1,  1293,    -1,   507,    46,  1303,    -1,   347,
     139,    46,  1303,    -1,   139,    46,  1303,    -1,   149,    46,
    1303,    -1,    -1,   249,  1295,    -1,  1295,  1296,    -1,  1296,
      -1,   507,    46,  1303,    -1,   479,    46,  1303,    -1,    -1,
     207,   335,   249,    -1,    -1,   591,  1299,   592,    -1,   591,
     592,    -1,  1299,   593,  1300,    -1,  1300,    -1,  1312,    -1,
     598,  1324,    -1,    -1,   448,  1226,    -1,   508,    -1,   317,
      -1,   534,   508,    -1,  1302,  1320,    -1,  1320,    -1,   195,
      -1,    35,    -1,   359,    -1,  1306,    -1,   585,  1307,    -1,
     584,  1307,    -1,  1302,    -1,  1307,    -1,   333,    -1,   161,
      -1,   525,    -1,   195,    -1,    35,    -1,   534,   195,    -1,
     534,    35,    -1,   103,  1302,    -1,   515,  1302,    -1,   512,
    1302,    -1,   335,    -1,   261,    -1,   530,    -1,   110,    -1,
     168,    -1,  1312,    -1,  1309,    -1,  1322,   599,   586,    -1,
    1322,   599,  1322,   599,   586,    -1,  1040,    -1,  1322,    -1,
    1313,    -1,  1322,    -1,  1313,    -1,  1322,   599,  1322,    -1,
     599,  1322,   599,  1322,    -1,  1322,   599,  1322,   599,  1322,
      -1,  1322,    -1,  1322,   599,  1322,   599,  1322,    -1,  1322,
     599,  1322,    -1,   599,  1322,    -1,  1322,    -1,  1322,   599,
    1322,    -1,   599,  1322,    -1,  1322,  1237,    -1,  1322,   599,
    1322,  1237,    -1,  1322,    -1,   203,    -1,   205,    -1,   508,
      -1,   508,    -1,   508,    -1,  1318,    -1,  1326,    -1,  1318,
      -1,  1327,    -1,  1322,    -1,  1319,    -1,   245,    -1,  1324,
      -1,  1324,   598,  1324,    -1,    93,  1039,    -1,  1327,    -1,
      20,    -1,    28,    -1,    30,    -1,    47,    -1,    48,    -1,
      57,    -1,    59,    -1,    63,    -1,    70,    -1,    72,    -1,
      81,    -1,   109,    -1,   129,    -1,   140,    -1,   154,    -1,
     170,    -1,   191,    -1,   194,    -1,   197,    -1,   219,    -1,
     236,    -1,   329,    -1,   343,    -1,   345,    -1,   356,    -1,
     360,    -1,   364,    -1,   373,    -1,   377,    -1,   409,    -1,
     412,    -1,   418,    -1,   421,    -1,   428,    -1,   435,    -1,
     439,    -1,   446,    -1,   455,    -1,   460,    -1,   457,    -1,
     461,    -1,   481,    -1,   485,    -1,   526,    -1,   538,    -1,
     539,    -1,   574,    -1,   577,    -1,   547,    -1,     5,    -1,
       7,    -1,     8,    -1,     9,    -1,    10,    -1,    11,    -1,
      17,    -1,    22,    -1,    23,    -1,    25,    -1,    24,    -1,
      26,    -1,    27,    -1,    34,    -1,    38,    -1,    41,    -1,
      43,    -1,    42,    -1,    45,    -1,    51,    -1,    54,    -1,
      56,    -1,    61,    -1,    62,    -1,    64,    -1,    65,    -1,
      67,    -1,    68,    -1,    71,    -1,    73,    -1,    74,    -1,
      75,    -1,    76,    -1,    78,    -1,    79,    -1,    82,    -1,
      84,    -1,    87,    -1,    90,    -1,    99,    -1,    98,    -1,
     100,    -1,   103,    -1,   108,    -1,   114,    -1,   116,    -1,
     120,    -1,   122,    -1,   123,    -1,   124,    -1,   125,    -1,
     132,    -1,   133,    -1,   134,    -1,   141,    -1,   145,    -1,
     144,    -1,   143,    -1,   148,    -1,   150,    -1,   152,    -1,
     151,    -1,   153,    -1,   157,    -1,   158,    -1,   159,    -1,
     163,    -1,   162,    -1,   175,    -1,   138,    -1,   178,    -1,
     165,    -1,   166,    -1,   167,    -1,   176,    -1,   183,    -1,
     182,    -1,   184,    -1,   187,    -1,   185,    -1,   192,    -1,
     198,    -1,   202,    -1,   204,    -1,   223,    -1,   208,    -1,
     209,    -1,   212,    -1,   225,    -1,   226,    -1,   228,    -1,
     229,    -1,   214,    -1,   218,    -1,   233,    -1,   237,    -1,
     240,    -1,   243,    -1,   244,    -1,   250,    -1,   251,    -1,
     253,    -1,   255,    -1,   257,    -1,   258,    -1,   285,    -1,
     280,    -1,   267,    -1,   271,    -1,   268,    -1,   269,    -1,
     281,    -1,   270,    -1,   272,    -1,   266,    -1,   278,    -1,
     274,    -1,   273,    -1,   275,    -1,   276,    -1,   277,    -1,
     283,    -1,   284,    -1,   286,    -1,   288,    -1,   289,    -1,
     290,    -1,   294,    -1,   295,    -1,   296,    -1,   297,    -1,
     298,    -1,   301,    -1,   302,    -1,   306,    -1,   304,    -1,
     308,    -1,   309,    -1,   310,    -1,   311,    -1,   312,    -1,
     314,    -1,   313,    -1,   315,    -1,   318,    -1,   319,    -1,
     323,    -1,   322,    -1,   330,    -1,   324,    -1,   325,    -1,
     337,    -1,   338,    -1,   339,    -1,   341,    -1,   342,    -1,
     357,    -1,   358,    -1,   361,    -1,   362,    -1,   363,    -1,
     365,    -1,   368,    -1,   370,    -1,   369,    -1,   371,    -1,
     372,    -1,   378,    -1,   379,    -1,   381,    -1,   383,    -1,
     384,    -1,   385,    -1,   386,    -1,   388,    -1,   389,    -1,
     390,    -1,   393,    -1,   397,    -1,   398,    -1,   400,    -1,
     399,    -1,   401,    -1,   404,    -1,   405,    -1,   406,    -1,
     408,    -1,   411,    -1,   413,    -1,   416,    -1,   419,    -1,
     423,    -1,   424,    -1,   429,    -1,   430,    -1,   431,    -1,
     432,    -1,   433,    -1,   434,    -1,   436,    -1,   438,    -1,
     444,    -1,   443,    -1,   445,    -1,   456,    -1,   450,    -1,
     454,    -1,   459,    -1,   462,    -1,   463,    -1,   471,    -1,
     470,    -1,   473,    -1,   474,    -1,   477,    -1,   480,    -1,
     482,    -1,   486,    -1,   488,    -1,   489,    -1,   490,    -1,
     492,    -1,   491,    -1,   495,    -1,   496,    -1,   497,    -1,
     498,    -1,   500,    -1,   504,    -1,   501,    -1,   505,    -1,
     506,    -1,   509,    -1,   510,    -1,   521,    -1,   522,    -1,
     512,    -1,   513,    -1,   514,    -1,   515,    -1,   527,    -1,
     528,    -1,   529,    -1,   180,    -1,   532,    -1,   533,    -1,
     536,    -1,   535,    -1,   542,    -1,   545,    -1,   549,    -1,
     550,    -1,   560,    -1,   564,    -1,   557,    -1,   566,    -1,
     565,    -1,   567,    -1,   573,    -1,   576,    -1,   580,    -1,
      -1,   448,  1330,  1329,  1331,    -1,    -1,   346,    -1,  1332,
      -1,  1331,   593,  1332,    -1,    -1,  1333,  1338,    -1,  1335,
      -1,   185,    -1,   253,    -1,   445,    -1,    -1,   341,    -1,
      -1,   185,    -1,   253,    -1,   445,    -1,    -1,   185,   599,
      -1,   253,   599,    -1,   445,   599,    -1,  1339,    -1,  1335,
    1340,    -1,  1334,  1341,  1212,  1344,    -1,  1334,   521,   228,
     244,  1342,    -1,   598,  1324,  1212,  1040,    -1,   598,   598,
    1337,  1341,  1212,  1344,    -1,   881,   886,    -1,   313,  1212,
    1040,    -1,   313,   883,   888,    -1,   365,  1212,  1343,    -1,
     365,   174,  1325,  1212,  1343,    -1,  1322,    -1,  1322,   599,
    1322,    -1,   113,   599,  1322,    -1,   394,   532,    -1,   394,
      71,    -1,   413,   394,    -1,   443,    -1,   508,    -1,   365,
     591,   508,   592,    -1,   339,   591,   508,   592,    -1,  1040,
      -1,   113,    -1,   340,    -1,    12,    -1,    33,    -1,    -1,
     256,  1347,  1346,  1348,    -1,   503,    -1,   500,    -1,  1349,
      -1,  1348,   593,  1349,    -1,  1315,  1138,  1350,    -1,   394,
      -1,   575,    -1,   264,   575,    -1,   394,   253,    -1,    -1,
     543,  1352,  1347,    -1,   191,  1315,   343,  1138,    -1,   191,
    1317,    63,    -1,    -1,   191,  1317,   394,  1354,  1355,  1140,
    1158,    -1,  1356,    -1,  1322,  1357,    -1,   166,    -1,   323,
      -1,   166,    -1,   323,    -1,   379,    -1,   237,    -1,    -1,
    1359,  1358,   591,  1217,   592,    -1,   146,    -1,   181,    -1,
     238,    -1,   190,    -1,   265,    -1,   426,   646,  1361,    -1,
    1365,   340,  1364,  1376,   177,  1378,    -1,  1365,   340,   180,
    1376,   177,  1378,    -1,  1365,   340,   382,  1376,   177,  1378,
      -1,    12,  1366,   593,   186,   346,   177,  1378,    -1,   186,
     646,  1363,    -1,  1365,   340,  1364,  1376,   519,  1378,  1383,
    1384,    -1,  1365,   340,   180,  1376,   519,  1378,  1383,  1384,
      -1,  1365,   340,   382,  1376,   519,  1378,  1383,  1384,    -1,
      -1,   503,    -1,  1367,    -1,    12,  1366,    -1,    -1,   381,
      -1,  1368,    -1,  1367,   593,  1368,    -1,    -1,   440,  1369,
    1380,    -1,    -1,   217,  1370,  1380,    -1,    -1,   546,  1371,
    1380,    -1,    -1,   402,  1372,  1380,    -1,   117,    -1,   548,
      -1,   210,    -1,    13,    -1,    88,    -1,   130,    -1,   154,
      -1,   408,    -1,   454,    -1,   383,    -1,   165,    -1,   186,
     346,    -1,   453,    97,    -1,   495,    -1,    88,   505,   500,
      -1,   256,   500,    -1,   416,   457,    -1,   416,    62,    -1,
      88,   564,    -1,   453,   564,    -1,    88,   430,    -1,    13,
     430,    -1,    88,   549,    -1,   152,    -1,   523,    -1,    -1,
      16,    -1,  1375,  1373,  1374,    -1,  1375,    -1,   490,   508,
      -1,   229,   508,    -1,    61,   508,    -1,   586,    -1,  1322,
     599,   586,    -1,   586,   599,   586,    -1,  1315,    -1,  1325,
      -1,  1377,   593,  1325,    -1,  1379,    -1,  1378,   593,  1379,
      -1,  1325,   204,    46,   508,    -1,  1325,   204,    46,   365,
     508,    -1,  1325,    -1,    -1,   591,  1381,   592,    -1,  1381,
     593,  1382,    -1,  1382,    -1,  1322,    -1,    -1,   417,  1374,
      -1,   417,   478,    -1,   417,   576,    -1,   417,   325,    -1,
      -1,   571,  1385,    -1,  1385,  1386,    -1,  1386,    -1,   186,
     346,    -1,   284,  1163,    -1,   288,  1163,    -1,   283,  1163,
      -1,   289,  1163,    -1,    -1,    30,  1388,  1389,    -1,    -1,
     573,    -1,    -1,    16,   329,    54,    -1,    16,    54,    -1,
      -1,   407,    -1,   329,   407,    -1,    -1,   435,    -1,    72,
    1389,  1390,  1391,    -1,   428,  1389,  1390,  1391,    -1,   428,
    1389,   519,  1392,  1322,    -1,   435,  1322,    -1,   407,   435,
    1322,    -1,    -1,  1398,    -1,    -1,   540,  1404,  1399,  1020,
      -1,    -1,  1398,    -1,  1401,    -1,    -1,  1402,  1403,    -1,
    1153,  1157,    -1,  1159,    -1,    -1,   126,    -1,    12,    -1,
      -1,   440,  1407,  1022,  1405,  1408,    -1,   591,  1407,  1021,
    1405,  1408,   592,    -1,    -1,    -1,  1414,  1410,    -1,  1413,
    1411,    -1,  1415,  1412,  1419,    -1,  1419,    -1,  1427,    -1,
    1438,    -1,  1432,    -1,   633,    -1,  1419,    -1,  1427,    -1,
    1438,    -1,  1432,    -1,  1431,    -1,   633,    -1,  1413,    -1,
    1414,    -1,    -1,   114,   146,  1325,    -1,  1416,    -1,  1416,
    1417,    -1,  1417,    -1,   351,   415,    -1,    11,   146,   533,
      -1,    11,   146,   296,    -1,    11,   146,   506,    -1,    -1,
     476,   439,   114,    -1,   476,   439,   223,    -1,    -1,  1418,
     564,  1315,  1420,  1421,    18,  1423,    -1,    -1,   591,  1422,
     592,    -1,  1322,    -1,  1422,   593,  1322,    -1,    -1,  1424,
    1425,  1426,    -1,   440,  1022,    -1,   591,  1021,   592,  1400,
      -1,    -1,   571,    60,   346,    -1,   571,    51,    60,   346,
      -1,   571,   253,    60,   346,    -1,    -1,    -1,    -1,   523,
    1035,   647,   732,   733,   340,  1035,  1428,  1315,   174,  1035,
    1429,   135,   433,  1430,   682,    -1,    10,  1035,   180,  1322,
     424,   848,   461,  1319,    -1,  1035,   180,  1322,   424,   848,
     461,  1319,    -1,    -1,    -1,    -1,    -1,    -1,  1035,   180,
     647,   591,  1433,   658,   592,  1434,   424,  1435,   859,  1436,
     649,  1437,   682,    -1,    -1,    -1,    -1,    -1,   382,  1035,
     647,  1439,   591,  1440,   662,   592,  1441,   649,  1442,   682,
      -1,   577,  1445,  1444,  1446,    -1,   577,   140,  1444,  1448,
      -1,   577,   377,  1444,    -1,   577,    72,  1444,  1447,    -1,
     577,   428,  1444,    -1,   577,   398,    -1,  1303,    -1,  1303,
     593,  1303,    -1,  1303,   593,  1303,   593,  1163,    -1,    30,
      -1,   481,    -1,    -1,   231,    -1,   423,    -1,    -1,   342,
     368,    -1,    -1,    -1,   496,  1449,  1450,    -1,    -1,   174,
     298,    -1,   219,   370,  1322,   461,  1319,    -1,   539,   370,
    1322,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1554,  1554,  1567,  1566,  1591,  1598,  1600,  1604,  1605,
    1610,  1611,  1612,  1613,  1614,  1615,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,  1623,  1624,  1625,  1626,  1627,  1628,  1629,
    1630,  1631,  1632,  1633,  1634,  1635,  1636,  1637,  1638,  1639,
    1640,  1641,  1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,
    1650,  1651,  1652,  1653,  1654,  1655,  1656,  1657,  1658,  1659,
    1660,  1664,  1674,  1675,  1679,  1689,  1696,  1707,  1706,  1717,
    1719,  1723,  1724,  1728,  1741,  1740,  1760,  1759,  1770,  1771,
    1775,  1779,  1783,  1787,  1791,  1795,  1800,  1804,  1808,  1812,
    1816,  1820,  1825,  1829,  1833,  1849,  1853,  1865,  1864,  1898,
    1897,  1909,  1907,  1920,  1918,  1930,  1929,  1942,  1941,  1949,
    1953,  1957,  1961,  1968,  1981,  1982,  1986,  1990,  1994,  1998,
    2002,  2006,  2010,  2018,  2017,  2049,  2048,  2055,  2062,  2063,
    2069,  2075,  2085,  2091,  2097,  2099,  2106,  2107,  2111,  2117,
    2126,  2127,  2135,  2135,  2193,  2194,  2195,  2196,  2197,  2198,
    2199,  2200,  2201,  2202,  2203,  2204,  2205,  2210,  2224,  2240,
    2259,  2260,  2264,  2265,  2270,  2272,  2274,  2276,  2278,  2280,
    2282,  2288,  2289,  2290,  2294,  2298,  2306,  2305,  2318,  2320,
    2323,  2325,  2329,  2333,  2340,  2342,  2346,  2347,  2352,  2371,
    2397,  2399,  2403,  2404,  2408,  2434,  2435,  2436,  2437,  2441,
    2442,  2446,  2447,  2452,  2455,  2482,  2481,  2546,  2562,  2561,
    2615,  2641,  2641,  2664,  2665,  2670,  2672,  2677,  2700,  2708,
    2725,  2726,  2730,  2734,  2743,  2750,  2757,  2767,  2782,  2800,
    2801,  2805,  2806,  2807,  2808,  2809,  2810,  2811,  2812,  2813,
    2814,  2815,  2816,  2817,  2822,  2821,  2828,  2828,  2885,  2884,
    2913,  2913,  2927,  2980,  3023,  3044,  3043,  3065,  3084,  3086,
    3087,  3091,  3111,  3134,  3136,  3152,  3134,  3171,  3173,  3174,
    3178,  3179,  3184,  3190,  3183,  3211,  3210,  3226,  3227,  3231,
    3232,  3237,  3241,  3236,  3262,  3266,  3261,  3285,  3295,  3300,
    3299,  3335,  3336,  3341,  3340,  3373,  3373,  3388,  3387,  3423,
    3435,  3437,  3434,  3464,  3463,  3484,  3486,  3491,  3493,  3495,
    3512,  3517,  3523,  3530,  3531,  3539,  3545,  3554,  3560,  3566,
    3567,  3571,  3571,  3576,  3577,  3578,  3582,  3583,  3584,  3588,
    3592,  3593,  3594,  3598,  3599,  3600,  3601,  3602,  3603,  3604,
    3605,  3609,  3613,  3614,  3615,  3619,  3620,  3621,  3622,  3623,
    3627,  3631,  3632,  3633,  3637,  3638,  3639,  3640,  3641,  3642,
    3643,  3647,  3651,  3652,  3653,  3657,  3658,  3659,  3664,  3672,
    3680,  3688,  3700,  3712,  3717,  3722,  3730,  3738,  3746,  3754,
    3762,  3770,  3778,  3791,  3804,  3817,  3819,  3823,  3828,  3841,
    3842,  3893,  3894,  3897,  3911,  3928,  3933,  3931,  3941,  3943,
    3942,  3949,  3948,  3981,  3982,  3987,  3986,  4019,  4018,  4035,
    4039,  4046,  4045,  4049,  4048,  4052,  4051,  4057,  4058,  4063,
    4064,  4068,  4069,  4073,  4084,  4099,  4115,  4116,  4132,  4134,
    4133,  4138,  4136,  4147,  4148,  4152,  4163,  4179,  4180,  4196,
    4197,  4220,  4221,  4226,  4225,  4250,  4261,  4281,  4296,  4314,
    4326,  4342,  4343,  4347,  4357,  4358,  4362,  4379,  4438,  4450,
    4477,  4478,  4483,  4482,  4520,  4525,  4526,  4530,  4531,  4535,
    4537,  4543,  4545,  4547,  4549,  4551,  4553,  4563,  4592,  4562,
    4606,  4607,  4611,  4612,  4616,  4617,  4621,  4622,  4626,  4627,
    4631,  4632,  4636,  4640,  4641,  4644,  4646,  4650,  4651,  4655,
    4656,  4657,  4661,  4666,  4673,  4678,  4683,  4688,  4693,  4698,
    4703,  4718,  4724,  4729,  4734,  4739,  4744,  4757,  4758,  4759,
    4764,  4769,  4774,  4776,  4778,  4780,  4786,  4794,  4812,  4829,
    4852,  4866,  4867,  4868,  4869,  4870,  4871,  4875,  4876,  4877,
    4881,  4882,  4886,  4887,  4888,  4889,  4893,  4894,  4898,  4899,
    4903,  4904,  4911,  4916,  4922,  4928,  4934,  4954,  4958,  4964,
    4966,  4970,  4974,  4975,  4979,  4984,  4983,  5006,  5007,  5008,
    5009,  5014,  5018,  5023,  5028,  5032,  5037,  5042,  5048,  5053,
    5059,  5063,  5068,  5073,  5091,  5093,  5095,  5108,  5110,  5115,
    5120,  5132,  5137,  5142,  5147,  5149,  5151,  5153,  5155,  5157,
    5159,  5161,  5164,  5163,  5168,  5167,  5171,  5173,  5182,  5183,
    5184,  5189,  5190,  5191,  5192,  5193,  5197,  5201,  5202,  5206,
    5207,  5211,  5212,  5213,  5214,  5215,  5219,  5220,  5221,  5222,
    5223,  5227,  5232,  5234,  5240,  5241,  5243,  5248,  5257,  5258,
    5262,  5263,  5267,  5268,  5269,  5273,  5274,  5275,  5276,  5279,
    5280,  5283,  5284,  5288,  5289,  5293,  5294,  5298,  5299,  5300,
    5301,  5308,  5309,  5315,  5321,  5327,  5333,  5334,  5350,  5356,
    5361,  5362,  5366,  5374,  5378,  5379,  5383,  5384,  5388,  5397,
    5401,  5402,  5406,  5417,  5418,  5422,  5423,  5427,  5428,  5432,
    5433,  5434,  5435,  5444,  5445,  5449,  5450,  5454,  5455,  5456,
    5465,  5468,  5470,  5475,  5474,  5487,  5488,  5492,  5499,  5509,
    5510,  5514,  5515,  5519,  5520,  5521,  5522,  5523,  5527,  5528,
    5529,  5530,  5531,  5535,  5539,  5540,  5544,  5545,  5549,  5550,
    5554,  5555,  5556,  5560,  5561,  5565,  5569,  5582,  5594,  5595,
    5599,  5600,  5604,  5605,  5609,  5610,  5614,  5615,  5619,  5620,
    5624,  5625,  5629,  5630,  5634,  5639,  5640,  5644,  5648,  5649,
    5662,  5663,  5664,  5668,  5669,  5673,  5679,  5693,  5694,  5698,
    5699,  5703,  5704,  5712,  5711,  5737,  5736,  5750,  5762,  5761,
    5780,  5779,  5798,  5797,  5816,  5810,  5830,  5829,  5862,  5867,
    5872,  5877,  5882,  5892,  5893,  5894,  5895,  5899,  5900,  5912,
    5913,  5917,  5918,  5921,  5923,  5924,  5925,  5927,  5929,  5930,
    5939,  5940,  5944,  5953,  5951,  5961,  5971,  5970,  5980,  5978,
    5988,  5995,  5999,  6006,  6010,  6015,  6014,  6030,  6032,  6037,
    6046,  6045,  6061,  6065,  6064,  6076,  6077,  6081,  6096,  6097,
    6101,  6110,  6111,  6115,  6120,  6119,  6127,  6136,  6126,  6148,
    6157,  6161,  6170,  6179,  6185,  6191,  6200,  6209,  6228,  6249,
    6254,  6258,  6266,  6267,  6271,  6272,  6276,  6277,  6278,  6282,
    6283,  6284,  6288,  6289,  6290,  6291,  6300,  6299,  6310,  6318,
    6317,  6327,  6336,  6345,  6346,  6353,  6353,  6359,  6360,  6364,
    6365,  6366,  6370,  6371,  6387,  6388,  6393,  6392,  6404,  6403,
    6415,  6414,  6424,  6425,  6426,  6431,  6430,  6443,  6444,  6448,
    6449,  6453,  6454,  6455,  6460,  6459,  6472,  6481,  6480,  6498,
    6499,  6503,  6504,  6508,  6509,  6510,  6511,  6512,  6513,  6518,
    6517,  6530,  6531,  6532,  6537,  6536,  6542,  6549,  6554,  6562,
    6563,  6567,  6580,  6589,  6590,  6594,  6603,  6604,  6609,  6608,
    6618,  6619,  6623,  6632,  6632,  6643,  6644,  6649,  6650,  6659,
    6668,  6669,  6673,  6703,  6708,  6707,  6727,  6735,  6727,  6742,
    6743,  6744,  6745,  6746,  6750,  6757,  6764,  6766,  6777,  6778,
    6782,  6783,  6790,  6791,  6792,  6793,  6799,  6805,  6811,  6815,
    6829,  6832,  6834,  6842,  6853,  6854,  6855,  6870,  6896,  6902,
    6908,  6909,  6913,  6914,  6915,  6916,  6917,  6921,  6922,  6927,
    6978,  6985,  7028,  7034,  7040,  7046,  7052,  7058,  7064,  7070,
    7074,  7080,  7086,  7092,  7098,  7104,  7108,  7114,  7124,  7130,
    7138,  7144,  7154,  7160,  7169,  7179,  7185,  7195,  7201,  7210,
    7214,  7220,  7226,  7232,  7238,  7244,  7250,  7256,  7262,  7268,
    7274,  7280,  7286,  7292,  7298,  7302,  7303,  7307,  7308,  7312,
    7313,  7317,  7318,  7322,  7323,  7324,  7325,  7326,  7327,  7331,
    7332,  7336,  7337,  7338,  7339,  7340,  7341,  7342,  7354,  7355,
    7356,  7357,  7358,  7364,  7368,  7374,  7380,  7386,  7392,  7394,
    7401,  7408,  7414,  7416,  7425,  7432,  7440,  7446,  7453,  7459,
    7473,  7480,  7496,  7502,  7508,  7516,  7522,  7528,  7534,  7540,
    7555,  7567,  7573,  7579,  7585,  7591,  7597,  7603,  7609,  7615,
    7621,  7627,  7633,  7639,  7645,  7651,  7657,  7663,  7671,  7692,
    7699,  7705,  7712,  7719,  7726,  7733,  7740,  7746,  7752,  7759,
    7766,  7772,  7779,  7785,  7791,  7797,  7803,  7809,  7827,  7837,
    7843,  7849,  7856,  7863,  7878,  7884,  7890,  7896,  7902,  7909,
    7915,  7921,  7927,  7933,  7945,  7951,  7957,  7963,  7969,  7981,
    7987,  8003,  8009,  8016,  8023,  8030,  8037,  8044,  8048,  8061,
    8086,  8122,  8130,  8144,  8152,  8166,  8174,  8182,  8210,  8218,
    8232,  8240,  8254,  8262,  8270,  8278,  8287,  8299,  8307,  8318,
    8319,  8320,  8323,  8324,  8327,  8328,  8331,  8359,  8360,  8364,
    8365,  8370,  8391,  8397,  8411,  8412,  8413,  8417,  8418,  8422,
    8437,  8450,  8451,  8455,  8460,  8465,  8471,  8481,  8482,  8499,
    8572,  8614,  8616,  8621,  8622,  8626,  8627,  8631,  8632,  8636,
    8643,  8651,  8677,  8683,  8689,  8695,  8701,  8707,  8716,  8737,
    8743,  8754,  8760,  8766,  8772,  8778,  8784,  8790,  8796,  8802,
    8809,  8808,  8828,  8827,  8842,  8852,  8860,  8876,  8877,  8882,
    8887,  8890,  8893,  8892,  8909,  8911,  8917,  8916,  8933,  8935,
    8937,  8939,  8941,  8943,  8945,  8947,  8949,  8951,  8953,  8958,
    8959,  8963,  8970,  8978,  8979,  8983,  8990,  8998,  8999,  9003,
    9004,  9008,  9016,  9026,  9027,  9036,  9047,  9048,  9053,  9054,
    9074,  9076,  9080,  9078,  9095,  9093,  9111,  9109,  9116,  9125,
    9123,  9141,  9140,  9150,  9161,  9159,  9178,  9177,  9188,  9199,
    9200,  9201,  9206,  9206,  9219,  9241,  9294,  9293,  9316,  9333,
    9316,  9340,  9344,  9370,  9371,  9376,  9380,  9381,  9382,  9386,
    9387,  9392,  9391,  9397,  9396,  9404,  9405,  9408,  9410,  9410,
    9414,  9414,  9419,  9420,  9424,  9426,  9431,  9432,  9436,  9447,
    9460,  9461,  9462,  9463,  9464,  9465,  9466,  9467,  9468,  9469,
    9470,  9471,  9475,  9476,  9495,  9496,  9497,  9498,  9499,  9500,
    9501,  9502,  9503,  9507,  9508,  9509,  9510,  9513,  9515,  9516,
    9520,  9521,  9529,  9531,  9535,  9537,  9536,  9550,  9553,  9552,
    9567,  9573,  9588,  9591,  9590,  9598,  9600,  9605,  9606,  9619,
    9637,  9641,  9642,  9646,  9659,  9661,  9666,  9665,  9700,  9702,
    9707,  9708,  9709,  9714,  9720,  9724,  9725,  9729,  9733,  9740,
    9747,  9757,  9761,  9767,  9773,  9783,  9787,  9796,  9797,  9798,
    9799,  9800,  9801,  9805,  9806,  9807,  9808,  9809,  9813,  9814,
    9815,  9816,  9817,  9821,  9822,  9823,  9824,  9828,  9833,  9834,
    9837,  9840,  9839,  9870,  9871,  9875,  9876,  9880,  9892,  9892,
    9903,  9904,  9908,  9927,  9960,  9959,  9972,  9980,  9971,  9982,
    9994, 10006, 10005, 10022, 10029, 10029, 10043, 10050, 10073, 10094,
   10106, 10110, 10116, 10122, 10129, 10134, 10139, 10149, 10150, 10154,
   10162, 10163, 10167, 10177, 10178, 10182, 10183, 10191, 10201, 10190,
   10211, 10218, 10210, 10228, 10240, 10241, 10242, 10246, 10247, 10251,
   10252, 10256, 10265, 10266, 10267, 10269, 10268, 10279, 10280, 10284,
   10285, 10287, 10286, 10290, 10289, 10295, 10296, 10300, 10301, 10305,
   10315, 10316, 10320, 10321, 10326, 10325, 10339, 10340, 10344, 10349,
   10357, 10358, 10366, 10368, 10368, 10376, 10385, 10375, 10407, 10408,
   10412, 10420, 10421, 10425, 10435, 10436, 10443, 10442, 10456, 10455,
   10464, 10463, 10471, 10470, 10480, 10481, 10485, 10497, 10512, 10513,
   10517, 10518, 10522, 10523, 10524, 10528, 10538, 10540, 10543, 10545,
   10548, 10549, 10552, 10556, 10560, 10564, 10568, 10572, 10576, 10580,
   10584, 10592, 10595, 10605, 10604, 10618, 10625, 10633, 10641, 10649,
   10657, 10665, 10673, 10680, 10682, 10684, 10693, 10706, 10710, 10715,
   10714, 10719, 10728, 10733, 10741, 10748, 10753, 10758, 10763, 10765,
   10767, 10769, 10771, 10773, 10780, 10788, 10800, 10812, 10814, 10822,
   10829, 10836, 10846, 10853, 10859, 10868, 10876, 10880, 10884, 10891,
   10898, 10904, 10911, 10918, 10928, 10938, 10946, 10948, 10950, 10955,
   10956, 10959, 10961, 10965, 10966, 10970, 10971, 10975, 10976, 10980,
   10981, 10985, 10986, 10989, 10991, 10998, 11009, 11008, 11022, 11021,
   11031, 11032, 11036, 11037, 11038, 11042, 11043, 11044, 11059, 11058,
   11070, 11071, 11076, 11075, 11078, 11080, 11082, 11084, 11086, 11088,
   11090, 11092, 11094, 11096, 11101, 11102, 11107, 11106, 11116, 11117,
   11121, 11122, 11123, 11128, 11127, 11138, 11142, 11146, 11158, 11168,
   11169, 11170, 11176, 11188, 11187, 11200, 11218, 11229, 11239, 11217,
   11243, 11253, 11254, 11258, 11259, 11271, 11275, 11276, 11277, 11280,
   11282, 11286, 11287, 11291, 11296, 11303, 11308, 11315, 11317, 11321,
   11322, 11326, 11331, 11338, 11340, 11348, 11349, 11350, 11354, 11356,
   11361, 11362, 11371, 11372, 11378, 11402, 11414, 11425, 11444, 11452,
   11464, 11479, 11500, 11501, 11502, 11510, 11511, 11512, 11519, 11525,
   11531, 11537, 11543, 11572, 11600, 11601, 11602, 11606, 11616, 11626,
   11632, 11641, 11656, 11657, 11661, 11670, 11686, 11690, 11737, 11741,
   11759, 11763, 11842, 11867, 11898, 11899, 11915, 11925, 11929, 11935,
   11941, 11951, 11957, 11966, 11976, 11977, 12006, 12022, 12038, 12055,
   12056, 12067, 12068, 12079, 12080, 12081, 12085, 12099, 12118, 12133,
   12134, 12135, 12136, 12137, 12138, 12139, 12140, 12141, 12142, 12143,
   12144, 12145, 12146, 12147, 12148, 12149, 12150, 12151, 12152, 12153,
   12154, 12155, 12156, 12157, 12158, 12159, 12160, 12161, 12162, 12163,
   12164, 12165, 12166, 12167, 12168, 12169, 12170, 12171, 12172, 12173,
   12174, 12175, 12176, 12177, 12178, 12179, 12180, 12181, 12182, 12192,
   12193, 12194, 12195, 12196, 12197, 12198, 12199, 12200, 12201, 12202,
   12203, 12204, 12205, 12206, 12207, 12208, 12209, 12210, 12211, 12212,
   12213, 12214, 12215, 12216, 12217, 12218, 12219, 12220, 12221, 12222,
   12223, 12224, 12225, 12226, 12227, 12228, 12229, 12230, 12231, 12232,
   12233, 12234, 12235, 12236, 12237, 12238, 12239, 12240, 12241, 12242,
   12243, 12244, 12245, 12246, 12247, 12248, 12249, 12250, 12251, 12252,
   12253, 12254, 12255, 12256, 12257, 12258, 12259, 12260, 12261, 12262,
   12263, 12264, 12265, 12266, 12267, 12268, 12269, 12270, 12271, 12272,
   12273, 12274, 12275, 12276, 12277, 12278, 12279, 12280, 12281, 12282,
   12283, 12284, 12285, 12286, 12287, 12288, 12289, 12290, 12291, 12292,
   12293, 12294, 12295, 12296, 12297, 12298, 12299, 12300, 12301, 12302,
   12303, 12304, 12305, 12306, 12307, 12308, 12309, 12310, 12311, 12312,
   12313, 12314, 12315, 12316, 12317, 12318, 12319, 12320, 12321, 12322,
   12323, 12324, 12325, 12326, 12327, 12328, 12329, 12330, 12331, 12332,
   12333, 12334, 12335, 12336, 12337, 12338, 12339, 12340, 12341, 12342,
   12343, 12344, 12345, 12346, 12347, 12348, 12349, 12350, 12351, 12352,
   12353, 12354, 12355, 12356, 12357, 12358, 12359, 12360, 12361, 12362,
   12363, 12364, 12365, 12366, 12367, 12368, 12369, 12370, 12371, 12372,
   12373, 12374, 12375, 12376, 12377, 12378, 12379, 12380, 12381, 12382,
   12383, 12384, 12385, 12386, 12387, 12388, 12389, 12390, 12391, 12392,
   12393, 12394, 12395, 12396, 12397, 12398, 12399, 12400, 12401, 12402,
   12403, 12404, 12405, 12406, 12407, 12408, 12409, 12410, 12411, 12412,
   12413, 12414, 12415, 12416, 12417, 12418, 12419, 12420, 12421, 12422,
   12423, 12424, 12425, 12426, 12427, 12428, 12429, 12430, 12431, 12432,
   12433, 12434, 12435, 12436, 12437, 12438, 12439, 12440, 12441, 12442,
   12443, 12444, 12445, 12446, 12447, 12448, 12449, 12450, 12451, 12452,
   12459, 12458, 12473, 12474, 12478, 12479, 12483, 12483, 12565, 12566,
   12567, 12568, 12572, 12573, 12577, 12578, 12579, 12580, 12584, 12585,
   12586, 12587, 12591, 12592, 12596, 12638, 12657, 12668, 12681, 12695,
   12710, 12729, 12756, 12769, 12796, 12839, 12853, 12854, 12855, 12856,
   12860, 12861, 12870, 12882, 12883, 12884, 12890, 12896, 12908, 12907,
   12923, 12924, 12928, 12929, 12933, 12945, 12946, 12947, 12948, 12953,
   12952, 12972, 12984, 12997, 12996, 13022, 13023, 13027, 13028, 13032,
   13033, 13034, 13035, 13037, 13036, 13049, 13050, 13051, 13052, 13053,
   13059, 13064, 13070, 13081, 13092, 13099, 13104, 13111, 13123, 13137,
   13139, 13143, 13144, 13151, 13153, 13157, 13158, 13163, 13162, 13166,
   13165, 13169, 13168, 13172, 13171, 13174, 13175, 13176, 13177, 13178,
   13179, 13180, 13181, 13182, 13183, 13184, 13185, 13186, 13187, 13188,
   13189, 13190, 13191, 13192, 13193, 13194, 13195, 13196, 13197, 13198,
   13202, 13203, 13207, 13208, 13212, 13222, 13232, 13245, 13260, 13273,
   13286, 13298, 13303, 13311, 13316, 13324, 13351, 13353, 13359, 13363,
   13367, 13368, 13372, 13399, 13401, 13405, 13409, 13413, 13420, 13421,
   13425, 13426, 13430, 13431, 13437, 13443, 13449, 13459, 13458, 13468,
   13469, 13474, 13475, 13476, 13481, 13482, 13483, 13487, 13488, 13492,
   13502, 13509, 13519, 13528, 13542, 13543, 13548, 13547, 13588, 13589,
   13590, 13594, 13594, 13618, 13619, 13623, 13624, 13625, 13629, 13634,
   13639, 13646, 13667, 13702, 13704, 13706, 13711, 13712, 13713, 13714,
   13715, 13719, 13720, 13721, 13722, 13723, 13724, 13734, 13735, 13740,
   13753, 13766, 13768, 13770, 13775, 13780, 13782, 13784, 13790, 13791,
   13793, 13799, 13798, 13812, 13813, 13817, 13822, 13830, 13830, 13855,
   13856, 13861, 13862, 13864, 13866, 13884, 13890, 13895, 13877, 13956,
   13974, 13999, 14031, 14035, 14043, 14066, 13995, 14131, 14155, 14164,
   14172, 14130, 14193, 14197, 14201, 14205, 14209, 14213, 14220, 14227,
   14234, 14244, 14245, 14249, 14250, 14251, 14255, 14256, 14261, 14263,
   14262, 14268, 14269, 14273, 14283
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CHAIN_SYM", "CHANGE",
  "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM",
  "CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM",
  "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM",
  "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_SYM",
  "CURRENT_USER", "CURSOR_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE",
  "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM",
  "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM",
  "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM",
  "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END",
  "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ",
  "EQUAL_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM",
  "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM",
  "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FOLLOWING_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM",
  "FRAC_SECOND_SYM", "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM",
  "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM",
  "HANDLER_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM", "IMPORT",
  "INDEXES", "INDEX_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INNOBASE_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT",
  "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM",
  "INVOKER_SYM", "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION",
  "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE",
  "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM", "MICROSECOND_SYM",
  "MIGRATE_SYM", "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM",
  "MINUTE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM", "MODIFIES_SYM",
  "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT",
  "MULTIPOLYGON", "MUTEX_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NTH_VALUE_SYM", "NULL_SYM", "NULLS_SYM", "NUM", "NUMERIC_SYM",
  "NVARCHAR_SYM", "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM",
  "ONE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY",
  "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE",
  "OUT_SYM", "OVER_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARTIAL", "PARTITIONING_SYM",
  "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD", "PERCENTILE_CONT_SYM",
  "PERCENTILE_DISC_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECEDING_SYM",
  "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM",
  "PRIVILEGES", "PROCEDURE", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK",
  "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM",
  "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP",
  "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM",
  "RELOAD", "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR",
  "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM",
  "RESET_SYM", "RESOURCES", "RESPECT_SYM", "RESTORE_SYM", "RESTRICT",
  "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM",
  "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM",
  "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET",
  "SET_VAR", "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SMALLINT", "SNAPSHOT_SYM",
  "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "INFINIDB_ORDERED_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIMESTAMP",
  "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB", "TINYINT",
  "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TRIGGERS_SYM",
  "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM",
  "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNBOUNDED_SYM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH",
  "WITHIN", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'",
  "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'",
  "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "master_file_def",
  "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10", "server_def",
  "server_options_list", "server_option", "event_tail", "$@11",
  "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "opt_value", "sp_hcond", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "$@18", "sp_proc_stmt_statement",
  "$@19", "sp_proc_stmt_return", "$@20", "sp_proc_stmt_unlabeled", "$@21",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@23", "$@24", "$@25", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@26", "$@27",
  "searched_case_stmt", "$@28", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@29", "$@30",
  "searched_when_clause", "$@31", "$@32", "else_clause_opt",
  "sp_labeled_control", "$@33", "sp_opt_label", "sp_labeled_block", "$@34",
  "sp_unlabeled_block", "$@35", "sp_block_content", "$@36",
  "sp_unlabeled_control", "$@37", "$@38", "$@39", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "create3", "$@42", "$@43", "opt_partitioning",
  "partitioning", "$@44", "partition_entry", "$@45", "partition",
  "part_type_def", "$@46", "$@47", "$@48", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_func", "sub_part_func",
  "opt_no_parts", "opt_sub_part", "$@49", "$@50", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_no_subparts", "part_defs",
  "part_def_list", "part_definition", "$@51", "part_name",
  "opt_part_values", "part_func_max", "max_value_sym", "part_range_func",
  "part_list_func", "part_list_item", "part_bit_expr", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@52", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@53", "$@54", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "field_list", "field_list_item", "column_def", "key_def",
  "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@55", "type", "$@56", "$@57",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "opt_binary", "opt_bin_mod", "opt_bin_charset",
  "opt_primary", "references", "$@58", "opt_ref_list", "ref_list",
  "opt_on_delete", "opt_on_delete_list", "opt_on_delete_item",
  "delete_option", "normal_key_type", "constraint_key_type",
  "key_or_index", "opt_key_or_index", "keys_or_index", "opt_unique",
  "fulltext", "spatial", "init_key_options", "key_alg",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "key_using_alg", "all_key_opt", "normal_key_opt", "spatial_key_opt",
  "fulltext_key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "$@59", "$@60",
  "$@61", "$@62", "$@63", "$@64", "$@65",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@66", "$@67", "$@68",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@69", "add_part_extra", "reorg_partition_rule", "$@70",
  "reorg_parts_rule", "$@71", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@72", "$@73", "$@74",
  "opt_column", "opt_ignore", "opt_restrict", "opt_place", "opt_to",
  "slave", "$@75", "$@76", "start", "start_transaction_opts",
  "slave_thread_opts", "$@77", "slave_thread_opt_list", "slave_thread_opt",
  "slave_until", "slave_until_opts", "restore", "$@78", "backup", "$@79",
  "checksum", "$@80", "opt_checksum_type", "repair", "$@81",
  "opt_mi_repair_type", "mi_repair_types", "mi_repair_type", "analyze",
  "$@82", "binlog_base64_event", "check", "$@83", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@84",
  "opt_no_write_to_binlog", "rename", "$@85", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "keycache_list",
  "assign_to_keycache", "key_cache_name", "preload", "$@86",
  "preload_list", "preload_keys", "cache_keys_spec", "$@87",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_init2", "$@88", "select_part2", "$@89", "$@90",
  "select_into", "select_from", "select_options", "select_option_list",
  "select_option", "select_lock_type", "select_item_list", "select_item",
  "remember_name", "remember_end", "select_item2", "select_alias",
  "optional_braces", "expr", "bool_pri", "predicate", "bit_expr", "or",
  "and", "not", "not2", "comp_op", "all_or_any", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_window",
  "opt_from", "opt_respect", "respect", "window_clause",
  "opt_window_partition_by_clause", "opt_window_order_by_clause",
  "window_order_list", "opt_nulls", "opt_frame", "frame", "boundary_unit",
  "bounding", "preceding_following", "function_call_generic",
  "fulltext_options", "opt_natural_language_mode", "opt_query_expansion",
  "opt_udf_expr_list", "udf_expr_list", "udf_expr", "sum_expr", "$@91",
  "variable", "$@92", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@93", "gorder_list",
  "in_sum_expr", "$@94", "cast_type", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@95", "$@96", "$@97", "$@98", "$@99", "$@100", "$@101",
  "normal_join", "table_factor", "$@102", "select_derived", "$@103",
  "select_derived2", "$@104", "$@105", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "$@106", "$@107",
  "index_hints_list", "opt_index_hints_list", "$@108",
  "opt_key_definition", "$@109", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "interval_time_st", "date_time_type", "table_alias", "opt_table_alias",
  "opt_all", "where_clause", "$@110", "having_clause", "$@111",
  "opt_escape", "group_clause", "$@112", "group_list", "olap_opt",
  "alter_order_clause", "alter_order_list", "alter_order_item",
  "opt_order_clause", "order_clause", "$@113", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "$@114", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@115",
  "select_var_list", "select_var_ident", "into", "$@116",
  "into_destination", "$@117", "$@118", "do", "$@119", "drop", "$@120",
  "table_list", "table_name", "table_alias_ref_list", "table_alias_ref",
  "if_exists", "opt_temporary", "insert", "$@121", "$@122", "replace",
  "$@123", "$@124", "insert_lock_option", "replace_lock_option", "insert2",
  "insert_table", "insert_field_spec", "$@125", "fields", "insert_values",
  "$@126", "$@127", "values_list", "ident_eq_list", "ident_eq_value",
  "equal", "opt_equal", "no_braces", "$@128", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "$@129", "update", "$@130",
  "$@131", "update_list", "update_elem", "insert_update_list",
  "insert_update_elem", "opt_low_priority", "delete", "$@132",
  "single_multi", "$@133", "$@134", "$@135", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@136", "show_param",
  "$@137", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@138", "$@139", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@140",
  "flush_options", "flush_option", "$@141", "opt_table_list", "reset",
  "$@142", "reset_options", "reset_option", "purge", "$@143",
  "purge_options", "purge_option", "kill", "kill_option", "use", "load",
  "$@144", "load_data", "$@145", "$@146", "$@147", "opt_local",
  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list",
  "field_term", "opt_line_term", "line_term_list", "line_term",
  "opt_ignore_lines", "opt_field_or_var_spec", "fields_or_vars",
  "field_or_var", "opt_load_data_set_spec", "text_literal", "text_string",
  "param_marker", "signed_literal", "literal", "NUM_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@148", "opt_option", "option_value_list", "option_type_value",
  "$@149", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "internal_variable_name", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@150",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@151", "handler", "$@152", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@153",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@154", "$@155", "$@156",
  "$@157", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "grant_user",
  "opt_column_list", "column_list", "column_list_id", "require_clause",
  "grant_options", "grant_option_list", "grant_option", "begin", "$@158",
  "opt_work", "opt_chain", "opt_release", "opt_savepoint", "commit",
  "rollback", "savepoint", "release", "union_clause", "union_list",
  "$@159", "union_opt", "union_order_or_limit", "$@160", "order_or_limit",
  "union_option", "take_first_select", "subselect", "subselect_start",
  "subselect_end", "view_or_trigger_or_sp_or_event", "definer_tail",
  "no_definer_tail", "definer_opt", "no_definer", "definer",
  "view_replace_or_algorithm", "view_replace", "view_algorithm",
  "view_suid", "view_tail", "$@161", "view_list_opt", "view_list",
  "view_select", "$@162", "view_select_aux", "view_check_option",
  "trigger_tail", "$@163", "$@164", "$@165", "udf_tail", "sf_tail",
  "$@166", "$@167", "$@168", "$@169", "$@170", "sp_tail", "$@171", "$@172",
  "$@173", "$@174", "xa", "xid", "begin_or_start", "opt_join_or_resume",
  "opt_one_phase", "opt_suspend", "$@175", "opt_migrate", "install",
  "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    64,    46,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   601,   602,   603,   602,   602,   604,   604,   605,   605,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   607,   608,   608,   609,   610,   610,   612,   611,   613,
     613,   614,   614,   615,   617,   616,   619,   618,   620,   620,
     621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
     621,   621,   621,   622,   622,   622,   622,   624,   623,   625,
     623,   626,   623,   627,   623,   628,   623,   629,   623,   623,
     623,   623,   623,   630,   631,   631,   632,   632,   632,   632,
     632,   632,   632,   634,   633,   636,   635,   635,   637,   637,
     637,   637,   638,   638,   639,   639,   640,   640,   641,   641,
     642,   642,   644,   643,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   646,   647,   647,
     648,   648,   649,   649,   650,   650,   650,   650,   650,   650,
     650,   651,   651,   651,   652,   652,   654,   653,   655,   655,
     656,   656,   657,   657,   658,   658,   659,   659,   660,   661,
     662,   662,   663,   663,   664,   665,   665,   665,   665,   666,
     666,   667,   667,   668,   668,   670,   669,   669,   671,   669,
     669,   673,   672,   674,   674,   675,   675,   676,   677,   677,
     678,   678,   679,   679,   679,   679,   679,   680,   680,   681,
     681,   682,   682,   682,   682,   682,   682,   682,   682,   682,
     682,   682,   682,   682,   684,   683,   686,   685,   688,   687,
     690,   689,   691,   692,   693,   695,   694,   696,   697,   697,
     697,   698,   698,   700,   701,   702,   699,   703,   703,   703,
     704,   704,   706,   707,   705,   709,   708,   710,   710,   711,
     711,   713,   714,   712,   716,   717,   715,   718,   718,   720,
     719,   721,   721,   723,   722,   725,   724,   727,   726,   728,
     729,   730,   728,   731,   728,   732,   732,   733,   733,   733,
     734,   735,   736,   737,   737,   738,   738,   739,   740,   741,
     741,   743,   742,   744,   744,   744,   745,   745,   745,   746,
     747,   747,   747,   748,   748,   748,   748,   748,   748,   748,
     748,   749,   750,   750,   750,   751,   751,   751,   751,   751,
     752,   753,   753,   753,   754,   754,   754,   754,   754,   754,
     754,   755,   756,   756,   756,   757,   757,   757,   758,   759,
     760,   761,   762,   763,   763,   763,   764,   765,   766,   767,
     768,   769,   770,   771,   772,   773,   773,   774,   774,   775,
     775,   776,   776,   776,   776,   777,   778,   777,   779,   780,
     779,   781,   779,   782,   782,   784,   783,   786,   785,   787,
     788,   789,   788,   790,   788,   791,   788,   792,   792,   793,
     793,   794,   794,   795,   796,   797,   798,   798,   799,   800,
     799,   801,   799,   802,   802,   803,   804,   805,   805,   806,
     806,   807,   807,   809,   808,   810,   811,   811,   811,   812,
     812,   813,   813,   814,   815,   815,   816,   817,   818,   818,
     819,   819,   821,   820,   822,   823,   823,   824,   824,   825,
     825,   825,   825,   825,   825,   825,   825,   827,   828,   826,
     829,   829,   830,   830,   831,   831,   832,   832,   833,   833,
     834,   834,   835,   836,   836,   837,   837,   838,   838,   839,
     839,   839,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   841,   842,   843,
     844,   845,   845,   845,   845,   845,   845,   846,   846,   846,
     847,   847,   848,   848,   848,   848,   849,   849,   850,   850,
     851,   851,   852,   852,   852,   852,   852,   852,   852,   853,
     853,   854,   855,   855,   856,   858,   857,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   860,   859,   861,   859,   859,   859,   862,   862,
     862,   862,   862,   862,   862,   862,   863,   864,   864,   865,
     865,   866,   866,   866,   866,   866,   867,   867,   867,   867,
     867,   868,   868,   868,   869,   869,   869,   870,   871,   871,
     872,   872,   873,   873,   873,   874,   874,   874,   874,   875,
     875,   876,   876,   877,   877,   878,   878,   879,   879,   879,
     879,   879,   879,   879,   879,   879,   879,   879,   880,   880,
     881,   881,   882,   882,   883,   883,   884,   884,   885,   885,
     886,   886,   887,   888,   888,   889,   889,   890,   890,   891,
     891,   891,   891,   891,   891,   892,   892,   893,   893,   893,
     893,   894,   894,   896,   895,   897,   897,   898,   898,   899,
     899,   900,   900,   901,   901,   901,   901,   901,   902,   902,
     902,   902,   902,   903,   904,   904,   905,   905,   906,   906,
     907,   907,   907,   908,   908,   909,   910,   911,   912,   912,
     913,   913,   914,   914,   915,   915,   916,   916,   917,   917,
     918,   918,   919,   919,   920,   921,   921,   922,   923,   923,
     924,   924,   924,   925,   925,   926,   926,   927,   927,   928,
     928,   929,   929,   931,   930,   932,   930,   930,   933,   930,
     934,   930,   935,   930,   936,   930,   937,   930,   930,   930,
     930,   930,   930,   938,   938,   938,   938,   939,   939,   940,
     940,   941,   941,   942,   942,   942,   942,   942,   942,   942,
     942,   942,   942,   943,   942,   942,   944,   942,   945,   942,
     942,   942,   946,   947,   947,   949,   948,   950,   950,   950,
     952,   951,   953,   954,   953,   955,   955,   956,   957,   957,
     958,   959,   959,   959,   960,   959,   961,   962,   959,   959,
     959,   959,   959,   959,   959,   959,   959,   959,   959,   959,
     959,   959,   963,   963,   964,   964,   965,   965,   965,   966,
     966,   966,   967,   967,   967,   967,   969,   968,   968,   970,
     968,   968,   971,   972,   972,   974,   973,   975,   975,   976,
     976,   976,   977,   977,   978,   978,   980,   979,   982,   981,
     984,   983,   985,   985,   985,   987,   986,   988,   988,   989,
     989,   990,   990,   990,   992,   991,   993,   995,   994,   996,
     996,   997,   997,   998,   998,   998,   998,   998,   998,  1000,
     999,  1001,  1001,  1001,  1003,  1002,  1002,  1004,  1004,  1005,
    1005,  1006,  1007,  1008,  1008,  1009,  1010,  1010,  1012,  1011,
    1013,  1013,  1014,  1016,  1015,  1017,  1017,  1018,  1018,  1019,
    1020,  1020,  1021,  1021,  1023,  1022,  1025,  1026,  1024,  1027,
    1027,  1027,  1027,  1027,  1028,  1028,  1029,  1029,  1030,  1030,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1032,  1032,  1032,  1033,  1033,  1033,  1034,  1035,  1036,
    1037,  1037,  1038,  1038,  1038,  1038,  1038,  1039,  1039,  1040,
    1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,
    1041,  1041,  1041,  1041,  1041,  1041,  1042,  1042,  1042,  1042,
    1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,
    1043,  1043,  1043,  1043,  1043,  1043,  1043,  1043,  1043,  1043,
    1043,  1043,  1043,  1043,  1043,  1044,  1044,  1045,  1045,  1046,
    1046,  1047,  1047,  1048,  1048,  1048,  1048,  1048,  1048,  1049,
    1049,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,
    1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,
    1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,
    1050,  1050,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,
    1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,
    1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1051,  1052,
    1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1052,  1052,  1052,  1053,  1053,  1053,  1053,  1053,  1053,
    1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,
    1053,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1055,
    1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,
    1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1056,
    1056,  1056,  1057,  1057,  1058,  1058,  1059,  1060,  1060,  1061,
    1061,  1061,  1062,  1062,  1063,  1063,  1063,  1064,  1064,  1065,
    1065,  1066,  1066,  1067,  1067,  1067,  1067,  1068,  1068,  1069,
    1069,  1070,  1070,  1071,  1071,  1072,  1072,  1073,  1073,  1074,
    1074,  1075,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,
    1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,
    1077,  1076,  1079,  1078,  1080,  1080,  1080,  1081,  1081,  1082,
    1082,  1083,  1084,  1083,  1085,  1085,  1087,  1086,  1088,  1088,
    1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1089,
    1089,  1090,  1090,  1091,  1091,  1092,  1092,  1093,  1093,  1094,
    1094,  1095,  1095,  1096,  1096,  1097,  1098,  1098,  1099,  1099,
    1100,  1100,  1101,  1100,  1102,  1100,  1103,  1100,  1100,  1104,
    1100,  1105,  1100,  1100,  1106,  1100,  1107,  1100,  1100,  1108,
    1108,  1108,  1110,  1109,  1109,  1109,  1112,  1111,  1114,  1115,
    1113,  1116,  1117,  1118,  1118,  1119,  1119,  1119,  1119,  1120,
    1120,  1122,  1121,  1123,  1121,  1124,  1124,  1125,  1126,  1125,
    1128,  1127,  1129,  1129,  1130,  1130,  1131,  1131,  1132,  1132,
    1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,
    1133,  1133,  1134,  1134,  1135,  1135,  1135,  1135,  1135,  1135,
    1135,  1135,  1135,  1136,  1136,  1136,  1136,  1137,  1137,  1137,
    1138,  1138,  1139,  1139,  1140,  1141,  1140,  1142,  1143,  1142,
    1144,  1144,  1145,  1146,  1145,  1147,  1147,  1148,  1148,  1148,
    1149,  1150,  1150,  1151,  1152,  1152,  1154,  1153,  1155,  1155,
    1156,  1156,  1156,  1157,  1157,  1158,  1158,  1159,  1160,  1160,
    1160,  1161,  1161,  1161,  1161,  1162,  1162,  1163,  1163,  1163,
    1163,  1163,  1163,  1164,  1164,  1164,  1164,  1164,  1165,  1165,
    1165,  1165,  1165,  1166,  1166,  1166,  1166,  1167,  1168,  1168,
    1169,  1170,  1169,  1171,  1171,  1172,  1172,  1173,  1175,  1174,
    1176,  1176,  1177,  1177,  1179,  1178,  1181,  1182,  1180,  1180,
    1180,  1184,  1183,  1185,  1186,  1185,  1185,  1185,  1185,  1185,
    1185,  1185,  1185,  1185,  1185,  1185,  1185,  1187,  1187,  1188,
    1189,  1189,  1190,  1191,  1191,  1192,  1192,  1194,  1195,  1193,
    1197,  1198,  1196,  1199,  1199,  1199,  1199,  1200,  1200,  1201,
    1201,  1202,  1203,  1203,  1203,  1204,  1203,  1205,  1205,  1206,
    1206,  1207,  1206,  1208,  1206,  1209,  1209,  1210,  1210,  1211,
    1212,  1212,  1213,  1213,  1215,  1214,  1216,  1216,  1217,  1217,
    1218,  1218,  1219,  1220,  1219,  1222,  1223,  1221,  1224,  1224,
    1225,  1226,  1226,  1227,  1228,  1228,  1230,  1229,  1232,  1231,
    1233,  1231,  1234,  1231,  1235,  1235,  1236,  1236,  1237,  1237,
    1238,  1238,  1239,  1239,  1239,  1240,  1241,  1241,  1242,  1242,
    1243,  1243,  1244,  1244,  1244,  1244,  1244,  1244,  1244,  1244,
    1244,  1245,  1245,  1247,  1246,  1248,  1248,  1248,  1248,  1248,
    1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1249,
    1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,
    1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,
    1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,
    1248,  1248,  1248,  1248,  1248,  1248,  1250,  1250,  1250,  1251,
    1251,  1252,  1252,  1253,  1253,  1254,  1254,  1255,  1255,  1256,
    1256,  1257,  1257,  1258,  1258,  1258,  1260,  1259,  1261,  1259,
    1262,  1262,  1263,  1263,  1263,  1264,  1264,  1264,  1266,  1265,
    1267,  1267,  1269,  1268,  1268,  1268,  1268,  1268,  1268,  1268,
    1268,  1268,  1268,  1268,  1270,  1270,  1272,  1271,  1273,  1273,
    1274,  1274,  1274,  1276,  1275,  1277,  1278,  1278,  1279,  1280,
    1280,  1280,  1281,  1283,  1282,  1282,  1285,  1286,  1287,  1284,
    1284,  1288,  1288,  1289,  1289,  1289,  1290,  1290,  1290,  1291,
    1291,  1292,  1292,  1293,  1293,  1293,  1293,  1294,  1294,  1295,
    1295,  1296,  1296,  1297,  1297,  1298,  1298,  1298,  1299,  1299,
    1300,  1300,  1301,  1301,  1302,  1302,  1302,  1302,  1303,  1303,
    1303,  1304,  1305,  1305,  1305,  1306,  1306,  1306,  1306,  1306,
    1306,  1306,  1306,  1306,  1306,  1306,  1306,  1307,  1307,  1307,
    1307,  1307,  1308,  1308,  1309,  1309,  1310,  1311,  1311,  1312,
    1312,  1313,  1313,  1313,  1314,  1314,  1314,  1314,  1315,  1315,
    1315,  1316,  1316,  1317,  1318,  1318,  1319,  1320,  1321,  1322,
    1322,  1323,  1323,  1324,  1324,  1324,  1325,  1325,  1325,  1326,
    1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,
    1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,
    1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,
    1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,
    1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1326,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1329,  1328,  1330,  1330,  1331,  1331,  1333,  1332,  1334,  1334,
    1334,  1334,  1335,  1335,  1336,  1336,  1336,  1336,  1337,  1337,
    1337,  1337,  1338,  1338,  1339,  1339,  1340,  1340,  1340,  1340,
    1340,  1340,  1340,  1341,  1341,  1341,  1342,  1342,  1342,  1342,
    1343,  1343,  1343,  1344,  1344,  1344,  1344,  1344,  1346,  1345,
    1347,  1347,  1348,  1348,  1349,  1350,  1350,  1350,  1350,  1352,
    1351,  1353,  1353,  1354,  1353,  1355,  1355,  1356,  1356,  1357,
    1357,  1357,  1357,  1358,  1357,  1359,  1359,  1359,  1359,  1359,
    1360,  1361,  1361,  1361,  1361,  1362,  1363,  1363,  1363,  1364,
    1364,  1365,  1365,  1366,  1366,  1367,  1367,  1369,  1368,  1370,
    1368,  1371,  1368,  1372,  1368,  1368,  1368,  1368,  1368,  1368,
    1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,
    1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,
    1373,  1373,  1374,  1374,  1375,  1375,  1375,  1376,  1376,  1376,
    1376,  1377,  1377,  1378,  1378,  1379,  1379,  1379,  1380,  1380,
    1381,  1381,  1382,  1383,  1383,  1383,  1383,  1383,  1384,  1384,
    1385,  1385,  1386,  1386,  1386,  1386,  1386,  1388,  1387,  1389,
    1389,  1390,  1390,  1390,  1391,  1391,  1391,  1392,  1392,  1393,
    1394,  1394,  1395,  1396,  1397,  1397,  1399,  1398,  1400,  1400,
    1400,  1402,  1401,  1403,  1403,  1404,  1404,  1404,  1405,  1406,
    1406,  1407,  1408,  1409,  1409,  1409,  1410,  1410,  1410,  1410,
    1410,  1411,  1411,  1411,  1411,  1411,  1411,  1412,  1412,  1413,
    1414,  1415,  1415,  1415,  1416,  1417,  1417,  1417,  1418,  1418,
    1418,  1420,  1419,  1421,  1421,  1422,  1422,  1424,  1423,  1425,
    1425,  1426,  1426,  1426,  1426,  1428,  1429,  1430,  1427,  1431,
    1431,  1433,  1434,  1435,  1436,  1437,  1432,  1439,  1440,  1441,
    1442,  1438,  1443,  1443,  1443,  1443,  1443,  1443,  1444,  1444,
    1444,  1445,  1445,  1446,  1446,  1446,  1447,  1447,  1448,  1449,
    1448,  1450,  1450,  1451,  1452
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     0,     7,     0,
      12,     0,    12,     0,    12,     0,     6,     0,     3,     4,
       4,     3,     2,    10,     1,     3,     2,     2,     2,     2,
       2,     2,     2,     0,    13,     0,     6,     2,     0,     1,
       3,     1,     0,     2,     0,     2,     0,     1,     3,     4,
       0,     2,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     1,
       0,     2,     0,     2,     2,     2,     2,     2,     3,     3,
       1,     1,     1,     2,     3,     3,     0,     4,     0,     3,
       0,     1,     3,     1,     0,     1,     3,     1,     0,     3,
       0,     1,     3,     1,     4,     0,     1,     1,     1,     0,
       3,     2,     3,     0,     3,     0,     5,     5,     0,     7,
       5,     0,     2,     1,     1,     1,     3,     1,     1,     3,
       0,     1,     1,     1,     1,     2,     1,     1,     3,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     5,     0,     2,     0,     3,
       0,     2,     2,     2,     2,     0,     6,     2,     0,     2,
       1,     1,     3,     0,     0,     0,     7,     0,     2,     2,
       1,     1,     0,     0,     8,     0,     6,     1,     2,     1,
       2,     0,     0,     6,     0,     0,     6,     0,     2,     0,
       5,     0,     1,     0,     5,     0,     2,     0,     5,     4,
       0,     0,     8,     0,     7,     1,     1,     1,     1,     1,
       2,     4,     5,     0,     4,     4,     4,     3,     3,     2,
       2,     0,     2,     1,     2,     3,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     3,     2,     4,     5,     0,     5,     0,     0,
       5,     0,     7,     0,     1,     0,     3,     0,     3,     5,
       5,     0,     4,     0,     3,     0,     3,     0,     1,     0,
       1,     1,     3,     1,     5,     5,     0,     2,     0,     0,
       7,     0,     9,     1,     3,     1,     1,     0,     2,     0,
       3,     1,     3,     0,     6,     1,     0,     4,     5,     1,
       1,     1,     3,     3,     1,     3,     1,     1,     0,     3,
       1,     3,     0,     4,     1,     0,     1,     2,     1,     3,
       4,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     0,     1,     1,     2,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     5,     1,     1,     3,
       4,     4,     2,     2,     2,     3,     3,     4,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     3,     1,     1,
       2,     2,     7,     8,     8,     8,     8,     2,     2,     0,
       1,     2,     0,     1,     2,     0,     4,     3,     3,     3,
       1,     2,     1,     1,     3,     2,     3,     2,     2,     1,
       3,     3,     2,     3,     1,     1,     2,     1,     1,     2,
       1,     1,     1,     2,     3,     2,     3,     2,     2,     3,
       3,     3,     0,     6,     0,     6,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     2,     1,     2,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     2,     0,     1,     1,     5,     0,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     0,
       1,     0,     1,     0,     1,     2,     1,     1,     2,     2,
       4,     1,     3,     2,     1,     2,     2,     2,     2,     1,
       2,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     0,     1,     0,
       2,     1,     2,     3,     2,     0,     1,     0,     1,     1,
       2,     0,     1,     0,     4,     1,     4,     3,     1,     0,
       1,     2,     1,     3,     3,     2,     2,     2,     1,     1,
       2,     2,     2,     1,     2,     2,     1,     1,     0,     1,
       1,     1,     1,     0,     1,     1,     1,     0,     1,     2,
       0,     1,     0,     1,     0,     1,     1,     2,     1,     2,
       1,     2,     2,     2,     3,     1,     1,     1,     1,     3,
       1,     1,     1,     4,     2,     1,     4,     0,     1,     0,
       2,     1,     3,     0,     6,     0,     5,     7,     0,     5,
       0,     5,     0,     5,     0,     4,     0,    10,     3,     4,
       3,     3,     7,     0,     3,     1,     4,     0,     3,     0,
       2,     0,     1,     0,     2,     2,     2,     2,     1,     1,
       1,     3,     4,     0,     6,     4,     0,     5,     0,     6,
       4,     1,     2,     1,     1,     0,     5,     0,     3,     2,
       0,     5,     0,     0,     6,     1,     3,     1,     1,     3,
       2,     3,     2,     4,     0,     6,     0,     0,     8,     4,
       4,     3,     3,     2,     2,     6,     5,     3,     5,     1,
       1,     1,     0,     1,     0,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     5,     3,     0,
       5,     3,     3,     0,     3,     0,     2,     1,     3,     0,
       1,     1,     0,     2,     1,     3,     0,     6,     0,     6,
       0,     5,     0,     1,     1,     0,     6,     0,     1,     1,
       2,     1,     1,     1,     0,     5,     2,     0,     5,     0,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     0,
       5,     0,     1,     1,     0,     4,     4,     3,     5,     1,
       3,     3,     5,     1,     3,     2,     1,     1,     0,     6,
       1,     3,     3,     0,     2,     0,     4,     0,     2,     1,
       2,     4,     2,     3,     0,     3,     0,     0,     6,     2,
       1,     1,     2,     2,     8,     4,     0,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     4,     3,     1,     1,     4,     0,     0,
       1,     1,     0,     2,     2,     1,     1,     0,     2,     3,
       3,     3,     2,     3,     4,     3,     4,     3,     4,     1,
       3,     4,     3,     3,     6,     1,     5,     6,     5,     7,
       6,     8,     5,     6,     4,     4,     5,     3,     4,     1,
       3,     3,     3,     3,     3,     3,     5,     5,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     3,     2,     2,     2,     2,     3,     3,     5,
       6,     4,     4,     7,     2,     6,     5,     6,     6,     4,
       4,     5,     4,     6,     2,     4,     4,     4,    10,     6,
       8,     6,     4,     4,     6,     4,     4,     4,     6,     4,
       7,     7,     7,     6,     6,     6,     6,     3,     4,     6,
       8,     2,     2,     4,     8,     8,     6,     6,     2,     4,
       6,     6,     8,     8,     6,     8,     6,     2,     4,     8,
       8,     2,     2,     2,     4,     4,     4,     4,     3,     8,
       4,     6,     4,     4,     4,     6,     8,     6,     4,     6,
       1,     6,     4,     4,     4,     4,     4,     6,     4,     5,
       6,     5,     6,     5,     6,     6,     5,     6,     5,     6,
       5,     6,     5,     5,     5,     5,     7,    12,    12,     0,
       2,     2,     0,     1,     2,     2,     5,     0,     3,     0,
       1,     4,     5,     3,     0,     2,     2,     0,     1,     5,
       2,     1,     1,     2,     2,     2,     4,     1,     1,     4,
       6,     2,     3,     0,     4,     0,     3,     0,     1,     1,
       3,     4,     4,     5,     4,     4,     4,     5,     4,     5,
       4,     5,     4,     5,     4,     4,     4,     4,     4,     5,
       0,     8,     0,     3,     3,     1,     4,     0,     1,     0,
       2,     0,     0,     4,     4,     2,     0,     3,     2,     3,
       2,     1,     2,     1,     2,     1,     1,     1,     2,     0,
       1,     1,     3,     1,     3,     1,     3,     0,     1,     0,
       2,     4,     5,     1,     1,     1,     1,     4,     1,     3,
       3,     3,     0,     6,     0,     6,     0,     8,     4,     0,
       8,     0,    10,     6,     0,     8,     0,    10,     6,     1,
       2,     2,     0,     4,     3,     6,     0,     3,     0,     0,
       5,     0,     1,     0,     1,     0,     2,     3,     3,     1,
       1,     0,     7,     0,     7,     1,     2,     0,     0,     2,
       0,     2,     0,     1,     1,     1,     1,     3,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       0,     2,     0,     1,     0,     0,     3,     0,     0,     3,
       2,     0,     0,     0,     5,     4,     2,     0,     2,     2,
       3,     3,     1,     2,     0,     1,     0,     4,     4,     2,
       0,     1,     1,     0,     1,     0,     1,     2,     1,     3,
       3,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     0,     6,     0,     1,     3,     1,     3,     0,     2,
       3,     1,     2,     1,     0,     3,     0,     0,     7,     2,
       1,     0,     3,     6,     0,     6,     4,     6,     4,     4,
       4,     5,     4,     4,     5,     6,     4,     1,     3,     1,
       1,     3,     1,     0,     2,     0,     1,     0,     0,     8,
       0,     0,     6,     0,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     3,     4,     0,     3,     3,     1,     2,
       2,     0,     3,     0,     5,     3,     1,     3,     1,     3,
       1,     1,     0,     1,     0,     4,     0,     1,     3,     1,
       1,     1,     0,     0,     6,     0,     0,    11,     3,     1,
       3,     3,     1,     3,     0,     1,     0,     4,     0,     6,
       0,     5,     0,     6,     1,     3,     3,     5,     0,     2,
       0,     2,     1,     1,     1,     3,     0,     1,     0,     1,
       1,     3,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     0,     3,     0,     3,     2,     4,     4,     3,     4,
       4,     2,     1,     3,     3,     6,    16,     2,     2,     0,
       6,     5,     2,     2,     2,     1,     1,     1,     5,     5,
       2,     2,     1,     4,     3,     2,     2,     2,     3,     2,
       2,     1,     3,     4,     3,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     1,
       1,     0,     1,     0,     2,     0,     1,     1,     1,     0,
       2,     0,     2,     0,     2,     2,     0,     4,     0,     4,
       1,     1,     0,     1,     1,     0,     1,     1,     0,     4,
       3,     1,     0,     3,     4,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     0,     3,     3,     1,
       1,     1,     2,     0,     3,     3,     2,     2,     3,     0,
       1,     1,     2,     0,     4,     5,     0,     0,     0,    17,
       2,     0,     1,     0,     1,     1,     0,     1,     1,     0,
       2,     2,     1,     3,     4,     3,     3,     0,     2,     2,
       1,     3,     3,     0,     3,     0,     3,     2,     3,     1,
       1,     2,     0,     2,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     2,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     3,     5,     1,     1,     1,     1,
       1,     3,     4,     5,     1,     5,     3,     2,     1,     3,
       2,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     4,     0,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     0,     1,     0,     1,     1,     1,     0,     2,
       2,     2,     1,     2,     4,     5,     4,     6,     2,     3,
       3,     3,     5,     1,     3,     3,     2,     2,     2,     1,
       1,     4,     4,     1,     1,     1,     1,     1,     0,     4,
       1,     1,     1,     3,     3,     1,     1,     2,     2,     0,
       3,     4,     3,     0,     7,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     5,     1,     1,     1,     1,     1,
       3,     6,     6,     6,     7,     3,     8,     8,     8,     0,
       1,     1,     2,     0,     1,     1,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       0,     1,     3,     1,     2,     2,     2,     1,     3,     3,
       1,     1,     3,     1,     3,     4,     5,     1,     0,     3,
       3,     1,     1,     0,     2,     2,     2,     2,     0,     2,
       2,     1,     2,     2,     2,     2,     2,     0,     3,     0,
       1,     0,     3,     2,     0,     1,     2,     0,     1,     4,
       4,     5,     2,     3,     0,     1,     0,     4,     0,     1,
       1,     0,     2,     2,     1,     0,     1,     1,     0,     5,
       6,     0,     0,     2,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     2,     1,     2,     3,     3,     3,     0,     3,
       3,     0,     7,     0,     3,     1,     3,     0,     3,     2,
       4,     0,     3,     4,     4,     0,     0,     0,    16,     8,
       7,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,    12,     4,     4,     3,     4,     3,     2,     1,     3,
       5,     1,     1,     0,     1,     1,     0,     2,     0,     0,
       3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2369,   931,     0,  2317,     0,     0,     0,     0,     0,
       0,  2319,   107,    62,  1576,  1690,  1691,  1491,  1515,     2,
       0,   931,   157,     0,    74,  1517,     0,  1729,     0,     0,
     931,   407,     0,  1723,     0,     0,   931,  1520,  1716,     0,
     157,  2319,     0,   966,  2152,  1613,     0,     0,     0,  1596,
       0,  2209,  1565,     0,     0,     0,     0,     3,     8,    20,
       0,    39,    25,    29,    15,    19,    14,    37,    10,    53,
      54,    46,    12,    17,    43,    11,    13,    16,    35,    42,
      36,    38,    50,   959,    23,    24,    30,    44,    58,    21,
      55,    52,    22,  1692,    26,    45,    40,    32,    59,    33,
      51,    34,    57,    28,    47,    27,     9,    18,    48,    49,
      41,    60,    31,    56,     0,   801,     0,     0,   865,     0,
       0,     0,     0,     0,   784,  2367,  2368,  2369,   933,   932,
       0,  2201,  2200,   898,  2319,  1826,   916,     0,  1889,  1890,
    1891,  1892,  1893,  1894,  1895,  1840,  1896,  1897,  1899,  1898,
    1900,  1901,  1841,  1842,  1902,  1903,  1904,  1906,  1905,  1907,
    1843,  1844,  1908,  1909,  1910,  1845,  1846,  1911,  1912,  1847,
    1913,  1914,  1915,  1916,  1848,  1917,  1849,  1918,  1919,  1920,
    1921,  1922,  1923,  1850,  1924,  1925,  1926,  1927,  1929,  1928,
    1930,  1931,  1932,  1851,  1933,  1934,  1935,  1936,  1937,  1938,
    1939,  1852,  1940,  1941,  1942,  1958,  1853,  1943,  1946,  1945,
    1944,  1947,  1948,  1950,  1949,  1951,  1854,  1952,  1953,  1954,
    1956,  1955,  1960,  1961,  1962,  1855,  1957,  1963,  1959,  2132,
    1965,  1964,  1966,  1968,  1967,  1856,  1969,  1857,  1858,  1970,
    1971,  1824,  1972,  1825,  1974,  1975,  1976,  1981,  1982,  1859,
    1973,  1977,  1978,  1979,  1980,  1983,  1860,  1984,  1985,  1986,
    1987,  1988,  1989,  1990,  1991,  1992,  1993,  2003,  1996,  1998,
    1999,  2001,  1997,  2002,  2006,  2005,  2007,  2008,  2009,  2004,
    1995,  2000,  2010,  2011,  1994,  2012,  2013,  2014,  2015,  2016,
    2017,  2018,  2019,  2020,  2021,  2022,  2024,  2023,  2025,  2026,
    2027,  2028,  2029,  2031,  2030,  2032,  2033,  2034,  2036,  2035,
    2038,  2039,  1861,  2037,  2040,  2041,  2042,  2043,  2044,  1862,
    1863,  1864,  2045,  2046,  1865,  2047,  2048,  2049,  1866,  2050,
    2051,  2053,  2052,  2054,  2055,  1867,  1868,  2056,  2057,  2058,
    2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,
    2070,  2069,  2071,  2072,  2073,  2074,  2075,  1869,  2076,  1870,
    2077,  2078,  1871,  2079,  1872,  2080,  2081,  1873,  2082,  2083,
    2084,  2085,  2086,  2087,  1874,  2088,  2089,  1875,  2091,  2090,
    2092,  1876,  2094,  2095,  1877,  2093,  1879,  2096,  1878,  1880,
    2097,  2098,  2100,  2099,  2101,  2102,  2103,  2104,  1881,  2105,
    1882,  2106,  2107,  2108,  2109,  2111,  2110,  2112,  2113,  2114,
    2115,  2116,  2118,  2117,  2119,  2120,  2121,  2122,  2125,  2126,
    2127,  2128,  2123,  2124,  1883,  2129,  2130,  2131,  2133,  2134,
    2136,  2135,  1884,  1885,  2137,  2138,  1888,  2139,  2140,  2143,
    2141,  2142,  2145,  2144,  2146,  2147,  1886,  2148,  1887,  2149,
     176,  1829,   159,  1830,  1839,     0,   900,   917,  2320,  2321,
     493,   735,     0,     0,   736,     0,   492,   734,   157,  2369,
     112,     0,   489,   490,     0,     0,     0,  1590,     0,  1513,
    1513,  1513,     0,     0,  1513,  1513,     0,  1516,  1513,   157,
    1513,     0,    67,  1698,     0,     0,     0,     0,  1823,     0,
    1523,     0,  1730,  1731,     0,  1733,     0,     0,  2198,     0,
       0,     0,     0,     0,   157,   934,     0,  1574,     0,   896,
       0,  2321,  2332,   960,   964,   976,  2153,  2150,  1675,   885,
     885,   885,   883,   885,  1597,     0,     0,     0,  1574,  1732,
    2421,     0,     0,     0,  2417,     0,  2422,     0,   966,     0,
       0,     1,     5,     0,     0,  1953,  2049,  1688,  1686,  1818,
       0,   775,   802,     0,   780,     0,   778,  1835,  1834,  1833,
       0,   791,   790,   788,     0,   371,     0,     0,  2378,   782,
     914,     0,  2318,     0,   943,   953,   178,     0,    76,     0,
       0,     0,  2324,     0,     0,     0,     0,   111,     0,     0,
       0,   108,   998,   998,  2369,  2371,  2373,   493,   491,     0,
       0,     0,  1594,  1593,  1592,     0,  1590,  1890,  1840,  1901,
       0,  1791,     0,     0,     0,  1297,     0,  1845,     0,  1913,
    1915,  1850,     0,     0,  1007,  1007,  1007,     0,     0,     0,
    1931,  1932,  1800,     0,     0,     0,  1788,  1801,  1965,  1966,
       0,  1790,  1971,     0,     0,     0,     0,  1988,  1798,     0,
       0,  2019,  2021,     0,     0,  2025,  2026,  2027,  2028,  1775,
    1062,     0,  1007,     0,  1787,  1797,  2042,  1781,  2050,     0,
       0,  2054,  2055,     0,  2063,     0,     0,     0,  2086,  2089,
       0,     0,  2108,     0,     0,  1007,  1774,  2125,  2126,  2127,
    2128,     0,  1789,  1883,  1799,     0,  2139,  1007,  1007,  1007,
       0,     0,     0,  2146,  2149,     0,     0,     0,     0,  1061,
       0,  1262,     0,  1291,  1019,  1025,  1039,     0,  1054,  1072,
    1073,  1076,  1170,  1074,  1075,  1081,  1080,  1492,  1785,  1079,
    1078,  1786,  1071,  1808,  1829,  1807,     0,     0,     0,     0,
       0,     0,     0,     0,  1671,     0,     0,     0,  1513,    69,
       0,  2243,  2258,  2259,  2255,  2260,  2278,  2261,  2265,     0,
    2257,  2249,     0,  2264,  2253,  2262,     0,  2247,     0,  2263,
    2268,  2279,  2251,  2256,  2235,     0,  2241,  2245,  1820,  1397,
    2212,  2213,     0,    75,  1525,  1526,  1524,   864,     0,  1728,
    1743,     0,     0,     0,   929,   417,   408,     0,  1670,  1669,
       0,  1724,  2333,     0,     0,   905,  1528,  1575,     0,  1527,
    1721,     0,  1720,  1717,  1719,     0,  2243,  2230,     0,  2327,
    2324,  2334,   990,   982,   981,   984,   985,   989,   986,   987,
     988,   983,   980,   998,   977,   979,  2156,  1635,     0,   671,
       0,  1683,     0,  1636,     0,     0,  1683,     0,  1433,  1673,
    1676,     0,  2165,  1651,   732,   731,     0,   730,  2166,  1669,
       0,     0,     0,  1622,  1637,     0,  1598,  1642,  2167,     0,
    1672,     0,  1433,  1683,     0,  1614,     0,     0,     0,     0,
     879,   889,   881,   876,     0,   882,   878,  1595,  1509,  2434,
    2210,   864,  1780,  1779,  1827,  2418,  1778,  2426,  2428,  2414,
    2416,  2423,   962,     0,  2338,     6,    61,     0,  1695,  2376,
    2377,  2375,   687,     0,  1007,  1836,  2370,   160,   789,     0,
     372,   160,     0,     0,     0,     0,     0,   373,   374,   310,
     773,   786,     0,     0,   785,  2378,     0,     0,  1507,     0,
       0,   945,   955,   180,   177,   158,     0,   902,   919,  2323,
       0,     0,  2325,  2329,  1060,  1059,     0,   105,   110,     0,
       0,     0,  2297,   109,  2293,  2374,   998,   998,   998,  2366,
       0,  2354,  2361,  2362,  2365,  2364,  2363,  2360,     0,  2353,
    2356,  2357,  2359,  2358,  2378,  2372,     0,   737,   737,   737,
       0,  1577,  1580,  1584,  1588,  1591,     0,     0,  1402,  1094,
    1402,  1402,  1402,  1298,     0,     0,     0,     0,     0,     0,
       0,     0,  1402,     0,  1131,  1104,     0,  1132,     0,     0,
       0,     0,     0,  1794,     0,     0,     0,     0,     0,     0,
    1267,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1293,  1295,  1807,  1402,     0,     0,  1402,     0,     0,     0,
       0,     0,  1012,     0,  1138,   998,     0,     0,   998,   998,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1402,
    1402,     0,     0,  1402,     0,  1147,     0,  1796,     0,     0,
       0,  1795,     0,     0,  1793,  1792,  1776,     0,  1151,  1153,
    1152,     0,  1402,  1402,     0,     0,  1084,  1083,  1085,  2351,
       0,     0,     0,     0,     0,     0,  1058,  1057,  1056,  1055,
       0,     0,     0,  1063,     0,  1064,  1065,     0,  1066,  1067,
    1068,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1086,     0,     0,     0,  1777,   998,     0,  1514,  1496,  1502,
    1498,     0,  1671,  1499,  1506,   385,     0,  1503,  2291,  1500,
     866,     0,     0,    68,  1712,  1706,  1708,  1711,  1707,     0,
    1713,  1710,  1709,  2201,  1699,  1701,  1702,  2244,  2242,  2276,
    2275,     0,  2277,  2273,  2266,  2298,  2270,  2298,  2272,  2271,
    2298,  2267,  2274,  2298,  2239,     0,  1398,  1399,     0,  2211,
       0,  1819,     0,     0,  1744,     0,  1745,  1734,  1741,   948,
       0,  1397,  2199,  2202,     0,   418,   415,   413,   426,     0,
       0,    64,    65,     0,   936,     0,   935,   939,     0,     0,
       0,  1531,  1521,  1530,  1722,     0,     0,  2242,  2239,  2328,
       0,  2330,  2345,   965,  2335,   996,   967,   995,     0,   978,
    2151,  2154,  2162,  1679,   670,     0,     0,  1650,  1632,     0,
     493,     0,     0,     0,     0,     0,     0,  1615,     0,     0,
     530,     0,  1641,  1434,  1677,  1678,  1683,     0,     0,  1683,
       0,  1645,  1656,  1646,     0,  1673,     0,  1683,  1610,     0,
       0,  1602,  1607,  1603,     0,  1609,  1608,  1611,  1599,  1600,
    1628,  1657,  1673,  1633,  1640,  1649,     0,  1627,  1634,     0,
    1621,  1647,  1673,  1673,  1683,  1683,   892,   891,   890,   886,
     887,   892,     0,  1332,     0,     0,  2415,  2429,  2413,  2424,
    2425,  2412,   963,  2339,   961,  2340,     0,     7,     4,  1689,
    1687,  1696,  1697,   688,   687,   484,   487,   486,     0,     0,
    1838,     0,   781,     0,  1671,   779,     0,     0,  1671,   321,
    1671,   375,   687,   793,     0,     0,   783,   915,     0,     0,
     947,   942,   946,   944,   727,   726,     0,   954,     0,   181,
     183,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    77,    78,    92,
     904,   903,   901,   927,   926,   924,     0,   925,   923,   918,
     920,   921,  2322,  2326,   494,   687,  1671,     0,   313,     0,
       0,     0,     0,     0,   493,     0,     0,  2355,    97,   738,
       0,     0,     0,  1582,  1510,  1578,  1512,  1818,     0,     0,
       0,  1397,     0,     0,  1403,  1402,     0,  1276,     0,     0,
       0,     0,  1299,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1276,  1008,     0,  1158,     0,     0,     0,     0,
       0,  2351,     0,  1371,  1372,  1373,  1374,  1384,  1375,  1376,
    1377,  1386,  1391,  1378,  1379,  1387,  1388,  1389,  1380,  1390,
    1385,  1381,  1392,     0,  1370,     0,  1395,  1393,  1396,  1394,
       0,  1268,  1260,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1402,     0,     0,     0,  1402,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1239,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1402,     0,     0,     0,
    1383,     0,  1382,     0,     0,     0,     0,     0,     0,     0,
    1127,     0,  1810,  1809,     0,     0,     0,     0,   966,     0,
    1088,     0,  1087,     0,  2168,  1263,  1265,     0,  1010,  1009,
    1011,  1022,  1015,  1020,  1013,  1017,     0,  1069,  1895,  1023,
       0,     0,  1051,     0,  1411,  1052,  1037,  1042,  1043,     0,
    1040,  1041,     0,  1045,     0,  1044,  1048,  1049,  1050,  1053,
       0,     0,     0,     0,  1077,  1082,  1292,     0,  1238,  1811,
       0,  1494,   385,   388,   387,  1504,   386,  1552,     0,   868,
     867,  1501,   866,     0,    70,    72,  1705,     0,     0,  1714,
    2269,     0,  2250,  2254,  2248,  2252,     0,     0,  2240,     0,
    2246,  1401,  1961,  2035,     0,  1404,  2215,  1518,  2433,  1740,
    1742,     0,     0,  1735,     0,     0,   930,     0,     0,     0,
     428,   411,     0,    66,     0,     0,  1725,     0,     0,     0,
       0,   907,  1529,     0,  1718,     0,     0,     0,     0,     0,
    2331,  2347,  2346,  2336,   998,  1424,   999,  1001,  1000,  1807,
    2156,  2159,  2160,  2163,  2161,     0,  2158,  2157,  2172,     0,
    1681,  1684,  1685,     0,     0,  1665,  1659,  1658,  1654,  1660,
    1655,  1668,  1667,  1666,  1624,  1623,  1443,  1444,  1442,  1437,
    1438,  1441,  1618,  1674,  1664,  1662,  1652,     0,  1683,  1663,
    1661,  1604,  1605,  1606,     0,  1433,     0,  1683,  1673,     0,
    1683,  1683,  1644,  1648,     0,   880,   889,   877,   884,  1342,
    1341,     0,  1306,     0,  1308,  1305,  1304,  1303,     0,  1341,
    2419,  2427,  2431,     0,  1433,  2344,  2342,   485,  1552,  1552,
       0,  1837,     0,     0,     0,     0,     0,     0,     0,   161,
     170,     0,     0,   319,   320,  1552,   318,   361,   362,   365,
     366,   367,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   368,  1552,  1552,   315,   341,   342,   345,   346,   347,
     348,   349,   311,     0,   316,   862,   862,     0,  1552,  1552,
     862,  1552,     0,     0,  1552,  1552,     0,     0,  1552,     0,
       0,   862,     0,  1552,   860,     0,     0,  1552,  1552,  1552,
    1552,   862,     0,     0,  1552,   405,  1552,     0,     0,   872,
       0,     0,  1552,     0,     0,  1552,  1552,  1552,   809,   859,
     497,   517,   518,   774,   808,   810,   821,   403,     0,   838,
     861,     0,   795,   797,  2379,  2380,  2381,   899,  1508,  1362,
     179,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   928,
     922,   106,   687,  1552,  1552,  1552,  1552,   317,   350,   351,
     354,   355,   356,   357,   360,   358,   359,     0,     0,  1671,
       0,  2294,     0,  2407,     0,     0,     0,   159,   495,     0,
       0,   739,     0,     0,     0,     0,     0,  1404,     0,  1821,
    1585,  1332,  1589,  1588,  1586,     0,  1154,     0,  1242,     0,
    1244,  1245,  1246,     0,     0,     0,     0,     0,  1155,     0,
    1102,  1156,  1157,     0,     0,     0,     0,  1248,     0,  1133,
       0,     0,  1105,  1106,  1099,  1091,     0,  1172,     0,     0,
    1107,     0,     0,     0,     0,     0,  1173,  1294,     0,  1296,
    1811,     0,  1252,  1160,  1112,     0,  1250,     0,  1113,  1174,
    1175,  1176,  1139,   999,  1199,   998,  1162,  1163,     0,     0,
       0,  1178,     0,  1164,     0,     0,     0,     0,  1115,  1256,
    1254,     0,     0,     0,     0,  1258,  1148,  1117,     0,     0,
       0,  1116,     0,     0,     0,     0,     0,     0,     0,  1119,
       0,  1100,  1255,  1257,  1168,     0,  1128,  2348,  2348,     0,
    1092,     0,     0,     0,     0,     0,  1812,  1016,  1021,  1014,
    1018,     0,     0,     0,     0,     0,  1035,  1034,     0,     0,
       0,     0,  1411,  1038,  1229,  1289,     0,  1497,  1495,  1505,
    1550,  1551,  1553,     0,  2292,  1493,    73,     0,     0,  1700,
    1715,  1703,  2302,     0,  2301,  2287,  2290,  1818,     0,     0,
       0,  2225,  2219,  2226,  2228,  2222,  2227,  2229,  2220,  2221,
    2216,  2223,  1405,  1435,     0,     0,   949,   950,   953,     0,
    2205,  2206,  2204,  2203,   998,   416,   414,  1468,  1469,  1454,
    1455,  1453,  1456,   427,  1457,  1467,     0,   439,     0,   419,
    1727,  1726,     0,   937,   940,   941,   912,   911,   913,   906,
     908,   909,   477,  1535,     0,     0,     0,  1541,  1522,  1532,
     897,     0,     0,     0,     0,     0,   994,  1332,  1484,   991,
     971,  1435,  1425,   970,  1002,     0,  2155,     0,  2123,  2183,
       0,     0,     0,     0,     0,  2173,  1680,     0,  1629,     0,
    1653,     0,     0,     0,  1620,     0,  1643,  1601,  1619,  1404,
    1673,  1616,  1617,   894,   893,   888,  1341,  1332,     0,     0,
    1329,  1343,     0,  1343,  1332,  1332,     0,  1332,  1397,  1338,
       0,     0,  2430,  1426,  2343,     0,     0,   777,   164,   167,
     165,     0,   166,     0,     0,   370,   369,     0,  1671,   363,
     118,   117,   119,   120,  1451,  1452,  1448,  1449,  1447,  1450,
     122,   121,   116,   792,     0,     0,     0,  1671,   343,   322,
     323,   326,   327,   328,   863,   767,   931,   842,     0,   559,
     767,   723,   728,   728,   840,     0,   931,     0,     0,     0,
       0,     0,   931,     0,     0,     0,  1552,     0,   853,   804,
       0,     0,     0,     0,     0,   854,     0,   805,  1552,     0,
       0,     0,     0,     0,   931,     0,     0,     0,     0,   931,
     822,   875,   874,   873,     0,   931,   931,     0,   523,   524,
     522,     0,     0,     0,   498,   687,   806,   404,   807,   562,
       0,   869,   559,   565,  1814,     0,     0,     0,   128,  2383,
    1365,     0,  1366,  1363,  1364,   182,    84,    80,    93,  1461,
    1462,  1460,  1458,  1459,    94,    82,    83,    87,    86,    88,
      89,    90,    85,    91,    81,    95,    96,    79,     0,     0,
       0,     0,  1671,   352,     0,     0,  1552,   312,   329,   330,
     333,   334,   335,   336,   337,   340,   338,   339,     0,  2295,
       0,     0,   306,   305,     0,   123,  2401,     0,     0,   562,
      98,   403,   496,   499,   760,   762,   761,   753,   752,    99,
     101,   103,  1511,  1588,  1332,  1424,  1819,  1404,     0,  1397,
       0,     0,  1243,     0,  1183,  1277,     0,  1300,     0,  1096,
     649,   649,  1287,  1285,   634,   649,  1281,  1286,  1283,     0,
     673,     0,   672,     0,     0,     0,  1249,  1186,  1247,     0,
       0,     0,     0,  1271,     0,     0,     0,  1101,     0,  1233,
    1253,  1190,  1251,  1188,     0,  1002,     0,  1202,  1240,     0,
       0,     0,     0,     0,     0,     0,     0,  1195,  1194,     0,
       0,     0,     0,  1259,  1181,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1192,  1193,     0,  2352,
    2352,  1089,  2169,  2170,  2171,   769,  1264,     0,  1032,  1028,
       0,  1026,  1410,  1047,  1046,     0,     0,     0,  1036,     0,
       0,     0,  1179,     0,  1290,  1813,   384,   529,    71,  1704,
    2299,     0,     0,     0,     0,     0,     0,     0,     0,  2214,
    1436,  1562,  1828,  1736,     0,   957,  2207,  2208,     0,   417,
       0,   409,   412,     0,   420,   421,   423,     0,   910,   976,
       0,  1554,  1539,  1546,  1540,     0,     0,     0,  1538,  1803,
    1802,  1809,  2334,     0,     0,     0,     0,  2337,  1404,  1404,
    1478,     0,     0,   968,   973,   969,   972,     0,   997,  1006,
    1005,  1804,  1811,     0,     0,     0,     0,   675,   674,   683,
       0,     0,     0,  2168,     0,   679,   681,   680,  2178,   678,
    1682,  1433,  1639,  1638,  1440,  1439,     0,  1612,  1631,  1683,
       0,  2341,  1336,     0,  1331,  1330,  1344,     0,  1332,  1343,
    1343,     0,  1311,  1310,  1566,  1569,     0,  1309,  1360,  1334,
     976,  2420,  2432,     0,   686,   685,   528,   682,   527,   169,
     168,   174,   175,   390,   376,   389,   364,   115,   377,   378,
     344,     0,   324,   564,   768,   825,     0,     0,     0,   728,
     558,   767,   557,   560,   737,   729,   767,   767,     0,     0,
     509,   506,   844,   512,   823,   816,   824,   835,   837,     0,
     508,   525,     0,     0,   514,   767,   811,   851,   852,   866,
     502,     0,   538,   539,   537,   519,   526,   504,   505,   846,
       0,  1420,  1422,  1430,   511,   510,   406,   507,     0,   857,
     830,     0,   536,   534,   531,   533,   532,   535,   515,   513,
     503,  1714,   862,   862,   839,     0,   546,   548,   549,  1817,
       0,   871,   841,     0,   550,   551,     0,     0,     0,   138,
       0,     0,   794,     0,   131,   129,   140,     0,     0,   956,
       0,   383,   382,   381,   380,   353,     0,     0,     0,  1671,
     331,  2296,     0,  2408,   309,   307,   308,     0,     0,   184,
     544,   545,   543,   542,     0,   393,     0,  1866,   391,     0,
       0,  1746,   687,   500,     0,     0,     0,     0,  1404,  1445,
    1822,  1581,  1587,     0,  1129,  1184,  1207,  1301,     0,     0,
     650,  1278,   689,     0,  1288,   636,   635,  1280,  1282,  1284,
    1095,  1103,  1171,  1098,  1097,  1187,  1185,     0,     0,  1136,
    1137,     0,  1269,     0,     0,  1109,     0,  1111,     0,     0,
    1235,  1191,  1189,  1161,  1241,  1200,  1201,     0,  1203,     0,
       0,  1177,  1140,  1165,     0,  1114,  1090,     0,  1141,     0,
    1146,  1144,     0,  1182,  1118,     0,     0,  1125,     0,  1123,
       0,  1124,     0,  1126,  1167,  1169,  2349,     0,     0,  1266,
    1024,     0,  1033,  1030,     0,  1027,  1205,  1204,  1180,  1230,
    2300,  2289,  2288,  2303,  2303,  2303,     0,  1406,     0,  1519,
    1746,   951,     0,   952,   999,   436,     0,   443,     0,   441,
     410,     0,   938,   998,  1536,  1548,     0,  1556,     0,     0,
    1533,  1543,     0,     0,     0,  1542,     0,  2232,  2233,  2231,
    1435,  1412,     0,     0,  1490,     0,  1485,   992,     0,  1004,
    1003,     0,  2185,     0,  2184,  2196,  2197,  2194,  2195,  2193,
    2174,     0,  2180,  2179,     0,     0,     0,  2190,  2181,     0,
       0,  1630,     0,  1625,   895,     0,  1332,  1307,  1332,  1318,
       0,     0,  1332,  1314,  1312,  1316,     0,  1404,     0,  1333,
    1357,   998,  1806,  1427,  1430,   325,   827,   561,   767,   724,
     725,   737,     0,   737,   737,     0,     0,   815,     0,   919,
       0,   820,   683,   520,   850,   849,   521,     0,   813,     0,
    1431,  1432,  1423,   812,   832,   818,     0,   843,   562,   870,
     703,   630,   579,   570,   649,   573,   572,   616,   587,   584,
     634,   632,   602,   634,   634,   609,   608,   626,   612,   592,
     689,   689,   591,   629,   689,   613,   611,   615,     0,   617,
     634,   622,   610,   614,   631,   607,   604,   628,   649,   649,
     585,   588,   627,   689,     0,   620,   649,   653,   590,   689,
     695,     0,     0,   649,   651,  1816,   139,   127,     0,     0,
     796,   798,     0,     0,   799,  2385,     0,  2387,  1367,     0,
     314,   379,   332,     0,   195,   998,     0,     0,   185,   187,
     188,     0,     0,     0,   495,  1748,  1747,   392,   480,   501,
       0,     0,     0,  1588,  1583,     0,  1579,     0,     0,  1209,
    1302,     0,     0,     0,     0,   695,   697,   691,   695,     0,
    1279,     0,     0,     0,  1272,     0,     0,     0,     0,     0,
       0,     0,  1093,     0,  1231,  1196,     0,     0,     0,     0,
       0,     0,     0,     0,  1122,  1120,  1121,  2350,   770,  1029,
       0,     0,  2308,  2308,  2308,  1561,  1560,     0,  1559,  1563,
       0,   958,     0,     0,     0,     0,   440,     0,   422,   478,
       0,     0,     0,  1557,  1545,  2338,  1534,  1537,  1811,  2234,
     975,     0,  1407,  1489,  1486,     0,  1479,  1481,  1483,     0,
    1805,     0,     0,  2189,  2175,   684,     0,     0,     0,     0,
    2176,     0,  1397,  1337,     0,  1303,  1332,  1332,     0,  1303,
       0,     0,     0,  1568,  1424,  1570,  1361,     0,  1339,     0,
    1429,     0,     0,   826,     0,     0,     0,     0,     0,   856,
       0,   869,   817,   836,   858,   653,   931,  1421,   831,   833,
     907,   516,   547,   709,   578,   571,   589,   638,   633,     0,
     638,   638,   598,   616,   593,     0,   689,   606,   597,   618,
     621,   623,   625,   638,     0,   689,   586,   595,   582,   638,
     661,     0,     0,     0,   657,     0,   702,     0,   664,   566,
     654,   656,     0,     0,   619,   689,   575,   696,   695,   577,
     689,   695,   638,     0,   652,   638,     0,   125,   130,   141,
     142,   787,  2384,     0,  2382,     0,     0,     0,   198,   196,
     197,     0,   191,   193,   188,  2395,     0,  2402,     0,     0,
    2400,   394,   396,   403,   481,     0,     0,  1430,   765,     0,
       0,  1446,  1130,     0,     0,  1222,  1221,     0,  1210,     0,
     647,   645,   648,   646,   690,   698,   699,     0,   694,   692,
     695,     0,  1134,  1135,     0,  1270,  1261,  1159,     0,  1110,
    1232,     0,     0,     0,     0,  1166,  1142,  1145,  1143,  1149,
    1150,  1031,     0,     0,  2307,  2305,     0,  2306,  2304,  2280,
       0,  2237,  2238,  2236,  2224,     0,     0,     0,   424,   998,
     429,     0,   446,   445,   442,  1435,  1547,  1549,  1555,  1544,
    1413,  1408,  1424,   676,  1482,     0,   993,  2187,  2186,  2188,
    2182,     0,     0,     0,     0,  1335,  1319,     0,  1323,  1328,
    1324,     0,  1315,  1313,     0,  1445,  1349,  1350,     0,     0,
    1355,  1359,  1435,  1430,   829,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   855,  1782,   845,   847,
     814,     0,   819,     0,     0,     0,   704,   705,   710,   712,
     642,   643,   644,   599,   639,   641,     0,   601,   569,   594,
     624,   600,     0,   596,   583,   667,   666,  1007,   659,   669,
       0,     0,   665,   655,   663,   658,   574,   576,   580,   581,
     567,     0,   568,  1815,   132,   800,   246,  2386,   966,     0,
    2391,   113,  2399,  2409,   195,     0,     0,   136,     0,   186,
     189,  2338,  1746,     0,   399,   740,     0,   764,     0,   742,
     744,  1208,     0,  1206,     0,     0,     0,     0,     0,  1220,
     700,   693,     0,  1273,  1430,     0,  1234,  1236,     0,     0,
    2286,  2285,  2284,  2281,     0,     0,     0,     0,     0,     0,
    2309,  2311,  1558,     0,     0,     0,   437,     0,   433,   435,
       0,   465,   479,   991,   540,     0,     0,  1435,     0,  1487,
    1480,  2192,  2191,  2177,     0,     0,     0,     0,     0,     0,
    1368,  1567,  1345,  1345,  1356,  1340,  1428,   828,     0,     0,
     740,     0,     0,  1784,  1783,   869,     0,   715,   716,   717,
       0,     0,     0,   708,   711,   640,     0,   771,     0,   668,
    1007,   662,     0,   134,   272,     0,   258,   244,     0,     0,
       0,   248,   143,   146,   144,     0,   145,   151,     0,   152,
     153,   154,   155,   156,   147,   270,   271,   150,   148,   149,
       0,  1831,     0,  1832,  2389,     0,     0,  2388,   162,   192,
       0,     0,   128,   137,  2403,   397,   395,     0,  2334,  1552,
     100,   741,   756,   755,   746,  1430,     0,     0,   102,   743,
     758,   750,   104,   745,   757,   748,  1217,  1430,     0,  1224,
       0,  1228,  1227,  1223,  1225,   637,     0,  1275,  1108,     0,
       0,  2282,  2312,  2315,  2313,  2314,  2316,  2310,     0,  1737,
     999,     0,   430,   431,     0,     0,     0,  1552,     0,     0,
    1552,  1552,  1552,  1552,   458,   466,   468,     0,   541,  1417,
    1430,  1409,  1470,   677,  1749,     0,  1320,     0,  1325,     0,
    1317,     0,     0,  1353,  1351,     0,   740,   552,   742,   744,
     848,     0,   719,     0,   718,     0,   713,   714,   709,     0,
     689,     0,   689,   660,   133,     0,   126,     0,     0,   257,
     260,     0,     0,   263,   253,   252,   254,     0,   247,   246,
     246,   300,   251,   297,   296,   289,  2338,     0,     0,     0,
    2410,   194,   998,   140,     0,   401,   400,     0,   747,   763,
     766,     0,   751,   749,     0,  1211,  1218,  1214,     0,     0,
    1430,     0,     0,  1564,  1572,     0,   676,     0,   438,   437,
     434,     0,     0,     0,  1552,  1552,     0,     0,     0,     0,
       0,   444,   467,  1552,     0,     0,  1414,  1416,     0,   974,
       0,  1757,     0,     0,     0,  1369,     0,  1346,     0,     0,
       0,   556,   555,   553,   554,     0,   721,   722,   720,   706,
     707,   603,   772,   605,   135,   273,   284,   287,   279,   259,
       0,     0,     0,   249,   246,     0,   233,   231,   232,   238,
     239,   240,   241,   242,   243,   234,   237,   235,   236,   246,
       0,   203,     0,     0,  2390,     0,  2392,     0,   172,   171,
     163,     0,   246,  2396,     0,  2404,  2338,   754,   759,  1430,
       0,  1213,  1219,  1226,  1274,  1197,  1198,     0,     0,  1738,
     425,   432,     0,   454,   456,   457,   451,     0,   447,   449,
     450,   476,     0,     0,  1465,  1463,  1464,   472,  1466,   473,
     471,   469,   462,     0,   460,     0,  1418,  1419,  1430,  1471,
       0,     0,     0,     0,  1750,  1752,     0,  1488,     0,  1322,
    1327,  1348,  1347,  1362,     0,   834,     0,     0,   246,   280,
       0,   255,     0,     0,     0,     0,   201,   303,     0,   199,
     291,   291,  2393,  2394,   173,  2411,     0,   142,   162,   402,
    1214,  1215,  1216,  1571,  1573,  1749,   448,     0,  2015,     0,
     474,   475,     0,   459,     0,   470,  1415,     0,     0,     0,
       0,     0,  1751,     0,     0,  1758,  1760,     0,     0,     0,
     281,   287,   277,   285,   246,     0,     0,   245,   264,   299,
     202,     0,   301,     0,   246,     0,   290,   292,   294,     0,
     124,  2405,  1212,  1757,   455,   452,   453,   465,   464,   461,
     998,  1755,  1756,     0,  1753,     0,     0,  1759,     0,  1354,
    1352,     0,   278,     0,     0,   276,   256,   261,   246,     0,
     246,   214,   213,     0,   205,   227,   298,     0,   204,  2397,
     246,  1763,   463,     0,     0,  1474,  1476,  1754,  1762,  1761,
       0,   282,     0,   246,     0,   246,     0,   246,     0,     0,
       0,     0,     0,   200,   246,  2406,     0,  1765,   999,  1472,
     998,  1626,     0,   274,   246,   262,   267,   304,     0,   208,
     228,   229,     0,   211,  2398,     0,     0,  1772,  1477,  1475,
     246,   246,   263,   266,   302,     0,     0,   206,   220,   207,
     218,   210,     0,  1764,  1767,     0,     0,  1769,  1770,     0,
    1739,   246,   246,   268,   226,   224,   246,   215,   222,   217,
       0,   223,   230,   221,     0,   212,  1771,  1766,     0,  1773,
       0,   209,   225,   219,  1768,   216
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   553,  1348,    57,    58,    59,    60,    61,  1231,
      62,   759,  1173,  1644,  1645,    63,   499,    64,   956,  1407,
    1408,  1409,    65,  1948,  2814,  2815,  2816,  1425,   469,   470,
    1819,  1820,   979,  2798,  2772,  3524,  2776,  3643,  3786,  3682,
    1892,  3104,  3525,  3526,  3652,   494,  1946,  1362,  3810,  1799,
    3920,  1800,    66,   586,   954,  1388,  1389,  3117,  3118,  3349,
    3119,  3341,  3342,  3343,  3344,  4054,  3894,  3999,  4055,  4120,
    4155,  4161,  4162,  4093,  4176,  4177,  4178,  4184,  4179,  4094,
    4157,  3895,  3896,  3793,  3897,  3655,  3898,  3797,  3899,  3658,
    3900,  3901,  3902,  3903,  4046,  3904,  3792,  4086,  3891,  3892,
    4088,  4136,  4153,  3905,  3665,  3787,  3986,  3666,  3788,  4041,
    3887,  4042,  4081,  4132,  3888,  3987,  4084,  3990,  3906,  3912,
    4056,  3907,  3913,  3908,  3670,  3804,  3911,  3802,  3910,  4090,
    4051,  2414,  2797,   571,   572,   597,  1939,   573,   968,   928,
    1364,  1832,  1833,  2279,  2280,  2397,  2398,  2399,  1824,  1825,
    1826,  1927,  1928,  1929,  1806,  1807,  1808,  1368,  1803,  1804,
     574,   929,   939,  1827,  1828,  1829,  2403,  1931,  1932,  1933,
    1934,  1830,  1635,  1831,  2674,  2420,  2808,  3541,  3127,  3688,
    3926,  2346,  2347,  2327,    67,   510,   806,  1228,  2158,  1678,
    1677,  1229,  2573,  2574,  2575,  2145,  3420,  1680,  2157,  3586,
    3839,  3587,  3588,  2924,  3732,  2571,  2928,  2929,  3195,  3422,
    3591,  3948,  3949,  3950,  3942,  3943,  3944,  3851,  3963,  3964,
    4022,  4067,  3744,  3745,  3746,  2177,  2579,  3425,  3355,  1921,
    1354,  1355,   471,   472,   473,   594,  2421,  1879,  2422,  2423,
    1881,  1882,  2546,  1279,  2748,  2725,  3592,  2804,  2755,  2756,
    2757,  2758,  2692,  2693,  2288,  2289,  2352,  2766,  3087,  3279,
    3294,  3088,  3089,  3090,  3091,  3092,  3093,  3094,  2834,  2835,
    3493,  3494,  3495,  2830,  2831,  3325,  3309,  3310,  3311,  3508,
    3149,  2618,  2619,  3599,  2627,  2628,  2665,  2972,  2666,  1358,
    3150,  3319,  3378,  3312,  2765,  3273,  3486,  3632,  3487,  3488,
    3489,  3776,  2290,  2691,  2291,  2696,   884,   474,  2292,  2293,
    1439,  1440,  3690,  3698,  3702,  3691,  3703,  3699,  3692,  3693,
    3694,  3705,  3701,  2427,  3356,  3357,  2683,  2899,  3636,    68,
    1372,   922,   931,   927,   945,   578,  1373,  1893,  2358,  3331,
     561,  1883,  3266,  3019,  3270,  1884,  2705,  1885,  3006,  3253,
    1886,  3034,  3268,  3481,  2706,  2707,  1887,  1888,  1889,  3018,
    3027,  3625,  2294,   123,  1641,  2762,  2334,    69,  1331,  1326,
      70,   895,   890,   891,  1329,  1330,  1765,  2224,    71,   825,
      72,   581,    73,   589,  1412,    74,  1239,  2169,  2170,  2171,
      75,   946,    76,    77,   590,  1419,  1420,  1421,    78,  1224,
     130,    79,   814,  1234,  1236,  1237,    80,   583,   584,  1381,
      81,  1672,  2136,  2137,   951,   952,  1387,  2923,    82,    83,
     550,   523,   831,   524,   525,  1705,  2189,  3593,   843,   844,
     845,  2603,  1256,  1257,  1536,  2194,  1706,  2608,  1024,   723,
     724,   725,   726,  1121,  1122,  3313,   727,  1131,  1600,   728,
     729,   730,   731,   732,   733,  2487,  2867,  2541,  2444,  3139,
    3367,  3706,  3931,  3825,  3368,  3369,  3559,  3713,   734,  2859,
    2860,  3164,  1627,  1537,  1538,   735,  1999,   736,  1114,  1585,
    1512,  3156,  2852,  3384,  3563,  1456,  1969,  2459,  2543,  2069,
    1049,  1050,  1014,  1976,  1462,  1772,  1773,  1774,  1775,  1776,
    3241,  3240,  3242,  3605,  3447,  3607,  3451,  2235,  1777,  1778,
    2641,  2986,  2659,  2660,  3462,  2226,  1779,  2647,  3763,  3459,
    3460,  3870,  3869,  3461,  3246,  3247,  2999,  3000,  2361,  2362,
    2363,  3609,  1503,  1561,  1504,  1510,  1208,  1209,  1457,  2133,
    2558,  3432,  3596,  2086,  3212,  3595,  3749,  3856,  1890,  2731,
    2732,  2191,  2192,  2663,  3003,  3032,  1282,  3594,  2560,  1739,
    1740,  3136,  4160,  2675,  2374,  3957,  2154,  2155,  3859,  4027,
    4104,  4105,  4106,  2954,  2955,  3216,  3217,  2193,  2600,  2956,
    3433,  3754,    84,   478,    85,  2098,  2110,   948,  1443,  1444,
     747,   491,    86,   500,  2134,    87,   517,  1693,   797,   818,
    1242,  1243,  2178,  2580,  2587,  2179,  2592,  3205,  2582,  2934,
    2935,  2102,  2103,  2583,  2937,  3202,  3187,  3188,  2919,  3416,
      88,   538,  2997,  2654,  2655,  3833,  3834,   819,    89,   477,
    1001,  1957,  1449,  1956,  1002,  1003,  1959,   615,   616,    90,
     535,  1307,  1308,  1309,  1755,    91,   528,   885,  2631,  1734,
     810,  1166,  1286,   888,  1287,  1720,  2208,  1267,    92,   918,
     917,    93,   557,  1350,    94,   760,  1184,  1185,  1649,  2111,
      95,   518,   823,   824,    96,   512,   811,  1686,    97,   504,
      98,    99,   800,  1217,  2920,  3836,  4015,  1671,  1218,  3128,
    3861,  3974,  3975,  3977,  4035,  4036,  4127,  4147,  4166,  4167,
    4170,   738,   905,   739,  3476,   740,   741,  2588,  2589,  3707,
     742,  3835,   743,  2684,   898,  1446,   497,   451,   568,   906,
    2563,   745,  3672,   925,   972,   453,   454,   100,   846,   527,
    1260,  1261,  1262,  1715,  1716,   889,  2074,  1717,  1718,  2205,
    2200,  3224,  2978,  2970,   101,   803,  1186,  1222,  1223,  2142,
     102,   537,   103,  1210,  1665,  1666,  2130,  2557,  2131,   104,
     827,   105,   784,  1659,   785,  1188,   786,   787,  1200,  1195,
    1203,  1197,  3574,  3408,  3409,  2118,  1169,   973,   974,  1652,
    2113,  2114,  3182,  3411,  3580,  3581,   106,   134,   459,   592,
     963,  1250,   107,   108,   109,   110,  1253,  1343,  2185,  1344,
    1345,  1346,  1786,  1703,  2519,  1112,  1579,  2896,   601,   989,
     981,   124,   125,   126,   604,   605,   127,   943,   944,  2359,
    2778,  3106,  3334,  3335,  3530,  3677,   983,  3536,  4006,  4124,
     984,   985,  2799,  3538,  3814,  4008,  4100,   986,  2411,  3114,
    3678,  3922,   111,   907,   547,  1341,  1336,  1338,  1782,  2242,
     112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3266
static const int yypact[] =
{
    4667,  2139,    99,  1396, -3266,   -99,   211, 41527,   596,  1396,
    1396,   358,  2790, -3266, -3266, -3266, -3266, -3266,  2718, -3266,
   41527,    99, -3266, 23708, -3266, -3266,   590,   804,   186,  1396,
      99, -3266, 41527, -3266,   636,  -109,    99, -3266, -3266,  1396,
   -3266,   358, 41527, -3266,   731, -3266,   -63,   569,   632,   620,
     808, -3266, -3266, 41527,  2083,  -122,  1198,  1177, -3266, -3266,
    1011, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, 24286, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266,  1333, 41527,  1418, 41527, -3266,  1406,
   41527, 35787, 41527,  1131,  1488, -3266, -3266,  1596, -3266, -3266,
    1396, -3266, -3266, -3266,   358, -3266, -3266, 23708, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266,  1128, -3266, -3266,  1214, -3266, -3266, -3266,  1722,
    1554, -3266,  1568, 35787, -3266, 41527, -3266, -3266, -3266,   255,
   -3266,  1271, -3266,  1284,  1595,  1645,  1668,   101, 12550,  1676,
    1676,  1676, 41527,  1721,  1676,  1676, 41527, -3266,  1676, -3266,
    1676,  1396, -3266, -3266,  3689, 41527,  1590,   207,   -47, 35787,
    1268, 41527, -3266, -3266, 12550, -3266,  1716, 23708, -3266,  1396,
    1903,  1789,   251, 41527, -3266, -3266,  1396,  1210,    46, -3266,
    3692,   137, -3266, -3266, -3266,  2598, -3266, -3266,  5841, -3266,
   -3266, -3266,  1404, -3266, -3266, 23708, 41527,  1396,  1715, -3266,
   -3266,   169,   169,   169, -3266,   169, -3266,   169, -3266,  -122,
    1393, -3266, -3266,  1407, 41527,  -117,   555, -3266, -3266,  1409,
     992, -3266,  1447, 32917, -3266, 41527, -3266, -3266, -3266, -3266,
    1666, -3266, -3266, -3266,  1292, -3266, 23708, 41527,  1538, -3266,
   -3266, 23708, -3266,    35, -3266, -3266,  1425, 41527, -3266, 23708,
   23708,   919,    60,  1737, 41527, 41527,  1845, -3266,  2014, 32917,
    1612, -3266,   214,  1170,  1596,  2021, -3266,  1554, -3266, 41527,
   41527, 41527, -3266, -3266, -3266, 37509,   101,  1445,  1450,  1453,
   16120, -3266,  1458,  1470,  1491, 12550,  1519,  1524,  1539,  1542,
    1563,  1602,  1608,  1616,  1627,  1627,  1634,  1636,  1659,  1663,
     576,  1679, -3266,  1695,  1706,  1711, -3266, -3266,  1719,  1726,
    1732, -3266,  1739,  1741,  1743, 13145,  1754,  1763, -3266, 20814,
    1766,  1774,  1776,  1778,  1790,  1792,  1800,  1811,  1818, -3266,
   -3266, 12550,  1827,  1830, -3266, -3266,  1833, -3266,  1839,  1841,
    1843,  1847,  1849,  1853,  1865,  1872,  1874,  1879,  1883,  1893,
    1899,  1908,  1912,  1919,  1924,  1928, -3266,   987,  1933,  1941,
    1517,  1951, -3266,  1954, -3266,   183,  1960,  1627,  1627,  1627,
    1967,  1969,  1971,  1974,  1993, 16120, 16120, 16120,  9575, -3266,
   41527, -3266, 41527,  1844,  2852, -3266,  2374, 16120,   903, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266,  1498,  1589, -3266,
   -3266, -3266, -3266, -3266,  2002,  1587,  2016, 41527, 41527, 41527,
    1864, 41527, 41527, 35787,  1727, 41527, 32917, 23708,  1676,  1822,
    3414,  1934,  1898,  1339, -3266, -3266, -3266, -3266, -3266,  2017,
   -3266, -3266,  2086, -3266, -3266, -3266,   202, -3266,   122, -3266,
   -3266, -3266, -3266, -3266, -3266,  2255,  2004, -3266, -3266,   123,
   -3266, -3266, 41527, -3266, -3266, -3266, -3266,  2404,  2156,  1844,
    1544,  2571,  2447, 23708, -3266,  1340, -3266,  -152, -3266, -3266,
    2368, -3266, -3266, 32917, 23708, -3266, -3266, -3266, 21392, -3266,
   -3266,  2580, -3266,  2037, -3266, 23708,  1934, -3266,  2305,  2214,
      60,  2147, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266,  2074,  2598, -3266, -3266, -3266,  2528, -3266,
    2243,    36,  2169, -3266,  2118,  1054,    36, 33491,  2452,   223,
   -3266,   172, -3266,  2530, -3266, -3266,  2237, -3266, -3266,  2239,
    2247,  2456,  2249, -3266, -3266,   176,  2144, -3266, -3266,   763,
   -3266,  1144,  2452,    36,   223, -3266,  2494,  2611,   718,   571,
   -3266,  1132, -3266, -3266,  2680, -3266, -3266, -3266, -3266, -3266,
   -3266,  2404, -3266, -3266, -3266,  2172, -3266,  2441,  2273, -3266,
   -3266,   691, -3266,  2186,  1311,  2656, -3266,   665, 34065, -3266,
   -3266, -3266,  2688,  2705,  1627,  2215, -3266, -3266, -3266,  2809,
   -3266, -3266,  2229,  2725,  2725,  2725,  2824, -3266, -3266, -3266,
   -3266, -3266,  2396,  2276, -3266,  1538, 23708,  -129, -3266, 38083,
   23708, -3266,   823, 12550, -3266, -3266,  3733,   226,  1050, -3266,
    2791,  2439, -3266, -3266, -3266, -3266,  2698, -3266, -3266,  2809,
    2755,  2725,  2653,  2266, -3266, -3266, -3266, -3266, -3266, -3266,
     235, -3266, -3266, -3266, -3266, -3266, -3266, -3266,   240, -3266,
   -3266, -3266, -3266, -3266,  1538, -3266, 23708, -3266, -3266, -3266,
   23708, -3266,  2267, -3266,  2262, -3266, 12550, 12550,   315,  2796,
    2853,  2853,  2853,  1844,  2296, 12550, 12550, 12550, 12550, 12550,
   12550, 12550,   323,  2275, -3266, -3266, 10170, -3266,  2277, 12550,
   12550,  2360, 12550,  1589, 12550, 24864,   681,  2836, 12550,   298,
    2747, 12550, 12550, 12550,  9575,  2806, 12550, 12550, 24864,  2865,
    2282, -3266,  2278,   326, 12550, 12550,  1476, 12550, 12550, 12550,
   12550, 12550, -3266, 10170, -3266, -3266, 12550, 12550, -3266, -3266,
   12550, 12550, 16120, 12550, 12550, 12550, 12550, 12550, 12550,  2853,
    2853, 12550, 12550,  1588, 10170, -3266, 12550,  1589,  2054,  2054,
   12550,  1589,  7195, 12550, -3266, -3266, -3266,  2284, -3266, -3266,
   -3266, 24864,  2853,  2853, 12550, 12550,  2796,  2796,  2796, -3266,
    9575,   262,  2286, 12550, 26020,  2288, -3266, -3266, -3266, -3266,
   12550, 12550, 12550, -3266, 16120, -3266, -3266,  1925, -3266, -3266,
   -3266, 13740, 16120, 16120,  2297, 16120, 16120, 16120, 16120, 16120,
    2644, 16120, 16120, 16715, 17310, 16120, 16120, 16120, 16120,  1125,
    2796, 35787, 16120, 12550, -3266,  2304, 41527, -3266, -3266, -3266,
    2298, 23708,  1727, -3266, -3266,   607,  2757, -3266, -3266,  2306,
     104, 23708,  2307, -3266, -3266, -3266, -3266, -3266, -3266,  2854,
   -3266, -3266, -3266,  2333,  2313, -3266, -3266, -3266, -3266, -3266,
   -3266,  2407, -3266, -3266, -3266,  2317, -3266,  2317, -3266, -3266,
    2317, -3266, -3266,  2317,   108,  4583, -3266, -3266, 41527, -3266,
   42101, -3266, 21392,   -99, -3266,  2635, -3266, -3266,  2663, -3266,
    2637,   293,  2325, -3266, 23708, -3266, -3266, -3266,  2556,   216,
   35787, -3266, -3266,   163,  2327,  2402,  2329, -3266,  2410, 23708,
   23708, -3266, -3266, -3266, -3266,    46,   160,  2337,   697, -3266,
   41527, -3266,  1603, -3266, -3266, -3266,  2338, -3266, 12550, -3266,
    2340, -3266,  1209,  2711, -3266,   -99, 12550, -3266, -3266,  2359,
    1554, 41527, 41527, 41527, 23708, 41527, 23708, -3266,  1038,  1038,
   -3266,  1068, -3266, -3266, -3266, -3266,    36, 41527, 41527,    36,
   32917, -3266, -3266, -3266,  2773,   223, 41527,    36, -3266,  2724,
    2453, -3266, -3266, -3266,  2787, -3266, -3266,  2778,  2362, -3266,
   -3266, -3266,   223, -3266, -3266, -3266, 23708, -3266, -3266,   223,
   -3266, -3266,   223,   223,    36,    36,  2408, -3266, -3266,  2372,
   -3266,  2408,  2507,  -108,   169,  2600, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266,   110, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266,   112, -3266, -3266, -3266,  1905,  2849,
   -3266, 35787,  1330,   -84,  1506,  1330,  2106,   -99,   469, -3266,
     469, -3266,  4392,  2634,   232, 23708, -3266,  2383,   -99, 23708,
   -3266, -3266, -3266, -3266, -3266, -3266,  2387, -3266,  2388,  2389,
    1844,  2837,  2839,  2840,  2842,  2844,  2845,  2846,  2847,  2848,
    2850,  2856,  2864,  2870,  2871,  2873,  2874,  2428, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266,  2476, -3266, -3266, -3266,
   -3266,  1855, -3266, -3266, -3266,   130,  1949,  2454,  2475,  2983,
   32917,  2859, 41527, 41527,  1554, 41527, 41527, -3266, -3266,  -114,
    2690,  2692,  2694,  2448, -3266, -3266, -3266,  1564, 41527,  2863,
   28325,   199,   279,   457, -3266,  2853,  2451, -3266,  2458,  2463,
    2464, 12550,   138,  1166,   500,  -164,  1507,   815,   297,   150,
   12550,  2466,  2459, -3266,   955, -3266,   332,   352,   959,   975,
    2467, -3266,  2468, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266,  2867, -3266,  1550, -3266, -3266, -3266, -3266,
    2455, -3266, -3266,   982,   416,   447,   287,  2461,   461,  1555,
    1572,  2470, 24864, 41527,  2853,  2471,   997,  1007,  2853,  2472,
     546,  1047,  1586,  1629,  1640,  1119, 12550,  1644, -3266,  1127,
    1154,  2484,  2485,   648,  1654,  2925,  1158,   657,   708,   719,
     750,  1171,  2489,  2490,   768,   154,  2853,  2491,  1194,   291,
   -3266,  2469, -3266,  2482,  1222, 10765, 11360, 11955,   195,   785,
   -3266,  2492, -3266,  2278,  2495,  2496,   309,  1239, -3266,  -122,
   -3266, 12550, -3266,   120,  1250, -3266,  2631, 41527,  2245,   147,
   -3266, -3266, -3266, -3266, -3266, -3266,   871, -3266,  2498, -3266,
    2501,  1994,  2505,  9575,   209,  2505,  2969,  1413,  1413, 16120,
    2088,  2202, 13145,   845, 13145,   845,  2505,  2505,  2505, -3266,
   16120,  2506, 16120, 16120, -3266,  2796,  1844,  2512,  2515,  1361,
   41527, -3266,   607, -3266, -3266, -3266, -3266,   740, 32917, -3266,
   -3266, -3266,   104, 35787,  2517, -3266, -3266,  2704,  3414, 23708,
   -3266, 41527, -3266, -3266, -3266, -3266, 21970, 21970, -3266, 21970,
   -3266, -3266,   294,   301,  3100,  2544, -3266, -3266, -3266, -3266,
   -3266,  2905, 23708, -3266,   644, 23708,  2383,  2527,  2527,  2190,
    2627, -3266,  2529, -3266, 12550,   -99, -3266, 32917, 32917, 23708,
   23708,   204, -3266,  1720, -3266,   -99,  2936, 21970, 21970, 21970,
   -3266, -3266, -3266, -3266, -3266,  1265, -3266,  1844, -3266,  2522,
   -3266, -3266, -3266, -3266, -3266, 38657,   173, -3266, -3266,   -99,
    2949, -3266,  1844,  2535, 41527, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
     -21, -3266, -3266, -3266, -3266, -3266, -3266,  2675,    36, -3266,
   -3266, -3266, -3266, -3266,  2745,  2452,  2144,    36,   223, 23708,
      36,    36, -3266, -3266,  1601, -3266,  1132, -3266, -3266, -3266,
   -3266, 41527,   895,  2691, -3266,  2545, -3266, -3266, 23708, -3266,
    2547, -3266,  2967,  3097,  2452, -3266, -3266, -3266,   740,   740,
    2833, -3266,   -99,  2674,  2679,  2682,  2684,  2686,  2712, -3266,
   -3266,   -99,   -99, -3266, -3266,   740, -3266,   983, -3266, -3266,
   -3266, -3266,   -99,   -99,   -99,   -99,  2300,   -99,   -99,  1671,
   -3266, -3266,   740,   740, -3266,  1779, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266,  1124, -3266,  2436,  3087,  2797,   740,   740,
    3087,   740,  2799,  2801,   740,   740,  2648,  3046,   740,  2942,
    2677,  2483,  2948,   740, -3266,  2681,  3059,   740,   740,   740,
     740,  3087,  2821,  3137,   740, -3266,   740,  2823,  2827,   233,
    2826,  2828,   740,   241, 41527,   740,   740,   740, -3266, -3266,
    5307, -3266, -3266, -3266, -3266, -3266, -3266,  1120, 22550, -3266,
   -3266,   456, -3266,  2781, -3266, -3266, -3266, -3266, -3266, 39231,
   -3266, 12550,  2300,   -99,   -99,   907,   -99,  2300,   -99,   -99,
     -99,   -99,   -99,  2300,  2300,   -99,   -99,  2300,  3733, -3266,
   -3266, -3266,   179,   740,   740,   740,   740, -3266,  2036, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, 35787,  2938,  1963,
    1019, -3266, 41527, -3266,  1733, 41527,  2605,  -110,  3258,   884,
     884, -3266, 23708, 23708, 23708, 41527,  2645,  2544, 28325, -3266,
   -3266,  -108, -3266,  2599, -3266, 14335, -3266,  2608,  2855, 12550,
   -3266, -3266, -3266,  1175, 12550, 12550,  3062,  2108, -3266, 34639,
   -3266, -3266, -3266, 12550, 34639,  2108,  1682,  2855,  2612, -3266,
    2985,  2989, -3266, -3266, -3266, -3266, 12550, -3266, 12550, 12550,
   -3266, 12550, 12550, 12550, 12550, 12550, -3266, -3266, 16120, -3266,
    2604,  2619,  2855, -3266, -3266,  2621,  2855, 12550, -3266, -3266,
   -3266, -3266, -3266,  1844,  3037, -3266, -3266, -3266,  2643,  2649,
   12550, -3266, 12550, -3266, 12550, 12550, 12550, 12550, -3266,  2855,
    2855, 14930, 12550, 12550,  2624,  2855, -3266, -3266, 12550, 12550,
   12550, -3266, 12550,  1364, 12550,  1547, 12550,  1911, 12550, -3266,
   12550, -3266,  2855,  2855, -3266, 12550, -3266, -3266, -3266,  1692,
   -3266,  2623,  2628,  2629, 35787, 12550, -3266, -3266, -3266, -3266,
   -3266,   681, 16120,   328,  2639, 16120, -3266,  2969,  2806,  2806,
    2079,  9575,   209,  2969,  1152, 12550, 41527, -3266, -3266, -3266,
   -3266, -3266, -3266, 35787, -3266, -3266, -3266,  2307,  2970, -3266,
    2383, -3266, -3266,  1697, -3266,  2630, -3266,  2636,  2715,  2720,
    2726, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266,  2452,  1720,  2722,  2654, -3266, -3266,  2662,
    2995, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266,  3206,  2664,  2527, 41527,
    1844, -3266,  2737, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266,    76, -3266, -3266,  2670,  2670, 19656, -3266, -3266, -3266,
   -3266,  2918,  3088,  3091,  3092,   665, -3266,   420, -3266,   197,
    3049,  2452, -3266,  3094, 36361, 28899, -3266,  2673,  3051,  2687,
     740, 31195,  1178, 26597, 31769, -3266, -3266,   907, -3266,    52,
   -3266,  1068,  1068,  2716, -3266,  2953, -3266, -3266, -3266,  2544,
     223, -3266, -3266, -3266,  2699, -3266, -3266,   875,  3065,  3066,
   -3266,  2946,   118,  2946,   875,   875, 24864,  -108,  2210, -3266,
    2300,  3001, -3266, -3266, -3266, 35213, 32343, -3266, -3266, -3266,
   -3266,  3202, -3266,  3207,   819, -3266, -3266,  1956,  1506, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266,  2106,  1956,  1956,   469, -3266,   124,
   -3266, -3266, -3266, -3266, -3266, 25442,    99, -3266,   128,   229,
   25442, -3266,   823,   823, -3266, 25442,    99,   907,  2300, 25442,
    2300, 39805,    99,   -99,   -99,  2238,   740,  2300, -3266, -3266,
    3073, 41527,  3074, 25442, 25442, -3266, 35787, -3266,   740,  1510,
    2300,   907,   907, 25442,    99, 24864,  1344,  1903,   -99,    99,
   -3266, -3266, -3266, -3266, 23708,    99,    99,  2258, -3266, -3266,
   -3266,  2300, 35787,  2719, -3266,  6121, -3266, -3266, -3266, 19078,
   41527,   333,   193, -3266,  2710,  1234,   312,  2794,  1565,  2727,
   -3266,  2728, -3266,  2729, -3266,  1844, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,   -99,  2190,
    1956,  1956,  1949, -3266,  2976,  3135,   740, -3266,  2113, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,  2822, -3266,
    2903,  2738, -3266, -3266,   290, -3266, -3266,  1105, 23708, 18500,
   -3266,  2968, -3266,  2868, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266,  2734,  -108,  2991,  1574,  2544,  2748,   199,
   13145,  1255,  2855,  2751, -3266,  1844, 12550,  1844,  1262, -3266,
    2752,  2752, -3266, -3266,  2753,  2752,  3123, -3266,  3125,  2758,
   -3266,  2759, -3266,  1260,  2760,  2761,  2855, -3266,  2855, 12550,
   12550,  1305,  1316,   -40,   811,   828,   388, -3266,  1322,  2982,
    2855, -3266,  2855, -3266,  1324, 36361,  1479,    93, -3266,  3161,
    3168,  1351,  1358,  1375,   837,  1403,  1747, -3266, -3266, 13145,
    1429,   898,   408,  2855, -3266,  1431,   846,   880,  1456, 12550,
    1465, 12550,  1477, 12550,  1484,  1495, -3266, -3266,  1515, -3266,
   -3266, -3266, -3266, -3266, -3266,  2762,  1844,  2766, -3266, -3266,
   12550, -3266,   903, -3266, -3266, 16120,   410,  2767, -3266,  3029,
    3030,  2855, -3266,  2774,  1498, -3266, -3266, -3266, -3266, -3266,
   -3266, 41527,  2782, 29473, 32917, 32917, 32917,  2776, 12550, -3266,
   -3266,  3035, -3266, -3266, 23708,  3171, -3266, -3266, 16120,  3131,
    3016, -3266, -3266,  2789,  2795, -3266, -3266, 32917, -3266,  2598,
   24864, -3266,  2798, -3266,  2798,  1319,  2800,  1785, -3266, -3266,
   -3266,  2783,  2147,  3210, 32917, 32917, 32917, -3266,  2544,  2544,
    1048,  2843,  3159, -3266, -3266, -3266, -3266, 40379, -3266, -3266,
   -3266, -3266,  1397, 41527,  3146, 41527,  8385, -3266, -3266,  3327,
   12550, 32917,  1073,  1250,   740, -3266, -3266, -3266, -3266, -3266,
   -3266,  2452, -3266, -3266, -3266, -3266,  3126, -3266, -3266,    36,
    1601,  -155, -3266,    97, -3266, -3266, -3266,  3164,   875,  2946,
    2946,  3166,  3058,   813,  2807, -3266,   740, -3266, -3266, -3266,
    2598, -3266, -3266, 12550, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266,  1124, -3266, -3266, -3266, -3266, 12550,  3165,  3167,   823,
   -3266, 25442, -3266, -3266, -3266, -3266, 25442, 25442,   125, 39805,
   -3266, -3266, -3266, -3266, -3266, -3266,  2811, -3266, -3266,  2190,
   -3266, -3266, 32343,   -99, -3266, 25442,  2811, -3266, -3266,   355,
   -3266,   -99, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   39805,  2812, -3266,  1489, -3266, -3266, -3266, -3266, 39805, -3266,
   -3266, 39805, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, 23708,  2638,  1345, -3266,  1787, -3266, -3266, -3266, -3266,
   41527, -3266, -3266, 23708, -3266, -3266,  4396, 41527,  3032, -3266,
   12550, 12550,  3067, 41527,  3071, -3266,  3342, 41527,  3399, -3266,
   39231, -3266, -3266, -3266, -3266, -3266,  2834, 41527,  1956,  1963,
   -3266, -3266,  1105, -3266, -3266, -3266, -3266,  3078,  3079, 41527,
   -3266, -3266, -3266, -3266,  2963, -3266, 23708,  3380, -3266,  2987,
    1795,   277,  4747, -3266,  2838,  2841,  2851, 28325,  2544,  3183,
   -3266, -3266, -3266,  2806, -3266, -3266,  3072,  1844, 12550,   867,
   -3266, -3266,   188,   938, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266,  2806,  2806, -3266,
   -3266,  3385,  2993, 12550, 12550, -3266, 12550, -3266,   839,  2857,
    2866, -3266, -3266, -3266, -3266, -3266, -3266,  2855, -3266,  2860,
    2861, -3266, -3266, -3266, 12550, -3266, -3266,  2806, -3266, 12550,
   -3266, -3266, 12550, -3266, -3266, 12550, 12550, -3266,  1520, -3266,
    1580, -3266,  1606, -3266, -3266, -3266, -3266,  2858, 41527, -3266,
   -3266,  1797, -3266, -3266, 12550, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266,  -112,  -112,  -112, 15525,  1844,  3305, -3266,
     700, -3266,  3199, -3266, -3266,  2969,  1225, -3266,  1801, -3266,
   -3266, 41527, -3266,  2074,  2862, -3266,   740, 15525,  2670,  2987,
   -3266, -3266,  1319, 24864, 28899, -3266, 32917,  2266,  2266,  2266,
    2452,  3253,  2722,  2722, -3266, 27174, -3266, -3266,  2994, -3266,
   -3266, 30047, -3266,  1641, -3266, -3266, 16120,  1695, -3266,  1844,
   -3266, 35213, -3266,  1844,   740,  2875,  2876, -3266, -3266, 40953,
   12550, -3266,  3297, -3266, -3266,  2872,  -108, -3266,   875, -3266,
    3214,  3215,   875, -3266, -3266, -3266, 24864,  2544, 15525, -3266,
     337,  2074,  1844,  2877,  1489, -3266,   -80,  1844, 25442, -3266,
   -3266, -3266,  2880, -3266, -3266,  3340,  3341, -3266, 25442,  1855,
   41527, -3266,  3327, -3266, -3266, -3266, -3266,  4396, -3266, 24864,
   -3266, -3266, -3266, -3266, 41527, -3266,  2881, -3266, 19078, -3266,
   -3266, -3266,  2752,  2752,  2752, -3266, -3266, -3266, -3266, -3266,
    2753,  3080, -3266,  2753,  2753, -3266, -3266, -3266, -3266, -3266,
     188,  1995, -3266, -3266,   188, -3266, -3266, -3266,   126,  1427,
    2753, -3266, -3266, -3266, -3266, -3266, -3266, -3266,  2752,  2752,
   -3266, -3266, -3266,   188,  2752, -3266,  2752,  2819, -3266,   200,
     114,  2752,  2752,  2752,  2883,  2878, -3266,  1844,  2806,  3383,
   -3266, -3266,  3008,   -99,  3329, -3266,  1808, -3266, -3266,  2106,
   -3266, -3266, -3266,  3011,   246, -3266,  3044,  2889,  2890, -3266,
   -3266,   -99,  2892,  2893,  5307, -3266, -3266, -3266,  3464, -3266,
   41527, 41527, 41527,  2599, -3266,  1068, -3266,  1217,  3440,    26,
    1844,  2895,  2896,  2897,  2898,  3459,   222, -3266,  3459, 34639,
   -3266,  1815,  2901,  2902, -3266,   169,  2904,  1613,   911,  1835,
    3191,  3261, -3266,  3110, -3266, -3266,  3151,  3152,  1622,  1280,
    1632,  1642,  1772,  1781, -3266, -3266, -3266, -3266, -3266, -3266,
    1866,  1056,  2931,  2931,  2931,  1695,  1844,  1880, -3266, -3266,
    3282, -3266,  2913,  2924,  2926, 41527, -3266,  3016, -3266,  2338,
   24864, 15525,  2927,  2923, -3266,  1311, -3266, -3266,  2919,  2266,
   -3266,  3474,  3328, -3266, -3266, 35787,  2929, -3266, -3266,  3219,
   -3266,   156,  3130, -3266, -3266, -3266,  1073,  3017,  3018,   740,
    1844,   -99,  2287,  2545,  1069,  2975,   875,   875,  2935,  2978,
   12550, 12550,  2940, -3266,  2991, -3266, -3266,   751,  2338, 12550,
   -3266,  2190,  3016, -3266,  2941,  2945, 41527,  2947,  2950, -3266,
    3663,   333, -3266, -3266, -3266,  2819,    99, -3266, -3266,  2811,
      76, -3266, -3266,   666, -3266, -3266, -3266,  1395, -3266,  2954,
    1395,  1395, -3266,  2243, -3266,  2971,   188, -3266, -3266,  2984,
   -3266, -3266, -3266,  1395,  2956,   188, -3266, -3266, -3266,  1395,
   -3266, 35787,   -99,  3245, -3266,  2998, -3266,  3424,  3314, -3266,
    2819, -3266,  3315,  3217, -3266,   188, -3266, -3266,  3459, -3266,
     188,  3459,  1395,  3224, -3266,  1395, 41527, -3266, -3266, -3266,
   -3266, -3266, -3266, 41527, -3266,   980,  1884,   -99, -3266, -3266,
   -3266,  2980,  2981, -3266, -3266, -3266,   312, -3266, 41527,  4396,
   -3266, -3266, -3266,  2968, -3266,  1010,  1890,  1489,  2988,  1895,
    1914, -3266, -3266, 12550,  3515, -3266, -3266,  2990, -3266,  7790,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, 34639, -3266, -3266,
    3459,  3240, -3266, -3266, 12550, -3266, -3266, -3266, 12550, -3266,
   -3266,  3272,  3426,  3535,  3538, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266,  3077,  3081, -3266, -3266,  3082, -3266, -3266,   107,
    2427, -3266, -3266, -3266, -3266, 15525,  3352,  3084, -3266, -3266,
   -3266, 41527,  3036, -3266, -3266,  1377, -3266, -3266, -3266, -3266,
   -3266, -3266,  2991,  2238, -3266, 27174, -3266, -3266, -3266, -3266,
   -3266,  2996,  3003,  8385,  3580, -3266, -3266,  3045, -3266, -3266,
   -3266,  3047,  1844,  1844, 41527,  3183, -3266, -3266,   823,   823,
   -3266,   751,  1377,  1489, -3266,  1920, 41527, 41527,  1945, 41527,
   41527,   943,   943,   943,  1494,  1494, -3266, -3266, -3266, -3266,
   -3266,  3379, -3266,   757,   256, 41527, -3266, -3266,  1052, -3266,
   -3266, -3266, -3266, -3266,  1395, -3266,   169, -3266, -3266, -3266,
   -3266, -3266,   169, -3266, -3266, -3266, -3266,  1627, -3266, -3266,
    3273,  3052, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266,  3021, -3266, -3266,  3138, -3266, 47267, -3266, -3266,  -122,
    3039, -3266, -3266, -3266,  1533, 41527, 23708,  3067,  3187, -3266,
   -3266,  1311,   277,  2987, -3266,   847, 41527, -3266,  3285,    -5,
    3391,  1498, 12550, -3266,  8980,  3193, 13145,   148,  1326, -3266,
   -3266, -3266,  3040,  3034,  1489,  1783, -3266, -3266, 12550, 12550,
   -3266, -3266, -3266, -3266,   289,  3289,  2300,  2300,  2300,  2300,
    2427, -3266, -3266,  3090, 23708, 16120,  3148,  1975, -3266, -3266,
    1637,  2685, -3266,   197, -3266, 12550, 12550,  2452, 32343, -3266,
   -3266, -3266, -3266, -3266,  3368, 12550,  3060, 12550,  3061,  1982,
   -3266, -3266,  3466,  3466, -3266, -3266, -3266, -3266,  1998,  2012,
     847,  2051,  2055, -3266, -3266,   333,  3064, -3266, -3266, -3266,
     929,   929,  2093, -3266, -3266, -3266,  2102, -3266,  2110, -3266,
    1627, -3266, 12550,  3508,  3098, 41527,   181, -3266, 48415, 48415,
   41527, -3266, -3266, -3266, -3266,  5377, -3266, -3266,   562, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
    3626, -3266,  3075, -3266, -3266,  3086,   269, -3266, -3266, -3266,
    4396,  3493,  1565, -3266, -3266, -3266, -3266,  3089,  2147,   740,
   -3266,   847, -3266, -3266, -3266,  1489,  3093,  3316, -3266,    -5,
   -3266, -3266, -3266,  3391, -3266, -3266,   -61,  1489,  3658, -3266,
    2806, -3266, -3266, -3266, -3266, -3266, 12550, -3266, -3266,  2120,
    2133, -3266, -3266, -3266, -3266, -3266, -3266, -3266, 24864, -3266,
   -3266,  2190, -3266, -3266, 41527,  3095,  3172,   740,  3561,  3562,
     740,   740,   740,   740,  3096,  2685, -3266,  3544, -3266,   793,
    1489,  1844,  3307, -3266,  3625,  3549,  1844, 41527,  1844, 41527,
   -3266, 41527,  1008, -3266, -3266,  3294,   847, -3266,    -5,  3391,
   -3266,  3016, -3266,  3694, -3266,   874, -3266, -3266,  1052, 41527,
     188,   169,   188, -3266,  1844, 12550, -3266, 12550,  3142, -3266,
   -3266,  3526, 41527, -3266, -3266, -3266, -3266, 12550, -3266, 47267,
   47267, -3266, -3266, -3266, -3266,  3676,  1311,  3652,  3367,  3654,
    2933, -3266, -3266,  3342,  4396, -3266, -3266,  2300, -3266, -3266,
   -3266,  1379, -3266, -3266, 12550, -3266, -3266,  3381,  8980,   274,
    1489,  2855,  2855,  3124, -3266,   740,  2238,  3144, -3266,  3148,
   -3266, 16120,   672,   -99,   740,   740,  1597,  1597,  2190, 35787,
    3246, -3266, -3266,   740,   435, 12550, -3266, -3266, 41527, -3266,
     810,  3467,   907,  2135,  2140, -3266,  3691, -3266,  3695,  3154,
    3155, -3266, -3266, -3266, -3266,  2145, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266,  1844,  1844, -3266,   151, -3266, -3266,
    3521,  3607, 12550,  1844, 44397,  3158, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, 47841,
   12550, -3266,   562,  3626, -3266,  3402, -3266,  3405, -3266, -3266,
   -3266,  3635, 47267, -3266,  3632, -3266,  1311, -3266, -3266,  1489,
    1500, -3266, -3266, -3266, -3266, -3266, -3266, 24864, 15525, -3266,
   -3266, -3266,  2150, -3266, -3266,  2969, -3266, 17905, -3266, -3266,
   -3266, -3266,   -99,   -99, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266,  2153, -3266, 35787, -3266, -3266,  1489, -3266,
    3717,  3718,  3629,  3719,   810, -3266,  1162, -3266,  3753, -3266,
   -3266, -3266, -3266, 39231, 39231, -3266,  3208, 12550, 47267, -3266,
    3634, -3266,  3572,  1467,  3518,  3185, -3266,  3184,  1826,  3671,
   48415, 48415, -3266, -3266, -3266, -3266,  3653, -3266, -3266, -3266,
    3381, -3266, -3266, -3266, -3266,  3625, -3266, 16120,  3195,  3197,
   -3266, -3266, 35787, -3266,  3246, -3266, -3266,  3200,   169,   169,
    3744,   169, -3266,  3746,  3747,  1162, -3266,  3522,  3204,  2155,
   -3266,   225, -3266,  1844, 44971,  3745, 41527, -3266, -3266, -3266,
   -3266, 12550, -3266, 36935, 45545,  3203, -3266, -3266, -3266,  3366,
   -3266,  2933, -3266,  3467, -3266, -3266, -3266,  2685, -3266, -3266,
    3209, -3266, -3266,   169, -3266,   169,   169, -3266,  3656, -3266,
   -3266, 12550, -3266,  3664,  3296, -3266,  3212, -3266, 47267,  1005,
   47267, -3266, -3266,  3617,  3218,  1492, -3266,  3213, -3266, -3266,
   47267,  3605, -3266, 12550,  3221,  3222, -3266, -3266, -3266, -3266,
    2300,  1844,  3762, 47267, 41527, 42675,  3403, 46119,  3642, 41527,
    4396,  3644,  3646, -3266, 47267, -3266,  3486,  3232,  1844, -3266,
   -3266, -3266,  3317, -3266, 43249, -3266,  2311, -3266,  3255, -3266,
   -3266,  3713,  2158, -3266, -3266,  3578, 20234,  3384, -3266, -3266,
   47267, 47267, -3266, -3266, -3266, 30621, 12550, -3266,  3277, -3266,
   -3266, -3266,   665, -3266, -3266, 35787,  2165, -3266, -3266, 24864,
   -3266, 43823, 46693, -3266, -3266, -3266, 27751, -3266, -3266, -3266,
    3660, -3266,  1844, -3266,  1589, -3266, -3266, -3266, 23128,  3124,
   30621, -3266, -3266, -3266, -3266, -3266
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3266, -3266, -3266, -3266, -3266,   182, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266,  1731, -3266, -3266, -3266, -3266, -3266,
    1918, -1683, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
     730,  1566,  3244, -3266,   502, -3266,   168, -3266, -3266, -3266,
   -2652,    42,  -148, -3266, -3266,   353,    20,  2930,  -146, -2832,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,   512,
     515, -3266, -3266,   330, -3266, -3266, -1519, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266,  -330,  -276, -3266, -3266, -3266,
   -3266,  -151,   341, -3266,   342, -3266,   343, -3266,   344, -3266,
     346,   347,   348,   350, -3266,   351, -3266, -3266,  -273, -3266,
   -3266, -3266, -3266,   354, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266,  -160, -3266, -3266,    -4, -3266, -3266,  -159,   359, -3266,
    -115,   361, -3266,   363, -3266,   -29, -3266,   -22, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
    2922, -3266, -3266, -3266, -2057, -3266, -3266, -1986,  2524, -3266,
   -1593, -3266, -3266, -1755, -3266, -3266, -1557,   951, -3266, -3266,
    1165,  -291, -3266, -1221, -1762, -1737, -3266, -3266, -3266, -1849,
   -1807,  -714,  2260, -1093, -2037, -3266, -3266, -3266,   356, -3266,
   -3266, -2334,  2523, -3266, -3266, -3266,  1570, -3266, -3266, -3266,
   -3266,  1331, -3266, -3266,   970, -1511, -3266, -3266, -3266, -3266,
   -3266, -3266,   170,   320,    68, -3266, -3096,   711, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266,  -107,   -36, -3266, -3266,  -111,
   -3266, -3266,  -147, -3266,   167, -2135, -3266, -3266, -3266, -3266,
    2500, -1193, -3266,  3442, -3266,  -496,   792,  2039, -2147, -1299,
    -858,  -857, -2265, -3266, -3266, -3266,   459,  1134,  1504,   889,
    2040, -1767,  1577,  1643, -3266, -3266,   914, -3266, -2969, -3266,
   -3266, -3266,   872, -3266,   876, -3266, -3266, -3266, -1197,   841,
    -642, -3266,   442, -2138, -2264, -3266,   673, -3266,   629, -3266,
    -524, -1922, -2193,   105, -3266, -3266,   639,   920,   972, -3266,
   -2909, -1204, -3266, -3266,   185, -3266, -3266, -3266,   166, -3266,
     458,   316, -3266, -3266,  -923, -1866, -3266, -3266,  3939,  3940,
    -967, -2396, -2762,   187,   184, -3266, -3266, -3266,  2518, -1810,
     263,   253,   260,  2010, -1226,   417, -2074, -3266,   463, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266,  2080,  -529, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -2187,   948, -3266, -3266,  1624, -3266,
   -3266, -3266, -1668,   378, -1581, -2776, -3266, -3266, -3266, -3266,
   -3266, -3266,  1605, -3266, -3266,  2204,  2640, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266,   702,  1803, -3266,
   -3266, -3266, -3266, -3266, -3266,   956,  2557, -3266, -3266, -3266,
      12, -3266, -3266, -3266, -3266,  2290, -3266, -3266,  3038, -3266,
   -3266, -3266, -3266,  1420,  1848, -3266, -3266, -3266,  -912,  1802,
    -534, -1544, -3266,  3434, -3266, -3266, -3266, -1560, -1535, -3266,
    3141,   396, -1368,  2289,  -595, -2000, -3266,  1505,  -625,  3263,
   -3266, -1072, -1044, -3266, -3266,  -592, -3266, -3266, -3266,  -598,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266,  1508, -1772, -3266,
   -3266, -1013,   -19, -3266,   286, -3266, -2645, -3265, -3266, -3266,
   -3266, -3266, -3266,  2869,  -994, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266,  1729, -3266,  2009, -3266,  -440,
   -3266,  2957, -3266, -3266, -3266, -2089, -1790,  1760,  1027, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -2168, -3266,
   -3266, -3266, -3266, -3266, -3266, -1527, -3266, -1817,   403, -3266,
     556, -3266, -3266, -3266, -3266, -3266, -3266, -3266,    39,  1238,
      43, -2096, -1028,  2934,  1675, -3266, -3266, -1195,  2997, -1877,
   -3266, -3266, -3266,  1936, -3266, -3266, -3266, -3266, -3266, -3266,
    1000, -2366,  2689, -3266, -3266, -2913,  -837, -2084,  -819, -3266,
   -2106,   575, -1786, -1659, -2164,   189, -1079, -3266, -3266, -3266,
   -3266, -3266,  -104, -3266, -3266, -3266,   597,  1850, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266,  -383,  -423, -3266,  2076,
    2353, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
    2825,  2793,  1900, -3266, -3266, -2103, -3266, -3266,  1863, -3266,
     842, -2146, -1663,  1103, -3266, -3266,  1106, -2920, -3266, -3266,
   -3266, -3266, -3266, -3266,  1049,  -125,   113,  3509, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266,  2601,  -980,  3435, -3266, -3266,
   -3266, -3266, -3266,  2299, -3266, -3266, -3266, -3266, -3266,  2775,
    3524,  -525, -1173, -3266,  -648, -3266, -3266,  -657, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266,  2405, -3266,  1307,
   -3266, -3266, -3266,  2814, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,  1136,
      45, -3266,    88,    -2, -3266,    28, -3266, -3266, -3266,  -124,
   -3266,  -621,  -900, -1244,   764, -1525,  -703,  1123,  2810, -2603,
    -515, -1089, -1095, -1724,    86, -3266, -3266,  2587,     9,  -736,
    -177,    -7, -2552,  -100,  -527, -3266, -2032, -3266, -3266, -3266,
   -3266,  2361, -3266, -3266, -3266, -3266,  1446, -3266, -3266, -3266,
    1091, -3266,   848,   630, -3266, -3266,  2488, -3266,  2401, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266, -3266,  2829,  3558,  3254, -3266,  2879, -3266, -3266,
   -3266, -3266, -3266,   505, -3266,   623, -3266,  -141,  2651,    87,
   -3266,  1531,  -119,  -365, -3266,   503, -3266, -3266,   299,  3564,
    3256, -3266, -3266, -3266, -3266, -3266, -2548,  -822, -3266, -2591,
   -3266, -3266, -3266, -3266,  2019,  -969,  2979,  1569, -3266, -3266,
   -3266,    62,  3621,  3623, -3266, -3266,   494, -3266,   471, -3266,
   -3266, -3266, -3266, -3266, -3266, -3266,  3490, -3266, -3266, -3266,
   -3266,  3492, -3266, -3266, -3266, -3266, -3266,  3495, -3266, -3266,
   -3266, -3266, -3266,  1724, -3266, -3266, -3266, -3266, -3266, -3266,
   -3266, -3266
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2379
static const yytype_int16 yytable[] =
{
     452,   966,  1154,   887,   883,  1349,  1572,   980,   988,  1254,
    1025,  1027,  1571,   492,   136,   913,   498,  1517,  1351,  1033,
    2153,   570,  1009,  2485,  1451,   511,  1674,   450,  1545,  1386,
    2270,  1441,  1442,   493,  2067,   522,   926,  1741,   737,  1283,
    1165,  2586,   509,  2630,  2945,  1314,   539,  1064,   516,  2559,
    2985,  2720,  1591,  2668,  2616,  2620,  2622,  2461,  3265,  1599,
    3004,  2105,  2464,  1283,  1356,  1357,  2652,  1482,  2287,  2819,
    1085,  2282,  1636,  1880,  1541,  1542,  1087,  2750,  3245,  1091,
    2435,  2223,  1098,  1099,  1100,  2809,   559,  2811,  1601,  1602,
    2404,  3250,  1605,  1606,  1607,  1608,  2283,  1610,  1611,  1613,
    1615,  1616,  1617,  1618,  1619,  2634,  2635,  2605,   562,   496,
     452,   996,   897,   452,   569,   575,  2366,  1106,  1107,  1108,
    3100,  2376,  1748,  3573,  2716,  2245,  2246,  2382,  2383,  1150,
     559,  2386,  2405,  2700,  1149,  1116,  1117,   564,  2643,  1757,
     566,  1206,  2257,  1809,  1051,  2190,  2653,  3317,  1822,  1760,
    1761,  3282,  3287,   591,  1639,  3288,  3465,  2727,  2728,  2275,
    2276,  1787,  1116,  1117,  2353,  1116,  1117,  2146,  2295,  1116,
    1117,  2437,  2299,  2393,  3297,  2297,  2298,  2401,  2300,   558,
    3316,  2303,  2304,  2314,  3289,  2307,  2228,  2832,  2686,   579,
    2316,  2837,  1684,  2323,  2319,  2320,  2321,  2322,   947,  1277,
    2632,  2326,  2402,  2328,   902,  1930,   957,   958,  3145,  2337,
    1116,  1117,  2341,  2342,  2343,  2467,  2694,  1206,  1094,  1201,
    3145,  3146,  2682,   585,   976,  1353,  1315,  3437,  3689,  1168,
     849,   850,  2278,  3146,  2166,  3147,  1316,  1288,  2678,  2679,
    2481,  1296,  3375,  1353,  2483,   849,   850,  3147,  1258, -2283,
    2259,  2331,  2239,  2686,  -776,  3015,  1964,   849,   850,   949,
    2388,  2389,  2390,  2391,  1198, -1400,   114,  2497,  2498,  1207,
     790,  1811,  -482,  2504,  1974,  1151,  2813,  1116,  1117,   849,
     850,  3427,  1265,  3251,   808,   505,  1235,  3988,  1656,  2686,
    2516,  2517,  1353,  3714,  1116,  1117, -1818,  1154,  3012,  1360,
    2539,  2687,  1116,  1117,   969,  3181,  1116,  1117,   612,  2851,
    2229,  1206,  1116,  1117,  2417,  1801,  2836,  2211,   548,  3711,
    3807,  -483,  2542, -1693,  1116,  1117,   820,  1454,  2230,  3808,
    3365,  2042,  1769,  1936,  2770,  1454,  1805,  1695,  1454,  2231,
     521,  2760,  2638,  1116,  1117,  1207,  1894,  1116,  1117,  2648,
    3402,  1154,   128,  2783,  2784,  1154,   135,  1281,  3790,  2085,
    2649,  3988,  2166,   596,   903,   613,  2338,  1116,  1117,   116,
    3366,  2601,  2058,  3630,  1170,  3364, -1400,  3499,  1095,  2332,
    3540,  1431,  1432,  1433,  1410,  1252,  3503,  1434,  1979,   961,
    1378,   131,  1434,   520,   132,  1241,   506,  2599,  1506,   793,
    1284,  1507,  -563,  1116,  1117,  1639,  3516,  2794,  1681,   135,
    1823,  3518,  2790,  2232,  1949,  1435,  2651,  3365,   529,  -398,
    1436,   137,   530,  1116,  1117,  1116,  1117,  2697,  1980,  1153,
     129,  1116,  1117,   582,  1780,   821, -2217, -2338,  1950,  1207,
     514,  1455,  1246, -2218,  3547,  3711,  1230,  1285,  1632,  1470,
    1682,  1802,  1524,  2602,  2661,  1895,   569,  3366,   575,  1783,
    1162,  3338,  1116,  1117,  1379,  2771,  2167,   962,  1118,   549,
    3339,  1119,  1116,  1117, -1693,   750,  1116,  1117,  2980,   575,
    2989,  1430,  2940,  1770,  3125,  3478,  2201,  1771,   788,   587,
    1657,   614,   569,  1822,   798,  3582,  1356,  1357,  1118,  2761,
     559,  1119,  1118,   822,  3791,  1119,   812,  2795,  2688, -1358,
    2998,  3252,  2701,  2540,  2703,  1116,  1117,  2282,  3403,  3022,
    1480,  2714,  3809,  3712,  2233,  3966,  1640,  1785,   559,   899,
    2355,   809,  3824,  1051,  2726,  1596,  2339,  1604,  2202,  1636,
    2735, -2217,  2283,  1118, -1358,  2650,  1119,   916, -2218,  2404,
    3616,  2598,   792,  1153,  1625,  2749,   569, -1400,   930,  1152,
    2821,  1116,  1117,  1377,  3933,  2087,  3697,  1356,  1357,   559,
     452,  2698,  2212,  3016,   559,  2702,  2090,  1465,  1466,  2093,
     955,  1880,   559,   559,  2234,  2219,  1809,   967,   930,  2718,
    2719,  2405,   569,   802,  2167,  2763,   977,   941,  1505,  2729,
    3340,   791,   997,   998,   999,  1266,   600,  1519,  1004,  -563,
    1118,  1658,  2281,  1119,  3429,  3255,  1411,  3011,  2633,  1532,
    1533,  1534,  3013,  3014,  3005,  2353,  2168,  1118,   950,  1742,
    1119,  1544,  1745,  2606,  2084,  1118,  2401,  2785,  1119,  1118,
    1750,  3024,  1119,  2713,  2818,  1118,  3463,  2572,  1119,  3712,
    1810,  3717,  1052,  1164,  1289,  2721,   829,  1118,  1297,  1199,
    1119,  2402,   940,  1116,  1117,  3129,   994,  1762,  1763,  2689,
    2825,  1759,  1116,  1117,  3123,  3875,  1118,   904, -2283,  1119,
    1118,  1805,  1685,  1119,  2680,  3290,  1202, -1400,  3438,   507,
     942,  1096,  3126,  2987,  2845,  2353,  2846,  1379,  1120,  2642,
    1118,  2676,  1984,  1119, -2283,  2829,  1975,  1930,  2861,  -776,
    2862,  3811,  1935,  1113,  1811,  1115,  2070,  2681,  2400,  3886,
   -1400,  2950,  2951,  1116,  1117,  1120,  3148,  -482,  1120,  1787,
    2782,  2883,  1120,  2788,  1116,  1117,  1118,   978,  3148,  1119,
    1158,   452,  1160,  1985,   930,   452,   569,  2043,   452,   569,
     559,  3111,  2333,  1379,  2168,  1823,  1118,  1280,  1118,  1119,
    3376,  1119,  3314,  1746,  1118,  1116,  1117,  1119,  1159,  2908,
    -563,  2203,  1163,  1120,  1724,  1167,  -483,  1640, -2378,  3406,
    3276,  3564,  3819,  1116,  1117,  1211,  1319,  2059,  1642,  1241,
    3201,  2829, -1400,  4040,  3827,  1118,   559,  1379,  1119,  1633,
    1116,  1117,  3631,  3112,  2586,  1118,   569,   559,  1119,  1118,
    1508,   559,  1119,  1509,  3295,  3296,  1232,  1241,   559,  1379,
    3235,   599,  3299,  3010,  3239,  3799,  1116,  1117,  3226,  3322,
    1116,  1117,  2990,  2991,  1789,  1936,  2796,  3857,  -190,  3206,
    1120,  1676,   756,  1116,  1117,  3925,  2407,  3269,  1118,  3770,
     569,  1119,  1116,  1117,  1580,  1581,  1691,  1120,  3767,  2004,
    1769,  1116,  1117, -2217,  3967,  1120,  3210,   813, -1400,  1120,
   -2218,  3881,  1965,  3883,  -398,  1120,   455,  1697,  3455,  1580,
    2003,  3160,   502,  2047,  2048,  3683,  2100,  1120, -1358,  1221,
    1983, -2217,  2356,   669,  1118,  1116,  1117,  1119, -2218,  3234,
    1238,  2064,  2065,  3238,  3274,  3275,  1120,  3125,  2139,  3708,
    1120,  1352,  2836,  1116,  1117,  2836,  2836,  3934,  2216,  2282,
    2529,  2530,  1339,  3456,  3192,  1990,  1116,  1117,  2313,  2424,
    1120,   458,  2836,  2671,  3254,  3627,  1283,  1633,  1945,   559,
    2404,  3134,  1382,   559,  2283,  1991,  3298,  2244,  3483,  3970,
    3685,  3315,  3318,  3320,  3321,   880,  1898,  2984,  3457,  3971,
     501,  1310,  3946,   606,  2479,  1283,  1120,  1741,  1741,  1151,
    1116,  1117,  1133,   959,  1116,  1117,  3800,  3141,  3919,  3772,
    2855,  2856,  2405,  2439,  2228,  2287,  1120,  3877,  1120,   559,
    1116,  1117,  3750,  1447,  1120, -1694,  1118,  1116,  1117,  1119,
    2881,  2882,  2903,  2904,  3872,  1118,  3484,  2009,  1119,  2001,
    2528,  1770,  1116,  1117,  1586,  1771,  4010,  2369,  4014,  3542,
    1116,  1117,  1116,  1117,  2092,  1120,   531,  2401,  1052,  3361,
    1986,  2488,  2077,  1384,  1634,  1120,   585,  1809,  2140,  1120,
    2002,  1052,  2672,  2658,  2933,  2068,  1880,  2639,  3141,  1966,
    3021,  1624,  2402,  1324,  2005,  4026,  1118,  1385,  2281,  1119,
    2533,  2534,  1116,  1117,  1356,  1357,  3597,  1118,  3448,  3449,
    1119,   513,  2879,   982,   990,  2370,  2425,   526,  1120,  1698,
    3689,  1572,  1438,  3443,   696,  2314,  1445,  2590,  1320,   533,
     532,  2214,  1978,  1810,  1573,  3165,  3794,  3795,  1118,   995,
    2218,  1119,  1321,  2221,  2222,    43,  1413,   569,  2229,  1258,
    1031,  2104,  2527,  3830,  1340,  3126,  1118,  3402,  3628,  1119,
    3244,  1109,  2537,   534,  1120,  3001,  2230, -1671,  3142,  2232,
    1683,  1325,  3801,  1118,  1116,  1117,  1119,  2231,  3025,  2017,
    3816,  1572,  1116,  1117,   569,  4116, -1694,  2656,  1822,  1629,
    1270,  4141,  1136,  2994,   559,  3161,  1620,  3972,  2228,  1118,
    2162,  2163,  1119,  1118,   559,  1811,  1119,  1032,  2371,  1116,
    1117,  1930,  1634,  1116,  1117,  1212,  1118,  2400,   536,  1119,
    2952,  1116,  1117,  3932,  1977,  1118,  1116,  1117,  1119,  2101,
    1116,  1117,  2204,   503,  1118,  1805,  3866,  1119,   551,  3142,
    1658,  1661,  3143,  1664,  2078,   559,  1271,  3878,  1414,  1116,
    1117,  2232,  1415,  3629,  1935,  3914,  2800,   559,  1322,  2141,
    3544,  3929,  1668,   569,  1416,  2406,  1120,  3380,  1118,  3919,
    1572,  1119,   559,   559,  1272,  1120,  2733,  1116,  1117,  3867,
    1323,  2030,  2372,  1700,  2822,  1311,  1118,  1631,   960,  1119,
    2034,  1709,  3968,  1152,  1116,  1117,    55,  3485,  3773,  1118,
     669,  1791,  1119,  3947,   452,   452,   452,   559,   452,   559,
    1116,  1117,  1481,  3151,  1721,  1116,  1117,  1116,  1117,  1333,
    1743,   452,  2229,   569,  1653,  3403,  1120,  1654,   919,   452,
    1655,  1725,  1726,  1727,  2353,  1729,  1731,  1120,   933,  1936,
    2230,  2035,  3458,  1118,   669,  2407,  1119,  1118,  1744,   559,
    1119,  2231,  2036,  1633,  2353,  1769,  1749,  3973,  2426,   552,
    1116,  1117,  2233,  1118,  2100,   816,  1119,  2801,  1120,  1736,
    1118,  1116,  1117,  1119,  3483,  4009,  1805,  1116,  1117,  1116,
    1117,  1116,  1117,  2037,  1417,  1118,  1120,   934,  1119,  1621,
    1732,  3774,  2621,  1118,   569,  1118,  1119,  3868,  1119,  2539,
    1728,  2041,  1730,  1120,  3854,  2995,  1116,  1117,   559,  2695,
    2695,  1622,   559,  1116,  1117,  1949,  1821,  3775,  2060,  1116,
    1117,  3404,  2234,   794,  2408,  2232,  3855,  1897,   554,  1120,
    1116,  1117,  3484,  1120,  1711,  1118,  2079,  3144,  1119,  1950,
    1792,  2953,  1758,  1737,  2853,  3753,  1120,  1982,  3687,  3446,
    1823,  1793,  2975,  2080,  2284,  1120,  1376,  3193,  1116,  1117,
    3528,  2854,   935,   569,  1120,   452,   452,   677,  1947,   452,
    2874,  1145,  1146,  1147,  1148,  2071,  1273,  2373,  2976,  2885,
    1418,  1004,  2187,  1963,  1116,  1117,  1116,  1117,  4057,  4057,
    2172,   696,  1943,  1944,  2264,  3560,  2820,  2734,  1120,  3194,
    2281,  1896,  1712,  2902,   795,  1437,  1770,  1118,  3144,   880,
    1119,  1116,  1117,  2886,   817,  1118,  1120,  1031,  1119,   560,
    1116,  1117,  1116,  1117,  1865,  1572,  2188,  2532,  1454,  1120,
    2880,  2936,  1116,  1117,  3673,   696,  2233,  3711,   920,  1116,
    1117,  2802,  1118,  2072,  3388,  1119,  1118,  2443,  3030,  1119,
    1116,  1117,  2265,  3752,  1118,  1052,  2010,  1119,  2310,  1118,
    1733,  1031,  1119,  1118,  2925,   921,  1119,  2409,  1623,  1868,
    1116,  1117,   796,  1120,  3405,  1116,  1117,  1120,  1327,  2266,
    1133,  2509,  1118,  2106,  1810,  1119,  3406,  1989,  1634,  2568,
    1713,  1992,   977,  1120,  2187,  1384,  2234,  1274, -2341,  2473,
    1120,  2768,  1116,  1117,   563,  3199,  1794,  1993,  2400,  4121,
    1118,  3529,  2540,  1119,  2000,  1120,  2258,  1275,  1086,  1385,
    2076,  2977,   241,  1120,   243,  1120,  4122,  1118,  1225,  2013,
    1119,  1226,  3464,  2803,   565,  1116,  1117,  2496,  1738,  2014,
    1454,  3543,  1528,  1118,   642,  2267,  1119,  3031,  1118,  1328,
    1118,  1119,  2769,  1119,  1783,  1701,  3673,  3673,  1276,   936,
    1214,  1116,  1117,  2097,  1281,  1120,  1312,  2101,  1116,  1117,
     598,   569,  3407,  3248,   576,  1795,   569,  1116,  1117,  2018,
     577,  4033,   559,  1379,  2112,  2865,   942,  1116,  1117,  2117,
    2117,   754,  2117,  1118,  1714,  2544,  1119,  1116,  1117,  1796,
   -2341,  3863,   647,  3864,  1118,   559,  4011,  1119,   559,  4034,
    1118,  1313,  1118,  1119,  1118,  1119,  2722,  1119,  1935,  2268,
     569,   569,   559,   559,  2406,   937,  2446,   938,  2774,  3938,
    2117,  2117,  2117,   978,  2161,  2073,  2407,  1120,  3978,  1118,
    4025,  3712,  1119,  2775,  2180,  1120,  1118,  2147,  2199,  1119,
     116,  2022,  1118,  2345,  1556,  1119,  2866,  2210,  1805,  2026,
    1136,  1215,  1797,  1118,  2511,  2312,  1119,   587,  2206,  1702,
    3837,  1227,  1120,   588, -2378,  3477,  1120,  4012,   591,  3700,
    3704,  2412,  2116,  2116,  1120,  2116,  2027,  2723,  3338,  1120,
    2033,  1118,   559,  1120,  1119,   658,   595,  3339,  2138,  2172,
     593,  1221,  2413,  2038,  2227,  2148,  2695,  3673,  3673,  1190,
    1254,   559,  1120,  2828,   607,  1238,  2165,  1118,  3477,  1118,
    1119,  2712,  1119,  2116,  2116,  2116,  2046,  1116,  1117,   466,
    3723,  3724,  3725,  3726,  2981,  3137,  1116,  1117,  1116,  1117,
    1120,  2248,  2004,  1822,  1118,   609,  1798,  1119,  1216,  3362,
    2255,  2256,  1283,  1118,  2051,  1118,  1119,  1120,  1119,  3152,
    3153,  2260,  2261,  2262,  2263,  1118,  2271,  2272,  1119,   675,
    2313,  2066,  1118,  1120,   669,  1119,  1633,  2394,  1120,  2724,
    1120,  1116,  1117,  1118,  1191,  2220,  1119,  2824,  1572,  3169,
    3490,  1252,  2842,  3277,  2590,   610,  3280,  3281,  3954,  1116,
    1117,  3735,  3673,  1118,  2238,  2004,  1119,  2340,  1118,  1393,
    1394,  1119,  3396,  3293,  2269,  2174,  2175,  3673,   611,  2462,
    3736,  2354,   746,  1120,  2462,  1369,  1370,  3340,  1192,  3700,
    3673,  1741,  2364,  3704,  1120,  1118,   131,  2849,  1119,   132,
    1120,  1572,  1120,  1193,  1120,  3359,  3360,  2656,  2850,   751,
    2939,  1413,  2367,  2368,  2857,  2375,  2863,  2377,  2378,  2379,
    2380,  2381,  1428, -1671,  2384,  2385,  1116,  1117,  1118,  1120,
     569,  1119,  3955,   789,  1572,  2410,  1120,   801,   452,  3491,
    2733,  3374,  1120,  2871,  3379,   559,   559,   559,  2433,   805,
    2872,  2436,  2095,  1120,  1118,  4052,  3673,  1119,  3700,  3704,
    2096,  1118,   849,   850,  1119,  2415,   807,  2873,  3673,  3673,
    1118,  1788,   569,  1119,  2525,   894,  3492,   569,  4048,   817,
    1118,  1120,  2983,  1119,  3674,   914,  3291,  1822,  2095,  3292,
    1118,  1805,   880,  1119,   923,  2875,  2961,  1143,  1144,  1145,
    1146,  1147,  1148,  2547,   915,  1405,  1406,  1120,   792,  1120,
    2082,   932,  3673,  1414,   942,  3145,   953,  1415,   970,  1923,
     971,  2878,  3673,  2884,   704,   696,  3817,   975,  3146,  1416,
    3468,  3927,   114,  1923,  1120,  3221,  1006,  3445,  2429,  2430,
    2431,  1007,  3147,  1120,  1008,  1120,  3257,  3258,  2887,  1010,
    2932,  1031,   849,  3283,  3222,  1120,  3673,  2889,  3673,  3935,
    3936,  1011,  1120,   964,   965,  1823,  2147,   569,  3673,  2891,
    3327,  1634,  3838,  1120,  3843,  2406,  2893,  3846,  3847,  3848,
    3849,  3673,  1012,  3673,  3223,  3673,  1592,  2894,  2513,  2545,
    2901,  1153,  3673,  1120,  2974,  2535,   569,   904,  1120,  1981,
    1153,  2462,  3673,  2624,  2629,  1572,  1923,  2895,  1090,  1633,
    1015,  2936,  3174,   540,  3517,  1016, -1588,  3519,  3673,  3673,
    1118,  1133,  2396,  1119,  2148,  1120, -1588,  3956,  4148,  1118,
    1017,  1118,  1119,  1018,  1119,   892,   893,  1822,   896,  3673,
    3673,  2450,  1997,  1153,  3673,  2667,  2462,  2006,  1153,  1417,
     114,  2149,  2576,  2820,  1019,   541,  1298, -1588,  1120,  2673,
    2172,  1805,  1487,  1958,  2007,  1522,  2451, -1588,  2173,  2591,
    3017,  1157,  3175,  2438,  1118,  1805,  3561,  1119,  2019,  1153,
   -1671,  3952,  3953,  1923,  1120,  1299,  1156,  2610,  2612,  3960,
    3965,  1120,  1118,  1020,   569,  1119,   569,   569,  3176,  1021,
    1120,  3028,  1812,  2609,  1161,  3387,  1133,  1022,  2452,  3033,
    1120,  2453,  3035,   880,  3395,  1133,  2547,  2150,  1023,  2454,
    1120,  2020,  1153,   542,  3397,  1026,  1300,  1028,  1206,  1573,
    1560,  1301,  2021,  1153,  3398,   115,  2024,  2025,   569,   569,
    3618,  3619,  2547,  3621,  3622,  1418,  2031,  1153,  1805,  1823,
    1029,   964,   965,   116,  1030,  3385,  1491, -1671,  1593,  1118,
    1116,  1117,  1119,  2273,  2274,   880,   908,   909,  2264,   910,
    1034,   911,  2396,  1924,  2466,  1153,  2174,  2175,  2354,  1633,
    2119,  3909,  2120,  2354,  2521,  1153,  1035,  1924,  2354,  2550,
    2551,  2151,  2354,  1633,  2708,   849,   850,  1036,  2685, -1400,
    2147,  1136,  1037,  1813,  2708,  1206,  2354,  2354,  2699,   569,
    1038,  2176,  2710,  2711,  2709,  1187,  2354,  1039,  1573,   117,
    2182,  2183,  2184,  1040,  4131,  1805,  2265,   559,  1189,  1133,
    1041,  2742,  1042,  2743,  1043,   569,  2730,  2737,  1258,  2876,
    1153,  2738,  2354,  2759,  1634,  1046,   118,  2740,  2741,  1925,
    1120,  1492, -1400,  2266,  1047,  1495,  1207,  1053,  2148,  1120,
    1924,  1120,  1496,  1194,  3399,  1054,  1633,  1055,  1009,  1056,
    1302,  2744,  2277,  3400,  1172,  3718, -1400,  2942,  2943,  3037,
    3038,  1057, -1400,  1058, -1400,  2149,  1136,  3124,  3038,  3179,
    1153,  1059,  2745,  3196,  3197,  1136,   119,  2781, -1400,  1823,
    3332,  3333,  1060, -1400,  1120,  1132,  1258,  3372,  3381,  1061,
    2264,   559,  2354,  2913,  2914,  2915,  3159, -1400,  1063,  2267,
    2739,  1065,  1120, -1400,  1066,  2746,  2455,  3389,  1153, -1400,
    1067, -1400,  1068,  1207,  1069,   880,  1925,  1924,  1070,  1303,
    1071, -1400,  1497,  1633,  1072,  1138,  1139,  4151,  4152,   880,
    1594,  2150, -1400,  2947,  2948,  2949,  1073, -1400,  3401,  1153,
     543, -1400,  1814,  1074,  3180,  1075, -1400,  1595,  2265,  4044,
    1076,  1815,  3414,  3415,  1077, -1400,  3531,  2274,  2610,  1816,
   -1400,   544,  3545,  3546,  1078,  1926,  2152,  3549,  3546,  1120,
    1079,   133,  1499,  2268,  2609,  2266,  -562,   456,   457,  1080,
   -1400,  1133,  1304,  1081,  2805,  2284,  3550,  3546, -1400,  1136,
    1082,   545,  3617,  3197,  1634,  1083,  2285,   508, -1400,  1084,
    3345,   120,   880,   515,  1088,  2151, -1400,   519,  1634, -1400,
    1138,  1139,  1089,  3148, -1400,  3612,  3613,  3620,  3546,  1138,
    1139,  2925,  1092, -1400,  2112,  1093,  1211,   569,   569,   569,
   -1400,  1097,  2284,  3284,  3085,  3719,  3720,   559,  1101, -1400,
    1102,  2267,  1103,  2456,   546,  1104,  1817,  3733,  3734,  4115,
     569,  4117,  1926,  1573,  3760,  3761,  1141,  1142,  1143,  1144,
    1145,  1146,  1147,  1148,  1105,   121,  1196,   569,   569,   569,
    3765,  3546, -1400,  1155,  4134,  1204,  3637,  1205,  1134,   880,
    2960,  1634,  3637, -1400,  3766,  3546,  2962,  1305,  2964,  -562,
     832,   118,  2462,  3575,   569,   461,  2959,  1213,   580,  1219,
    1135,  1500,  3377,  2457,  1220,  4158,  1233, -1400,  1244,  2392,
    1245,  4171,  4172,  1572,  1502,  2268, -1400, -1400,  3497,  3498,
     122,  1306,  -864,  3768,  3546,  1248,  1384,  3769,  3546,  1249,
    2138,  3501,  2458,  1138,  1139,  1818,  2310,  3504, -1400,  2747,
    1255,  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148, -1400,
    1385,  1142,  1143,  1144,  1145,  1146,  1147,  1148,  1634,  1263,
    3520,  1136,  3829,  3522,  2354,  3778,  3779,  1252,  2269,  2354,
    2354,  1264,  2708,  1384,  3780,  3781,  1268, -1400,  -562,  1281,
     964,   965,  3782,  3781,  1290,   569,  2789,  2284,  2354,  1269,
    3576,  3577,  3831,  3824, -1400,  3578,  3579,  1385,  2285,  1291,
    2152,  1292,  3023,  2708,   833,  3832,  3824,  3979,  3761,  1293,
    3026,  2708,  3980,  3761,  2708, -1400,  1294,  3985,  3197,  1458,
    1459,  1460,  4016,  4017,   559,  4023,  4024,  4080,  2780,  1295,
   -1400,  1471,  1317,  3039,  1318,  3737,   559,  4187,  4188,  1332,
    3095, -1400, -1400,  1562,  1562,  1334,   452,  3958,  3958,  1337,
    3105,  3623,  3624,  2364, -1400,  3213,  3214,  1137,  1342, -1400,
    3110, -1400,  1525,  1335,  3738,  1529,  1143,  1144,  1145,  1146,
    1147,  1148,  3120,  3101,   834,  3183,  3184,  3945,  1347,   559,
    2286,  1353, -1400, -1400,  1359,  3209, -1400, -1400,  1552,  1553,
    3133,  -562,  1557,  1361,   479,  1363,  -562,   461,  3412,  3413,
    1366,  1116,  1117,  1367,  3585,  1138,  1139, -1400,  1371, -1671,
    2269,  1574,  1575,   748,   749,  1374,  1140,   752,   753, -1400,
    1375,   755,  1572,   757,  3300,  1422,  1423,  2311,  1384,  3040,
    1033,  1087,  1091,  1424,  1427,  3218, -1400,  1429, -1400,  1430,
    1448,  1450,  1151,  2312,  1461,  1454,  1254,  1473,  1096,  1475,
     480,  2667,  1385,  1511,  1521,  1522,  1570,  1523,  1582, -1400,
   -1400,  3882,  3639, -1400, -1400,  3301,   460,  1587,  1603,  3302,
    1609,  3178,  3122,  1838,  1839,  3739, -1237,  1630,   481,  1638,
     464,  1637,  1646,  3945,  1647,  1643,  1648,  1650,  1651,  3598,
    1483,  1484,  1485,  1486,  1487,  1669,  1670,  1673,  1675,  1679,
    1687,  1688,  1689,  3551,  2576,  -687,  -687,  1841,   482,  1690,
    1696,  1704,  3303,  1710,  -687,  1719,  2591,  3208,  1844,   569,
    1483,  1484,  1485,  1486,  1487,  1723,  1845,  1747,   569,  1751,
    1753,  1752,  1754,  1764,  2545,  1756,  1141,  1142,  1143,  1144,
    1145,  1146,  1147,  1148,   569,  1766,  1768,  1847,  1781,   461,
    3740,  1790,  2199,  3945,  1891,   483,  1379,  -562,  1899,   758,
    1900,  1353,  1901,  1902,  1848,  1903,  1904,  3741,  1905,  1573,
    1906,  1907,  1908,  1909,  1910,  3675,  1911,   804,  1123,  1124,
    -733,  2354,  1912,  1792,   815,  1488,  1489,  1490,  1491,  3742,
    1913,  2354,  1853,  2708,  1793,  3783,  1914,  1915,  -562,  1916,
    1917,  1918,  1573,  1919,  2228,   900,  1938,  2708,  1937,  1940,
    1952,  2354,  1953,  1125,  1954,  1488,  1489,  1490,  1491,  1942,
    1961,  1955,  1126,  1968,  1996,  1988,  2004,   462,  1998,  2462,
    1970,  1572,  1133,  -701,  3918,  1971,  1972,  4168,  1987,  1994,
    1995,  2008,  2049,  2012,  2016,   744,  3747,   835,   836,   837,
     838,   839,   840,   841,  1572,  2050,  2028,  2029,  1856,  1127,
    2075,  2039,  2040,  2045,  2061,   842,  1857,  2062,  2063, -1070,
    1128,   744,  2081,  1572,  1148,   -63,  1133,  2091,  2108,  4168,
     484,  1858,   464,  1492,  2094,  1493,  1494,  1495,  2025,  1133,
    2107,  1171,  3329,  2132,  1496,  3434,  2135,  1129,  2144,  2156,
    2159,  2195,  2181,  3358,  3358,  3358,  2207,  2209,  4071,  4072,
    3350,  4074,  2213,  1492,  2215,  1493,  1494,  1495,  2237,  2236,
    2240,  2241,   569,  2243,  1496,   964,   965,  2247,  2229,  2032,
    2249,  2254,  3304,  1859,  1118,  2250,  2284,  1119,  2251,  3305,
    2252,  2296,  2253,  2301,   485,  2302,  2230,  2305,  2306,  1794,
    1860,   880,  1130,  4107,  2308,  4108,  4109,  2231,  2309,  -562,
    2315,  2318,  2317,  2325,  1967,  2324,  3743,  2329,  3423,  2330,
    2335,  2357,  2336,  1573,  1497,  2395,  2416,  2434,  2438,  3306,
    2442,  2667,  2449,  2096,  2468,  2469,  2858,   744,   569,  2470,
    2443,  2480,   744,  2482,  2486,  2489,  2503,  3923,  3921,   486,
    3747,  2490,  2522,   487,  1497,  1864,  2549,  2523,  2524,  2552,
    2562,  2531,  1136,  1866,  2554,  2553,   463,  2566,  1795,  2555,
    3444,   488,   744,  1498,  1499,  2556,  2121,  2564,  2567,  3358,
    4185,  2232,  2569,  2011,   464,  2570,  2577,  2015,   744,   964,
     965,  2581,  1796,  3307,  2593,  2594,  2122,   489,  2595,  2596,
    2188,  2187,  2613,  1498,  1499,  3450,  1136,  2462,  3480,  2614,
     621,  2123,   490,  1838,  1839,  2044,  2615,  2636,  2637,  1136,
    2124,   465,  2640,  -488,   569,   466,  2644,  2645,  2646,  2662,
    1872,  2669,   744,   744,   744,   744,  2670,  2715,  2717,  2767,
    2751,  3506,  3598,  2773,   744,  -687,  -687,  1841,  2777,  3523,
    2779,  2786,  2780,  2787,  -687,  1797,  3527,  2792,  1844,  2793,
    2791,   467,  1865,  2817,  1962,  3218,  1845,  2125,  2126,   468,
    1783,  3120,  2826,  2829,  2833,  2838,  3532,  2839,  3471,  2869,
    2840,  2841,  2843,  2844,  1873,   642,  2870,  1847,  2900,  2905,
    3308,  2898,  2233,  2906,  2907,  2127,  2909,  2916,  2911,  1874,
     569,  1353,  1875,  1500,  1848,  2918,  1138,  1139,  2922,  1225,
    2927,  2930,  2944,  2958,  1120,  1501,  1502,  2946,  2931,  2957,
    2963,  2938,  2941,  2971,  2982,  2988,  1876,  2992,  2993,  3008,
    2996,  3009,  1853,  1500,  3020,  3029,   646,  3099,  1877,  1798,
    3096,  3102,  3103,   647,  3589,  1501,  1502,  3107,  3115,  3116,
    1138,  1139,  2234,  2128,  3121,  3109,  -405,  2172,   569,  3130,
    3135,  3154,  3131,  1138,  1139,  3155,  3138,  3163,  3189,  3191,
     651,  3211,  3132,  3231,  3219,  3236,  3237,  3610,  4193,  3162,
    3177,  3166,  3167,  3259,  3260,  3200,  3278,  2355,  3330,  3358,
    3358,  2812,  3358,  3358,  3232,  3328,  3227,  3228,  1856,  3921,
    3249,  3256,  3337,  3271,  3323,  4103,  1857,  3326,  3633,  2129,
    3346,  3347,  3354,  3348,  3351,  3352,  3363,  3370,  3371,  3372,
    3373,  1858,  3317,  3382,  3383,  3390,  3386,  3391,  2462,  3392,
    3393,  3394,  3410,  3417,  2418,  3418,   658,  1141,  1142,  1143,
    1144,  1145,  1146,  1147,  1148,  3419,  3415,  3421,  2961,  3428,
    3430,  3431,  3435,  3436,  3439,  3441,  3442, -1321,  3680,   559,
   -1326,  3454,  3466,  3314,  1174,  4103,  3467,  3511,  3469,  3358,
     744,  3470,  3747,  1859,  3510,  3496,  3500,  3502,  3512,  3514,
    3515,  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,  3521,
    1860,  3552,   669,  4180,  1141,  1142,  1143,  1144,  1145,  1146,
    1147,  1148,  3533,  3507,  3534,  3562,  3566,   559,   674,  3548,
     675,  3568,  3553,  3567,  3569,  3570,  3583,  3584,  3601,  3571,
    3572,   569,  3590,   744,   744,  3602,  3604,  3606,  4180,  3608,
    3626,  3640,   744,   744,   744,   744,   744,   744,   744,  3641,
    3676,  3684,  1175,   744,  3381,  1864,   744,   744,  3642,   744,
    3696,   744,  3681,  1866,  3689,   744,  3709,  3716,   744,   744,
     744,   744,  3715,   744,   744,  3722,  3728,  3755,  3789,  3731,
    3762,   744,   744,  3796,   744,   744,   744,   744,   744,  3785,
     744,  3757,  3759,   744,   744,  3771,  3803,   744,   744,   744,
     744,   744,   744,   744,   744,   744,  -275,  3812,   744,   744,
    3729,   744,  1176,   744,  3828,  3805,  3821,   744,  3806,   744,
     744,  3815,  3842,  3844,  3845,  3820,  3841,  3850,  3853,  3858,
    1872,   744,   744,  3860,  1177,  3862,  2763,   744,   621,  3876,
     744,   761,   762,  3889,   826,   762,  -293,   744,   744,   744,
    3886,   744,  3915,  3916,  3917,  3930,  3976,  3937,   744,   744,
     744,  1573,   744,   744,   744,   744,   744,  3589,   744,   744,
     744,   744,   744,   744,   744,   744,  3940,  3981,  3962,   744,
     744,  3982,  3991,  3995,  1873,  3983,  3984,  3992,  4002,  3961,
    3610,  4003,  3610,   696,  3865,  3996,  4004,  3472,  3995,  1874,
    3473,  4007,  1875,  4028,  4029,  4031,  3471,   799,  4030,  4037,
     702,  4005,  3880,   642,  4045,   704,  4040,   763,  4047,   705,
     763,  4049,  4050,  4053, -2138,  3890,  1876,  4065,  4059,  4066,
    4073,  4070,  4075,  4076,  4078,  1178,  4079,  4085,  1877,  4099,
    4098, -1473,  4110,  1179,  4112,  4114,   764,  4113,  4118,   764,
    4123,  4119,  4126,  4129,  4133,  4130,  4139,  4137,  4142,   765,
    4143,  4145,   765,  4146,   646,  4154,  4156,  4163,  4150,  3474,
    3475,   647,  4169,  1180,  4183,  4192,  2387,  3798,  2548,  3336,
    2677,   766,   569,   767,   766,   744,   767,   987,  3537,  2419,
    3813,  3969,  3951,   744,   768,  3924,  3535,   768,   651,  4060,
    4195,  1365,  4061,  3539,  3679,  2547,  4159,  3653,  3654,  3656,
    3657,  1181,  3659,  3660,  3661,   769,  3662,  3663,   769,  4173,
    3664,  4082,  4083,  3989,  4001,  3667,  4058,  3668,  1013,  3669,
    4000,  1426,  2099,  3995,  1834,  1878,  1182,  2736,  3686,   770,
    2926,  3198,   770,  4097,  3840,  3730,   771,  3941,  3424,   771,
    4064,  4019,  3852,  4069,  1183,   608,  3353,   132,  1045,  2344,
    4102,  3615,  4068,  2810,   658,  1922,  3113,  3272,  2351,  2764,
    1573,  2690,  3261,  3285,  1062,  3324,  3635,  3286,  3479,  3513,
    3505,  3939,  3264,  3225,  3879,   772,  3634,  3777,   772,  4125,
    3871,   475,   476,  3874,  3818,  3873,  3823,  1951,   569,  3822,
    2428,  4020,  4021,  3695,  3995,  3638,  3995,  2348,  3263,  2754,
    2225,  1767,  3482,  4144,  2578,  3262,  2364,  2364,  1920,  2164,
     669,  1111,   912,  3995,  2921,  1259,  2565,  2597,  1383,  3748,
    2864,  4062,  3826,  2186,  2465,  2868,   674,  2657,   675,  1391,
    1392,  1393,  1394,  1395,  1396,  1520,  1397,  1398,  1399,  1400,
    1401,  1402,  1403,  3233,  1404,   569,  3764,  3614,  3108,  1472,
    3995,  3995,  4038,  1563,  1628,  4191,  4149,  4039,  2538,  3267,
    3611,  2432,  3600,  1692,  2561,  1784,  3959,  1667,  2584,  4087,
    2604,  3204,  3426,  3203,  4189,  3243,  4095,   901,   744,  1960,
    4013,  1005,   886,  2109,  1735,  2217,  3190,   744,  3036,  1694,
    4063,  4101,  4032,  4077,  4194,  4186,  3207,  3509,  1708,  2979,
    3229,  2196,   773,  3603,  3440,   773,  2143,  1699,   828,  3721,
    1247,  1941,  2910,  3727,  1660,   830,  1251,  2520,  1578,  2897,
     602,   774,   603,   991,   774,   992,     0,   775,   993,     0,
     775,     0,     0,     0,     0,   776,     0,  4135,   776,     0,
       0,     0,  4140,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   744,     0,     0,     0,     0,     0,   777,
       0,     0,   777,     0,     0,     0,     0,  1405,  1406,  1573,
       0,     0,   778,   779,     0,   778,   779,     0,  4181,     0,
       0,     0,   744,   744,   744,     0,     0,     0,   569,     0,
       0,     0,  1573,     0,     0,     0,     0,     0,   744,     0,
       0,   696,     0,     0,     0,  3472,     0,     0,  3473,     0,
       0,  1573,     0,  4181,   780,     0,     0,   780,   702,     0,
     744,     0,     0,   704,     0,     0,   744,   705,     0,   744,
       0,   744,     0,     0,     0,     0,     0,   744,     0,   744,
     744,     0,   781,     0,     0,   781,  1390,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   782,     0,   783,   782,     0,
     783,     0,     0,     0,     0,     0,     0,  3474,  3475,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1452,
    1453,   744,     0,     0,     0,     0,     0,     0,  1463,  1464,
       0,     0,  1467,  1468,  1469,     0,     0,     0,     0,  1474,
       0,     0,  1476,  1477,     0,  1478,     0,  1479,     0,     0,
       0,     0,     0,     0,  1513,  1514,  1515,  1516,     0,  1518,
       0,     0,     0,     0,     0,     0,     0,  1526,  1527,     0,
    1530,  1531,     0,     0,     0,     0,  1535,     0,     0,  1539,
    1540,     0,     0,  1543,     0,     0,  1546,  1547,  1548,  1549,
    1550,  1551,     0,     0,  1554,  1555,     0,  1558,     0,  1559,
       0,     0,     0,  1564,     0,  1568,  1569,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1576,  1577,     0,
       0,     0,     0,  1111,     0,     0,  1583,     0,     0,     0,
       0,     0,     0,  1588,  1589,  1590,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1835,     0,
       0,     0,     0,     0,     0,  1836,  1837,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1626,  1838,  1839,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3041,  3042,
       0,     0,     0,     0,  3043,     0,  3044,     0,  3045,  3046,
       0,     0,     0,     0,     0,     0,     0,  1840,     0,     0,
       0,  1841,  1842,     0,  3047,     0,  1843,     0,     0,     0,
       0,     0,  1844,     0,     0,     0,     0,     0,     0,     0,
    1845,     0,     0,     0,     0,     0,     0,  1846,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   744,     0,
       0,  1847,     0,     0,     0,     0,  3048,     0,     0,  3049,
       0,     0,     0,     0,     0,  1353,     0,  3050,  1848,     0,
       0,     0,     0,     0,     0,  1849,  1850,     0,     0,     0,
       0,  1707,  1851,     0,  3051,     0,     0,     0,     0,  1722,
    1852,     0,     0,     0,  -803,     0,  1853,     0,     0,     0,
       0,  3052,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   744,     0,     0,     0,   744,     0,     0,     0,
       0,   744,   744,  3053,  1854,  3054,     0,     0,     0,     0,
     744,     0,     0,     0,     0,     0,     0,     0,  3055,  3056,
       0,     0,     0,   744,     0,   744,   744,     0,   744,   744,
     744,   744,   744,     0,     0,   744,   762,     0,     0,     0,
    1855,     0,  1856,     0,   744,     0,     0,     0,     0,     0,
    1857,     0,     0,     0,     0,     0,     0,   744,  3057,   744,
       0,   744,   744,   744,   744,  1858,     0,     0,   744,   744,
     744,     0,     0,     0,     0,   744,   744,   744,     0,   744,
       0,   744,     0,   744,     0,   744,  3058,   744,     0,     0,
       0,     0,   744,     0,     0,  3059,  3060,     0,  3061,     0,
       0,     0,   744,     0,     0,     0,     0,     0,     0,   744,
       0,   763,   744,     0,     0,     0,     0,  1859,   744,     0,
       1,     2,   744,     0,     0,     0,     0,  3062,  3063,  3064,
       0,     0,     0,     0,  1860,     3,     0,     4,  1861,     0,
     764,     5,     0,     0,     0,  3065,  3066,  3067,     0,     0,
       0,  3068,     0,   765,  3069,     6,     7,     0,     0,     0,
       0,     0,     8,     0,  1973,     0,     9,    10,     0,     0,
       0,     0,  3070,  3071,     0,   766,  1862,   767,     0,    11,
       0,  1863,     0,     0,     0,     0,     0,     0,   768,  1864,
       0,     0,     0,     0,     0,    12,  1865,  1866,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3072,  3073,   769,
       0,     0,  1838,  1839,     0,     0,    13,     0,     0,     0,
       0,     0,     0,     0,    14,    15,    16,     0,     0,  1867,
       0,     0,  3074,   770,     0,     0,    17,    18,     0,  2023,
     771,  1868,  1869,  1870,  1871,     0,  1841,     0,     0,    19,
       0,     0,     0,     0,     0,     0,     0,  1844,     0,     0,
       0,    20,     0,     0,  1872,  1845,     0,     0,  2053,  2055,
    2057,     0,     0,     0,     0,     0,     0,    21,     0,   772,
    3075,     0,     0,     0,  3076,     0,  1847,     0,     0,     0,
       0,     0,     0,    22,  3077,     0,     0,     0,    23,     0,
    1353,    24,     0,  1848,     0,     0,  2083,     0,     0,     0,
       0,     0,     0,     0,     0,  2088,     0,  2089,  1873,     0,
       0,     0,     0,     0,    25,     0,    26,     0,     0,     0,
       0,  1853,     0,  1874,     0,     0,  1875,     0,     0,     0,
       0,     0,    27,     0,     0,  3078,     0,     0,  3079,     0,
       0,  3080,  3081,  3082,  3083,     0,     0,     0,     0,    28,
    1876,     0,     0,    29,     0,     0,     0,     0,     0,     0,
       0,     0,  1877,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2160,     0,     0,
       0,     0,     0,     0,  3084,  3085,     0,  1856,     0,     0,
       0,     0,     0,     0,     0,  1857,   773,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3086,     0,     0,     0,
    1858,     0,     0,     0,     0,   774,     0,     0,     0,  -803,
       0,   775,     0,     0,     0,     0,     0,     0,     0,   776,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   777,     0,     0,     0,   744,     0,     0,
       0,    31,  1859,   744,     0,     0,   778,   779,     0,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,  1860,
       0,     0,     0,     0,    33,     0,   744,   744,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    34,     0,     0,    35,   780,    36,
       0,     0,    37,     0,     0,    38,   744,     0,    39,     0,
       0,     0,     0,    40,     0,    41,   744,     0,   744,     0,
     744,     0,    42,     0,  1864,     0,   781,    43,     0,     0,
       0,     0,  1866,     0,     0,    44,     0,   744,     0,     0,
      45,     0,   744,     0,    46,     0,     0,     0,     0,   782,
       0,   783,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   744,     0,     0,    47,     0,
       0,     0,    48,     0,     0,   744,     0,     0,     0,     0,
       0,     0,     0,     0,  2365,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1872,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   744,     0,     0,    50,   744,     0,     0,
      51,     0,     0,    52,     0,     0,     0,     0,    53,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2441,     0,
       0,     0,  2445,  1873,     0,     0,     0,  2447,  2448,     0,
       0,     0,     0,     0,    54,     0,  2463,     0,  1874,     0,
     744,  1875,     0,     0,     0,     0,     0,     0,    55,  2471,
       0,  2472,     0,     0,  2474,  2475,  2476,  2477,  2478,     0,
       0,     0,     0,   744,     0,  1876,     0,     0,     0,     0,
    2484,     0,     0,     0,     0,     0,     0,  1877,     0,     0,
       0,     0,     0,  2491,     0,  2492,     0,  2493,  2494,  2495,
       0,     0,     0,     0,  2500,  2501,  2502,     0,     0,     0,
       0,  2505,  2506,  2507,     0,  2508,     0,  2510,     0,  2512,
       0,  2514,     0,  2515,     0,     0,     0,     0,  2518,     0,
       0,     0,  1838,  1839,     0,     0,     0,     0,  2526,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2536,     0,     0,   744,   744,     0,
       0,     0,     0,     0,  -687,  -687,  1841,     0,     0,     0,
       0,     0,     0,  -687,     0,     0,     0,  1844,     0,     0,
       0,     0,     0,     0,     0,  1845,     0,     0,     0,     0,
       1,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     3,  1847,     0,     0,     0,
       0,     5,     0,     0,     0,   744,     0,     0,     0,     0,
    1353,     0,     0,  1848,     0,     6,     7,     0,     0,     0,
       0,     0,     8,     0,     0,     0,     9,    10,     0,     0,
     744,   744,     0,   744,     0,     0,     0,     0,     0,    11,
       0,  1853,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   744,     0,     0,     0,    12,   744,     0,     0,   744,
       0,     0,   744,   744,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,     0,     0,     0,
       0,   744,     0,     0,    14,    15,    16,     0,     0,     0,
       0,     0,     0,   744,     0,     0,    17,    18,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1856,     0,     0,
       0,     0,     0,     0,   744,  1857,     0,     0,     0,     0,
       0,    20,     0,     0,     0,     0,     0,     0,     0,     0,
    1858,     0,     0,     0,     0,     0,     0,    21,     0,     0,
       0,     0,     0,   744,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    22,     0,     0,     0,   744,    23,     0,
       0,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   744,     0,     0,     0,     0,
       0,     0,  1859,     0,    25,     0,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1860,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1864,     0,     0,     0,     0,     0,
       0,     0,  1866,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2823,     0,     0,     0,     0,     0,  2827,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2847,  2848,     0,     0,     0,     0,     0,  1872,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
       0,     0,  2877,     0,    33,     0,     0,     0,     0,     0,
       0,     0,  2888,     0,  2890,     0,  2892,     0,     0,     0,
       0,     0,     0,     0,    34,     0,     0,    35,   744,    36,
       0,     0,    37,  1873,     0,    38,     0,     0,    39,     0,
       0,     0,     0,    40,     0,    41,     0,     0,  1874,     0,
       0,  1875,    42,     0,     0,     0,     0,    43,     0,     0,
       0,  2917,     0,     0,     0,    44,     0,   744,   744,     0,
      45,     0,     0,     0,    46,  1876,   744,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1877,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    47,     0,
       0,     0,    48,     0,   847,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   808,   848,     0,     0,     0,  2969,
       0,     0,     0,  2973,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   849,   850,
       0,     0,     0,    49,     0,     0,     0,     0,   851,     0,
     852,     0,     0,     0,     0,     0,    50,     0,     0,     0,
      51,     0,     0,    52,     0,   853,  3002,   854,    53,   855,
       0,     0,     0,     0,     0,     0,     0,     0,   856,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3007,
     744,     0,     0,     0,    54,     0,   744,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    55,     0,
       0,   744,     0,     0,     0,   744,     0,     0,     0,     0,
       0,     0,     0,     0, -1671,   857,     0,     0,     0,   858,
       0,     0,   859,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   744,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   860,
       0,   861,     0,     0,     0,     0,   862,     0,   863,     0,
     744,     0,     0,  3097,  3098,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     864,   865,     0,     0,     0,   866,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   867,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3140,     0,     0,   868,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3671,     0,     0,  3157,  3158,     0,     0,
       0,   869,     0,     0,     0,     0,     0,  2752,     0,     0,
       0,     0,     0,     0,  1836,     0,     0,  3168,     0,   744,
       0,   744,  3170,   744,     0,  3171,  1838,  1839,  3172,  3173,
       0,     0,     0,   870,     0,   744,   744,     0,     0,     0,
       0,     0,     0,   871,     0,     0,     0,     0,     0,     0,
       0,     0,   744,     0,     0,     0,  1840,     0,     0,  3186,
    1841,     0,   744,   744,   872,     0,     0,     0,     0,     0,
       0,  1844,   744,     0,   744,     0,     0,     0,     0,  1845,
    3186,     0,     0,     0,     0,     0,  1846,     0,     0,     0,
     873,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1847,     0,   874,   875,     0,     0,   876,   877,     0,   744,
       0,     0,     0,     0,  1353,  3671,  3671,  1848,     0,     0,
       0,     0,     0,  3230,  1849,     0,     0,     0,     0,     0,
       0,  2753,     0,     0,     0,     0,     0,     0,     0,  1852,
       0,  3186,     0,     0,     0,  1853,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   878,     0,     0,     0,
       0,     0,     0,  1854,     0,     0,     0,     0,   879,     0,
       0,     0,     0,   744,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2164,     0,     0,     0,   880,     0,     0,
       0,  1856,     0,     0,     0,     0,     0,     0,     0,  1857,
       0,     0,     0,     0,   881,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1858,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   744,     0,   744,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   744,     0,  3671,  3671,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2164,     0,     0,     0,     0,  1859,   882,  3928,     0,
       0,   744,     0,     0,     0,   744,     0,     0,     0,     0,
       0,     0,     0,  1860,     0,     0,     0,  1861,   744,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   744,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3186,     0,     0,     0,     0,     0,
    1863,     0,     0,     0,     0,     0,     0,     0,  1864,   744,
       0,  3671,     0,     0,     0,     0,  1866,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3671,   744,     0,     0,
       0,     0,     0,  3452,  3453,     0,     0,     0,     0,  3671,
       0,     0,  3002,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   744,     0,     0,     0,     0,
       0,  1869,     0,     0,   744,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1872,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   744,  3671,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3671,  3671,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   744,     0,     0,  1873,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1874,     0,     0,  1875,     0,     0,     0,     0,
       0,  3671,  3558,     0,     0,     0,     0,     0,   744,     0,
       0,  3671,     0,     0,     0,     0,     0,  3002,     0,  1876,
       0,  3565,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1877,     0,     0,     0,     0,     0,     0,   744,     0,
       0,     0,     0,     0,     0,  3671,     0,  3671,  3186,     0,
       0,     0,     0,     0,     0,     0,     0,  3671,     0,     0,
     744,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3671,     0,  3671,     0,  3671,     0,  2969,     0,     0,     0,
       0,  3671,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3671,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3671,  3671,     0,
       0,     0,     0,   744,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3671,  3671,
       0,     0,     0,  3671,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3002,     0,  3558,     0,  3710,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3002,  3002,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3002,  3751,
       0,     0,     0,     0,     0,     0,     0,     0,  3756,     0,
    3758,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3784,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3002,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3884,     0,
    3885,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3002,     0,     0,
       0,  3558,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3002,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3993,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3998,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     138,  3186,   617,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,   620,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,  1565,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
    4043,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,   643,   194,
       0,   195,     0,     0,  4089,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,  4111,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,  4128,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,   655,     0,     0,   250,  4182,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,  1566,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,   671,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,  1567,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,   718,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   617,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     618,     0,   146,   147,   148,   149,   150,   619,   152,     0,
     153,  3554,     0,   620,   154,   621,   622,   623,   155,   624,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   625,   626,   163,     0,   164,   627,   628,   166,
       0,   167,   168,   169,   629,   171,     0,   630,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   631,   184,     0,   185,   632,   633,   186,     0,     0,
     187,   634,  3555,   635,     0,   636,   637,     0,   188,   189,
     190,   638,   639,   640,     0,     0,     0,     0,   641,   193,
     642,     0,     0,   643,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   644,     0,   217,   218,   219,
     645,   646,   220,   221,     0,   222,   223,   224,   647,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   648,   231,   649,   233,     0,   234,     0,   650,
       0,   235,   236,     0,   237,   651,     0,   238,   239,     0,
       0,     0,   652,   241,   242,   243,   653,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   654,   248,   249,
    3556,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   656,   259,   260,     0,     0,     0,     0,     0,
     657,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   658,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   659,   282,   283,   284,   285,   660,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   661,   293,     0,
       0,   662,   295,   663,   296,     0,   297,   664,   665,   666,
     667,   668,   302,   303,   304,   305,     0,   669,   306,   307,
       0,     0,   308,   309,   310,   311,   670,   671,   672,   312,
     313,     0,   673,   674,     0,   675,     0,   314,   315,   676,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   677,
     324,   325,   326,   327,   328,   678,   679,   680,   330,   331,
     332,   681,   682,   335,   683,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   684,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   685,   686,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,   687,   367,   368,
     369,   370,   371,   688,   373,   374,   375,     0,   689,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,   690,   691,   400,   401,     0,   402,   692,
     404,   405,   406,   693,   694,   407,   408,   409,   410,   695,
     411,   412,     0,     0,   413,   414,   415,     0,   696,   416,
     417,     0,   697,   698,   699,   700,     0,     0,     0,     0,
       0,   422,   423,     0,   701,   702,   703,   425,   426,   427,
     704,  3557,   428,   429,   705,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   706,
     438,     0,     0,   707,   708,   709,   710,   439,     0,     0,
     440,   711,     0,   712,   441,   442,   443,   713,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     714,     0,     0,     0,   715,   716,     0,     0,     0,     0,
     717,   718,     0,     0,   719,   720,     0,     0,   721,   722,
     138,     0,   617,   140,   141,   142,   143,  2965,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,  2966,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
       0,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,  2967,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,   655,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,   671,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,  2968,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,     0,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,   718,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   617,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     618,     0,   146,   147,   148,   149,   150,   619,   152,     0,
     153,     0,     0,   620,   154,   621,   622,   623,   155,   624,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   625,   626,   163,     0,   164,   627,   628,   166,
       0,   167,   168,   169,   629,   171,     0,   630,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   631,   184,     0,   185,   632,   633,   186,     0,     0,
     187,   634,  3555,   635,     0,   636,   637,     0,   188,   189,
     190,   638,   639,   640,     0,     0,     0,     0,   641,   193,
     642,     0,     0,   643,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   644,     0,   217,   218,   219,
     645,   646,   220,   221,     0,   222,   223,   224,   647,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   648,   231,   649,   233,     0,   234,     0,   650,
       0,   235,   236,     0,   237,   651,     0,   238,   239,     0,
       0,     0,   652,   241,   242,   243,   653,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   654,   248,   249,
    3556,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   656,   259,   260,     0,     0,     0,     0,     0,
     657,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   658,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   659,   282,   283,   284,   285,   660,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   661,   293,     0,
       0,   662,   295,   663,   296,     0,   297,   664,   665,   666,
     667,   668,   302,   303,   304,   305,     0,   669,   306,   307,
       0,     0,   308,   309,   310,   311,   670,   671,   672,   312,
     313,     0,   673,   674,     0,   675,     0,   314,   315,   676,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   677,
     324,   325,   326,   327,   328,   678,   679,   680,   330,   331,
     332,   681,   682,   335,   683,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   684,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   685,   686,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,   687,   367,   368,
     369,   370,   371,   688,   373,   374,   375,     0,   689,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,   690,   691,   400,   401,     0,   402,   692,
     404,   405,   406,   693,   694,   407,   408,   409,   410,   695,
     411,   412,     0,     0,   413,   414,   415,     0,   696,   416,
     417,     0,   697,   698,   699,   700,     0,     0,     0,     0,
       0,   422,   423,     0,   701,   702,   703,   425,   426,   427,
     704,  3557,   428,   429,   705,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   706,
     438,     0,     0,   707,   708,   709,   710,   439,     0,     0,
     440,   711,     0,   712,   441,   442,   443,   713,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     714,     0,     0,     0,   715,   716,     0,     0,     0,     0,
     717,   718,     0,     0,   719,   720,     0,     0,   721,   722,
     138,     0,   617,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,   620,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
       0,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,   643,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,   655,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,   671,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,  1109,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,     0,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,  1110,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   617,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     618,     0,   146,   147,   148,   149,   150,   619,   152,     0,
     153,     0,     0,   620,   154,   621,   622,   623,   155,   624,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   625,   626,   163,     0,   164,   627,   628,   166,
       0,   167,   168,   169,   629,   171,     0,   630,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   631,   184,     0,   185,   632,   633,   186,     0,     0,
     187,   634,     0,   635,     0,   636,   637,     0,   188,   189,
     190,   638,   639,   640,     0,     0,     0,     0,   641,   193,
     642,     0,     0,   643,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   644,     0,   217,   218,   219,
     645,   646,   220,   221,     0,   222,   223,   224,   647,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   648,   231,   649,   233,     0,   234,     0,   650,
       0,   235,   236,     0,   237,   651,     0,   238,   239,     0,
       0,     0,   652,   241,   242,   243,   653,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   654,   248,   249,
     655,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   656,   259,   260,     0,     0,     0,     0,     0,
     657,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   658,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   659,   282,   283,   284,   285,   660,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   661,   293,     0,
       0,   662,   295,   663,   296,     0,   297,   664,   665,   666,
     667,   668,   302,   303,   304,   305,     0,   669,   306,   307,
       0,     0,   308,   309,   310,   311,   670,   671,   672,   312,
     313,     0,   673,   674,     0,   675,     0,   314,   315,   676,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   677,
     324,   325,   326,   327,   328,   678,   679,   680,   330,   331,
     332,   681,   682,   335,   683,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   684,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   685,   686,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,   687,   367,   368,
     369,   370,   371,   688,   373,   374,   375,     0,   689,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,   690,   691,   400,   401,     0,   402,   692,
     404,   405,   406,   693,   694,   407,   408,   409,   410,   695,
     411,   412,     0,     0,   413,   414,   415,     0,   696,   416,
     417,     0,   697,   698,   699,   700,     0,     0,     0,     0,
       0,   422,   423,     0,   701,   702,   703,   425,   426,   427,
     704,     0,   428,   429,   705,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   706,
     438,     0,     0,   707,   708,   709,   710,   439,     0,     0,
     440,   711,     0,   712,   441,   442,   443,   713,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     714,     0,     0,     0,   715,   716,     0,     0,     0,     0,
     717,   718,  1473,     0,   719,   720,     0,     0,   721,   722,
     138,     0,   617,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,   620,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
       0,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,   643,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,     0,     0,     0,     0,
     226,   227,  2052,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,   655,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,   671,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,     0,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,   718,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   617,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     618,     0,   146,   147,   148,   149,   150,   619,   152,     0,
     153,     0,     0,   620,   154,   621,   622,   623,   155,   624,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   625,   626,   163,     0,   164,   627,   628,   166,
       0,   167,   168,   169,   629,   171,     0,   630,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   631,   184,     0,   185,   632,   633,   186,     0,     0,
     187,   634,     0,   635,     0,   636,   637,     0,   188,   189,
     190,   638,   639,   640,     0,     0,     0,     0,   641,   193,
     642,     0,     0,   643,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   644,     0,   217,   218,   219,
     645,   646,   220,   221,     0,   222,   223,   224,   647,     0,
     225,     0,     0,     0,     0,   226,   227,  2054,   228,     0,
     229,     0,   648,   231,   649,   233,     0,   234,     0,   650,
       0,   235,   236,     0,   237,   651,     0,   238,   239,     0,
       0,     0,   652,   241,   242,   243,   653,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   654,   248,   249,
     655,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   656,   259,   260,     0,     0,     0,     0,     0,
     657,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   658,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   659,   282,   283,   284,   285,   660,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   661,   293,     0,
       0,   662,   295,   663,   296,     0,   297,   664,   665,   666,
     667,   668,   302,   303,   304,   305,     0,   669,   306,   307,
       0,     0,   308,   309,   310,   311,   670,   671,   672,   312,
     313,     0,   673,   674,     0,   675,     0,   314,   315,   676,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   677,
     324,   325,   326,   327,   328,   678,   679,   680,   330,   331,
     332,   681,   682,   335,   683,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   684,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   685,   686,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,   687,   367,   368,
     369,   370,   371,   688,   373,   374,   375,     0,   689,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,   690,   691,   400,   401,     0,   402,   692,
     404,   405,   406,   693,   694,   407,   408,   409,   410,   695,
     411,   412,     0,     0,   413,   414,   415,     0,   696,   416,
     417,     0,   697,   698,   699,   700,     0,     0,     0,     0,
       0,   422,   423,     0,   701,   702,   703,   425,   426,   427,
     704,     0,   428,   429,   705,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   706,
     438,     0,     0,   707,   708,   709,   710,   439,     0,     0,
     440,   711,     0,   712,   441,   442,   443,   713,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     714,     0,     0,     0,   715,   716,     0,     0,     0,     0,
     717,   718,     0,     0,   719,   720,     0,     0,   721,   722,
     138,     0,   617,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,   620,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
       0,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,   643,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,     0,     0,     0,     0,
     226,   227,  2056,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,   655,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,   671,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,     0,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,   718,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   617,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     618,     0,   146,   147,   148,   149,   150,   619,   152,     0,
     153,     0,     0,   620,   154,   621,   622,   623,   155,   624,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   625,   626,   163,     0,   164,   627,   628,   166,
       0,   167,   168,   169,   629,   171,     0,   630,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   631,   184,     0,   185,   632,   633,   186,     0,     0,
     187,   634,     0,   635,     0,   636,   637,     0,   188,   189,
     190,   638,   639,   640,     0,     0,     0,     0,   641,   193,
     642,     0,     0,   643,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   644,     0,   217,   218,   219,
     645,   646,   220,   221,     0,   222,   223,   224,   647,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   648,   231,   649,   233,     0,   234,     0,   650,
       0,   235,   236,     0,   237,   651,     0,   238,   239,     0,
       0,     0,   652,   241,   242,   243,   653,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   654,   248,   249,
     655,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   656,   259,   260,     0,     0,     0,     0,     0,
     657,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   658,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   659,   282,   283,   284,   285,   660,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   661,   293,     0,
       0,   662,   295,   663,   296,     0,   297,   664,   665,   666,
     667,   668,   302,   303,   304,   305,     0,   669,   306,   307,
       0,     0,   308,   309,   310,   311,   670,   671,   672,   312,
     313,     0,   673,   674,     0,   675,     0,   314,   315,   676,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   677,
     324,   325,   326,   327,   328,   678,   679,   680,   330,   331,
     332,   681,   682,   335,   683,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   684,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   685,   686,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,   687,   367,   368,
     369,   370,   371,   688,   373,   374,   375,     0,   689,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,   690,   691,   400,   401,     0,   402,   692,
     404,   405,   406,   693,   694,   407,   408,   409,   410,   695,
     411,   412,     0,     0,   413,   414,   415,     0,   696,   416,
     417,     0,   697,   698,   699,   700,     0,     0,     0,     0,
       0,   422,   423,     0,   701,   702,   703,   425,   426,   427,
     704,     0,   428,   429,   705,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   706,
     438,     0,     0,   707,   708,   709,   710,   439,     0,     0,
     440,   711,     0,   712,   441,   442,   443,   713,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     714,     0,     0,     0,   715,   716,     0,     0,     0,     0,
     717,   718,     0,     0,   719,   720,     0,     0,   721,   722,
     138,     0,   617,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,   620,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
       0,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,   643,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,   655,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,   671,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,     0,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,  1044,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   617,   140,   141,
     142,   143,  1597,     0,     0,     0,     0,  1598,     0,     0,
     618,     0,   146,   147,   148,   149,   150,   619,   152,     0,
     153,     0,     0,   620,   154,   621,   622,   623,   155,   624,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   625,   626,   163,     0,   164,   627,   628,   166,
       0,   167,   168,   169,   629,   171,     0,   630,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   631,   184,     0,   185,   632,   633,   186,     0,     0,
     187,   634,     0,   635,     0,   636,   637,     0,   188,   189,
     190,   638,   639,   640,     0,     0,     0,     0,   641,   193,
     642,     0,     0,   643,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   644,     0,   217,   218,   219,
     645,   646,   220,   221,     0,   222,   223,   224,   647,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   648,   231,   649,   233,     0,   234,     0,   650,
       0,   235,   236,     0,   237,   651,     0,   238,   239,     0,
       0,     0,   652,   241,   242,   243,   653,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   654,   248,   249,
     655,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   656,   259,   260,     0,     0,     0,     0,     0,
     657,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   658,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   659,   282,   283,   284,   285,   660,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   661,   293,     0,
       0,   662,   295,   663,   296,     0,   297,   664,   665,   666,
     667,   668,   302,   303,   304,   305,     0,   669,   306,   307,
       0,     0,   308,   309,   310,   311,   670,     0,   672,   312,
     313,     0,   673,   674,     0,   675,     0,   314,   315,   676,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   677,
     324,   325,   326,   327,   328,   678,   679,   680,   330,   331,
     332,   681,   682,   335,   683,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   684,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   685,   686,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,   687,   367,   368,
     369,   370,   371,   688,   373,   374,   375,     0,   689,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,   690,   691,   400,   401,     0,   402,   692,
     404,   405,   406,   693,   694,   407,   408,   409,   410,   695,
     411,   412,     0,     0,   413,   414,   415,     0,   696,   416,
     417,     0,   697,   698,   699,   700,     0,     0,     0,     0,
       0,   422,   423,     0,   701,   702,   703,   425,   426,   427,
     704,     0,   428,   429,   705,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   706,
     438,     0,     0,   707,   708,   709,   710,   439,     0,     0,
     440,   711,     0,   712,   441,   442,   443,   713,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     714,     0,     0,     0,   715,   716,     0,     0,     0,     0,
     717,   718,     0,     0,   719,   720,     0,     0,   721,   722,
     138,     0,   617,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,   620,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
       0,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,   643,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,  2440,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,   671,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,     0,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,   718,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   617,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     618,     0,   146,   147,   148,   149,   150,   619,   152,     0,
     153,     0,     0,   620,   154,   621,   622,   623,   155,   624,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   625,   626,   163,     0,   164,   627,   628,   166,
       0,   167,   168,   169,   629,   171,     0,   630,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   631,   184,     0,   185,   632,   633,   186,     0,     0,
     187,   634,     0,   635,     0,   636,   637,     0,   188,   189,
     190,   638,   639,   640,     0,     0,     0,     0,   641,   193,
     642,     0,     0,   643,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   644,     0,   217,   218,   219,
     645,   646,   220,   221,     0,   222,   223,   224,   647,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   648,   231,   649,   233,     0,   234,     0,   650,
       0,   235,   236,     0,   237,   651,     0,   238,   239,     0,
       0,     0,   652,   241,   242,   243,   653,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   654,   248,   249,
    2499,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   656,   259,   260,     0,     0,     0,     0,     0,
     657,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   658,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   659,   282,   283,   284,   285,   660,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   661,   293,     0,
       0,   662,   295,   663,   296,     0,   297,   664,   665,   666,
     667,   668,   302,   303,   304,   305,     0,   669,   306,   307,
       0,     0,   308,   309,   310,   311,   670,   671,   672,   312,
     313,     0,   673,   674,     0,   675,     0,   314,   315,   676,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   677,
     324,   325,   326,   327,   328,   678,   679,   680,   330,   331,
     332,   681,   682,   335,   683,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   684,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   685,   686,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,   687,   367,   368,
     369,   370,   371,   688,   373,   374,   375,     0,   689,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,   690,   691,   400,   401,     0,   402,   692,
     404,   405,   406,   693,   694,   407,   408,   409,   410,   695,
     411,   412,     0,     0,   413,   414,   415,     0,   696,   416,
     417,     0,   697,   698,   699,   700,     0,     0,     0,     0,
       0,   422,   423,     0,   701,   702,   703,   425,   426,   427,
     704,     0,   428,   429,   705,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   706,
     438,     0,     0,   707,   708,   709,   710,   439,     0,     0,
     440,   711,     0,   712,   441,   442,   443,   713,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     714,     0,     0,     0,   715,   716,     0,     0,     0,     0,
     717,   718,     0,     0,   719,   720,     0,     0,   721,   722,
     138,     0,   617,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,   620,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
       0,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,  3185,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,   655,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,   671,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,     0,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,   718,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   617,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     618,     0,   146,   147,   148,   149,   150,   619,   152,     0,
     153,     0,     0,   620,   154,   621,   622,   623,   155,   624,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   625,   626,   163,     0,   164,   627,   628,   166,
       0,   167,   168,   169,   629,   171,     0,   630,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   631,   184,     0,   185,   632,   633,   186,     0,     0,
     187,   634,     0,   635,     0,   636,   637,     0,   188,   189,
     190,   638,   639,   640,     0,     0,     0,     0,   641,   193,
     642,     0,     0,   643,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   644,     0,   217,   218,   219,
     645,   646,   220,   221,     0,   222,   223,   224,   647,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   648,   231,   649,   233,     0,   234,     0,   650,
       0,   235,   236,     0,   237,   651,     0,   238,   239,     0,
       0,     0,   652,   241,   242,   243,   653,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   654,   248,   249,
     655,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   656,   259,   260,     0,     0,     0,     0,     0,
     657,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   658,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   659,   282,   283,   284,   285,   660,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   661,   293,     0,
       0,   662,   295,   663,   296,     0,   297,   664,   665,   666,
     667,   668,   302,   303,   304,   305,     0,   669,   306,   307,
       0,     0,   308,   309,   310,   311,   670,     0,   672,   312,
     313,     0,   673,   674,     0,   675,     0,   314,   315,   676,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   677,
     324,   325,   326,   327,   328,   678,   679,   680,   330,   331,
     332,   681,   682,   335,   683,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   684,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   685,   686,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,   687,   367,   368,
     369,   370,   371,   688,   373,   374,   375,     0,   689,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,   690,   691,   400,   401,     0,   402,   692,
     404,   405,   406,   693,   694,   407,   408,   409,   410,   695,
     411,   412,     0,     0,   413,   414,   415,     0,   696,   416,
     417,     0,   697,   698,   699,   700,     0,     0,     0,     0,
       0,   422,   423,     0,   701,   702,   703,   425,   426,   427,
     704,     0,   428,   429,   705,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   706,
     438,     0,     0,   707,   708,   709,   710,   439,     0,     0,
     440,   711,     0,   712,   441,   442,   443,   713,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     714,     0,     0,     0,   715,   716,     0,     0,     0,     0,
     717,   718,     0,     0,   719,   720,     0,     0,   721,   722,
     138,     0,   617,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,   620,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
       0,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,   643,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,  1612,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,     0,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,     0,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,   718,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   617,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     618,     0,   146,   147,   148,   149,   150,   619,   152,     0,
     153,     0,     0,   620,   154,   621,   622,   623,   155,   624,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   625,   626,   163,     0,   164,   627,   628,   166,
       0,   167,   168,   169,   629,   171,     0,   630,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   631,   184,     0,   185,   632,   633,   186,     0,     0,
     187,   634,     0,   635,     0,   636,   637,     0,   188,   189,
     190,   638,   639,   640,     0,     0,     0,     0,   641,   193,
     642,     0,     0,   643,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   644,     0,   217,   218,   219,
     645,   646,   220,   221,     0,   222,   223,   224,   647,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   648,   231,   649,   233,     0,   234,     0,   650,
       0,   235,   236,     0,   237,   651,     0,   238,   239,     0,
       0,     0,   652,   241,   242,   243,   653,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   654,   248,   249,
    1614,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   656,   259,   260,     0,     0,     0,     0,     0,
     657,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   658,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   659,   282,   283,   284,   285,   660,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   661,   293,     0,
       0,   662,   295,   663,   296,     0,   297,   664,   665,   666,
     667,   668,   302,   303,   304,   305,     0,   669,   306,   307,
       0,     0,   308,   309,   310,   311,   670,     0,   672,   312,
     313,     0,   673,   674,     0,   675,     0,   314,   315,   676,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   677,
     324,   325,   326,   327,   328,   678,   679,   680,   330,   331,
     332,   681,   682,   335,   683,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   684,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   685,   686,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,   687,   367,   368,
     369,   370,   371,   688,   373,   374,   375,     0,   689,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,   690,   691,   400,   401,     0,   402,   692,
     404,   405,   406,   693,   694,   407,   408,   409,   410,   695,
     411,   412,     0,     0,   413,   414,   415,     0,   696,   416,
     417,     0,   697,   698,   699,   700,     0,     0,     0,     0,
       0,   422,   423,     0,   701,   702,   703,   425,   426,   427,
     704,     0,   428,   429,   705,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   706,
     438,     0,     0,   707,   708,   709,   710,   439,     0,     0,
     440,   711,     0,   712,   441,   442,   443,   713,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     714,     0,     0,     0,   715,   716,     0,     0,     0,     0,
     717,   718,     0,     0,   719,   720,     0,     0,   721,   722,
     138,     0,   617,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   618,     0,   146,   147,   148,
     149,   150,   619,   152,     0,   153,     0,     0,   620,   154,
     621,   622,   623,   155,   624,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   625,   626,   163,
       0,   164,   627,   628,   166,     0,   167,   168,   169,   629,
     171,     0,   630,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   631,   184,     0,   185,
     632,   633,   186,     0,     0,   187,   634,     0,   635,     0,
     636,   637,     0,   188,   189,   190,   638,   639,   640,     0,
       0,     0,     0,   641,   193,   642,     0,     0,   643,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     644,     0,   217,   218,   219,   645,   646,   220,   221,     0,
     222,   223,   224,   647,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   648,   231,   649,
     233,     0,   234,     0,   650,     0,   235,   236,     0,   237,
     651,     0,   238,   239,     0,     0,     0,   652,   241,   242,
     243,   653,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   654,   248,   249,   655,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   656,   259,   260,
       0,     0,     0,     0,     0,   657,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   658,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   659,   282,   283,
     284,   285,   660,   286,   287,  4018,     0,     0,     0,   289,
     290,   291,   661,   293,     0,     0,   662,   295,   663,   296,
       0,   297,   664,   665,   666,   667,   668,   302,   303,   304,
     305,     0,   669,   306,   307,     0,     0,   308,   309,   310,
     311,   670,     0,   672,   312,   313,     0,   673,   674,     0,
     675,     0,   314,   315,   676,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   677,   324,   325,   326,   327,   328,
     678,   679,   680,   330,   331,   332,   681,   682,   335,   683,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   684,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   685,
     686,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,   687,   367,   368,   369,   370,   371,   688,   373,
     374,   375,     0,   689,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,   690,   691,
     400,   401,     0,   402,   692,   404,   405,   406,   693,   694,
     407,   408,   409,   410,   695,   411,   412,     0,     0,   413,
     414,   415,     0,   696,   416,   417,     0,   697,   698,   699,
     700,     0,     0,     0,     0,     0,   422,   423,     0,   701,
     702,   703,   425,   426,   427,   704,     0,   428,   429,   705,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   706,   438,     0,     0,   707,   708,
     709,   710,   439,     0,     0,   440,   711,     0,   712,   441,
     442,   443,   713,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,     0,   714,     0,     0,     0,   715,
     716,     0,     0,     0,     0,   717,   718,     0,     0,   719,
     720,     0,     0,   721,   722,   138,     0,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
    2285,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,   461,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
    1384,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,  1385,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,  2806,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,  2807,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
    -403,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,   464,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     449,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,  2350,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,  2285,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,   461,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,  1384,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,  1385,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,   464,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,     0,   449,     0,
       0,   138,     0,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,  2350,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,  2172,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,   424,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   449,     0,     0,   138,
       0,   139,   140,   141,   142,   143,     0,     0,  2585,     0,
       0,   144,     0,     0,   145,   722,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   449,     0,     0,     0,     0,   138,
       0,   139,   140,   141,   142,   143,  4164,     0,     0,     0,
       0,   144,  4165,   722,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   449,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,  1048,     0,     0,     0,   144,
       0,     0,   145,   722,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,  1240,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,     0,   449,     0,     0,   138,     0,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,   495,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     449,     0,     0,     0,     0,   138,  2115,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,   495,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     449,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,  2349,     0,     0,     0,   144,     0,     0,   145,  2350,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,     0,   449,     0,
       0,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,  4165,   722,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,     0,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,     0,     0,     0,   424,   425,   426,   427,     0,     0,
     428,   429,     0,   430,   431,     0,   432,   433,     0,     0,
     434,     0,     0,   435,     0,   436,     0,   437,   438,     0,
       0,     0,     0,     0,     0,   439,     0,     0,   440,     0,
       0,     0,   441,   442,   443,   444,     0,     0,     0,     0,
       0,   445,   446,     0,   447,   448,     0,     0,   449,     0,
       0,   138,     0,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,   495,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   555,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   556,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,     0,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,     0,
       0,     0,   424,   425,   426,   427,     0,     0,   428,   429,
       0,   430,   431,     0,   432,   433,     0,     0,   434,     0,
       0,   435,     0,   436,     0,   437,   438,     0,     0,     0,
       0,     0,     0,   439,     0,     0,   440,     0,     0,     0,
     441,   442,   443,   444,     0,     0,     0,     0,     0,   445,
     446,     0,   447,   448,     0,     0,   449,     0,     0,   138,
       0,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,   495,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   449,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,   722,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,     0,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,     0,     0,     0,   424,   425,
     426,   427,     0,     0,   428,   429,     0,   430,   431,     0,
     432,   433,     0,     0,   434,     0,     0,   435,     0,   436,
       0,   437,   438,     0,     0,     0,     0,     0,     0,   439,
       0,     0,   440,     0,     0,     0,   441,   442,   443,   444,
       0,     0,     0,     0,     0,   445,   446,     0,   447,   448,
       0,     0,   449,     0,     0,   138,     0,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,  2350,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,   567,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
       0,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,   135,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,     0,     0,     0,   424,   425,   426,   427,
       0,     0,   428,   429,     0,   430,   431,     0,   432,   433,
       0,     0,   434,     0,     0,   435,     0,   436,     0,   437,
     438,     0,     0,     0,     0,     0,     0,   439,     0,     0,
     440,     0,     0,     0,   441,   442,   443,   444,     0,     0,
       0,     0,     0,   445,   446,     0,   447,   448,     0,     0,
     449,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,  1584,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,   567,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,   135,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,     0,   449,     0,   138,
       0,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,  2623,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,   567,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,     0,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,   135,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,     0,     0,     0,
     424,   425,   426,   427,     0,     0,   428,   429,     0,   430,
     431,     0,   432,   433,     0,     0,   434,     0,     0,   435,
       0,   436,     0,   437,   438,     0,     0,     0,     0,     0,
       0,   439,     0,     0,   440,     0,     0,     0,   441,   442,
     443,   444,     0,     0,     0,     0,     0,   445,   446,     0,
     447,   448,     0,     0,   449,     0,   138,     0,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,  3215,   146,   147,   148,   149,   150,   151,     0,
       0,  -295,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,     0,     0,
       0,     0,   162,  3644,     0,   163,     0,   164,     0,     0,
       0,     0,   167,   168,  3645,   170,   171,     0,   172,   173,
       0,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,     0,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3646,   222,   223,   224,     0,
       0,     0,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,     0,   236,     0,     0,     0,     0,     0,   239,
       0,     0,     0,   240,   241,   242,   243,  3647,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
       0,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,  3648,     0,     0,   255,     0,     0,     0,   257,     0,
       0,   258,  3649,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,  -250,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
       0,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,  3650,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   325,   326,   327,     0,   329,     0,     0,   330,
     331,   332,   333,   334,     0,     0,     0,     0,     0,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
       0,     0,   358,     0,   360,  -250,     0,   361,     0,     0,
     363,     0,     0,     0,   365,   366,  3651,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,     0,   399,     0,     0,     0,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,     0,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,     0,
       0,     0,     0,   434,     0,     0,   435,     0,     0,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,  -250,     0,     0,   445,     0,     0,   447,     0,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,  4190,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,  1962,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,  2611,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,  2912,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,  3220,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,  2264,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,  2265,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,  2266,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,  2267,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,   964,   965,     0,
     312,   313,     0,     0,     0,     0,  2268,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,  4174,  4158,  4175,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,  2269,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,  2460,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  2617,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,  2100,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
     567,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,  2101,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,   135,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,  2625,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,  2626,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,   567,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,   135,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,  2460,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  2617,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,   567,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,   135,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
     924,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,   567,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,   135,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,  1278,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   567,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,   135,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
     902,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
     903,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,   904,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,  2460,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,   567,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,   135,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  2664,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,   567,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,   135,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,   567,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,   135,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,  2607,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,   135,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,  4091,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,  4092,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,  1000,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  1380,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
    2197,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,  2198,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,  2360,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,  2704,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   335,     0,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,     0,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,   424,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,   432,   433,     0,     0,   434,     0,     0,
     435,     0,   436,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,   446,
       0,   447,   448,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,     0,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,     0,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,   135,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,   424,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,   432,   433,     0,
       0,   434,     0,     0,   435,     0,   436,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,     0,
       0,     0,   445,   446,     0,   447,   448,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  2197,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   335,     0,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,     0,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,   424,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,   432,   433,     0,     0,   434,     0,     0,   435,     0,
     436,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,     0,     0,     0,   445,   446,     0,   447,
     448,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,     0,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,     0,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,   424,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,   432,   433,     0,     0,   434,
       0,     0,   435,     0,   436,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,     0,     0,     0,
     445,   446,     0,   447,   448,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,  1662,   224,     0,
       0,   225,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,  1663,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   335,     0,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,     0,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,   424,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,   432,
     433,     0,     0,   434,     0,     0,   435,     0,   436,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,     0,     0,     0,   445,   446,     0,   447,   448,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,     0,  -295,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,     0,     0,     0,     0,   162,  3644,     0,   163,
       0,   164,     0,     0,     0,     0,   167,   168,  3645,   170,
     171,     0,   172,   173,     0,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,     0,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,  -265,  -265,   205,     0,  -265,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,  3646,
     222,   223,   224,     0,     0,     0,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,   239,     0,     0,     0,   240,   241,   242,
     243,  3647,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,     0,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,  3648,     0,     0,   255,     0,
       0,     0,   257,     0,     0,   258,  3649,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,  -250,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,     0,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,  3650,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,     0,     0,   330,   331,   332,   333,   334,     0,     0,
       0,     0,     0,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,     0,     0,   358,     0,   360,  -250,
       0,   361,     0,     0,   363,     0,     0,     0,   365,   366,
    3651,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,     0,   399,     0,     0,
       0,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,     0,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,     0,     0,     0,     0,   434,     0,     0,
     435,     0,     0,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,  -250,     0,     0,   445,     0,
       0,   447,     0,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,     0,  -295,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,     0,     0,     0,     0,
     162,  3644,     0,   163,     0,   164,     0,     0,     0,     0,
     167,   168,  3645,   170,   171,     0,   172,   173,     0,     0,
     175,     0,   177,   178,   179,   180,     0,   181,   182,     0,
       0,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,  -286,     0,   205,     0,  -286,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,  3646,   222,   223,   224,     0,     0,     0,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
       0,   236,     0,     0,     0,     0,     0,   239,     0,     0,
       0,   240,   241,   242,   243,  3647,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,     0,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,  3648,
       0,     0,   255,     0,     0,     0,   257,     0,     0,   258,
    3649,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,  -250,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,     0,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,  3650,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,     0,     0,   330,   331,   332,
     333,   334,     0,     0,     0,     0,     0,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,     0,     0,
     358,     0,   360,  -250,     0,   361,     0,     0,   363,     0,
       0,     0,   365,   366,  3651,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
       0,   399,     0,     0,     0,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,     0,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,     0,     0,     0,
       0,   434,     0,     0,   435,     0,     0,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,  -286,     0,  -250,
       0,     0,   445,     0,     0,   447,     0,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -295,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3644,     0,   163,     0,   164,
       0,     0,     0,     0,   167,   168,  3645,   170,   171,     0,
     172,   173,     0,     0,   175,     0,   177,   178,   179,   180,
       0,   181,   182,     0,     0,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,     0,     0,     0,   202,   203,   204,     0,  -283,
       0,   205,     0,  -283,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,     0,     0,     0,
     217,   218,   219,     0,     0,   220,   221,  3646,   222,   223,
     224,     0,     0,     0,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,     0,   236,     0,     0,     0,     0,
       0,   239,     0,     0,     0,   240,   241,   242,   243,  3647,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,     0,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,  3648,     0,     0,   255,     0,     0,     0,
     257,     0,     0,   258,  3649,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,  -250,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,  3650,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   325,   326,   327,     0,   329,     0,
       0,   330,   331,   332,   333,   334,     0,     0,     0,     0,
       0,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,     0,     0,   358,     0,   360,  -250,     0,   361,
       0,     0,   363,     0,     0,     0,   365,   366,  3651,     0,
       0,     0,   368,   369,   370,   371,   372,   373,     0,   375,
       0,   376,     0,     0,     0,     0,   378,   379,   380,     0,
       0,     0,     0,   382,     0,     0,     0,   383,     0,   385,
       0,     0,   387,     0,     0,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,     0,   399,     0,     0,     0,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,     0,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,     0,     0,     0,     0,   434,     0,     0,   435,     0,
       0,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,  -283,     0,  -250,     0,     0,   445,     0,     0,   447,
       0,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,     0,  -295,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,     0,     0,     0,     0,   162,  3644,
       0,   163,     0,   164,     0,     0,     0,     0,   167,   168,
    3645,   170,   171,     0,   172,   173,     0,     0,   175,     0,
     177,   178,   179,   180,     0,   181,   182,     0,     0,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,     0,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,     0,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,  3994,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,     0,     0,     0,   217,   218,   219,     0,     0,   220,
     221,  3646,   222,   223,   224,     0,     0,     0,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,     0,   236,
       0,     0,     0,     0,     0,   239,     0,     0,     0,   240,
     241,   242,   243,  3647,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,     0,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,  3648,     0,     0,
     255,     0,     0,     0,   257,     0,     0,   258,  3649,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
    -250,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,     0,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
    3650,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   325,   326,
     327,     0,   329,     0,     0,   330,   331,   332,   333,   334,
       0,     0,     0,     0,     0,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,     0,     0,   358,     0,
     360,  -250,     0,   361,     0,     0,   363,     0,     0,     0,
     365,   366,  3651,     0,     0,     0,   368,   369,   370,   371,
     372,   373,     0,   375,     0,   376,     0,     0,     0,     0,
     378,   379,   380,     0,     0,     0,     0,   382,     0,     0,
       0,   383,     0,   385,     0,     0,   387,     0,     0,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,     0,   399,
       0,     0,     0,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,     0,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,     0,     0,     0,     0,   434,
       0,     0,   435,     0,     0,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,  -250,     0,     0,
     445,     0,     0,   447,     0,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,  -295,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,     0,     0,
       0,     0,   162,  3644,     0,   163,     0,   164,     0,     0,
       0,     0,   167,   168,  3645,   170,   171,     0,   172,   173,
       0,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,     0,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,  -288,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3646,   222,   223,   224,     0,
       0,     0,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,     0,   236,     0,     0,     0,     0,     0,   239,
       0,     0,     0,   240,   241,   242,   243,  3647,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
       0,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,  3648,     0,     0,   255,     0,     0,     0,   257,     0,
       0,   258,  3649,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,  -250,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
       0,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,  3650,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   325,   326,   327,     0,   329,     0,     0,   330,
     331,   332,   333,   334,     0,     0,     0,     0,     0,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
       0,     0,   358,     0,   360,  -250,     0,   361,     0,     0,
     363,     0,     0,     0,   365,   366,  3651,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,     0,   399,     0,     0,     0,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,     0,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,     0,
       0,     0,     0,   434,     0,     0,   435,     0,     0,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,  -250,     0,     0,   445,     0,     0,   447,     0,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,     0,  -295,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,     0,     0,     0,     0,   162,  3644,     0,   163,
       0,   164,     0,     0,     0,     0,   167,   168,  3645,   170,
     171,     0,   172,   173,     0,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,     0,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,  4096,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,  3646,
     222,   223,   224,     0,     0,     0,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,   239,     0,     0,     0,   240,   241,   242,
     243,  3647,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,     0,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,  3648,     0,     0,   255,     0,
       0,     0,   257,     0,     0,   258,  3649,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,  -250,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,     0,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,  3650,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,     0,     0,   330,   331,   332,   333,   334,     0,     0,
       0,     0,     0,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,     0,     0,   358,     0,   360,  -250,
       0,   361,     0,     0,   363,     0,     0,     0,   365,   366,
    3651,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,     0,   399,     0,     0,
       0,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,     0,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,     0,     0,     0,     0,   434,     0,     0,
     435,     0,     0,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,  -250,     0,     0,   445,     0,
       0,   447,     0,     0,   138,   449,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,     0,  -295,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,     0,     0,     0,     0,
     162,  3644,     0,   163,     0,   164,     0,     0,     0,     0,
     167,   168,  3645,   170,   171,     0,   172,   173,     0,     0,
     175,     0,   177,   178,   179,   180,     0,   181,   182,     0,
       0,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,  4138,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,  3646,   222,   223,   224,     0,     0,     0,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
       0,   236,     0,     0,     0,     0,     0,   239,     0,     0,
       0,   240,   241,   242,   243,  3647,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,     0,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,  3648,
       0,     0,   255,     0,     0,     0,   257,     0,     0,   258,
    3649,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,  -250,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,     0,   313,
       0,     0,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,  3650,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,     0,     0,   330,   331,   332,
     333,   334,     0,     0,     0,     0,     0,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,     0,     0,
     358,     0,   360,  -250,     0,   361,     0,     0,   363,     0,
       0,     0,   365,   366,  3651,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,   395,     0,     0,   396,     0,     0,   397,
       0,   399,     0,     0,     0,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,     0,     0,     0,     0,   425,   426,   427,     0,
       0,   428,   429,     0,   430,   431,     0,     0,     0,     0,
       0,   434,     0,     0,   435,     0,     0,     0,   437,   438,
       0,     0,     0,     0,     0,     0,   439,     0,     0,   440,
       0,     0,     0,   441,   442,   443,   444,     0,     0,  -250,
       0,     0,   445,     0,     0,   447,     0,     0,   138,   449,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -295,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3644,     0,   163,     0,   164,
       0,     0,     0,     0,   167,   168,  3645,   170,   171,     0,
     172,   173,     0,     0,   175,     0,   177,   178,   179,   180,
       0,   181,   182,     0,     0,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,     0,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,  -269,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,     0,     0,     0,
     217,   218,   219,     0,     0,   220,   221,  3646,   222,   223,
     224,     0,     0,     0,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,     0,   236,     0,     0,     0,     0,
       0,   239,     0,     0,     0,   240,   241,   242,   243,  3647,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,     0,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,  3648,     0,     0,   255,     0,     0,     0,
     257,     0,     0,   258,  3649,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,  -250,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,  3650,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   325,   326,   327,     0,   329,     0,
       0,   330,   331,   332,   333,   334,     0,     0,     0,     0,
       0,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,     0,     0,   358,     0,   360,  -250,     0,   361,
       0,     0,   363,     0,     0,     0,   365,   366,  3651,     0,
       0,     0,   368,   369,   370,   371,   372,   373,     0,   375,
       0,   376,     0,     0,     0,     0,   378,   379,   380,     0,
       0,     0,     0,   382,     0,     0,     0,   383,     0,   385,
       0,     0,   387,     0,     0,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,   395,     0,     0,
     396,     0,     0,   397,     0,   399,     0,     0,     0,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,     0,
     425,   426,   427,     0,     0,   428,   429,     0,   430,   431,
       0,     0,     0,     0,     0,   434,     0,     0,   435,     0,
       0,     0,   437,   438,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   440,     0,     0,     0,   441,   442,   443,
     444,     0,     0,  -250,     0,     0,   445,     0,     0,   447,
       0,     0,   138,   449,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,     0,  -295,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,     0,     0,     0,     0,   162,  3644,
       0,   163,     0,   164,     0,     0,     0,     0,   167,   168,
    3645,   170,   171,     0,   172,   173,     0,     0,   175,     0,
     177,   178,   179,   180,     0,   181,   182,     0,     0,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,     0,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,     0,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,     0,     0,     0,   217,   218,   219,     0,     0,   220,
     221,  3646,   222,   223,   224,     0,     0,     0,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,     0,   236,
       0,     0,     0,     0,     0,   239,     0,     0,     0,   240,
     241,   242,   243,  3647,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,     0,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,  3648,     0,     0,
     255,     0,     0,     0,   257,     0,     0,   258,  3649,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
    -250,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,     0,   313,     0,     0,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
    3650,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   325,   326,
     327,     0,   329,     0,     0,   330,   331,   332,   333,   334,
       0,     0,     0,     0,     0,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,     0,     0,   358,     0,
     360,  -250,     0,   361,     0,     0,   363,     0,     0,     0,
     365,   366,  3651,     0,     0,     0,   368,   369,   370,   371,
     372,   373,     0,   375,     0,   376,     0,     0,     0,     0,
     378,   379,   380,     0,     0,     0,     0,   382,     0,     0,
       0,   383,     0,   385,     0,     0,   387,     0,     0,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,   395,     0,     0,   396,     0,     0,   397,     0,   399,
       0,     0,     0,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
       0,     0,     0,     0,   425,   426,   427,     0,     0,   428,
     429,     0,   430,   431,     0,     0,     0,     0,     0,   434,
       0,     0,   435,     0,     0,     0,   437,   438,     0,     0,
       0,     0,     0,     0,   439,     0,     0,   440,     0,     0,
       0,   441,   442,   443,   444,     0,     0,  -250,     0,     0,
     445,     0,     0,   447,     0,     0,   138,   449,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,  -295,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,     0,     0,
       0,     0,   162,  3644,     0,   163,     0,   164,     0,     0,
       0,     0,   167,   168,  3645,   170,   171,     0,   172,   173,
       0,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,     0,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3646,   222,   223,   224,     0,
       0,     0,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,     0,   236,     0,     0,     0,     0,     0,   239,
       0,     0,     0,   240,   241,   242,   243,  3647,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
       0,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,  3648,     0,     0,   255,     0,     0,     0,   257,     0,
       0,   258,  3649,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,  -250,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
       0,   313,     0,     0,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,  3650,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   325,   326,   327,     0,   329,     0,     0,   330,
     331,   332,   333,   334,     0,     0,     0,     0,     0,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
       0,     0,   358,     0,   360,  -250,     0,   361,     0,     0,
     363,     0,     0,     0,   365,   366,  3651,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,   395,     0,     0,   396,     0,
       0,   397,     0,   399,     0,     0,     0,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,     0,     0,     0,     0,   425,   426,
     427,     0,     0,   428,   429,     0,   430,   431,     0,     0,
       0,     0,     0,   434,     0,     0,  3997,     0,     0,     0,
     437,   438,     0,     0,     0,     0,     0,     0,   439,     0,
       0,   440,     0,     0,     0,   441,   442,   443,   444,     0,
       0,  -250,     0,     0,   445,     0,     0,   447,     0,     0,
     138,   449,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,     0,     0,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,     0,     0,     0,     0,   162,     0,     0,   163,
       0,   164,     0,     0,     0,     0,   167,   168,     0,   170,
     171,     0,   172,   173,     0,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,     0,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,     0,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,     0,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,     0,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,     0,   313,     0,     0,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,     0,     0,   330,   331,   332,   333,   334,     0,     0,
       0,     0,     0,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,     0,     0,   358,     0,   360,     0,
       0,   361,     0,     0,   363,     0,     0,     0,   365,   366,
       0,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,   395,
       0,     0,   396,     0,     0,   397,     0,   399,     0,     0,
       0,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,     0,     0,
       0,     0,   425,   426,   427,     0,     0,   428,   429,     0,
     430,   431,     0,     0,     0,     0,     0,   434,     0,     0,
     435,     0,     0,     0,   437,   438,     0,     0,     0,     0,
       0,     0,   439,     0,     0,   440,     0,     0,     0,   441,
     442,   443,   444,     0,     0,     0,     0,     0,   445,     0,
       0,   447,     0,     0,     0,   449
};

static const yytype_int16 yycheck[] =
{
       7,   593,   738,   528,   528,   917,  1101,   602,   603,   831,
     635,   636,  1101,    20,     5,   549,    23,  1045,   918,   640,
    1679,   121,   620,  2023,  1004,    32,  1221,     7,  1072,   952,
    1816,   998,   999,    21,  1578,    42,   563,  1281,   478,   858,
     754,  2176,    30,  2207,  2592,   882,    53,   672,    36,  2133,
    2641,  2316,  1124,  2246,  2200,  2201,  2202,  1979,  3027,  1131,
    2663,  1642,  1984,   882,   922,   922,  2234,  1036,  1835,  2435,
     695,  1833,  1165,  1372,  1068,  1069,   697,  2342,  2998,   700,
    1957,  1764,   707,   708,   709,  2419,    93,  2421,  1132,  1133,
    1939,  3004,  1136,  1137,  1138,  1139,  1833,  1141,  1142,  1143,
    1144,  1145,  1146,  1147,  1148,  2211,  2212,  2191,   115,    23,
     117,   607,   535,   120,   121,   122,  1902,   715,   716,   717,
    2772,  1907,  1295,    16,  2311,  1788,  1789,  1913,  1914,   727,
     137,  1917,  1939,  2297,   726,    15,    16,   117,  2227,  1312,
     120,    18,  1805,  1364,   659,  1705,  2235,    33,    24,  1322,
    1323,  3060,  3061,    16,    50,  3064,  3252,  2321,  2322,  1822,
    1823,  1354,    15,    16,  1888,    15,    16,  1678,  1836,    15,
      16,  1961,  1840,  1928,  3083,  1838,  1839,  1939,  1841,    93,
    3089,  1844,  1845,  1851,    58,  1848,    89,  2451,    60,   127,
    1853,  2455,    29,  1861,  1857,  1858,  1859,  1860,   581,   856,
     148,  1864,  1939,  1866,    35,  1426,   589,   590,    20,  1872,
      15,    16,  1875,  1876,  1877,  1987,  2290,    18,    35,    97,
      20,    33,  2279,   137,    10,   113,   883,    71,   233,   756,
      57,    58,  1825,    33,   158,    47,   884,    65,  2275,  2276,
    2012,    65,    20,   113,  2016,    57,    58,    47,   843,   142,
    1807,    18,  1779,    60,   142,   130,  1451,    57,    58,   224,
    1923,  1924,  1925,  1926,    62,   142,    11,  2039,  2040,   146,
      63,  1364,   142,  2045,   136,    66,  2423,    15,    16,    57,
      58,  3201,   246,   363,    33,    99,   813,   136,   180,    60,
    2062,  2063,   113,  3558,    15,    16,   343,  1033,  2694,   924,
     207,   173,    15,    16,   595,   417,    15,    16,   207,   349,
     213,    18,    15,    16,   424,   399,  2454,   338,   440,   171,
      51,   142,  2094,   440,    15,    16,   280,    12,   231,    60,
     391,   177,   440,  1426,    22,    12,   212,   177,    12,   242,
      41,     8,  2219,    15,    16,   146,   114,    15,    16,   231,
      61,  1087,   253,  2390,  2391,  1091,   508,   247,   177,   150,
     242,   136,   158,   463,   195,   264,   125,    15,    16,   114,
     431,   174,   177,   117,   757,   349,   177,  3286,   195,   146,
    3349,   976,   977,   978,   158,   540,  3295,   152,   552,   329,
     519,   500,   152,    40,   503,   818,   210,  2187,   100,   499,
     177,   103,   173,    15,    16,    50,  3315,   117,   192,   508,
     286,  3320,  2398,   316,   528,   180,  2233,   391,   481,   142,
     180,   210,   485,    15,    16,    15,    16,  2293,   592,   593,
     331,    15,    16,   134,  1334,   389,   142,   592,   552,   146,
     549,   126,   825,   142,  3357,   171,   598,   224,  1162,   126,
     234,   535,   126,   256,  2240,   223,   463,   431,   465,   349,
     751,   215,    15,    16,   593,   153,   390,   407,   348,   591,
     224,   351,    15,    16,   591,   482,    15,    16,  2624,   486,
    2648,   593,  2585,   591,   207,  3261,   313,   595,   495,   599,
     382,   390,   499,    24,   501,  3415,  1354,  1354,   348,   166,
     507,   351,   348,   457,   323,   351,   513,   217,   380,   172,
    2656,   591,  2298,   420,  2300,    15,    16,  2279,   229,  2712,
    1035,  2307,   253,   375,   427,    90,   422,  1346,   535,   536,
      74,   280,   593,  1048,  2320,  1127,   295,  1135,   365,  1632,
    2326,   247,  2279,   348,   207,   427,   351,   554,   247,  2398,
    3463,   131,   599,   593,  1152,  2341,   563,   264,   565,   350,
    2437,    15,    16,   946,  3829,  1609,   571,  1425,  1425,   576,
     577,  2295,   593,   448,   581,  2299,  1620,  1017,  1018,  1623,
     587,  1880,   589,   590,   487,  1758,  1807,   594,   595,  2313,
    2314,  2398,   599,   507,   390,   402,   382,   577,  1038,  2323,
     354,   394,   609,   610,   611,   569,   351,  1047,   615,   380,
     348,   503,  1833,   351,  3205,  3011,   390,  2691,   566,  1059,
    1060,  1061,  2696,  2697,  2681,  2349,   550,   348,   593,  1286,
     351,  1071,  1289,  2193,  1603,   348,  2398,  2392,   351,   348,
    1297,  2715,   351,  2306,  2434,   348,  3249,  2158,   351,   375,
    1364,  3564,   659,   753,   482,  2318,   519,   348,   482,   457,
     351,  2398,   576,    15,    16,  2812,   604,  1324,  1325,   541,
    2442,  1319,    15,    16,  2809,  3771,   348,   508,   571,   351,
     348,   212,   519,   351,  2277,   559,   564,   394,   532,   503,
     476,   508,   415,   596,  2466,  2419,  2468,   593,   578,  2226,
     348,  2258,   552,   351,   597,   591,   568,  1928,  2480,   597,
    2482,  3680,  1426,   720,  1807,   722,   596,   593,  1939,   568,
     597,  2598,  2599,    15,    16,   578,   538,   597,   578,  1922,
    2389,  2503,   578,  2396,    15,    16,   348,   523,   538,   351,
     747,   748,   749,   593,   751,   752,   753,   593,   755,   756,
     757,  2788,   519,   593,   550,   286,   348,   857,   348,   351,
     538,   351,   562,  1290,   348,    15,    16,   351,   748,  2541,
     541,   598,   752,   578,  1270,   755,   597,   422,   564,   490,
    3044,  3384,  3695,    15,    16,   792,    68,   592,  1171,  1212,
    2936,   591,   593,   568,  3707,   348,   803,   593,   351,   330,
      15,    16,   546,  2789,  2939,   348,   813,   814,   351,   348,
     512,   818,   351,   515,  3078,  3079,   807,  1240,   825,   593,
    2988,   468,  3086,  2689,  2992,   263,    15,    16,  2974,  3093,
      15,    16,  2649,  2650,  1358,  1928,   546,  3750,   592,  2942,
     578,  1224,   489,    15,    16,  3814,  1939,  3034,   348,  3625,
     857,   351,    15,    16,   592,   593,  1239,   578,  3620,   585,
     440,    15,    16,   569,   429,   578,  2950,   514,   575,   578,
     569,  3780,   593,  3782,   597,   578,   280,   180,  3244,   592,
     593,    42,    78,   592,   593,  3537,   146,   578,   551,   803,
     593,   597,   436,   317,   348,    15,    16,   351,   597,  2988,
     814,   592,   593,  2992,  3042,  3043,   578,   207,   264,  3554,
     578,   918,  3050,    15,    16,  3053,  3054,  3830,  1755,  2681,
     592,   593,   231,   172,  2924,   593,    15,    16,  1851,    45,
     578,   573,  3070,   114,  3008,   178,  1755,   330,  1434,   946,
    2789,  2818,   949,   950,  2681,   593,  3084,  1784,   282,   139,
    3541,  3089,  3090,  3091,  3092,   486,  1379,  2640,   207,   149,
     370,   198,   290,   469,  2008,  1784,   578,  2211,  2212,    66,
      15,    16,   127,    54,    15,    16,   414,   110,  3810,    50,
     592,   593,  2789,  1963,    89,  2752,   578,   113,   578,   996,
      15,    16,  3595,  1000,   578,   440,   348,    15,    16,   351,
     592,   593,   592,   593,  3766,   348,   340,  1522,   351,   593,
    2082,   591,    15,    16,  1114,   595,  3929,   110,  3938,  3353,
      15,    16,    15,    16,  1622,   578,   457,  2789,  1035,  3135,
    1470,  2025,   161,   210,   565,   578,   950,  2258,   394,   578,
     593,  1048,   223,  2238,  2579,  1579,  2345,  2220,   110,   592,
    2709,  1151,  2789,   482,   593,  3968,   348,   234,  2279,   351,
    2088,  2089,    15,    16,  1922,  1922,  3432,   348,  3236,  3237,
     351,   435,   174,   602,   603,   168,   192,   346,   578,   382,
     233,  2176,   996,  3229,   508,  2753,  1000,  2176,   370,   457,
     521,  1748,   592,  1807,  1101,  2867,  3648,  3649,   348,   605,
    1757,   351,   384,  1760,  1761,   440,    56,  1114,   213,  1704,
     534,  1638,  2081,  3716,   423,   415,   348,    61,   361,   351,
    2997,   440,  2091,   503,   578,  2660,   231,   144,   261,   316,
    1230,   560,   570,   348,    15,    16,   351,   242,  2719,   593,
    3688,  2236,    15,    16,  1151,   140,   591,  2236,    24,  1156,
      96,  4120,   307,   340,  1161,   316,    31,   347,    89,   348,
    1687,  1688,   351,   348,  1171,  2258,   351,   591,   261,    15,
      16,  2392,   565,    15,    16,   797,   348,  2398,   370,   351,
     132,    15,    16,  3828,    18,   348,    15,    16,   351,   449,
      15,    16,  1716,   389,   348,   212,   188,   351,     0,   261,
     503,  1208,   335,  1210,   333,  1212,   152,   333,   158,    15,
      16,   316,   162,   456,  1928,  3806,   111,  1224,   500,   575,
    3355,  3824,  1213,  1230,   174,  1939,   578,  3149,   348,  4061,
    2325,   351,  1239,  1240,   180,   578,  2325,    15,    16,   231,
     522,   593,   335,  1250,  2439,   482,   348,  1161,   329,   351,
     593,  1258,  3855,   350,    15,    16,   591,   591,   329,   348,
     317,  1361,   351,   591,  1271,  1272,  1273,  1274,  1275,  1276,
      15,    16,   591,   335,  1265,    15,    16,    15,    16,   901,
    1287,  1288,   213,  1290,  1197,   229,   578,  1200,   296,  1296,
    1203,  1271,  1272,  1273,  3018,  1275,   258,   578,     6,  2392,
     231,   593,   551,   348,   317,  2398,   351,   348,  1288,  1316,
     351,   242,   593,   330,  3038,   440,  1296,   507,   434,   142,
      15,    16,   427,   348,   146,   115,   351,   222,   578,   261,
     348,    15,    16,   351,   282,  3926,   212,    15,    16,    15,
      16,    15,    16,   593,   294,   348,   578,    55,   351,   224,
     312,   422,   174,   348,  1361,   348,   351,   349,   351,   207,
    1274,   593,  1276,   578,   571,   552,    15,    16,  1375,  2292,
    2293,   246,  1379,    15,    16,   528,  1367,   448,   593,    15,
      16,   325,   487,   115,   365,   316,   593,  1378,   377,   578,
      15,    16,   340,   578,   185,   348,   525,   530,   351,   552,
      70,   353,  1316,   335,   593,  3598,   578,   592,  3543,   340,
     286,    81,   339,   542,    69,   578,   945,   192,    15,    16,
     440,   593,   130,  1430,   578,  1432,  1433,   359,  1435,  1436,
     593,   586,   587,   588,   589,   185,   382,   530,   365,   593,
     390,  1448,   177,  1450,    15,    16,    15,    16,  4000,  4001,
     440,   508,  1432,  1433,   110,  3377,  2436,   113,   578,   234,
    2681,  1375,   253,  2535,   196,   994,   591,   348,   530,   486,
     351,    15,    16,   593,   264,   348,   578,   534,   351,   146,
      15,    16,    15,    16,   364,  2580,   221,  2085,    12,   578,
     592,  2580,    15,    16,  3526,   508,   427,   171,   506,    15,
      16,   396,   348,   253,   593,   351,   348,   355,    19,   351,
      15,    16,   168,  3597,   348,  1522,  1523,   351,   173,   348,
     482,   534,   351,   348,  2568,   533,   351,   508,   403,   409,
      15,    16,   264,   578,   478,    15,    16,   578,   406,   195,
     127,   177,   348,  1643,  2258,   351,   490,   592,   565,  2144,
     341,   592,   382,   578,   177,   210,   487,   503,   247,  1999,
     578,   327,    15,    16,   146,  2933,   236,   592,  2789,    77,
     348,   591,   420,   351,   592,   578,   593,   523,   591,   234,
    1587,   508,   203,   578,   205,   578,    94,   348,   248,   592,
     351,   251,  3251,   488,   188,    15,    16,  2037,   530,   592,
      12,   591,   126,   348,   110,   261,   351,   118,   348,   477,
     348,   351,   378,   351,   349,    12,  3648,  3649,   564,   327,
      76,    15,    16,  1630,   247,   578,   482,   449,    15,    16,
     465,  1638,   576,  3001,   503,   305,  1643,    15,    16,   592,
     152,   479,  1649,   593,  1651,   166,   476,    15,    16,  1656,
    1657,   486,  1659,   348,   445,  2095,   351,    15,    16,   329,
     349,  3757,   168,  3759,   348,  1672,   166,   351,  1675,   507,
     348,   527,   348,   351,   348,   351,   166,   351,  2392,   335,
    1687,  1688,  1689,  1690,  2398,   393,   511,   395,   123,  3835,
    1697,  1698,  1699,   523,  1685,   445,  2789,   578,  3862,   348,
    3965,   375,   351,   138,  1695,   578,   348,   110,  1715,   351,
     114,   592,   348,   593,   126,   351,   237,  1724,   212,   592,
     307,   177,   392,   348,   177,   380,   351,   599,  1719,   126,
    3730,   391,   578,   519,   564,  3260,   578,   237,    16,  3549,
    3550,     8,  1656,  1657,   578,  1659,   592,   237,   215,   578,
     592,   348,  1759,   578,   351,   261,   188,   224,  1672,   440,
     206,  1675,    29,   592,  1771,   168,  2689,  3799,  3800,   430,
    2592,  1778,   578,   511,   503,  1689,  1690,   348,  3303,   348,
     351,  2305,   351,  1697,  1698,  1699,   592,    15,    16,   505,
    3576,  3577,  3578,  3579,  2631,  2823,    15,    16,    15,    16,
     578,  1792,   585,    24,   348,   210,   476,   351,   264,   592,
    1801,  1802,  2631,   348,   592,   348,   351,   578,   351,  2847,
    2848,  1812,  1813,  1814,  1815,   348,  1817,  1818,   351,   335,
    2753,   592,   348,   578,   317,   351,   330,  1937,   578,   329,
     578,    15,    16,   348,   505,  1759,   351,   592,  2943,  2877,
     455,   540,   592,  3050,  2943,   210,  3053,  3054,   261,    15,
      16,   224,  3894,   348,  1778,   585,   351,  1874,   348,   268,
     269,   351,   592,  3070,   530,   556,   557,  3909,   210,  1979,
     243,  1888,   206,   578,  1984,   934,   935,   354,   549,  3699,
    3922,  3135,  1899,  3703,   578,   348,   500,   592,   351,   503,
     578,  2996,   578,   564,   578,  3131,  3132,  2996,   592,   188,
     591,    56,  1903,  1904,   592,  1906,   592,  1908,  1909,  1910,
    1911,  1912,   971,   144,  1915,  1916,    15,    16,   348,   578,
    1937,   351,   335,   343,  3029,  1942,   578,   221,  1945,   544,
    3029,  3145,   578,   592,  3148,  1952,  1953,  1954,  1955,    46,
     592,  1958,   591,   578,   348,   129,  3988,   351,  3768,  3769,
     599,   348,    57,    58,   351,  1945,   177,   592,  4000,  4001,
     348,    66,  1979,   351,  2074,   571,   581,  1984,   511,   264,
     348,   578,  2639,   351,  3528,   592,   559,    24,   591,   562,
     348,   212,   486,   351,   547,   592,   599,   584,   585,   586,
     587,   588,   589,  2103,   597,   404,   405,   578,   599,   578,
      16,   345,  4044,   158,   476,    20,   591,   162,   173,    70,
       6,   592,  4054,   592,   530,   508,  3689,   415,    33,   174,
    3256,  3817,    11,    70,   578,   394,   591,  3232,  1952,  1953,
    1954,   591,    47,   578,   591,   578,  3013,  3014,   592,   591,
    2577,   534,    57,    58,   413,   578,  4088,   592,  4090,  3831,
    3832,   591,   578,   326,   327,   286,   110,  2074,  4100,   592,
    3098,   565,  3731,   578,  3737,  2789,   592,  3740,  3741,  3742,
    3743,  4113,   591,  4115,   443,  4117,   161,   592,   177,  2096,
    2530,   593,  4124,   578,  2621,    16,  2103,   508,   578,   592,
     593,  2201,  4134,  2203,  2204,  3200,    70,   592,   591,   330,
     591,  3200,   592,    30,  3318,   591,   552,  3321,  4150,  4151,
     348,   127,   159,   351,   168,   578,   552,   530,  4128,   348,
     591,   348,   351,   591,   351,   530,   531,    24,   533,  4171,
    4172,    33,   592,   593,  4176,  2245,  2246,   592,   593,   294,
      11,   195,  2159,  3133,   591,    72,    12,   593,   578,   203,
     440,   212,   108,   599,   592,   593,    58,   593,   448,  2176,
    2699,   155,   592,   599,   348,   212,  3380,   351,   592,   593,
     144,  3844,  3845,    70,   578,    41,   599,  2194,  2195,  3848,
    3853,   578,   348,   591,  2201,   351,  2203,  2204,   592,   591,
     578,  2730,    96,  2194,   340,   592,   127,   591,   100,  2738,
     578,   103,  2741,   486,   592,   127,  2316,   261,   591,   111,
     578,   592,   593,   140,   592,   591,    82,   591,    18,  2236,
     176,    87,   592,   593,   592,    96,   592,   593,  2245,  2246,
    3466,  3467,  2342,  3469,  3470,   390,   592,   593,   212,   286,
     591,   326,   327,   114,   591,  3155,   202,   144,   333,   348,
      15,    16,   351,   592,   593,   486,   542,   543,   110,   545,
     591,   547,   159,   324,   592,   593,   556,   557,  2285,   330,
    1657,  3800,  1659,  2290,   592,   593,   591,   324,  2295,   592,
     593,   335,  2299,   330,  2301,    57,    58,   591,  2286,    89,
     110,   307,   591,   197,  2311,    18,  2313,  2314,  2296,  2316,
     591,   591,  2303,  2304,  2302,   381,  2323,   591,  2325,   180,
    1697,  1698,  1699,   591,  4110,   212,   168,  2334,   430,   127,
     591,    73,   591,    75,   591,  2342,  2324,  2328,  2933,   592,
     593,  2329,  2349,  2350,   565,   591,   207,  2335,  2336,   400,
     578,   297,   142,   195,   591,   301,   146,   591,   168,   578,
     324,   578,   308,   346,   592,   591,   330,   591,  2966,   591,
     226,   113,   593,   592,   552,   592,    89,   592,   593,   592,
     593,   591,   172,   591,   174,   195,   307,   592,   593,   592,
     593,   591,   134,   592,   593,   307,   257,  2388,   188,   286,
     592,   593,   591,   193,   578,    31,  3001,   592,   593,   591,
     110,  2418,  2419,  2554,  2555,  2556,  2856,   207,   591,   261,
    2334,   591,   578,   213,   591,   167,   318,   592,   593,   142,
     591,   221,   591,   146,   591,   486,   400,   324,   591,   295,
     591,   231,   388,   330,   591,   451,   452,   136,   137,   486,
     525,   261,   242,  2594,  2595,  2596,   591,   247,   592,   593,
     377,   174,   356,   591,  2904,   591,   256,   542,   168,  3988,
     591,   365,   592,   593,   591,   188,   592,   593,  2485,   373,
     193,   398,   592,   593,   591,   536,   530,   592,   593,   578,
     591,     3,   438,   335,  2485,   195,    60,     9,    10,   591,
     213,   127,   358,   591,  2418,    69,   592,   593,   221,   307,
     591,   428,   592,   593,   565,   591,    80,    29,   231,   591,
    3115,   382,   486,    35,   591,   335,   316,    39,   565,   242,
     451,   452,   591,   538,   247,  3458,  3459,   592,   593,   451,
     452,  3585,   591,   256,  2551,   591,  2553,  2554,  2555,  2556,
     340,   591,    69,   558,   559,  3568,  3569,  2564,   591,   349,
     591,   261,   591,   455,   481,   591,   460,   592,   593,  4088,
    2577,  4090,   536,  2580,   592,   593,   582,   583,   584,   585,
     586,   587,   588,   589,   591,   446,   500,  2594,  2595,  2596,
     592,   593,   382,   591,  4113,   340,  3496,   593,   224,   486,
    2607,   565,  3502,   316,   592,   593,  2613,   463,  2615,   173,
      12,   207,  2712,   186,  2621,   179,  2607,   461,   130,    48,
     246,   567,  3146,   515,   177,   467,   258,   340,    48,   593,
     593,  4150,  4151,  3728,   580,   335,   349,   427,  3280,  3281,
     501,   497,   503,   592,   593,   340,   210,   592,   593,   435,
    2564,  3293,   544,   451,   452,   549,   173,  3299,   448,   401,
     586,   582,   583,   584,   585,   586,   587,   588,   589,   382,
     234,   583,   584,   585,   586,   587,   588,   589,   565,   151,
    3322,   307,  3710,  3325,  2691,   592,   593,   540,   530,  2696,
    2697,   448,  2699,   210,   592,   593,   527,   487,    60,   247,
     326,   327,   592,   593,   174,  2712,   593,    69,  2715,   591,
     283,   284,   592,   593,   427,   288,   289,   234,    80,   482,
     530,   482,  2713,  2730,   126,   592,   593,   592,   593,   482,
    2721,  2738,   592,   593,  2741,   448,   280,   592,   593,  1010,
    1011,  1012,   592,   593,  2751,   592,   593,   592,   593,   500,
     540,  1022,   258,  2760,   143,    70,  2763,   592,   593,    79,
    2767,   551,   552,  1088,  1089,   593,  2773,  3846,  3847,   496,
    2777,  3474,  3475,  2780,   487,  2952,  2953,   403,   592,   569,
    2787,   571,  1053,   342,    99,  1056,   584,   585,   586,   587,
     588,   589,  2799,  2773,   196,  2914,  2915,  3841,   142,  2806,
     364,   113,   592,   593,    99,  2946,   596,   597,  1079,  1080,
    2817,   173,  1083,   598,    96,     6,   380,   179,  3183,  3184,
     591,    15,    16,    98,  3419,   451,   452,   540,     4,   144,
     530,  1102,  1103,   480,   481,   439,   462,   484,   485,   552,
     564,   488,  3937,   490,    25,    54,   407,   364,   210,  2763,
    3471,  3472,  3473,   155,    99,  2955,   569,   204,   571,   593,
     593,   599,    66,   380,   568,    12,  3688,   592,   508,   592,
     152,  2971,   234,   126,     9,   593,   592,   599,   592,   592,
     593,  3781,  3507,   596,   597,    66,    96,   599,   591,    70,
     246,  2898,  2806,    25,    26,   210,   592,   599,   180,   593,
     464,   144,    48,  3947,   571,   598,   593,   500,   591,  3433,
     104,   105,   106,   107,   108,   280,   253,   280,   593,   363,
     593,   519,   593,  3363,  2931,    57,    58,    59,   210,   519,
     593,   593,   113,   593,    66,   224,  2943,  2944,    70,  2946,
     104,   105,   106,   107,   108,   586,    78,   174,  2955,   225,
     163,   498,   174,   545,  2961,   593,   582,   583,   584,   585,
     586,   587,   588,   589,  2971,   593,   459,    99,   368,   179,
     285,   122,  2979,  4017,   340,   257,   593,   541,   591,   491,
     592,   113,   593,   146,   116,   146,   146,   302,   146,  2996,
     146,   146,   146,   146,   146,  3529,   146,   509,   146,   147,
     210,  3008,   146,    70,   516,   199,   200,   201,   202,   324,
     146,  3018,   144,  3020,    81,  3640,   146,   146,   380,   146,
     146,   593,  3029,   547,    89,   537,   551,  3034,   574,    46,
     340,  3038,   340,   181,   340,   199,   200,   201,   202,   180,
     177,   593,   190,   592,   177,   586,   585,   257,   593,  3149,
     592,  4146,   127,   234,   121,   592,   592,  4146,   592,   592,
     592,   591,   593,   592,   592,   478,  3591,   469,   470,   471,
     472,   473,   474,   475,  4169,   593,   592,   592,   210,   227,
     449,   592,   592,   592,   592,   487,   218,   592,   592,   591,
     238,   504,   591,  4188,   589,   377,   127,   591,   394,  4188,
     382,   233,   464,   297,   592,   299,   300,   301,   593,   127,
     593,   758,  3103,   569,   308,  3215,   211,   265,   591,   492,
     591,   599,   186,  3130,  3131,  3132,   177,   592,  4028,  4029,
    3121,  4031,   457,   297,   389,   299,   300,   301,   593,   448,
     593,   174,  3149,    46,   308,   326,   327,   314,   213,   224,
     476,   439,   333,   285,   348,   476,    69,   351,   476,   340,
     476,   364,   476,   364,   446,   364,   231,   519,   122,   236,
     302,   486,   320,  4073,   232,  4075,  4076,   242,   501,   541,
     232,   122,   501,    46,  1455,   364,   501,   364,  3195,   362,
     364,   410,   364,  3200,   388,   257,   591,   552,   599,   380,
     592,  3301,   140,   599,   592,   220,   224,   620,  3215,   220,
     355,   592,   625,   592,   177,   572,   592,  3812,  3810,   501,
    3745,   572,   599,   505,   388,   357,   256,   599,   599,   599,
     508,   592,   307,   365,   519,   599,   446,   575,   305,   519,
    3231,   523,   655,   437,   438,   519,   146,   593,   253,  3256,
    4162,   316,    46,  1524,   464,   591,   519,  1528,   671,   326,
     327,   591,   329,   444,   346,   177,   166,   549,   177,   177,
     221,   177,   599,   437,   438,   340,   307,  3377,  3266,   228,
      35,   181,   564,    25,    26,  1556,   599,   571,   335,   307,
     190,   501,   593,   503,  3301,   505,   231,   231,   352,   298,
     432,    99,   715,   716,   717,   718,    99,   234,   234,   599,
     591,  3302,  3836,   519,   727,    57,    58,    59,   591,  3326,
     592,   345,   593,   188,    66,   392,  3333,   424,    70,   591,
     508,   541,   364,   599,   586,  3435,    78,   237,   238,   549,
     349,  3348,   591,   591,   591,   222,  3337,   222,   103,   188,
     592,   592,   592,   592,   486,   110,   188,    99,   592,   592,
     541,   599,   427,   334,   334,   265,   592,   591,   586,   501,
    3377,   113,   504,   567,   116,   340,   451,   452,   207,   248,
     364,   592,   599,   224,   578,   579,   580,   177,   593,   546,
     244,   593,   592,    66,   268,   231,   528,   231,   340,   234,
     593,   234,   144,   567,   593,   593,   161,   340,   540,   476,
     378,   340,    70,   168,  3421,   579,   580,    18,   340,   340,
     451,   452,   487,   323,   461,   591,    46,   440,  3435,   591,
     247,    46,   591,   451,   452,   442,   364,   571,   133,   240,
     195,   188,   591,   146,   450,   231,   231,  3454,  4184,   592,
     592,   591,   591,   113,   113,   593,   376,    74,   129,  3466,
    3467,   593,  3469,  3470,   592,   457,   591,   591,   210,  4061,
     593,   591,   461,   592,   591,  4070,   218,   599,  3485,   379,
     436,   592,    18,   593,   592,   592,    46,   592,   592,   592,
     592,   233,    33,   592,   592,   304,   592,   236,  3598,   389,
     349,   349,   571,   221,   246,   592,   261,   582,   583,   584,
     585,   586,   587,   588,   589,   591,   593,   591,   599,   592,
      46,   193,   593,   304,   394,   508,   508,   552,  3535,  3536,
     552,   591,   591,   562,   120,  4130,   591,   113,   591,  3546,
     953,   591,  4067,   285,   546,   591,   562,   591,   234,   234,
     333,   582,   583,   584,   585,   586,   587,   588,   589,   335,
     302,    46,   317,  4155,   582,   583,   584,   585,   586,   587,
     588,   589,   592,   328,   593,   335,   304,  3584,   333,   591,
     335,    46,   592,   157,    46,   508,   234,   503,   592,   508,
     508,  3598,   556,  1006,  1007,   592,    16,   552,  4190,   552,
     221,   328,  1015,  1016,  1017,  1018,  1019,  1020,  1021,   557,
     571,   424,   198,  1026,   593,   357,  1029,  1030,   480,  1032,
     335,  1034,  3536,   365,   233,  1038,   433,   593,  1041,  1042,
    1043,  1044,   592,  1046,  1047,   346,   546,   269,  3645,   491,
     174,  1054,  1055,  3650,  1057,  1058,  1059,  1060,  1061,   141,
    1063,   591,   591,  1066,  1067,   591,    30,  1070,  1071,  1072,
    1073,  1074,  1075,  1076,  1077,  1078,   568,   174,  1081,  1082,
    3584,  1084,   258,  1086,    16,   600,   360,  1090,   592,  1092,
    1093,   592,   510,   122,   122,   592,   591,   591,   144,   382,
     432,  1104,  1105,    68,   280,   146,   402,  1110,    35,     5,
    1113,    12,    13,   177,    12,    13,    30,  1120,  1121,  1122,
     568,  1124,    60,   346,    60,   334,   249,   593,  1131,  1132,
    1133,  3728,  1135,  1136,  1137,  1138,  1139,  3734,  1141,  1142,
    1143,  1144,  1145,  1146,  1147,  1148,   592,    46,   492,  1152,
    1153,    46,   221,  3894,   486,   591,   591,   140,   346,  3849,
    3757,   346,  3759,   508,  3761,   597,   121,   512,  3909,   501,
     515,   129,   504,    46,    46,    46,   103,   504,   139,    16,
     525,  3922,  3779,   110,   140,   530,   568,    88,   206,   534,
      88,   263,   597,   112,   600,  3792,   528,   592,   135,   592,
      46,   591,    46,    46,   272,   381,   592,    52,   540,   433,
     597,   592,   146,   389,   140,   593,   117,   511,   191,   117,
     597,   593,   207,   592,    52,   593,   174,   414,   174,   130,
     174,   335,   130,   591,   161,   570,   113,   249,   511,   584,
     585,   168,   448,   419,   557,   175,  1918,  3655,  2107,  3109,
    2274,   152,  3849,   154,   152,  1258,   154,   603,  3346,   591,
    3682,  3858,  3843,  1266,   165,  3813,  3344,   165,   195,  4007,
    4190,   931,  4008,  3348,  3534,  3965,  4142,  3526,  3526,  3526,
    3526,   457,  3526,  3526,  3526,   186,  3526,  3526,   186,  4152,
    3526,  4041,  4041,  3887,  3913,  3526,  4001,  3526,   625,  3526,
    3912,   969,  1632,  4044,  1370,  1372,   482,  2327,  3542,   210,
    2569,  2931,   210,  4054,  3734,  3585,   217,  3839,  3197,   217,
    4017,  3947,  3745,  4024,   500,   473,  3124,   503,   655,  1880,
    4067,  3462,  4022,  2419,   261,  1425,  2792,  3038,  1888,  2352,
    3937,  2288,  3018,  3061,   671,  3094,  3494,  3061,  3265,  3310,
    3301,  3836,  3022,  2971,  3778,   256,  3488,  3631,   256,  4100,
    3765,    12,    12,  3769,  3691,  3768,  3703,  1439,  3965,  3699,
    1950,  3952,  3953,  3546,  4115,  3502,  4117,  1887,  3020,  2345,
    1766,  1331,  3270,  4124,  2171,  3019,  3983,  3984,  1421,  1689,
     317,   718,   548,  4134,  2564,   844,  2138,  2185,   950,  3593,
    2485,  4010,  3706,  1704,  1985,  2487,   333,  2237,   335,   266,
     267,   268,   269,   270,   271,  1048,   273,   274,   275,   276,
     277,   278,   279,  2986,   281,  4022,  3613,  3461,  2780,  1022,
    4171,  4172,  3983,  1089,  1155,  4176,  4130,  3984,  2092,  3029,
    3455,  1955,  3435,  1240,  2134,  1346,  3847,  1212,  2175,  4046,
    2190,  2938,  3200,  2937,  4169,  2996,  4053,   538,  1461,  1448,
    3937,   616,   528,  1648,  1279,  1756,  2920,  1470,  2751,  1245,
    4015,  4063,  3974,  4035,  4188,  4165,  2943,  3303,  1258,  2623,
    2979,  1710,   383,  3443,  3226,   383,  1675,  1248,   520,  3574,
     826,  1430,  2551,  3580,  1205,   521,   830,  2068,  1109,  2520,
     469,   402,   469,   603,   402,   603,    -1,   408,   603,    -1,
     408,    -1,    -1,    -1,    -1,   416,    -1,  4114,   416,    -1,
      -1,    -1,  4119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1536,    -1,    -1,    -1,    -1,    -1,   440,
      -1,    -1,   440,    -1,    -1,    -1,    -1,   404,   405,  4146,
      -1,    -1,   453,   454,    -1,   453,   454,    -1,  4155,    -1,
      -1,    -1,  1565,  1566,  1567,    -1,    -1,    -1,  4165,    -1,
      -1,    -1,  4169,    -1,    -1,    -1,    -1,    -1,  1581,    -1,
      -1,   508,    -1,    -1,    -1,   512,    -1,    -1,   515,    -1,
      -1,  4188,    -1,  4190,   495,    -1,    -1,   495,   525,    -1,
    1603,    -1,    -1,   530,    -1,    -1,  1609,   534,    -1,  1612,
      -1,  1614,    -1,    -1,    -1,    -1,    -1,  1620,    -1,  1622,
    1623,    -1,   523,    -1,    -1,   523,   953,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   546,    -1,   548,   546,    -1,
     548,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1006,
    1007,  1684,    -1,    -1,    -1,    -1,    -1,    -1,  1015,  1016,
      -1,    -1,  1019,  1020,  1021,    -1,    -1,    -1,    -1,  1026,
      -1,    -1,  1029,  1030,    -1,  1032,    -1,  1034,    -1,    -1,
      -1,    -1,    -1,    -1,  1041,  1042,  1043,  1044,    -1,  1046,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1054,  1055,    -1,
    1057,  1058,    -1,    -1,    -1,    -1,  1063,    -1,    -1,  1066,
    1067,    -1,    -1,  1070,    -1,    -1,  1073,  1074,  1075,  1076,
    1077,  1078,    -1,    -1,  1081,  1082,    -1,  1084,    -1,  1086,
      -1,    -1,    -1,  1090,    -1,  1092,  1093,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1104,  1105,    -1,
      -1,    -1,    -1,  1110,    -1,    -1,  1113,    -1,    -1,    -1,
      -1,    -1,    -1,  1120,  1121,  1122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,
      -1,    -1,    -1,    -1,    -1,    13,    14,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1153,    25,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    33,
      -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    43,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    59,    60,    -1,    58,    -1,    64,    -1,    -1,    -1,
      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1901,    -1,
      -1,    99,    -1,    -1,    -1,    -1,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,    -1,   113,    -1,   111,   116,    -1,
      -1,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,  1258,   130,    -1,   128,    -1,    -1,    -1,    -1,  1266,
     138,    -1,    -1,    -1,   142,    -1,   144,    -1,    -1,    -1,
      -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1965,    -1,    -1,    -1,  1969,    -1,    -1,    -1,
      -1,  1974,  1975,   167,   172,   169,    -1,    -1,    -1,    -1,
    1983,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,   183,
      -1,    -1,    -1,  1996,    -1,  1998,  1999,    -1,  2001,  2002,
    2003,  2004,  2005,    -1,    -1,  2008,    13,    -1,    -1,    -1,
     208,    -1,   210,    -1,  2017,    -1,    -1,    -1,    -1,    -1,
     218,    -1,    -1,    -1,    -1,    -1,    -1,  2030,   222,  2032,
      -1,  2034,  2035,  2036,  2037,   233,    -1,    -1,  2041,  2042,
    2043,    -1,    -1,    -1,    -1,  2048,  2049,  2050,    -1,  2052,
      -1,  2054,    -1,  2056,    -1,  2058,   250,  2060,    -1,    -1,
      -1,    -1,  2065,    -1,    -1,   259,   260,    -1,   262,    -1,
      -1,    -1,  2075,    -1,    -1,    -1,    -1,    -1,    -1,  2082,
      -1,    88,  2085,    -1,    -1,    -1,    -1,   285,  2091,    -1,
      13,    14,  2095,    -1,    -1,    -1,    -1,   291,   292,   293,
      -1,    -1,    -1,    -1,   302,    28,    -1,    30,   306,    -1,
     117,    34,    -1,    -1,    -1,   309,   310,   311,    -1,    -1,
      -1,   315,    -1,   130,   318,    48,    49,    -1,    -1,    -1,
      -1,    -1,    55,    -1,  1461,    -1,    59,    60,    -1,    -1,
      -1,    -1,   336,   337,    -1,   152,   344,   154,    -1,    72,
      -1,   349,    -1,    -1,    -1,    -1,    -1,    -1,   165,   357,
      -1,    -1,    -1,    -1,    -1,    88,   364,   365,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,   372,   186,
      -1,    -1,    25,    26,    -1,    -1,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   397,
      -1,    -1,   396,   210,    -1,    -1,   129,   130,    -1,  1536,
     217,   409,   410,   411,   412,    -1,    59,    -1,    -1,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,
      -1,   154,    -1,    -1,   432,    78,    -1,    -1,  1565,  1566,
    1567,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,   256,
     444,    -1,    -1,    -1,   448,    -1,    99,    -1,    -1,    -1,
      -1,    -1,    -1,   186,   458,    -1,    -1,    -1,   191,    -1,
     113,   194,    -1,   116,    -1,    -1,  1603,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1612,    -1,  1614,   486,    -1,
      -1,    -1,    -1,    -1,   217,    -1,   219,    -1,    -1,    -1,
      -1,   144,    -1,   501,    -1,    -1,   504,    -1,    -1,    -1,
      -1,    -1,   235,    -1,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,    -1,    -1,    -1,    -1,   252,
     528,    -1,    -1,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1684,    -1,    -1,
      -1,    -1,    -1,    -1,   558,   559,    -1,   210,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   218,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,   402,    -1,    -1,    -1,   597,
      -1,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   416,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   440,    -1,    -1,    -1,  2440,    -1,    -1,
      -1,   364,   285,  2446,    -1,    -1,   453,   454,    -1,    -1,
      -1,    -1,    -1,    -1,   377,    -1,    -1,    -1,    -1,   302,
      -1,    -1,    -1,    -1,   387,    -1,  2469,  2470,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   407,    -1,    -1,   410,   495,   412,
      -1,    -1,   415,    -1,    -1,   418,  2499,    -1,   421,    -1,
      -1,    -1,    -1,   426,    -1,   428,  2509,    -1,  2511,    -1,
    2513,    -1,   435,    -1,   357,    -1,   523,   440,    -1,    -1,
      -1,    -1,   365,    -1,    -1,   448,    -1,  2530,    -1,    -1,
     453,    -1,  2535,    -1,   457,    -1,    -1,    -1,    -1,   546,
      -1,   548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2558,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,    -1,  2568,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1901,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   432,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   526,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2616,    -1,    -1,   539,  2620,    -1,    -1,
     543,    -1,    -1,   546,    -1,    -1,    -1,    -1,   551,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1965,    -1,
      -1,    -1,  1969,   486,    -1,    -1,    -1,  1974,  1975,    -1,
      -1,    -1,    -1,    -1,   577,    -1,  1983,    -1,   501,    -1,
    2663,   504,    -1,    -1,    -1,    -1,    -1,    -1,   591,  1996,
      -1,  1998,    -1,    -1,  2001,  2002,  2003,  2004,  2005,    -1,
      -1,    -1,    -1,  2686,    -1,   528,    -1,    -1,    -1,    -1,
    2017,    -1,    -1,    -1,    -1,    -1,    -1,   540,    -1,    -1,
      -1,    -1,    -1,  2030,    -1,  2032,    -1,  2034,  2035,  2036,
      -1,    -1,    -1,    -1,  2041,  2042,  2043,    -1,    -1,    -1,
      -1,  2048,  2049,  2050,    -1,  2052,    -1,  2054,    -1,  2056,
      -1,  2058,    -1,  2060,    -1,    -1,    -1,    -1,  2065,    -1,
      -1,    -1,    25,    26,    -1,    -1,    -1,    -1,  2075,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2091,    -1,    -1,  2770,  2771,    -1,
      -1,    -1,    -1,    -1,    57,    58,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    99,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,  2828,    -1,    -1,    -1,    -1,
     113,    -1,    -1,   116,    -1,    48,    49,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    59,    60,    -1,    -1,
    2853,  2854,    -1,  2856,    -1,    -1,    -1,    -1,    -1,    72,
      -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2874,    -1,    -1,    -1,    88,  2879,    -1,    -1,  2882,
      -1,    -1,  2885,  2886,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,
      -1,  2904,    -1,    -1,   117,   118,   119,    -1,    -1,    -1,
      -1,    -1,    -1,  2916,    -1,    -1,   129,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   210,    -1,    -1,
      -1,    -1,    -1,    -1,  2937,   218,    -1,    -1,    -1,    -1,
      -1,   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,
      -1,    -1,    -1,  2966,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   186,    -1,    -1,    -1,  2980,   191,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2998,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   217,    -1,   219,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,
      -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   252,
      -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2440,    -1,    -1,    -1,    -1,    -1,  2446,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2469,  2470,    -1,    -1,    -1,    -1,    -1,   432,
      -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2499,    -1,   387,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2509,    -1,  2511,    -1,  2513,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   407,    -1,    -1,   410,  3201,   412,
      -1,    -1,   415,   486,    -1,   418,    -1,    -1,   421,    -1,
      -1,    -1,    -1,   426,    -1,   428,    -1,    -1,   501,    -1,
      -1,   504,   435,    -1,    -1,    -1,    -1,   440,    -1,    -1,
      -1,  2558,    -1,    -1,    -1,   448,    -1,  3240,  3241,    -1,
     453,    -1,    -1,    -1,   457,   528,  3249,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,  2616,
      -1,    -1,    -1,  2620,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,
      -1,    -1,    -1,   526,    -1,    -1,    -1,    -1,    67,    -1,
      69,    -1,    -1,    -1,    -1,    -1,   539,    -1,    -1,    -1,
     543,    -1,    -1,   546,    -1,    84,  2663,    86,   551,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2686,
    3363,    -1,    -1,    -1,   577,    -1,  3369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,  3384,    -1,    -1,    -1,  3388,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   143,   144,    -1,    -1,    -1,   148,
      -1,    -1,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   178,
      -1,   180,    -1,    -1,    -1,    -1,   185,    -1,   187,    -1,
    3443,    -1,    -1,  2770,  2771,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     209,   210,    -1,    -1,    -1,   214,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2828,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3526,    -1,    -1,  2853,  2854,    -1,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,  2874,    -1,  3552,
      -1,  3554,  2879,  3556,    -1,  2882,    25,    26,  2885,  2886,
      -1,    -1,    -1,   312,    -1,  3568,  3569,    -1,    -1,    -1,
      -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3585,    -1,    -1,    -1,    55,    -1,    -1,  2916,
      59,    -1,  3595,  3596,   343,    -1,    -1,    -1,    -1,    -1,
      -1,    70,  3605,    -1,  3607,    -1,    -1,    -1,    -1,    78,
    2937,    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   381,   382,    -1,    -1,   385,   386,    -1,  3642,
      -1,    -1,    -1,    -1,   113,  3648,  3649,   116,    -1,    -1,
      -1,    -1,    -1,  2980,   123,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
      -1,  2998,    -1,    -1,    -1,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   445,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   457,    -1,
      -1,    -1,    -1,  3716,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   482,    -1,    -1,    -1,   486,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,
      -1,    -1,    -1,    -1,   503,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3785,    -1,  3787,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3797,    -1,  3799,  3800,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,    -1,    -1,   285,   566,  3821,    -1,
      -1,  3824,    -1,    -1,    -1,  3828,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   302,    -1,    -1,    -1,   306,  3841,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3855,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3201,    -1,    -1,    -1,    -1,    -1,
     349,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,  3892,
      -1,  3894,    -1,    -1,    -1,    -1,   365,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3909,  3910,    -1,    -1,
      -1,    -1,    -1,  3240,  3241,    -1,    -1,    -1,    -1,  3922,
      -1,    -1,  3249,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3938,    -1,    -1,    -1,    -1,
      -1,   410,    -1,    -1,  3947,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3987,  3988,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4000,  4001,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4017,    -1,    -1,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    -1,    -1,   504,    -1,    -1,    -1,    -1,
      -1,  4044,  3369,    -1,    -1,    -1,    -1,    -1,  4051,    -1,
      -1,  4054,    -1,    -1,    -1,    -1,    -1,  3384,    -1,   528,
      -1,  3388,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,  4081,    -1,
      -1,    -1,    -1,    -1,    -1,  4088,    -1,  4090,  3415,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4100,    -1,    -1,
    4103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4113,    -1,  4115,    -1,  4117,    -1,  3443,    -1,    -1,    -1,
      -1,  4124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4150,  4151,    -1,
      -1,    -1,    -1,  4156,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4171,  4172,
      -1,    -1,    -1,  4176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3552,    -1,  3554,    -1,  3556,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3568,  3569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3595,  3596,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3605,    -1,
    3607,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3642,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3716,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3785,    -1,
    3787,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3797,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3824,    -1,    -1,
      -1,  3828,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3855,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3892,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3910,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,  3938,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    44,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
    3987,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,  4051,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,  4081,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,  4103,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,  4156,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,   239,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    92,    93,    -1,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,
     110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,   189,
      -1,   191,   192,    -1,   194,   195,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
      -1,    -1,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,    -1,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,    -1,   563,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,
     590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    92,    93,    -1,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,
     110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,   189,
      -1,   191,   192,    -1,   194,   195,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
      -1,    -1,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,    -1,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,    -1,   563,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,
     590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    -1,    93,    -1,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,
     110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,   189,
      -1,   191,   192,    -1,   194,   195,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
      -1,    -1,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,    -1,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,    -1,   563,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,
     590,   591,   592,    -1,   594,   595,    -1,    -1,   598,   599,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    -1,    93,    -1,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,
     110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,   177,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,   189,
      -1,   191,   192,    -1,   194,   195,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
      -1,    -1,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,    -1,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,    -1,   563,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,
     590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,   177,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    -1,    93,    -1,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,
     110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,   189,
      -1,   191,   192,    -1,   194,   195,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
      -1,    -1,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,    -1,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,    -1,   563,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,
     590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    -1,    93,    -1,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,
     110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,   189,
      -1,   191,   192,    -1,   194,   195,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
      -1,    -1,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,    -1,   332,   333,    -1,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,    -1,   563,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,
     590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    -1,    93,    -1,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,
     110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,   189,
      -1,   191,   192,    -1,   194,   195,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
      -1,    -1,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,    -1,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,    -1,   563,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,
     590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    -1,    93,    -1,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,
     110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,   189,
      -1,   191,   192,    -1,   194,   195,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
      -1,    -1,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,    -1,   332,   333,    -1,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,    -1,   563,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,
     590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    -1,    93,    -1,    95,    96,    -1,    98,    99,
     100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,   109,
     110,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,    -1,   157,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,   189,
      -1,   191,   192,    -1,   194,   195,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,   206,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,   242,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
      -1,    -1,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,    -1,   332,   333,    -1,   335,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,    -1,   563,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,   585,    -1,    -1,    -1,    -1,
     590,   591,    -1,    -1,   594,   595,    -1,    -1,   598,   599,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    -1,    93,    -1,
      95,    96,    -1,    98,    99,   100,   101,   102,   103,    -1,
      -1,    -1,    -1,   108,   109,   110,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,    -1,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,   189,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,   242,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,   303,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,    -1,    -1,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,    -1,   332,   333,    -1,
     335,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,    -1,   532,   533,   534,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,    -1,   563,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
     585,    -1,    -1,    -1,    -1,   590,   591,    -1,    -1,   594,
     595,    -1,    -1,   598,   599,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      80,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,   234,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,   246,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,   464,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   599,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,   234,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,   464,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   599,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,
      -1,   485,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,   592,    -1,
      -1,    17,    -1,    -1,    20,   599,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,   592,    -1,    -1,    -1,
      -1,    17,   598,   599,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,   591,    -1,    -1,    -1,    17,
      -1,    -1,    20,   599,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,   221,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,   599,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,    -1,     5,   586,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,   599,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,   591,    -1,    -1,    -1,    17,    -1,    -1,    20,   599,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,   598,   599,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,
      -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,
      -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,   151,
     152,   153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
      -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,
     202,   203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,
      -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,
      -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,   301,
     302,    -1,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,
     342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,
      -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,
     482,    -1,    -1,   485,   486,    -1,   488,   489,   490,   491,
     492,    -1,    -1,   495,   496,   497,   498,    -1,   500,   501,
      -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,
     512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,
     532,   533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,
     542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   599,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,
     114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,
     144,   145,    -1,    -1,   148,    -1,   150,   151,   152,   153,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,
      -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,
     204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,
      -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,
      -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,
      -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,
     294,   295,   296,   297,   298,    -1,    -1,   301,   302,    -1,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,
     324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
      -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,   343,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,
     424,    -1,    -1,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
     474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,
      -1,   485,   486,    -1,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,   498,    -1,   500,   501,    -1,    -1,
     504,   505,   506,    -1,    -1,   509,   510,    -1,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
      -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,   533,
      -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,
      -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   599,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,    -1,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   599,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,
     148,    -1,   150,   151,   152,   153,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,
     178,    -1,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,
     198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,
     208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,
     228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,
      -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,    -1,    -1,   294,   295,   296,   297,
     298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
     318,   319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,
      -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,
     338,   339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,
      -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,
     488,   489,   490,   491,   492,    -1,    -1,   495,   496,   497,
     498,    -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,
      -1,   509,   510,    -1,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,
     538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,
      -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,
      -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,   599,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
     100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
     140,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
     150,   151,   152,   153,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,
      -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,   209,
      -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,
      -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,
     240,    -1,    -1,   243,   244,   245,    -1,    -1,    -1,    -1,
     250,   251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,
      -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,   318,   319,
      -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,
      -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,   419,
      -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,
     480,   481,   482,    -1,    -1,   485,   486,    -1,   488,   489,
     490,   491,   492,    -1,    -1,   495,   496,   497,   498,    -1,
     500,   501,    -1,    -1,   504,   505,   506,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,   529,
      -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,   539,
      -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,
     550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,
      -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   598,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,   245,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   598,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,
     116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,   145,
      -1,    -1,   148,    -1,   150,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,
     176,    -1,   178,    -1,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
      -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,   205,
      -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,
     226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,
     236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,   245,
      -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,
      -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,
     296,   297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,   325,
      -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,
      -1,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,
      -1,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,
      -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,
     486,    -1,   488,   489,   490,   491,   492,    -1,    -1,   495,
     496,   497,   498,    -1,   500,   501,    -1,    -1,   504,   505,
     506,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
     526,   527,   528,   529,    -1,    -1,   532,   533,    -1,   535,
     536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,
      -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,   598,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,    78,
      79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
      -1,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,    -1,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,   164,   165,   166,   167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
      -1,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,   230,    -1,    -1,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,    -1,   365,    -1,    -1,   368,
     369,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,    -1,
     419,    -1,    -1,    -1,   423,   424,   425,    -1,    -1,    -1,
     429,   430,   431,   432,   433,   434,    -1,   436,    -1,   438,
      -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,    -1,   482,    -1,    -1,    -1,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,    -1,
      -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,   576,    -1,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,   593,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,   586,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,   586,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,   586,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,   586,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,   110,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,   195,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,    -1,    -1,    -1,    -1,   335,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,   467,   468,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,   530,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,   146,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
     245,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,   245,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,   113,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,   245,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      93,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,   245,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,   245,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
     195,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,   245,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,   113,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,   245,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,   245,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    18,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    83,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,   177,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,   113,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
     113,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,    12,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,    -1,   197,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,   236,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,    -1,   421,    -1,   423,   424,
      -1,    -1,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,   481,   482,    -1,    -1,
     485,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,   526,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,   538,   539,    -1,    -1,   542,    -1,    -1,
     545,    -1,   547,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,   574,
      -1,   576,   577,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,    -1,   197,   198,    -1,    -1,
      -1,   202,   203,   204,   205,    -1,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,    -1,
      -1,    -1,   233,    -1,    -1,   236,   237,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,   329,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,    -1,
     421,    -1,   423,   424,    -1,    -1,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
     481,   482,    -1,    -1,   485,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,   526,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,   538,   539,    -1,
      -1,   542,    -1,    -1,   545,    -1,   547,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,    -1,
      -1,    -1,   573,   574,    -1,   576,   577,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,   113,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,    -1,
     197,   198,    -1,    -1,    -1,   202,   203,   204,   205,    -1,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,    -1,    -1,    -1,   233,    -1,    -1,   236,
     237,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
     357,   358,    -1,   360,   361,   362,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,    -1,   421,    -1,   423,   424,    -1,    -1,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,   481,   482,    -1,    -1,   485,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,   526,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,   538,   539,    -1,    -1,   542,    -1,    -1,   545,    -1,
     547,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,    -1,    -1,    -1,   573,   574,    -1,   576,
     577,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,    -1,    -1,   170,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,    -1,   197,   198,    -1,    -1,    -1,   202,
     203,   204,   205,    -1,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,    -1,   421,    -1,
     423,   424,    -1,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,   481,   482,
      -1,    -1,   485,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,   526,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,   538,   539,    -1,    -1,   542,
      -1,    -1,   545,    -1,   547,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,    -1,    -1,    -1,
     573,   574,    -1,   576,   577,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,    -1,   197,   198,
      -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,    -1,    -1,    -1,   233,    -1,    -1,   236,   237,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   358,
      -1,   360,   361,   362,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,    -1,   421,    -1,   423,   424,    -1,    -1,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,   481,   482,    -1,    -1,   485,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,   526,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,   538,
     539,    -1,    -1,   542,    -1,    -1,   545,    -1,   547,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,    -1,    -1,    -1,   573,   574,    -1,   576,   577,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,
      75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,    -1,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,   164,
     165,   166,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,   230,    -1,    -1,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,    -1,
     365,    -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,
      -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,
      -1,   416,    -1,    -1,   419,    -1,    -1,    -1,   423,   424,
     425,    -1,    -1,    -1,   429,   430,   431,   432,   433,   434,
      -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,
     445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
      -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,    -1,   482,    -1,    -1,
      -1,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,    -1,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,
     545,    -1,    -1,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,   570,    -1,    -1,   573,    -1,
      -1,   576,    -1,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    -1,
      71,    -1,    73,    74,    75,    76,    -1,    78,    79,    -1,
      -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
      -1,   132,   133,   134,    -1,   136,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,    -1,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,    -1,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,   230,
      -1,    -1,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,    -1,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,    -1,
     411,    -1,   413,   414,    -1,   416,    -1,    -1,   419,    -1,
      -1,    -1,   423,   424,   425,    -1,    -1,    -1,   429,   430,
     431,   432,   433,   434,    -1,   436,    -1,   438,    -1,    -1,
      -1,    -1,   443,   444,   445,    -1,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,    -1,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
      -1,   482,    -1,    -1,    -1,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,    -1,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,    -1,    -1,    -1,
      -1,   542,    -1,    -1,   545,    -1,    -1,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,   568,    -1,   570,
      -1,    -1,   573,    -1,    -1,   576,    -1,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,
      -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    -1,    71,    -1,    73,    74,    75,    76,
      -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,   132,   133,   134,    -1,   136,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,    -1,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,   164,   165,   166,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
      -1,   198,    -1,    -1,    -1,   202,   203,   204,   205,   206,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,    -1,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,   230,    -1,    -1,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,    -1,   365,    -1,
      -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,    -1,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,    -1,   411,    -1,   413,   414,    -1,   416,
      -1,    -1,   419,    -1,    -1,    -1,   423,   424,   425,    -1,
      -1,    -1,   429,   430,   431,   432,   433,   434,    -1,   436,
      -1,   438,    -1,    -1,    -1,    -1,   443,   444,   445,    -1,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,    -1,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,    -1,   482,    -1,    -1,    -1,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,    -1,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,   545,    -1,
      -1,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,   568,    -1,   570,    -1,    -1,   573,    -1,    -1,   576,
      -1,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,
      73,    74,    75,    76,    -1,    78,    79,    -1,    -1,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,   140,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,    -1,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
     203,   204,   205,   206,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,   230,    -1,    -1,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,    -1,   365,    -1,    -1,   368,   369,   370,   371,   372,
      -1,    -1,    -1,    -1,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,    -1,   411,    -1,
     413,   414,    -1,   416,    -1,    -1,   419,    -1,    -1,    -1,
     423,   424,   425,    -1,    -1,    -1,   429,   430,   431,   432,
     433,   434,    -1,   436,    -1,   438,    -1,    -1,    -1,    -1,
     443,   444,   445,    -1,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,    -1,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,    -1,   482,
      -1,    -1,    -1,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,    -1,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,    -1,    -1,    -1,    -1,   542,
      -1,    -1,   545,    -1,    -1,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,   570,    -1,    -1,
     573,    -1,    -1,   576,    -1,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,    78,
      79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
      -1,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,   140,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,    -1,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,   164,   165,   166,   167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
      -1,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,   230,    -1,    -1,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,    -1,   365,    -1,    -1,   368,
     369,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,    -1,
     419,    -1,    -1,    -1,   423,   424,   425,    -1,    -1,    -1,
     429,   430,   431,   432,   433,   434,    -1,   436,    -1,   438,
      -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,    -1,   482,    -1,    -1,    -1,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,    -1,
      -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,   576,    -1,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,
      75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,   140,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,    -1,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,   164,
     165,   166,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,   230,    -1,    -1,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,   343,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,    -1,
     365,    -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,
      -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,
      -1,   416,    -1,    -1,   419,    -1,    -1,    -1,   423,   424,
     425,    -1,    -1,    -1,   429,   430,   431,   432,   433,   434,
      -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,
     445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
      -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,    -1,   482,    -1,    -1,
      -1,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,    -1,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,
     545,    -1,    -1,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,   570,    -1,    -1,   573,    -1,
      -1,   576,    -1,    -1,     5,   580,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    -1,
      71,    -1,    73,    74,    75,    76,    -1,    78,    79,    -1,
      -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,   114,    -1,   116,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
      -1,   132,   133,   134,    -1,    -1,    -1,   138,    -1,   140,
     141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,   150,
     151,   152,   153,    -1,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   175,   176,    -1,   178,    -1,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
      -1,   202,   203,   204,   205,   206,    -1,   208,   209,    -1,
      -1,   212,    -1,   214,    -1,    -1,    -1,   218,    -1,    -1,
      -1,    -1,   223,    -1,   225,   226,    -1,   228,   229,   230,
      -1,    -1,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,   243,   244,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,   253,    -1,   255,    -1,   257,   258,    -1,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
     301,   302,    -1,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,   318,   319,    -1,
      -1,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
     341,   342,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   357,   358,    -1,    -1,
     361,   362,   363,    -1,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,    -1,
     411,    -1,   413,   414,    -1,   416,    -1,    -1,   419,    -1,
      -1,    -1,   423,   424,   425,    -1,    -1,    -1,   429,   430,
     431,   432,   433,   434,    -1,   436,    -1,   438,    -1,    -1,
      -1,    -1,   443,   444,   445,    -1,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,    -1,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,   474,    -1,    -1,   477,    -1,    -1,   480,
      -1,   482,    -1,    -1,    -1,   486,    -1,   488,   489,   490,
     491,   492,    -1,    -1,   495,   496,   497,   498,    -1,   500,
     501,    -1,    -1,   504,   505,   506,    -1,    -1,   509,   510,
      -1,   512,   513,   514,   515,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,    -1,    -1,    -1,   527,   528,   529,    -1,
      -1,   532,   533,    -1,   535,   536,    -1,    -1,    -1,    -1,
      -1,   542,    -1,    -1,   545,    -1,    -1,    -1,   549,   550,
      -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,   576,    -1,    -1,     5,   580,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,
      -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    -1,    71,    -1,    73,    74,    75,    76,
      -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,   100,    -1,    -1,   103,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,   140,   141,    -1,   143,   144,   145,    -1,
      -1,   148,    -1,   150,   151,   152,   153,    -1,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,   163,   164,   165,   166,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,   176,
      -1,   178,    -1,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
      -1,   198,    -1,    -1,    -1,   202,   203,   204,   205,   206,
      -1,   208,   209,    -1,    -1,   212,    -1,   214,    -1,    -1,
      -1,   218,    -1,    -1,    -1,    -1,   223,    -1,   225,   226,
      -1,   228,   229,   230,    -1,    -1,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,   243,   244,    -1,    -1,
      -1,    -1,    -1,   250,   251,    -1,   253,    -1,   255,    -1,
     257,   258,    -1,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,    -1,   294,   295,   296,
     297,   298,    -1,    -1,   301,   302,    -1,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,   318,   319,    -1,    -1,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     337,   338,   339,    -1,   341,   342,   343,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,   363,    -1,   365,    -1,
      -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,    -1,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,    -1,   411,    -1,   413,   414,    -1,   416,
      -1,    -1,   419,    -1,    -1,    -1,   423,   424,   425,    -1,
      -1,    -1,   429,   430,   431,   432,   433,   434,    -1,   436,
      -1,   438,    -1,    -1,    -1,    -1,   443,   444,   445,    -1,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,    -1,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,   474,    -1,    -1,
     477,    -1,    -1,   480,    -1,   482,    -1,    -1,    -1,   486,
      -1,   488,   489,   490,   491,   492,    -1,    -1,   495,   496,
     497,   498,    -1,   500,   501,    -1,    -1,   504,   505,   506,
      -1,    -1,   509,   510,    -1,   512,   513,   514,   515,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,    -1,
     527,   528,   529,    -1,    -1,   532,   533,    -1,   535,   536,
      -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,   545,    -1,
      -1,    -1,   549,   550,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,   576,
      -1,    -1,     5,   580,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,
      73,    74,    75,    76,    -1,    78,    79,    -1,    -1,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,   114,    -1,   116,    -1,    -1,    -1,   120,    -1,   122,
     123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,    -1,
     143,   144,   145,    -1,    -1,   148,    -1,   150,   151,   152,
     153,    -1,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
     163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   175,   176,    -1,   178,    -1,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,
     203,   204,   205,   206,    -1,   208,   209,    -1,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,
     223,    -1,   225,   226,    -1,   228,   229,   230,    -1,    -1,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
     243,   244,    -1,    -1,    -1,    -1,    -1,   250,   251,    -1,
     253,    -1,   255,    -1,   257,   258,    -1,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
      -1,   294,   295,   296,   297,   298,    -1,    -1,   301,   302,
      -1,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,   318,   319,    -1,    -1,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,    -1,    -1,
      -1,    -1,    -1,    -1,   337,   338,   339,    -1,   341,   342,
     343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,   358,    -1,    -1,   361,   362,
     363,    -1,   365,    -1,    -1,   368,   369,   370,   371,   372,
      -1,    -1,    -1,    -1,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,    -1,   411,    -1,
     413,   414,    -1,   416,    -1,    -1,   419,    -1,    -1,    -1,
     423,   424,   425,    -1,    -1,    -1,   429,   430,   431,   432,
     433,   434,    -1,   436,    -1,   438,    -1,    -1,    -1,    -1,
     443,   444,   445,    -1,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,    -1,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,   474,    -1,    -1,   477,    -1,    -1,   480,    -1,   482,
      -1,    -1,    -1,   486,    -1,   488,   489,   490,   491,   492,
      -1,    -1,   495,   496,   497,   498,    -1,   500,   501,    -1,
      -1,   504,   505,   506,    -1,    -1,   509,   510,    -1,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,    -1,   527,   528,   529,    -1,    -1,   532,
     533,    -1,   535,   536,    -1,    -1,    -1,    -1,    -1,   542,
      -1,    -1,   545,    -1,    -1,    -1,   549,   550,    -1,    -1,
      -1,    -1,    -1,    -1,   557,    -1,    -1,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,    -1,   570,    -1,    -1,
     573,    -1,    -1,   576,    -1,    -1,     5,   580,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,    78,
      79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,   125,    -1,    -1,    -1,
      -1,    -1,    -1,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,    -1,    -1,   148,
      -1,   150,   151,   152,   153,    -1,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,   163,   164,   165,   166,   167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   175,   176,    -1,   178,
      -1,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,   202,   203,   204,   205,   206,    -1,   208,
     209,    -1,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,
      -1,    -1,    -1,    -1,   223,    -1,   225,   226,    -1,   228,
     229,   230,    -1,    -1,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,   243,   244,    -1,    -1,    -1,    -1,
      -1,   250,   251,    -1,   253,    -1,   255,    -1,   257,   258,
      -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,    -1,    -1,   294,   295,   296,   297,   298,
      -1,    -1,   301,   302,    -1,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,   318,
     319,    -1,    -1,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,   337,   338,
     339,    -1,   341,   342,   343,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,
      -1,    -1,   361,   362,   363,    -1,   365,    -1,    -1,   368,
     369,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,    -1,
     419,    -1,    -1,    -1,   423,   424,   425,    -1,    -1,    -1,
     429,   430,   431,   432,   433,   434,    -1,   436,    -1,   438,
      -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,   474,    -1,    -1,   477,    -1,
      -1,   480,    -1,   482,    -1,    -1,    -1,   486,    -1,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,   498,
      -1,   500,   501,    -1,    -1,   504,   505,   506,    -1,    -1,
     509,   510,    -1,   512,   513,   514,   515,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,
     529,    -1,    -1,   532,   533,    -1,   535,   536,    -1,    -1,
      -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,    -1,
     549,   550,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,   576,    -1,    -1,
       5,   580,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    -1,    -1,    -1,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,
      75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,    -1,   143,   144,
     145,    -1,    -1,   148,    -1,   150,   151,   152,   153,    -1,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     175,   176,    -1,   178,    -1,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,   202,   203,   204,
     205,    -1,    -1,   208,   209,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,   223,    -1,
     225,   226,    -1,   228,   229,    -1,    -1,    -1,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,   250,   251,    -1,   253,    -1,
     255,    -1,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,    -1,   294,
     295,   296,   297,   298,    -1,    -1,   301,   302,    -1,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,   318,   319,    -1,    -1,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,   338,   339,    -1,   341,   342,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   357,   358,    -1,    -1,   361,   362,   363,    -1,
     365,    -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,
      -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,    -1,
      -1,   416,    -1,    -1,   419,    -1,    -1,    -1,   423,   424,
      -1,    -1,    -1,    -1,   429,   430,   431,   432,   433,   434,
      -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,
     445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
      -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,   474,
      -1,    -1,   477,    -1,    -1,   480,    -1,   482,    -1,    -1,
      -1,   486,    -1,   488,   489,   490,   491,   492,    -1,    -1,
     495,   496,   497,   498,    -1,   500,   501,    -1,    -1,   504,
     505,   506,    -1,    -1,   509,   510,    -1,   512,   513,   514,
     515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,
      -1,    -1,   527,   528,   529,    -1,    -1,   532,   533,    -1,
     535,   536,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,
     545,    -1,    -1,    -1,   549,   550,    -1,    -1,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,    -1,    -1,    -1,    -1,   573,    -1,
      -1,   576,    -1,    -1,    -1,   580
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    28,    30,    34,    48,    49,    55,    59,
      60,    72,    88,   109,   117,   118,   119,   129,   130,   142,
     154,   170,   186,   191,   194,   217,   219,   235,   252,   256,
     344,   364,   377,   387,   407,   410,   412,   415,   418,   421,
     426,   428,   435,   440,   448,   453,   457,   481,   485,   526,
     539,   543,   546,   551,   577,   591,   602,   605,   606,   607,
     608,   609,   611,   616,   618,   623,   653,   785,   930,   968,
     971,   979,   981,   983,   986,   991,   993,   994,   999,  1002,
    1007,  1011,  1019,  1020,  1183,  1185,  1193,  1196,  1221,  1229,
    1240,  1246,  1259,  1262,  1265,  1271,  1275,  1279,  1281,  1282,
    1328,  1345,  1351,  1353,  1360,  1362,  1387,  1393,  1394,  1395,
    1396,  1443,  1451,  1452,    11,    96,   114,   180,   207,   257,
     382,   446,   501,   964,  1412,  1413,  1414,  1417,   253,   331,
    1001,   500,   503,  1347,  1388,   508,  1319,   210,     5,     7,
       8,     9,    10,    11,    17,    20,    22,    23,    24,    25,
      26,    27,    28,    30,    34,    38,    41,    42,    43,    45,
      47,    48,    51,    54,    56,    57,    59,    61,    62,    63,
      64,    65,    67,    68,    70,    71,    72,    73,    74,    75,
      76,    78,    79,    81,    82,    84,    87,    90,    98,    99,
     100,   103,   108,   109,   114,   116,   120,   122,   123,   124,
     125,   129,   132,   133,   134,   138,   140,   141,   143,   144,
     145,   148,   150,   151,   152,   153,   154,   157,   158,   159,
     162,   163,   165,   166,   167,   170,   175,   176,   178,   180,
     182,   183,   184,   185,   187,   191,   192,   194,   197,   198,
     202,   203,   204,   205,   208,   209,   212,   214,   218,   219,
     223,   225,   226,   228,   229,   233,   236,   237,   240,   243,
     244,   250,   251,   253,   255,   257,   258,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     280,   281,   283,   284,   285,   286,   288,   289,   290,   294,
     295,   296,   297,   298,   301,   302,   304,   306,   308,   309,
     310,   311,   312,   313,   314,   315,   318,   319,   322,   323,
     324,   325,   329,   330,   337,   338,   339,   341,   342,   343,
     345,   356,   357,   358,   360,   361,   362,   363,   364,   365,
     368,   369,   370,   371,   372,   373,   377,   378,   379,   381,
     383,   384,   385,   386,   388,   389,   390,   393,   397,   398,
     399,   400,   401,   404,   405,   406,   408,   409,   411,   412,
     413,   416,   418,   419,   421,   423,   424,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   438,   439,   443,   444,
     445,   446,   450,   454,   455,   456,   457,   459,   460,   461,
     462,   463,   470,   471,   473,   474,   477,   480,   481,   482,
     485,   486,   488,   489,   490,   491,   492,   495,   496,   497,
     498,   500,   501,   504,   505,   506,   509,   510,   512,   513,
     514,   515,   521,   522,   526,   527,   528,   529,   532,   533,
     535,   536,   538,   539,   542,   545,   547,   549,   550,   557,
     560,   564,   565,   566,   567,   573,   574,   576,   577,   580,
     647,  1318,  1322,  1326,  1327,   280,  1347,  1347,   573,  1389,
      96,   179,   257,   446,   464,   501,   505,   541,   549,   629,
     630,   833,   834,   835,   908,   909,   910,  1230,  1184,    96,
     152,   180,   210,   257,   382,   446,   501,   505,   523,   549,
     564,  1192,  1322,  1001,   646,   599,  1315,  1317,  1322,   617,
    1194,   370,    78,   389,  1280,    99,   210,   503,  1347,  1001,
     786,  1322,  1276,   435,   549,  1347,  1001,  1197,  1272,  1347,
     646,  1389,  1322,  1022,  1024,  1025,   346,  1330,  1247,   481,
     485,   457,   521,   457,   503,  1241,   370,  1352,  1222,  1322,
      30,    72,   140,   377,   398,   428,   481,  1445,   440,   591,
    1021,     0,   142,   603,   377,   158,   363,  1263,  1315,  1322,
     146,   941,  1322,   146,   647,   188,   647,   245,  1319,  1322,
    1324,   734,   735,   738,   761,  1322,   503,   152,   936,  1412,
    1347,   982,  1389,  1008,  1009,  1315,   654,   599,   519,   984,
     995,    16,  1390,   206,   836,   188,  1324,   736,   761,   646,
     351,  1409,  1413,  1414,  1415,  1416,  1417,   503,   834,   210,
     210,   210,   207,   264,   390,  1238,  1239,     7,    20,    27,
      33,    35,    36,    37,    39,    52,    53,    57,    58,    64,
      67,    81,    85,    86,    91,    93,    95,    96,   101,   102,
     103,   108,   110,   113,   155,   160,   161,   168,   182,   184,
     189,   195,   202,   206,   217,   220,   242,   250,   261,   282,
     287,   297,   301,   303,   307,   308,   309,   310,   311,   317,
     326,   327,   328,   332,   333,   335,   339,   359,   365,   366,
     367,   371,   372,   374,   388,   414,   415,   427,   433,   438,
     483,   484,   489,   493,   494,   499,   508,   512,   513,   514,
     515,   524,   525,   526,   530,   534,   549,   553,   554,   555,
     556,   561,   563,   567,   580,   584,   585,   590,   591,   594,
     595,   598,   599,  1040,  1041,  1042,  1043,  1047,  1050,  1051,
    1052,  1053,  1054,  1055,  1069,  1076,  1078,  1090,  1302,  1304,
    1306,  1307,  1311,  1313,  1318,  1322,   206,  1191,  1191,  1191,
    1322,   188,  1191,  1191,   761,  1191,   646,  1191,  1347,   612,
    1266,    12,    13,    88,   117,   130,   152,   154,   165,   186,
     210,   217,   256,   383,   402,   408,   416,   440,   453,   454,
     495,   523,   546,   548,  1363,  1365,  1367,  1368,  1322,   343,
      63,   394,   599,  1324,   115,   196,   264,  1199,  1322,  1040,
    1283,   221,  1315,  1346,  1347,    46,   787,   177,    33,   280,
    1251,  1277,  1322,   646,  1003,  1347,   115,   264,  1200,  1228,
     280,   389,   457,  1273,  1274,   980,    12,  1361,  1365,   519,
    1390,  1023,    12,   126,   196,   469,   470,   471,   472,   473,
     474,   475,   487,  1029,  1030,  1031,  1329,    23,    34,    57,
      58,    67,    69,    84,    86,    88,    97,   144,   148,   151,
     178,   180,   185,   187,   209,   210,   214,   232,   253,   280,
     312,   322,   343,   369,   381,   382,   385,   386,   445,   457,
     486,   503,   566,   881,   907,  1248,  1251,  1252,  1254,  1336,
     973,   974,   973,   973,   571,   972,   973,  1188,  1315,  1322,
    1347,  1228,    35,   195,   508,  1303,  1320,  1444,  1444,  1444,
    1444,  1444,  1024,  1021,   592,   597,  1322,  1261,  1260,   296,
     506,   533,   932,   547,    93,  1324,  1325,   934,   740,   762,
    1322,   933,   345,     6,    55,   130,   327,   393,   395,   763,
    1315,   647,   476,  1418,  1419,   935,   992,  1187,  1188,   224,
     593,  1015,  1016,   591,   655,  1322,   619,  1187,  1187,    54,
     329,   329,   407,  1391,   326,   327,  1046,  1322,   739,   762,
     173,     6,  1325,  1378,  1379,   415,    10,   382,   523,   633,
    1035,  1411,  1419,  1427,  1431,  1432,  1438,   633,  1035,  1410,
    1419,  1427,  1432,  1438,  1412,  1417,   836,  1322,  1322,  1322,
     177,  1231,  1235,  1236,  1322,  1238,   591,   591,   591,  1050,
     591,   591,   591,  1040,  1093,   591,   591,   591,   591,   591,
     591,   591,   591,   591,  1039,  1039,   591,  1039,   591,   591,
     591,   534,   591,  1302,   591,   591,   591,   591,   591,   591,
     591,   591,   591,   591,   591,  1040,   591,   591,   591,  1091,
    1092,  1311,  1322,   591,   591,   591,   591,   591,   591,   591,
     591,   591,  1040,   591,  1039,   591,   591,   591,   591,   591,
     591,   591,   591,   591,   591,   591,   591,   591,   591,   591,
     591,   591,   591,   591,   591,  1039,   591,  1302,   591,   591,
     591,  1302,   591,   591,    35,   195,   508,   591,  1039,  1039,
    1039,   591,   591,   591,   591,   591,  1050,  1050,  1050,   440,
     591,  1040,  1406,  1322,  1079,  1322,    15,    16,   348,   351,
     578,  1044,  1045,   146,   147,   181,   190,   227,   238,   265,
     320,  1048,    31,   127,   224,   246,   307,   403,   451,   452,
     462,   582,   583,   584,   585,   586,   587,   588,   589,  1046,
    1050,    66,   350,   593,  1320,   591,   599,   155,  1322,   647,
    1322,   340,   762,   647,  1324,   772,  1252,   647,  1325,  1377,
    1187,  1191,   552,   613,   120,   198,   258,   280,   381,   389,
     419,   457,   482,   500,  1267,  1268,  1347,   381,  1366,   430,
     430,   505,   549,   564,   346,  1370,   500,  1372,    62,   457,
    1369,    97,   564,  1371,   340,   593,    18,   146,  1137,  1138,
    1354,  1322,   964,   461,    76,   177,   264,  1284,  1289,    48,
     177,  1315,  1348,  1349,  1000,   248,   251,   391,   788,   792,
     598,   610,  1319,   258,  1004,  1325,  1005,  1006,  1315,   987,
     221,  1188,  1201,  1202,    48,   593,  1187,  1366,   340,   435,
    1392,  1391,   540,  1397,  1398,   586,  1033,  1034,  1035,  1031,
    1331,  1332,  1333,   151,   448,   246,   569,  1258,   527,   591,
      96,   152,   180,   382,   503,   523,   564,  1258,    12,   844,
    1324,   247,  1157,  1159,   177,   224,  1253,  1255,    65,   482,
     174,   482,   482,   482,   280,   500,    65,   482,    12,    41,
      82,    87,   226,   295,   358,   463,   497,  1242,  1243,  1244,
     198,   482,   482,   527,  1157,  1258,  1255,   258,   143,    68,
     370,   384,   500,   522,   482,   560,   970,   406,   477,   975,
     976,   969,    79,   964,   593,   342,  1447,   496,  1448,   231,
     423,  1446,   592,  1398,  1400,  1401,  1402,   142,   604,  1019,
    1264,  1303,  1322,   113,   831,   832,   841,   842,   890,    99,
    1039,   598,   648,     6,   741,   648,   591,    98,   758,   758,
     758,     4,   931,   937,   439,   564,  1419,  1187,   519,   593,
     113,  1010,  1322,  1009,   210,   234,   905,  1017,   656,   657,
    1040,   266,   267,   268,   269,   270,   271,   273,   274,   275,
     276,   277,   278,   279,   281,   404,   405,   620,   621,   622,
     158,   390,   985,    56,   158,   162,   174,   294,   390,   996,
     997,   998,    54,   407,   155,   628,   741,    99,   758,   204,
     593,  1035,  1035,  1035,   152,   180,   180,  1419,  1315,   911,
     912,   911,   911,  1189,  1190,  1315,  1316,  1322,   593,  1233,
     599,  1237,  1040,  1040,    12,   126,  1086,  1139,  1086,  1086,
    1086,   568,  1095,  1040,  1040,  1090,  1090,  1040,  1040,  1040,
     126,  1086,  1139,   592,  1040,   592,  1040,  1040,  1040,  1040,
    1311,   591,  1406,   104,   105,   106,   107,   108,   199,   200,
     201,   202,   297,   299,   300,   301,   308,   388,   437,   438,
     567,   579,   580,  1133,  1135,  1090,   100,   103,   512,   515,
    1136,   126,  1081,  1040,  1040,  1040,  1040,  1133,  1040,  1090,
    1092,     9,   593,   599,   126,  1086,  1040,  1040,   126,  1086,
    1040,  1040,  1090,  1090,  1090,  1040,  1035,  1074,  1075,  1040,
    1040,  1075,  1075,  1040,  1090,  1043,  1040,  1040,  1040,  1040,
    1040,  1040,  1086,  1086,  1040,  1040,   126,  1086,  1040,  1040,
     176,  1134,  1135,  1134,  1040,    44,   239,   520,  1040,  1040,
     592,  1312,  1313,  1322,  1086,  1086,  1040,  1040,  1407,  1407,
     592,   593,   592,  1040,   598,  1080,  1324,   599,  1040,  1040,
    1040,  1042,   161,   333,   525,   542,  1046,    12,    17,  1042,
    1049,  1043,  1043,   591,  1050,  1043,  1043,  1043,  1043,   246,
    1043,  1043,   220,  1043,   220,  1043,  1043,  1043,  1043,  1043,
      31,   224,   246,   403,  1324,  1050,  1040,  1073,  1074,  1322,
     599,  1315,   772,   330,   565,   773,   774,   144,   593,    50,
     422,   965,  1187,   598,   614,   615,    48,   571,   593,  1269,
     500,   591,  1380,  1380,  1380,  1380,   180,   382,   503,  1364,
    1368,  1322,   166,   323,  1322,  1355,  1356,  1201,  1319,   280,
     253,  1288,  1012,   280,  1138,   593,  1187,   791,   790,   363,
     798,   192,   234,  1324,    29,   519,  1278,   593,   519,   593,
     519,  1187,  1202,  1198,  1274,   177,   593,   180,   382,  1364,
    1322,    12,   126,  1404,   593,  1026,  1037,  1040,  1309,  1322,
     593,   185,   253,   341,   445,  1334,  1335,  1338,  1339,   224,
    1256,  1319,  1040,   586,   836,   647,   647,   647,  1315,   647,
    1315,   258,   312,   482,  1250,  1250,   261,   335,   530,  1160,
    1161,  1304,  1258,  1322,   647,  1258,  1325,   174,  1253,   647,
    1258,   225,   498,   163,   174,  1245,   593,  1253,  1315,  1255,
    1253,  1253,  1258,  1258,   545,   977,   593,   977,   459,   440,
     591,   595,  1096,  1097,  1098,  1099,  1100,  1109,  1110,  1117,
    1303,   368,  1449,   349,  1153,  1159,  1403,   832,    66,   881,
     122,  1324,    70,    81,   236,   305,   329,   392,   476,   650,
     652,   399,   535,   759,   760,   212,   755,   756,   757,   764,
     772,   774,    96,   197,   356,   365,   373,   460,   549,   631,
     632,  1319,    24,   286,   749,   750,   751,   764,   765,   766,
     772,   774,   742,   743,   749,     6,    13,    14,    25,    26,
      55,    59,    60,    64,    70,    78,    85,    99,   116,   123,
     124,   130,   138,   144,   172,   208,   210,   218,   233,   285,
     302,   306,   344,   349,   357,   364,   365,   397,   409,   410,
     411,   412,   432,   486,   501,   504,   528,   540,   783,   838,
     840,   841,   842,   942,   946,   948,   951,   957,   958,   959,
    1149,   340,   641,   938,   114,   223,  1315,  1319,  1188,   591,
     592,   593,   146,   146,   146,   146,   146,   146,   146,   146,
     146,   146,   146,   146,   146,   146,   146,   146,   593,   547,
     997,   830,   831,    70,   324,   400,   536,   752,   753,   754,
     764,   768,   769,   770,   771,   772,   774,   574,   551,   737,
      46,  1379,   180,   647,   647,   836,   647,  1322,   624,   528,
     552,   919,   340,   340,   340,   593,  1234,  1232,   599,  1237,
    1236,   177,   586,  1322,  1138,   593,   592,  1086,   592,  1087,
     592,   592,   592,  1040,   136,   568,  1094,    18,   592,   552,
     592,   592,   592,   593,   552,   593,  1090,   592,   586,   592,
     593,   593,   592,   592,   592,   592,   177,   592,   593,  1077,
     592,   593,   593,   593,   585,   593,   592,   592,   591,  1311,
    1322,  1086,   592,   592,   592,  1086,   592,   593,   592,   592,
     592,   592,   592,  1040,   592,   593,   592,   592,   592,   592,
     593,   592,   224,   592,   593,   593,   593,   593,   592,   592,
     592,   593,   177,   593,  1086,   592,   592,   592,   593,   593,
     593,   592,   177,  1040,   177,  1040,   177,  1040,   177,   592,
     593,   592,   592,   592,   592,   593,   592,  1022,  1021,  1090,
     596,   185,   253,   445,  1337,   449,  1322,   161,   333,   525,
     542,   591,    16,  1040,  1406,   150,  1144,  1043,  1040,  1040,
    1043,   591,  1050,  1043,   592,   591,   599,  1322,  1186,   773,
     146,   449,  1212,  1213,  1325,   965,  1324,   593,   394,  1268,
    1187,  1270,  1322,  1381,  1382,   586,  1315,  1322,  1376,  1376,
    1376,   146,   166,   181,   190,   237,   238,   265,   323,   379,
    1357,  1359,   569,  1140,  1195,   211,  1013,  1014,  1315,   264,
     394,   575,  1350,  1349,   591,   796,   796,   110,   168,   195,
     261,   335,   530,  1164,  1167,  1168,   492,   799,   789,   591,
    1040,  1319,  1325,  1325,  1006,  1315,   158,   390,   550,   988,
     989,   990,   440,   448,   556,   557,   591,   826,  1203,  1206,
    1319,   186,  1376,  1376,  1376,  1399,  1034,   177,   221,  1027,
    1028,  1152,  1153,  1178,  1036,   599,  1332,   113,   521,  1322,
    1341,   313,   365,   598,   881,  1340,  1319,   177,  1257,   592,
    1322,   338,   593,   457,  1258,   389,  1157,  1244,  1258,  1253,
    1315,  1258,  1258,   622,   978,   976,  1116,  1322,    89,   213,
     231,   242,   316,   427,   487,  1108,   448,   593,  1315,  1116,
     593,   174,  1450,    46,  1157,  1213,  1213,   314,  1319,   476,
     476,   476,   476,   476,   439,  1319,  1319,  1213,   593,   757,
    1319,  1319,  1319,  1319,   110,   168,   195,   261,   335,   530,
    1163,  1319,  1319,   592,   593,  1213,  1213,   593,   751,   744,
     745,   764,   765,   766,    69,    80,   364,   852,   855,   856,
     903,   905,   909,   910,   963,   963,   364,  1213,  1213,   963,
    1213,   364,   364,  1213,  1213,   519,   122,  1213,   232,   501,
     173,   364,   380,   905,   963,   232,  1213,   501,   122,  1213,
    1213,  1213,  1213,   963,   364,    46,  1213,   784,  1213,   364,
     362,    18,   146,   519,   967,   364,   364,  1213,   125,   295,
    1322,  1213,  1213,  1213,   838,   593,   782,   783,   946,   591,
     599,   851,   857,  1314,  1322,    74,   436,   410,   939,  1420,
     380,  1129,  1130,  1131,  1322,  1040,  1163,  1319,  1319,   110,
     168,   261,   335,   530,  1165,  1319,  1163,  1319,  1319,  1319,
    1319,  1319,  1163,  1163,  1319,  1319,  1163,   621,  1213,  1213,
    1213,  1213,   593,   754,  1324,   257,   159,   746,   747,   748,
     764,   765,   766,   767,   770,   771,   772,   774,   365,   508,
    1322,  1439,     8,    29,   732,   647,   591,   424,   246,   591,
     776,   837,   839,   840,    45,   192,   434,   924,   924,  1315,
    1315,  1315,  1190,  1322,   552,  1140,  1322,  1097,   599,  1237,
     220,  1040,   592,   355,  1059,  1040,   511,  1040,  1040,   140,
      33,    58,   100,   103,   111,   318,   455,   515,   544,  1088,
      33,   882,  1324,  1040,   882,  1088,   592,  1059,   592,   220,
     220,  1040,  1040,  1090,  1040,  1040,  1040,  1040,  1040,  1043,
     592,  1059,   592,  1059,  1040,  1036,   177,  1056,  1075,   572,
     572,  1040,  1040,  1040,  1040,  1040,  1090,  1059,  1059,   220,
    1040,  1040,  1040,   592,  1059,  1040,  1040,  1040,  1040,   177,
    1040,   177,  1040,   177,  1040,  1040,  1059,  1059,  1040,  1405,
    1405,   592,   599,   599,   599,  1324,  1040,  1406,  1042,   592,
     593,   592,  1050,  1133,  1133,    16,  1040,  1406,  1144,   207,
     420,  1058,  1059,  1089,  1090,  1322,   843,  1324,   615,   256,
     592,   593,   599,   599,   519,   519,   519,  1358,  1141,  1158,
    1159,  1203,   508,  1321,   593,  1015,   575,   253,  1035,    46,
     591,   806,   796,   793,   794,   795,  1322,   519,   989,   827,
    1204,   591,  1209,  1214,  1209,   592,   826,  1205,  1308,  1309,
    1312,  1322,  1207,   346,   177,   177,   177,  1020,   131,  1097,
    1179,   174,   256,  1032,  1178,  1158,  1028,    18,  1038,  1319,
    1322,   586,  1322,   599,   228,   599,  1212,   113,   882,   883,
    1212,   174,  1212,   598,  1324,    33,   113,   885,   886,  1324,
    1165,  1249,   148,   566,  1161,  1161,   571,   335,  1140,  1253,
     593,  1111,  1116,  1096,   231,   231,   352,  1118,   231,   242,
     427,  1118,  1109,  1096,  1224,  1225,  1312,  1098,  1138,  1113,
    1114,  1163,   298,  1154,   113,   887,   889,  1324,   883,    99,
      99,   114,   223,   203,   775,  1164,   757,   632,   775,   775,
     751,   593,   745,   927,  1314,  1001,    60,   173,   380,   541,
     854,   904,   853,   854,   927,   905,   906,   906,  1314,  1001,
    1165,  1163,  1314,  1163,    12,   947,   955,   956,  1322,  1001,
    1319,  1319,   881,  1213,  1163,   234,   955,   234,  1314,  1314,
     843,  1213,   166,   237,   329,   846,  1163,  1165,  1165,  1314,
    1001,  1150,  1151,  1312,   113,  1163,   787,  1319,  1001,  1315,
    1001,  1001,    73,    75,   113,   134,   167,   401,   845,  1163,
     843,   591,     6,   130,   959,   849,   850,   851,   852,  1322,
       8,   166,   966,   402,   853,   895,   858,   599,   327,   378,
      22,   153,   635,   519,   123,   138,   637,   591,  1421,   592,
     593,  1319,  1164,   775,   775,   754,   345,   188,  1213,   593,
     748,   508,   424,   591,   117,   217,   546,   733,   634,  1433,
     111,   222,   396,   488,   848,  1315,   246,   364,   777,   782,
     849,   782,   593,   839,   625,   626,   627,   599,  1097,  1152,
    1237,  1140,  1138,  1040,   592,  1059,   591,  1040,   511,   591,
     874,   875,   875,   591,   869,   870,   874,   875,   222,   222,
     592,   592,   592,   592,   592,  1059,  1059,  1040,  1040,   592,
     592,   349,  1083,   593,   593,   592,   593,   592,   224,  1070,
    1071,  1059,  1059,   592,  1038,   166,   237,  1057,  1058,   188,
     188,   592,   592,   592,   593,   592,   592,  1040,   592,   174,
     592,   592,   593,  1059,   592,   593,   593,   592,  1040,   592,
    1040,   592,  1040,   592,   592,   592,  1408,  1408,   599,   928,
     592,  1090,  1042,   592,   593,   592,   334,   334,  1059,   592,
    1382,   586,   586,  1378,  1378,  1378,   591,  1040,   340,  1219,
    1285,  1014,   207,  1018,   804,  1043,   792,   364,   807,   808,
     592,   593,  1325,  1029,  1210,  1211,  1312,  1215,   593,   591,
    1206,   592,   592,   593,   599,  1397,   177,  1378,  1378,  1378,
    1140,  1140,   132,   353,  1174,  1175,  1180,   546,   224,  1319,
    1322,   599,  1322,   244,  1322,    12,    33,   113,   340,  1040,
    1344,    66,   888,  1040,  1325,   339,   365,   508,  1343,  1337,
    1212,  1157,   268,  1258,   622,  1400,  1112,   596,   231,  1109,
    1118,  1118,   231,   340,   340,   552,   593,  1223,  1212,  1127,
    1128,  1029,  1040,  1155,  1310,   745,   949,  1040,   234,   234,
     906,   927,   912,   927,   927,   130,   448,   947,   960,   944,
     593,  1164,   883,  1319,   927,   965,  1319,   961,   947,   593,
      19,   118,  1156,   947,   952,   947,  1270,   592,   593,  1322,
    1315,    32,    33,    38,    40,    42,    43,    58,   100,   103,
     111,   128,   145,   167,   169,   182,   183,   222,   250,   259,
     260,   262,   291,   292,   293,   309,   310,   311,   315,   318,
     336,   337,   371,   372,   396,   444,   448,   458,   509,   512,
     515,   516,   517,   518,   558,   559,   580,   859,   862,   863,
     864,   865,   866,   867,   868,  1322,   378,  1040,  1040,   340,
     641,   647,   340,    70,   642,  1322,  1422,    18,  1130,   591,
    1322,   775,   748,   848,  1440,   340,   340,   658,   659,   661,
    1322,   461,  1315,   826,   592,   207,   415,   779,  1290,   839,
     591,   591,   591,  1322,  1140,   247,  1162,  1133,   364,  1060,
    1040,   110,   261,   335,   530,    20,    33,    47,   538,   881,
     891,   335,  1133,  1133,    46,   442,  1082,  1040,  1040,  1090,
      42,   316,   592,   571,  1072,  1059,   591,   591,  1040,  1133,
    1040,  1040,  1040,  1040,   592,   592,   592,   592,  1322,   592,
    1090,   417,  1383,  1383,  1383,   113,  1040,  1217,  1218,   133,
    1290,   240,  1036,   192,   234,   809,   592,   593,   795,  1033,
     593,  1212,  1216,  1217,  1214,  1208,  1206,  1308,  1322,  1378,
    1158,   188,  1145,  1321,  1321,   598,  1176,  1177,  1324,   450,
     586,   394,   413,   443,  1342,   889,  1212,   591,   591,  1341,
    1040,   146,   592,  1099,  1096,  1109,   231,   231,  1096,  1109,
    1102,  1101,  1103,  1225,  1140,  1218,  1125,  1126,  1033,   593,
    1156,   363,   591,   950,   927,   912,   591,   911,   911,   113,
     113,   857,   996,   956,   888,   859,   943,  1151,   953,   955,
     945,   592,   850,   896,   874,   874,   875,   869,   376,   860,
     869,   869,   891,    58,   558,   863,   865,   891,   891,    58,
     559,   559,   562,   869,   861,   875,   875,   891,   874,   875,
      25,    66,    70,   113,   333,   340,   380,   444,   541,   877,
     878,   879,   894,  1046,   562,   874,   891,    33,   874,   892,
     874,   874,   875,   591,   870,   876,   599,  1133,   457,  1319,
     129,   940,   592,   593,  1423,  1424,   631,   461,   215,   224,
     354,   662,   663,   664,   665,  1035,   436,   592,   593,   660,
    1319,   592,   592,   837,    18,   829,   925,   926,  1322,   925,
     925,  1161,   592,    46,   349,   391,   431,  1061,  1065,  1066,
     592,   592,   592,   592,   892,    20,   538,   881,   893,   892,
     882,   593,   592,   592,  1084,  1303,   592,   592,   593,   592,
     304,   236,   389,   349,   349,   592,   592,   592,   592,   592,
     592,   592,    61,   229,   325,   478,   490,   576,  1374,  1375,
     571,  1384,  1384,  1384,   592,   593,  1220,   221,   592,   591,
     797,   591,   810,  1322,   808,   828,  1211,  1218,   592,  1400,
      46,   193,  1142,  1181,  1324,   593,   304,    71,   532,   394,
    1343,   508,   508,  1212,  1319,  1138,   340,  1105,  1109,  1109,
     340,  1107,  1040,  1040,   591,  1152,   172,   207,   551,  1120,
    1121,  1124,  1115,  1310,  1164,   807,   591,   591,   925,   591,
     591,   103,   512,   515,   584,   585,  1305,  1306,   966,   877,
    1001,   954,   988,   282,   340,   591,   897,   899,   900,   901,
     455,   544,   581,   871,   872,   873,   591,   871,   871,   891,
     562,   871,   591,   891,   871,   887,  1319,   328,   880,  1305,
     546,   113,   234,   879,   234,   333,   891,   892,   891,   892,
     871,   335,   871,  1322,   636,   643,   644,  1322,   440,   591,
    1425,   592,  1319,   592,   593,   660,  1428,   635,  1434,   661,
     859,   778,   782,   591,   826,   592,   593,  1156,   591,   592,
     592,  1090,    46,   592,    31,    92,   220,   531,  1040,  1067,
     882,   892,   335,  1085,  1310,  1040,   304,   157,    46,    46,
     508,   508,   508,    16,  1373,   186,   283,   284,   288,   289,
    1385,  1386,  1218,   234,   503,  1035,   800,   802,   803,  1322,
     556,   811,   847,  1028,  1158,  1146,  1143,  1152,   881,   884,
    1177,   592,   592,  1344,    16,  1104,   552,  1106,   552,  1132,
    1322,  1162,   905,   905,  1121,   847,  1156,   592,   925,   925,
     592,   925,   925,  1307,  1307,   962,   221,   178,   361,   456,
     117,   546,   898,  1322,   901,   873,   929,  1303,   929,  1039,
     328,   557,   480,   638,    52,    63,   164,   206,   230,   241,
     343,   425,   645,   683,   685,   686,   687,   689,   690,   691,
     692,   693,   694,   696,   704,   705,   708,   719,   722,   724,
     725,  1318,  1323,  1327,  1022,  1021,   571,  1426,  1441,   664,
    1322,  1315,   640,   641,   424,  1400,   779,   826,   780,   233,
     913,   916,   919,   920,   921,   926,   335,   571,   914,   918,
     920,   923,   915,   917,   920,   922,  1062,  1310,  1067,   433,
    1040,   171,   375,  1068,  1068,   592,   593,  1156,   592,  1062,
    1062,  1374,   346,  1163,  1163,  1163,  1163,  1386,   546,  1315,
     804,   491,   805,   592,   593,   224,   243,    70,    99,   210,
     285,   302,   324,   501,   823,   824,   825,  1252,  1032,  1147,
    1310,  1040,  1158,   883,  1182,   269,  1040,   591,  1040,   591,
     592,   593,   174,  1119,  1119,   592,   592,   913,   592,   592,
     966,   591,    50,   329,   422,   448,   902,   902,   592,   593,
     592,   593,   592,  1039,  1040,   141,   639,   706,   709,  1322,
     177,   323,   697,   684,  1323,  1323,  1322,   688,   606,   263,
     414,   570,   728,    30,   726,   600,   592,    51,    60,   253,
     649,   859,   174,   637,  1435,   592,  1397,  1213,   921,  1156,
     592,   360,   923,   922,   593,  1064,  1065,  1156,    16,  1133,
    1310,   592,   592,  1226,  1227,  1312,  1286,  1036,  1164,   801,
     803,   591,   510,  1213,   122,   122,  1213,  1213,  1213,  1213,
     591,   818,   825,   144,   571,   593,  1148,  1156,   382,  1169,
      68,  1291,   146,  1132,  1132,  1322,   188,   231,   349,  1123,
    1122,   895,   913,   914,   915,   807,     5,   113,   333,   899,
    1322,   891,  1303,   891,  1040,  1040,   568,   711,   715,   177,
    1322,   699,   700,  1040,   667,   682,   683,   685,   687,   689,
     691,   692,   693,   694,   696,   704,   719,   722,   724,   667,
     729,   727,   720,   723,  1400,    60,   346,    60,   121,   650,
     651,  1046,  1442,  1035,   642,   859,   781,  1163,  1318,  1310,
     334,  1063,  1067,  1068,  1156,  1059,  1059,   593,  1212,   884,
     592,   805,   815,   816,   817,  1043,   290,   591,   812,   813,
     814,  1319,  1213,  1213,   261,   335,   530,  1166,  1167,  1166,
    1164,  1324,   492,   819,   820,  1213,    90,   429,  1310,  1322,
     139,   149,   347,   507,  1292,  1293,   249,  1294,  1165,   592,
     592,    46,    46,   591,   591,   592,   707,   716,   136,   715,
     718,   221,   140,  1040,   140,   682,   597,   545,  1040,   668,
     728,   726,   346,   346,   121,   682,  1429,   129,  1436,  1400,
    1156,   166,   237,  1227,  1218,  1287,   592,   593,   290,   817,
    1319,  1319,   821,   592,   593,   843,  1156,  1170,    46,    46,
     139,    46,  1293,   479,   507,  1295,  1296,    16,  1129,  1131,
     568,   710,   712,  1040,   667,   140,   695,   206,   511,   263,
     597,   731,   129,   112,   666,   669,   721,  1323,   721,   135,
     643,   649,  1063,  1291,   816,   592,   592,   822,  1324,   820,
     591,  1303,  1303,    46,  1303,    46,    46,  1296,   272,   592,
     592,   713,   712,   718,   717,    52,   698,  1322,   701,  1040,
     730,    83,   156,   674,   680,  1322,   140,   682,   597,   433,
    1437,  1294,   823,  1035,  1171,  1172,  1173,  1303,  1303,  1303,
     146,  1040,   140,   511,   593,   667,   140,   667,   191,   593,
     670,    77,    94,   597,  1430,   682,   207,  1297,  1040,   592,
     593,  1163,   714,    52,   667,  1322,   702,   414,   140,   174,
    1322,   859,   174,   174,   682,   335,   591,  1298,  1036,  1173,
     511,   136,   137,   703,   570,   671,   113,   681,   467,   677,
    1163,   672,   673,   249,   592,   598,  1299,  1300,  1312,   448,
    1301,   667,   667,   699,   466,   468,   675,   676,   677,   679,
    1046,  1322,  1040,   557,   678,  1019,  1324,   592,   593,  1226,
     593,   682,   175,  1320,  1300,   676
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1555 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1567 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                ! lip->stmt_prepare_mode &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1592 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:

/* Line 1455 of yacc.c  */
#line 1665 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:

/* Line 1455 of yacc.c  */
#line 1680 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 1690 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1697 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1707 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1714 "sql_yacc.yy"
    {}
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 1729 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 1741 "sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 1749 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 1760 "sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 1766 "sql_yacc.yy"
    {}
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 1776 "sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 1780 "sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 1784 "sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 1788 "sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 1792 "sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 1796 "sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 1801 "sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 1805 "sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 1809 "sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 1813 "sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 1817 "sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 1821 "sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 1830 "sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 1834 "sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 1850 "sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 1854 "sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 1865 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 1883 "sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 1898 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 1903 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str))
              MYSQL_YYABORT;
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 1909 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 1914 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str))
              MYSQL_YYABORT;
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 1920 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 1925 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str))
              MYSQL_YYABORT;
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 1930 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 1935 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 1942 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 1948 "sql_yacc.yy"
    {}
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 1950 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 1954 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 1958 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 1962 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 1973 "sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 1987 "sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 1991 "sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 1995 "sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 1999 "sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2003 "sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2007 "sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2011 "sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2018 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2038 "sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2049 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2056 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2062 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2064 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2070 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2076 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2085 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2092 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2100 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2106 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2112 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2118 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2126 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2128 "sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2135 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2178 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2210 "sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2225 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2241 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2259 "sql_yacc.yy"
    {}
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2260 "sql_yacc.yy"
    {}
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2264 "sql_yacc.yy"
    {}
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2265 "sql_yacc.yy"
    {}
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2271 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2273 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2275 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2277 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2279 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 2281 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2283 "sql_yacc.yy"
    {}
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2288 "sql_yacc.yy"
    { }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2289 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2290 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2295 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2299 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2306 "sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2314 "sql_yacc.yy"
    {}
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2330 "sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2334 "sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2352 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2372 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2409 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2434 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2435 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2436 "sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2437 "sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2441 "sql_yacc.yy"
    {}
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 2446 "sql_yacc.yy"
    {}
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2452 "sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2456 "sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2482 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2490 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2547 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

	    if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 2562 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
	                              ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2584 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
	          sp->add_instr(i) ||
	          sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2616 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
	    if (i == NULL ||
                sp->add_instr(i) ||
	        ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2641 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2645 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2664 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2665 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2671 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2673 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2678 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2701 "sql_yacc.yy"
    { /* mysql errno */
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2709 "sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, 5);
            (yyval.spcondtype)->sqlstate[5]= '\0';
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2725 "sql_yacc.yy"
    {}
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2726 "sql_yacc.yy"
    {}
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2731 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2735 "sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2744 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2751 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2758 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 2768 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 2783 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 2800 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 2801 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 2822 "sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 2824 "sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 2828 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 2837 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 2885 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 2887 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 2913 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 2919 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 2928 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 2981 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3024 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3044 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3061 "sql_yacc.yy"
    {}
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3066 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3092 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3112 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3134 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3136 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
	        sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3152 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3164 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3184 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3190 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3203 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3211 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3219 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3237 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3241 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3253 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3262 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3266 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3276 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3285 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3300 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3318 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3335 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3336 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3341 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3357 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3373 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3380 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3388 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3397 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3425 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3435 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3437 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
	    /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3453 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3464 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3466 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3485 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3487 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3492 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 308:

/* Line 1455 of yacc.c  */
#line 3494 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 3496 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 313:

/* Line 1455 of yacc.c  */
#line 3530 "sql_yacc.yy"
    {}
    break;

  case 314:

/* Line 1455 of yacc.c  */
#line 3532 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3542 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3548 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3571 "sql_yacc.yy"
    {}
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 3665 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 3673 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 3681 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 3689 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 3701 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 3713 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 3718 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 3723 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 3731 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 3739 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 3747 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 3755 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 3763 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 3771 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 3779 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 3792 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 3805 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 3824 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 3829 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 3841 "sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 3843 "sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 3893 "sql_yacc.yy"
    {}
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 3896 "sql_yacc.yy"
    {}
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 3898 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 3912 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 395:

/* Line 1455 of yacc.c  */
#line 3930 "sql_yacc.yy"
    {}
    break;

  case 396:

/* Line 1455 of yacc.c  */
#line 3933 "sql_yacc.yy"
    {
             Select->set_braces(1);
             Lex->create_select_start_with_brace= TRUE;
           }
    break;

  case 397:

/* Line 1455 of yacc.c  */
#line 3937 "sql_yacc.yy"
    {}
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 3941 "sql_yacc.yy"
    {}
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 3943 "sql_yacc.yy"
    {
            Select->set_braces(0);
            Lex->create_select_start_with_brace= FALSE;
          }
    break;

  case 400:

/* Line 1455 of yacc.c  */
#line 3947 "sql_yacc.yy"
    {}
    break;

  case 401:

/* Line 1455 of yacc.c  */
#line 3949 "sql_yacc.yy"
    {
            Select->set_braces(1);
            Lex->create_select_start_with_brace= TRUE;
          }
    break;

  case 402:

/* Line 1455 of yacc.c  */
#line 3953 "sql_yacc.yy"
    {}
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 3981 "sql_yacc.yy"
    {}
    break;

  case 405:

/* Line 1455 of yacc.c  */
#line 3987 "sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX *lex= Lex;
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-partition");
              MYSQL_YYABORT;
            }
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     "partitioning", "--with-partition");
            MYSQL_YYABORT;
#endif

          }
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 4019 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 4031 "sql_yacc.yy"
    {}
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4040 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->list_of_part_fields= TRUE;
            lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4046 "sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4047 "sql_yacc.yy"
    {}
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4049 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4050 "sql_yacc.yy"
    {}
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 4052 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4053 "sql_yacc.yy"
    {}
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4057 "sql_yacc.yy"
    {}
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4059 "sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 4063 "sql_yacc.yy"
    {}
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 4064 "sql_yacc.yy"
    {}
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4068 "sql_yacc.yy"
    {}
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4069 "sql_yacc.yy"
    {}
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4074 "sql_yacc.yy"
    {
            if (Lex->part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 4085 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_part_fields= FALSE;
            lex->part_info->part_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->part_func_string= func_string;
            lex->part_info->part_func_len= expr_len;
          }
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 4100 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_subpart_fields= FALSE;
            lex->part_info->subpart_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->subpart_func_string= func_string;        
            lex->part_info->subpart_func_len= expr_len;
          }
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 4115 "sql_yacc.yy"
    {}
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 4117 "sql_yacc.yy"
    { 
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            lex->part_info->no_parts= no_parts;
            lex->part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 4132 "sql_yacc.yy"
    {}
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4134 "sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4135 "sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4138 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->subpart_type= HASH_PARTITION;
            lex->part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4143 "sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4147 "sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4148 "sql_yacc.yy"
    {}
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4153 "sql_yacc.yy"
    {
            if (Lex->part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4164 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4179 "sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4181 "sql_yacc.yy"
    {
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->no_subparts= no_parts;
            lex->part_info->use_default_no_subpartitions= FALSE;
          }
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 4196 "sql_yacc.yy"
    {}
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 4198 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->no_parts != 0)
            {
              if (part_info->no_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->no_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4220 "sql_yacc.yy"
    {}
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 4221 "sql_yacc.yy"
    {}
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4226 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4246 "sql_yacc.yy"
    {}
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4251 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4261 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (lex->part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (lex->part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4282 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4297 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= LIST_PARTITION;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4315 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            lex->part_info->defined_max_value= TRUE;
            lex->part_info->curr_part_elem->max_value= TRUE;
            lex->part_info->curr_part_elem->range_value= LONGLONG_MAX;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4327 "sql_yacc.yy"
    {
            if (Lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            if (Lex->part_info->curr_part_elem->has_null_value)
            {
              my_parse_error(ER(ER_NULL_IN_VALUES_LESS_THAN));
              MYSQL_YYABORT;
            }
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4348 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (!((yyvsp[(2) - (3)].p_elem_value)->unsigned_flag))
              part_info->curr_part_elem->signed_flag= TRUE;
            part_info->curr_part_elem->range_value= (yyvsp[(2) - (3)].p_elem_value)->value;
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4357 "sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4358 "sql_yacc.yy"
    {}
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4363 "sql_yacc.yy"
    {
            part_elem_value *value_ptr= (yyvsp[(1) - (1)].p_elem_value);
            partition_info *part_info= Lex->part_info;
            if (!value_ptr->unsigned_flag)
              part_info->curr_part_elem->signed_flag= TRUE;
            if (!value_ptr->null_value &&
               part_info->curr_part_elem->
                list_val_list.push_back(value_ptr))
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4380 "sql_yacc.yy"
    {
            Item *part_expr= (yyvsp[(1) - (1)].item);
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Name_resolution_context *context= &lex->current_select->context;
            TABLE_LIST *save_list= context->table_list;
            const char *save_where= thd->where;

            context->table_list= 0;
            thd->where= "partition function";

            part_elem_value *value_ptr= 
              (part_elem_value*)sql_alloc(sizeof(part_elem_value));
            if (!value_ptr)
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
            if (part_expr->walk(&Item::check_partition_func_processor, 0,
                                NULL))
            {
              my_error(ER_PARTITION_FUNCTION_IS_NOT_ALLOWED, MYF(0));
              MYSQL_YYABORT;
            }
            if (part_expr->fix_fields(YYTHD, (Item**)0) ||
                ((context->table_list= save_list), FALSE) ||
                (!part_expr->const_item()) ||
                (!lex->safe_to_cache_query))
            {
              my_error(ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR, MYF(0));
              MYSQL_YYABORT;
            }
            thd->where= save_where;
            value_ptr->value= part_expr->val_int();
            value_ptr->unsigned_flag= TRUE;
            if (!part_expr->unsigned_flag &&
                value_ptr->value < 0)
              value_ptr->unsigned_flag= FALSE;
            if ((value_ptr->null_value= part_expr->null_value))
            {
              if (Lex->part_info->curr_part_elem->has_null_value)
              {
                my_error(ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              Lex->part_info->curr_part_elem->has_null_value= TRUE;
            }
            else if (part_expr->result_type() != INT_RESULT)
            {
              my_parse_error(ER(ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.p_elem_value)= value_ptr; 
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4438 "sql_yacc.yy"
    {
            if (Lex->part_info->no_subparts != 0 &&
                !Lex->part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4451 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (part_info->no_subparts != 0)
            {
              if (part_info->no_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->no_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4477 "sql_yacc.yy"
    {}
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4478 "sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4483 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_no_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4516 "sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4521 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4525 "sql_yacc.yy"
    {}
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4526 "sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4530 "sql_yacc.yy"
    {}
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4531 "sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4536 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4538 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            lex->part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4544 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4546 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4548 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4550 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4552 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4554 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4563 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->lock_option= TL_READ_DEFAULT;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;

            if (lex->sql_command == SQLCOM_CREATE_TABLE &&
                (lex->create_info.options & HA_LEX_CREATE_IF_NOT_EXISTS))
            {
              Lex_input_stream *lip= YYLIP;

              if (lex->spcont)
                lex->create_select_pos= lip->get_tok_start() -
                  lex->sphead->m_tmp_query;
              else
                lex->create_select_pos= lip->get_tok_start() - lip->get_buf();
              lex->create_select_in_comment= (lip->in_comment == DISCARD_COMMENT);
            }
          }
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4592 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4596 "sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4606 "sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4607 "sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4611 "sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4612 "sql_yacc.yy"
    {}
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4616 "sql_yacc.yy"
    {}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4617 "sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4621 "sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4622 "sql_yacc.yy"
    {}
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4626 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4627 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4631 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4632 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4636 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4640 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4641 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4662 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4667 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            WARN_DEPRECATED(yythd, "6.0", "TYPE=storage_engine",
                            "'ENGINE=storage_engine'");
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4674 "sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4679 "sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4684 "sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4689 "sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4694 "sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4699 "sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4704 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4719 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4725 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4730 "sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4735 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4740 "sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4745 "sql_yacc.yy"
    {
            /* Move the union list to the merge_list */
            LEX *lex=Lex;
            TABLE_LIST *table_list= lex->select_lex.get_table_list();
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->create_info.merge_list.elements--;
            lex->create_info.merge_list.first= table_list->next_local;
            lex->select_lex.table_list.elements=1;
            lex->select_lex.table_list.next= &(table_list->next_local);
            table_list->next_local= 0;
            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 4760 "sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 4765 "sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 4770 "sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 4775 "sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 4777 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 4779 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 4781 "sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 4787 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 4795 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 4813 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
              {
                my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                         (yyvsp[(4) - (4)].charset)->name, cinfo->default_table_charset->csname);
                MYSQL_YYABORT;
              }
              Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
              Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 4830 "sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 4853 "sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 4866 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 4867 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 4868 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 4869 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 4870 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 4871 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 4875 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 4876 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 4877 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 4881 "sql_yacc.yy"
    {}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 4886 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 4887 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 4888 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 4889 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 4905 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 4912 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 4918 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 4924 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 4930 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].simple_string) ? (yyvsp[(3) - (8)].simple_string) : (yyvsp[(1) - (8)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 4935 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(1) - (8)].simple_string) ? (yyvsp[(1) - (8)].simple_string) : (yyvsp[(4) - (8)].simple_string);
            const char *fkey_name = (yyvsp[(4) - (8)].simple_string) ? (yyvsp[(4) - (8)].simple_string) : key_name;
            Key *key= new Foreign_key(fkey_name, lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, key_name, 
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 4955 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 4959 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 4974 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 4975 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 4979 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(2) - (2)].simple_string); }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 4984 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 4993 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5006 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5007 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5008 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5010 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5015 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5019 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5024 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5029 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5033 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5038 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5043 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5049 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5054 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5060 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5064 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5069 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5074 "sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5092 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5094 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5096 "sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5109 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5111 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5116 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5121 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5133 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5138 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5143 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5148 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5150 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5152 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5154 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5156 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5158 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5160 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5162 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5164 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5166 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5168 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5170 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5172 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5174 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5182 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5183 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5185 "sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5189 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5190 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5191 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5192 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5193 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5197 "sql_yacc.yy"
    {}
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5201 "sql_yacc.yy"
    {}
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5202 "sql_yacc.yy"
    {}
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5206 "sql_yacc.yy"
    {}
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5207 "sql_yacc.yy"
    {}
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5211 "sql_yacc.yy"
    {}
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5212 "sql_yacc.yy"
    {}
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5213 "sql_yacc.yy"
    {}
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5214 "sql_yacc.yy"
    {}
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5215 "sql_yacc.yy"
    {}
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5219 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5220 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5221 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5222 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5223 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5228 "sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5233 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5235 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5240 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5242 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5244 "sql_yacc.yy"
    {}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5249 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5257 "sql_yacc.yy"
    {}
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5258 "sql_yacc.yy"
    {}
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5262 "sql_yacc.yy"
    {}
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5263 "sql_yacc.yy"
    {}
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5267 "sql_yacc.yy"
    {}
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5268 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5269 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5273 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5274 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5275 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5276 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5279 "sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5280 "sql_yacc.yy"
    { }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5283 "sql_yacc.yy"
    {}
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5284 "sql_yacc.yy"
    {}
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5288 "sql_yacc.yy"
    {}
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5289 "sql_yacc.yy"
    {}
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5293 "sql_yacc.yy"
    {}
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5298 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5299 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5300 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5302 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5308 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5310 "sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5316 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5322 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5328 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5333 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5335 "sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5351 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5357 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5361 "sql_yacc.yy"
    {}
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5362 "sql_yacc.yy"
    {}
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5367 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5374 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5378 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5379 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5383 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5384 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5389 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5397 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5401 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5402 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5407 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5417 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5418 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5422 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5423 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5427 "sql_yacc.yy"
    {}
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5428 "sql_yacc.yy"
    {}
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5432 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5433 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5434 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5436 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5444 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5445 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 5449 "sql_yacc.yy"
    { }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 5450 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5454 "sql_yacc.yy"
    { Lex->charset= NULL; }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5455 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5457 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5465 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (2)].charset); }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5475 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->fk_delete_opt= lex->fk_update_opt= lex->fk_match_option= 0;
            lex->ref_list.empty();
          }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5481 "sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (4)].table);
          }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5487 "sql_yacc.yy"
    {}
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5488 "sql_yacc.yy"
    {}
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5493 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5500 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5509 "sql_yacc.yy"
    {}
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5510 "sql_yacc.yy"
    {}
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5514 "sql_yacc.yy"
    {}
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5515 "sql_yacc.yy"
    {}
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5519 "sql_yacc.yy"
    { Lex->fk_delete_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5520 "sql_yacc.yy"
    { Lex->fk_update_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5521 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5522 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5523 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5527 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5528 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 5529 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 5530 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 5531 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 5535 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 5539 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 5540 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 5544 "sql_yacc.yy"
    {}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 5545 "sql_yacc.yy"
    {}
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 5549 "sql_yacc.yy"
    {}
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 5554 "sql_yacc.yy"
    {}
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 5555 "sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 5556 "sql_yacc.yy"
    {}
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 5560 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 5561 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 5565 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 5570 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 5582 "sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 5599 "sql_yacc.yy"
    {}
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 5604 "sql_yacc.yy"
    {}
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 5609 "sql_yacc.yy"
    {}
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 5629 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 5630 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 5635 "sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 5650 "sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 5662 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 5663 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 5664 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 5668 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 5669 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 5674 "sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 5680 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str).str,(uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 5693 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; /* Default length */ }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 5694 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 5698 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 5699 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 5703 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 5704 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 5712 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 5735 "sql_yacc.yy"
    {}
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 5737 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 5742 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 5751 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 5762 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 5773 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 5780 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 5791 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 5798 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 5809 "sql_yacc.yy"
    {}
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 5816 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 5828 "sql_yacc.yy"
    {}
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 5830 "sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 5850 "sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 5863 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 5868 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 5873 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 5878 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 5883 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 5892 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 5893 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 5894 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 5895 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 5899 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 5901 "sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 5912 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 5913 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 5917 "sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 5918 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 5923 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 5924 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 5941 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 5946 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 5953 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 5963 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 5971 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_CHECK;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->check_opt.init();
          }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 5980 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 5989 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.no_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6000 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6007 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 6015 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6027 "sql_yacc.yy"
    {}
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6033 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 6038 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6046 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 6061 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6065 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6069 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6076 "sql_yacc.yy"
    {}
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6077 "sql_yacc.yy"
    {}
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6082 "sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6102 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6110 "sql_yacc.yy"
    { }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6112 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6116 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6120 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6127 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6136 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6149 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6158 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6162 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6171 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6180 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6186 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6192 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6201 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6210 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6229 "sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6250 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
          }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6255 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_FORCE;
          }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6259 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6266 "sql_yacc.yy"
    {}
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6267 "sql_yacc.yy"
    {}
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6271 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6272 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6276 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6277 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6278 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6282 "sql_yacc.yy"
    {}
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6283 "sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6284 "sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6288 "sql_yacc.yy"
    {}
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6289 "sql_yacc.yy"
    {}
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6290 "sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6291 "sql_yacc.yy"
    {}
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6300 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6309 "sql_yacc.yy"
    {}
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6311 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6318 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6326 "sql_yacc.yy"
    {}
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6328 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6337 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6345 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6347 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6353 "sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6355 "sql_yacc.yy"
    {}
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6364 "sql_yacc.yy"
    {}
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6365 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6366 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6370 "sql_yacc.yy"
    {}
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6372 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6393 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RESTORE_TABLE;
          }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 6397 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 6404 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BACKUP_TABLE;
          }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 6408 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6415 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6420 "sql_yacc.yy"
    {}
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6424 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 6425 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6426 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6431 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6439 "sql_yacc.yy"
    {}
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6443 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6444 "sql_yacc.yy"
    {}
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6448 "sql_yacc.yy"
    {}
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6449 "sql_yacc.yy"
    {}
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6453 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6454 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6455 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6460 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6468 "sql_yacc.yy"
    {}
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6473 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6481 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6494 "sql_yacc.yy"
    {}
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6498 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6499 "sql_yacc.yy"
    {}
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6503 "sql_yacc.yy"
    {}
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6504 "sql_yacc.yy"
    {}
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6508 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6509 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6510 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6511 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6512 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 6513 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 6518 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6526 "sql_yacc.yy"
    {}
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 6530 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 6531 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 6532 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 6537 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 6541 "sql_yacc.yy"
    {}
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 6543 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 6550 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 6555 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 6568 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 6581 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 6595 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ, 
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 6603 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 6604 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 6609 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 6614 "sql_yacc.yy"
    {}
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 6624 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 6632 "sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        global_system_variables.old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 6643 "sql_yacc.yy"
    { }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 6649 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 6650 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 6660 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 6674 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (sel->set_braces(1))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                !sel->master_unit()->first_select()->braces &&
                sel->master_unit()->first_select()->linkage ==
                UNION_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                sel->master_unit()->fake_select_lex)
            {
 	       my_error(ER_WRONG_USAGE, MYF(0),
                        "CUBE/ROLLUP", "ORDER BY");
               MYSQL_YYABORT;
            }
            /* select in braces, can't contain global parameters */
            if (sel->master_unit()->fake_select_lex)
              sel->master_unit()->global_parameters=
                 sel->master_unit()->fake_select_lex;
          }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 6708 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 6727 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 6735 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 6742 "sql_yacc.yy"
    {}
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 6752 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table= 
                (TABLE_LIST *) Select->table_list.first;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 6767 "sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 6782 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 6784 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Lex->lock_option=  TL_READ_HIGH_PRIORITY;
            Lex->current_select->lock_option= TL_READ_HIGH_PRIORITY;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 6790 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 6791 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 6792 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 6794 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 6800 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 6806 "sql_yacc.yy"
    {
            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 6812 "sql_yacc.yy"
    {
            Lex->thd->infinidb_vtable.override_largeside_estimate=1;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 6816 "sql_yacc.yy"
    {
            /*
             Honor this flag only if SQL_NO_CACHE wasn't specified AND
             we are parsing the outermost SELECT in the query.
            */
            if (Lex->select_lex.sql_cache != SELECT_LEX::SQL_NO_CACHE &&
                Lex->current_select == &Lex->select_lex)
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 6829 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 6835 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->current_select->lock_option= TL_WRITE;
            lex->safe_to_cache_query=0;
            lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 6843 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->current_select->lock_option= TL_READ_WITH_SHARED_LOCKS;
            lex->safe_to_cache_query=0;
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 6856 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 6871 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 6896 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 6902 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 6908 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); /* table.* */ }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 6909 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 6913 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 6914 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 6915 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 6916 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 6917 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 6921 "sql_yacc.yy"
    {}
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 6922 "sql_yacc.yy"
    {}
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 6928 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 6979 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 6986 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7029 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7035 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7041 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7047 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7053 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7059 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7065 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7075 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7081 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7087 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7093 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7099 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7109 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7115 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7125 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 7131 "sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7139 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7145 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7155 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7161 "sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7170 "sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7180 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7186 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7196 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7202 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7215 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7221 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7227 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7233 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7239 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7245 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7251 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7257 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7263 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7269 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7275 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7281 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7287 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7293 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7322 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7323 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7324 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7325 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7326 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7327 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7331 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7332 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7343 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7359 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7365 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7369 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7375 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7381 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7387 "sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7393 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7395 "sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7402 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7409 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7415 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7417 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7426 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7433 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7441 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7447 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7454 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7460 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7474 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7482 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7497 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7503 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7509 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7517 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7523 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7529 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7535 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7541 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7556 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7568 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7574 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 7580 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 7586 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 7592 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7598 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7604 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7610 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 7616 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7622 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 7628 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7634 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 7640 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7646 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 7652 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 7658 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 7664 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 7672 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 7693 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 7700 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 7706 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 7713 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 7720 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 7728 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 7735 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 7741 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 7747 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 7753 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 7760 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 7767 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 7773 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 7780 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 7786 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 7792 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 7798 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 7804 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 7810 "sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe();
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 7828 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 7838 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 7844 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 7850 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 7857 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 7864 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 7879 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 7885 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 7891 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 7897 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 7903 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 7910 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 7916 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 7922 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 7928 "sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 7934 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 7946 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 7952 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 7958 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 7964 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 7970 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 7982 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 7988 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8004 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8010 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8017 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8024 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8031 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8038 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8045 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8049 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8062 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_window_func *builder;
            Item *item= NULL;

            builder= find_native_window_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              ((Create_window_func*)builder)->respectNulls = 1;            
              item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].item_list));
              if (!item)
                MYSQL_YYABORT;
              ((Item_func_window*)item)->window_ctx((yyvsp[(5) - (5)].Window_context));
              (yyval.item) = item;
            }
            else
            {
              LEX_STRING args[1];
              args[0] = (yyvsp[(1) - (5)].lex_str);
              IDB_set_error(YYTHD, logging::ERR_WF_FUNCTION_NOT_EXISTS, args, 1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8087 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_window_func *builder = NULL;
            Item *item= NULL;

            builder= find_native_window_function_builder_nulls(thd, (yyvsp[(1) - (6)].lex_str));
            if (builder)
            {
              ((Create_window_func*)builder)->respectNulls = (yyvsp[(5) - (6)].num);
              item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].item_list));
              if (!item)
                MYSQL_YYABORT;
              ((Item_func_window*)item)->window_ctx((yyvsp[(6) - (6)].Window_context));
              (yyval.item) = item;
            }
            else
            {
              builder= find_native_window_function_builder(thd, (yyvsp[(1) - (6)].lex_str));
              if (builder)
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
              }
              else
              {
                LEX_STRING args[1];
                args[0] = (yyvsp[(1) - (6)].lex_str);
                IDB_set_error(YYTHD, logging::ERR_WF_FUNCTION_NOT_EXISTS, args, 1);
                MYSQL_YYABORT;
              }
              MYSQL_YYABORT;
            }
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8123 "sql_yacc.yy"
    {
              LEX_STRING funcname= { C_STRING_WITH_LEN("SUM") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_sum(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8131 "sql_yacc.yy"
    {
              // order by clause is not allowed for distinct
              if ((yyvsp[(6) - (6)].Window_context)->ordering)
              {
                IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
                MYSQL_YYABORT;
              }
              LEX_STRING funcname= { C_STRING_WITH_LEN("SUM_DISTINCT") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_sum(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8145 "sql_yacc.yy"
    {
              LEX_STRING funcname= { C_STRING_WITH_LEN("AVG") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_avg(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8153 "sql_yacc.yy"
    {
              // order by clause is not allowed for distinct
              if ((yyvsp[(6) - (6)].Window_context)->ordering)
              {
                IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
                MYSQL_YYABORT;
              }
              LEX_STRING funcname= { C_STRING_WITH_LEN("AVG_DISTINCT") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_avg(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8167 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT(*)") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, (yyvsp[(6) - (6)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8175 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8183 "sql_yacc.yy"
    {
            Item* item = NULL;
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT_DISTINCT") };
            if ((yyvsp[(4) - (6)].item_list))
            {
              List_iterator_fast<Item> it(*(yyvsp[(4) - (6)].item_list));
              item = it++;
              if ((yyvsp[(4) - (6)].item_list)->elements != 1 || !item)
              {
                LEX_STRING args[1];
                args[0] = funcname;
                IDB_set_error(YYTHD, logging::ERR_WF_WRONG_ARGS, args, 1);
                MYSQL_YYABORT;
              }
            }

            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, item, (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8211 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("MIN") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8219 "sql_yacc.yy"
    {
            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            LEX_STRING funcname= { C_STRING_WITH_LEN("MIN_DISTINCT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8233 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("MAX") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8241 "sql_yacc.yy"
    {
            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            LEX_STRING funcname= { C_STRING_WITH_LEN("MAX_DISTINCT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8255 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("VAR_POP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8263 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("VAR_SAMP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8271 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("STDDEV_POP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8279 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("STDDEV_SAMP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8288 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("NTH_VALUE") };
            Create_window_func *builder = & Create_window_func_nth_value::s_singleton;
            DBUG_ASSERT(builder);
            ((Create_window_func_nth_value*)builder)->fromFirst = (yyvsp[(5) - (7)].num);
            ((Create_window_func_nth_value*)builder)->respectNulls = (yyvsp[(6) - (7)].num);
            (yyval.item) = builder->create(YYTHD, funcname, (yyvsp[(3) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            ((Item_func_window*)(yyval.item))->window_ctx((yyvsp[(7) - (7)].Window_context));
          }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 8301 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("PERCENTILE_CONT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_percentile(funcname, (yyvsp[(3) - (12)].item), (yyvsp[(10) - (12)].list), (yyvsp[(12) - (12)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8309 "sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("PERCENTILE_DISC") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_percentile(funcname, (yyvsp[(3) - (12)].item), (yyvsp[(10) - (12)].list), (yyvsp[(12) - (12)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8318 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8319 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8320 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8323 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8324 "sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8327 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8328 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8332 "sql_yacc.yy"
    {
            if (Select->parsing_place == IN_ON)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, "ON clause");
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_WHERE)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, "WHERE clause");
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_HAVING)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, "HAVING clause");
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_GROUP_BY)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, "GROUP BY clause");
              MYSQL_YYABORT;
            }
            (yyval.Window_context) = new Window_context();
            (yyval.Window_context)->setPartitions((yyvsp[(3) - (5)].item_list));
            (yyval.Window_context)->setOrders((yyvsp[(4) - (5)].ordering));
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8359 "sql_yacc.yy"
    { (yyval.item_list) = 0; }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8360 "sql_yacc.yy"
    { (yyval.item_list) = (yyvsp[(3) - (3)].item_list); }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8364 "sql_yacc.yy"
    { (yyval.ordering) = 0; }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8366 "sql_yacc.yy"
    { 
            IDB_set_error(YYTHD, logging::ERR_WF_WINDOW_WITHOUT_ORDER, NULL, 0);
            MYSQL_YYABORT; 
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8371 "sql_yacc.yy"
    { 
            /*
            If RANGE is specified, order list shall contain a single <sort key> SK.
            The declared type of SK shall be numeric, date, or interval. The declared type of UVS shall be
            numeric if the declared type of SK is numeric -- reference ANSI-SQL 2003
            */
            if ((yyvsp[(3) - (4)].list) && (yyvsp[(3) - (4)].list)->elements > 1 && (yyvsp[(4) - (4)].frame) && (yyvsp[(4) - (4)].frame)->isRange &&  
                (((yyvsp[(4) - (4)].frame)->start && (yyvsp[(4) - (4)].frame)->start->bound == PRECEDING) || 
                ((yyvsp[(4) - (4)].frame)->end && (yyvsp[(4) - (4)].frame)->end->bound == FOLLOWING)))
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_ORDER_KEY, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.ordering) = new Ordering();
            (yyval.ordering)->orders = (yyvsp[(3) - (4)].list); 
            (yyval.ordering)->frame = (yyvsp[(4) - (4)].frame);
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8392 "sql_yacc.yy"
    { 
            if (add_to_list(YYTHD, *(yyvsp[(1) - (5)].list), (yyvsp[(3) - (5)].item),(bool) (yyvsp[(4) - (5)].num), (uint)(yyvsp[(5) - (5)].num)))
              MYSQL_YYABORT; 
            (yyval.list) = (yyvsp[(1) - (5)].list);
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8398 "sql_yacc.yy"
    {
            (yyval.list) = new SQL_LIST();
            (yyval.list)->elements= 0;
            (yyval.list)->first= 0;
            (yyval.list)->next= &((yyval.list)->first);
            if ((yyval.list) == NULL)
              MYSQL_YYABORT;
            if (add_to_list(YYTHD, *(yyval.list), (yyvsp[(1) - (3)].item), (bool) (yyvsp[(2) - (3)].num), (uint) (yyvsp[(3) - (3)].num))) 
              MYSQL_YYABORT; 
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8411 "sql_yacc.yy"
    { (yyval.num)= 2; }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8412 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8413 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8417 "sql_yacc.yy"
    { (yyval.frame)= 0; }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8418 "sql_yacc.yy"
    { (yyval.frame)= (yyvsp[(1) - (1)].frame); }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8423 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (5)].boundary)->bound == UNBOUNDED_FOLLOWING || (yyvsp[(5) - (5)].boundary)->bound == UNBOUNDED_PRECEDING ||
                ((yyvsp[(3) - (5)].boundary)->bound == CURRENT_ROW && (yyvsp[(5) - (5)].boundary)->bound == PRECEDING) ||
                ((yyvsp[(3) - (5)].boundary)->bound == FOLLOWING && (yyvsp[(5) - (5)].boundary)->bound == PRECEDING) ||
                ((yyvsp[(3) - (5)].boundary)->bound == FOLLOWING && (yyvsp[(5) - (5)].boundary)->bound == CURRENT_ROW))
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_WINDOW, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.frame) = new Frame();
            (yyval.frame)->start = (yyvsp[(3) - (5)].boundary);
            (yyval.frame)->end = (yyvsp[(5) - (5)].boundary);
            (yyval.frame)->isRange = (yyvsp[(1) - (5)].num);
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8438 "sql_yacc.yy"
    {
            if ((yyvsp[(2) - (2)].boundary)->bound == FOLLOWING || (yyvsp[(2) - (2)].boundary)->bound == UNBOUNDED_FOLLOWING)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_WINDOW, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.frame) = new Frame();
            (yyval.frame)->start = (yyvsp[(2) - (2)].boundary);
            (yyval.frame)->isRange = (yyvsp[(1) - (2)].num);
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8450 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8451 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8456 "sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = ((yyvsp[(2) - (2)].bound) == PRECEDING? UNBOUNDED_PRECEDING : UNBOUNDED_FOLLOWING);
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8461 "sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = CURRENT_ROW;
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8466 "sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = (yyvsp[(2) - (2)].bound);
            (yyval.boundary)->item = (yyvsp[(1) - (2)].item);
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8472 "sql_yacc.yy"
    {
            // @todo interval range support
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = (yyvsp[(4) - (4)].bound);
            (yyval.boundary)->item = new (YYTHD->mem_root) Item_interval((yyvsp[(2) - (4)].item), (yyvsp[(3) - (4)].interval));
          }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8481 "sql_yacc.yy"
    { (yyval.bound)= PRECEDING; }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8482 "sql_yacc.yy"
    { (yyval.bound)= FOLLOWING; }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8500 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (4)].lex_str).str, (yyvsp[(1) - (4)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            //$<udf>$= udf;
#endif
         // }
         // opt_udf_expr_list ')'
         // {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (4)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (4)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              //udf_func *udf= $<udf>3;

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(3) - (4)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8573 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8615 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8617 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8621 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8622 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8626 "sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8627 "sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8631 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8632 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8637 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8644 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8652 "sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8678 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8684 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8690 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8696 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8702 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8708 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8717 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8738 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count_distinct(* (yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8744 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8755 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8761 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8767 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8773 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8779 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8785 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8791 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8797 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8803 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8809 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8813 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8828 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8836 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8843 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8853 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8861 "sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe();
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8876 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8877 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8882 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8887 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8893 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8910 "sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8912 "sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8917 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8926 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8934 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8936 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8938 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8940 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8942 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8944 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 8946 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 8948 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 8950 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 8952 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 8954 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 8958 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 8959 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 8964 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 8971 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 8978 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 8979 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 8984 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 8991 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 8998 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 8999 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9003 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9004 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9009 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9017 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9026 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9028 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9036 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9047 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9048 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9053 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9055 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9075 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9077 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9080 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9088 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9095 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9103 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9111 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9115 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9117 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9125 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9133 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9141 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9145 "sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9151 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9161 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9169 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9178 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9182 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9189 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9199 "sql_yacc.yy"
    {}
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9200 "sql_yacc.yy"
    {}
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9201 "sql_yacc.yy"
    {}
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9206 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9211 "sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                Lex->lock_option,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9220 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9242 "sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */

            if (!((yyvsp[(3) - (6)].table_list) || (yyvsp[(6) - (6)].lex_str_ptr)) && (yyvsp[(2) - (6)].select_lex)->embedding &&
                !(yyvsp[(2) - (6)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (6)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(6) - (6)].lex_str_ptr), 0,
                                               TL_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(4) - (6)].num) || (yyvsp[(6) - (6)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (6)].table_list);
            }
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9294 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9300 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9316 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9333 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9340 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9345 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9370 "sql_yacc.yy"
    {}
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9371 "sql_yacc.yy"
    {}
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9376 "sql_yacc.yy"
    {
            (yyval.num)= global_system_variables.old_mode ? 
                  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9380 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9381 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9382 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9386 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9387 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9392 "sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9397 "sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9410 "sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9414 "sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9419 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9420 "sql_yacc.yy"
    {}
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9425 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9427 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9437 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9448 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9460 "sql_yacc.yy"
    {}
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9461 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9462 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9463 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9464 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9465 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9466 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9467 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9468 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9469 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9470 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9471 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9475 "sql_yacc.yy"
    {}
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9476 "sql_yacc.yy"
    { 
                                  (yyval.interval_time_st)=INTERVAL_MICROSECOND; 
                                  /*
                                    FRAC_SECOND was mistakenly implemented with
                                    a wrong resolution. According to the ODBC
                                    standard it should be nanoseconds, not
                                    microseconds. Changing it to nanoseconds
                                    in MySQL would mean making TIMESTAMPDIFF
                                    and TIMESTAMPADD to return DECIMAL, since
                                    the return value would be too big for BIGINT
                                    Hence we just deprecate the incorrect
                                    implementation without changing its
                                    resolution.
                                  */
                                  WARN_DEPRECATED(yythd, VER_CELOSIA, "FRAC_SECOND", "MICROSECOND");
                                }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9495 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9496 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9497 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9498 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9499 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9500 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9501 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9502 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9503 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9507 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9508 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9509 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9510 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9520 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9522 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9535 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9537 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9541 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9553 "sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9557 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9568 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9573 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9591 "sql_yacc.yy"
    {
            Select->parsing_place= IN_GROUP_BY;
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9599 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9601 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9605 "sql_yacc.yy"
    {}
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9607 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT; /* To be deleted in 5.1 */
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9620 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9647 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 9666 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 9701 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 9703 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 9707 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 9708 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 9709 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 9714 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 9720 "sql_yacc.yy"
    {}
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 9724 "sql_yacc.yy"
    {}
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 9725 "sql_yacc.yy"
    {}
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 9729 "sql_yacc.yy"
    {}
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 9734 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 9741 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 9748 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 9758 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 9762 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 9768 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 9774 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 9783 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 9788 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 9796 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 9797 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 9798 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 9799 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 9800 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 9801 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 9805 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 9806 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 9807 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 9808 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 9809 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 9813 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 9814 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 9815 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 9816 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 9817 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 9821 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 9822 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 9823 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 9824 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 9829 "sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 9840 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 9870 "sql_yacc.yy"
    {}
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 9871 "sql_yacc.yy"
    {}
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 9881 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 9892 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && 
                  (!(lex->result= new select_dumpvar(lex->nest_level))))
              MYSQL_YYABORT;
          }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 9899 "sql_yacc.yy"
    {}
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 9904 "sql_yacc.yy"
    {}
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 9909 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 9928 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 9960 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 9972 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange, lex->nest_level)))
              MYSQL_YYABORT;
          }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 9980 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 9983 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange, lex->nest_level)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 9995 "sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10006 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10012 "sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10023 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (6)].num);
            lex->drop_if_exists= (yyvsp[(4) - (6)].num);
          }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10029 "sql_yacc.yy"
    {}
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10030 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10044 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10051 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10074 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10095 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10107 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10111 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (5)].num);
          }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10117 "sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10123 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10130 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10135 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10140 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10155 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10168 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option ))
              MYSQL_YYABORT;
          }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10177 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10178 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10182 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10183 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10191 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
            /* for subselects */
            lex->lock_option= TL_READ_DEFAULT;
          }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10201 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10206 "sql_yacc.yy"
    {}
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10211 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10218 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10223 "sql_yacc.yy"
    {}
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10228 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10240 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10241 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10242 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10246 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10247 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10251 "sql_yacc.yy"
    {}
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10252 "sql_yacc.yy"
    {}
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10257 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10265 "sql_yacc.yy"
    {}
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10266 "sql_yacc.yy"
    {}
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10267 "sql_yacc.yy"
    {}
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10269 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10279 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10280 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10284 "sql_yacc.yy"
    {}
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10285 "sql_yacc.yy"
    {}
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10287 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10288 "sql_yacc.yy"
    {}
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10290 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10291 "sql_yacc.yy"
    {}
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10306 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10315 "sql_yacc.yy"
    {}
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10316 "sql_yacc.yy"
    {}
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10320 "sql_yacc.yy"
    {}
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10321 "sql_yacc.yy"
    {}
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10326 "sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10331 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10339 "sql_yacc.yy"
    {}
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10345 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10350 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10357 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10359 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10368 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10376 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->lock_option= TL_UNLOCK; /* Will be set later */
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10385 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10403 "sql_yacc.yy"
    {}
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10413 "sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10426 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10435 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10436 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10443 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            lex->lock_option= TL_WRITE_DEFAULT;
            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10451 "sql_yacc.yy"
    {}
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10456 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10462 "sql_yacc.yy"
    {}
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10464 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10466 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10471 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10473 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10480 "sql_yacc.yy"
    {}
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10481 "sql_yacc.yy"
    {}
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 10486 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (3)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(3) - (3)].lex_str_ptr),
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10498 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(5) - (5)].lex_str_ptr), 
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10512 "sql_yacc.yy"
    {}
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10513 "sql_yacc.yy"
    {}
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10517 "sql_yacc.yy"
    {}
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10518 "sql_yacc.yy"
    {}
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10522 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10523 "sql_yacc.yy"
    { Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10524 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10529 "sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 10553 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 10557 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 10561 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10565 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10569 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10573 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10577 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10581 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 10585 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 10592 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 10596 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 10605 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 10614 "sql_yacc.yy"
    {}
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 10619 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 10626 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 10634 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 10642 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 10650 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 10658 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 10666 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            WARN_DEPRECATED(yythd, "6.0", "SHOW PLUGIN", "'SHOW PLUGINS'");
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 10674 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 10681 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 10683 "sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 10685 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 10700 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
            Lex->mi.log_file_name = (yyvsp[(8) - (16)].lex_str).str;
            Lex->mi.pos = (yyvsp[(12) - (16)].ulonglong_number);
            Lex->mi.server_id = (yyvsp[(16) - (16)].ulong_num);
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 10707 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 10711 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 10715 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 10720 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 10729 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_COLUMN_TYPES;
          }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 10734 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            WARN_DEPRECATED(yythd, "6.0", "SHOW TABLE TYPES", "'SHOW [STORAGE] ENGINES'");
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 10742 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 10749 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 10754 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 10759 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 10764 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 10766 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 10768 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 10770 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 10772 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 10774 "sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 10781 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 10789 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_STATUS;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW INNODB STATUS", "'SHOW ENGINE INNODB STATUS'");
          }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 10801 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_MUTEX;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW MUTEX STATUS", "'SHOW ENGINE INNODB MUTEX'");
          }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 10813 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 10815 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 10823 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 10830 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 10837 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 10847 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 10854 "sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 10860 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 10869 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 10877 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 10881 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 10885 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 10892 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 10899 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 10905 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 10912 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 10919 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 10929 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 10939 "sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 10947 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 10949 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 10951 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 10965 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 10966 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 10970 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 10971 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 10980 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 10981 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 10985 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 10986 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 10992 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 10999 "sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11009 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11020 "sql_yacc.yy"
    {}
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11022 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11024 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11036 "sql_yacc.yy"
    {}
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11037 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11038 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11042 "sql_yacc.yy"
    {}
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11043 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11045 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11059 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11066 "sql_yacc.yy"
    {}
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11076 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES; }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11077 "sql_yacc.yy"
    {}
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11079 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11081 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11083 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11085 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11087 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11089 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11091 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11093 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11095 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11097 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11101 "sql_yacc.yy"
    {}
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11102 "sql_yacc.yy"
    {}
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11107 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11112 "sql_yacc.yy"
    {}
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11121 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11122 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11123 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11128 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11134 "sql_yacc.yy"
    {}
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11143 "sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11147 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11159 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11168 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11169 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11170 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11177 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11188 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD DATA");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11199 "sql_yacc.yy"
    {}
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11201 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            WARN_DEPRECATED(yythd, "6.0", "LOAD TABLE FROM MASTER",
                            "MySQL Administrator (mysqldump, mysql)");
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD TABLE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(3) - (5)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11218 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->lock_option= (yyvsp[(1) - (4)].lock_type);
            lex->local_file=  (yyvsp[(2) - (4)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(4) - (4)].lex_str).str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11229 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(9) - (9)].table), NULL, TL_OPTION_UPDATING,
                                           lex->lock_option))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11239 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(11) - (11)].charset); }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11242 "sql_yacc.yy"
    {}
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11244 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
            WARN_DEPRECATED(yythd, "6.0", "LOAD DATA FROM MASTER",
                            "mysqldump or future "
                            "BACKUP/RESTORE DATABASE facility");
          }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11253 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11254 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11258 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11260 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11271 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11275 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11276 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11277 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11292 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11297 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11304 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11309 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11327 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11332 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11341 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11348 "sql_yacc.yy"
    {}
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11349 "sql_yacc.yy"
    {}
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11350 "sql_yacc.yy"
    {}
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11355 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11357 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11361 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11363 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11371 "sql_yacc.yy"
    {}
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 11372 "sql_yacc.yy"
    {}
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 11379 "sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11403 "sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11415 "sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11426 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11445 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11453 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11465 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11480 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 11500 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11501 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11503 "sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11510 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11511 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11513 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11520 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11526 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11532 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11538 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11544 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11573 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 11600 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 11601 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 11602 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 11607 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11617 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11627 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11633 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11642 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11656 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 11657 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 11662 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 11671 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 11686 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 11691 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 11737 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 11742 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 11759 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 11764 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 11843 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 11868 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 11898 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 11900 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 11916 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 11925 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 11930 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 11936 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 11942 "sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 11952 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 11958 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 11967 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 11976 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 11978 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, (yyvsp[(1) - (1)].lex_str).str + wlen);
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12007 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12023 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12039 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12055 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12057 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12067 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12069 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12079 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12080 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12081 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12086 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12100 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12119 "sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12133 "sql_yacc.yy"
    {}
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12134 "sql_yacc.yy"
    {}
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12135 "sql_yacc.yy"
    {}
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12136 "sql_yacc.yy"
    {}
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12137 "sql_yacc.yy"
    {}
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12138 "sql_yacc.yy"
    {}
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12139 "sql_yacc.yy"
    {}
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12140 "sql_yacc.yy"
    {}
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12141 "sql_yacc.yy"
    {}
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12142 "sql_yacc.yy"
    {}
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12143 "sql_yacc.yy"
    {}
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12144 "sql_yacc.yy"
    {}
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12145 "sql_yacc.yy"
    {}
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12146 "sql_yacc.yy"
    {}
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12147 "sql_yacc.yy"
    {}
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12148 "sql_yacc.yy"
    {}
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12149 "sql_yacc.yy"
    {}
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12150 "sql_yacc.yy"
    {}
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12151 "sql_yacc.yy"
    {}
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12152 "sql_yacc.yy"
    {}
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12153 "sql_yacc.yy"
    {}
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12154 "sql_yacc.yy"
    {}
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12155 "sql_yacc.yy"
    {}
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12156 "sql_yacc.yy"
    {}
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12157 "sql_yacc.yy"
    {}
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12158 "sql_yacc.yy"
    {}
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12159 "sql_yacc.yy"
    {}
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12160 "sql_yacc.yy"
    {}
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12161 "sql_yacc.yy"
    {}
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12162 "sql_yacc.yy"
    {}
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12163 "sql_yacc.yy"
    {}
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12164 "sql_yacc.yy"
    {}
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12165 "sql_yacc.yy"
    {}
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12166 "sql_yacc.yy"
    {}
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12167 "sql_yacc.yy"
    {}
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12168 "sql_yacc.yy"
    {}
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12169 "sql_yacc.yy"
    {}
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12170 "sql_yacc.yy"
    {}
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12171 "sql_yacc.yy"
    {}
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12172 "sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12173 "sql_yacc.yy"
    {}
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12174 "sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12175 "sql_yacc.yy"
    {}
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12176 "sql_yacc.yy"
    {}
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12177 "sql_yacc.yy"
    {}
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12178 "sql_yacc.yy"
    {}
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12179 "sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12180 "sql_yacc.yy"
    {}
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12181 "sql_yacc.yy"
    {}
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12182 "sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12192 "sql_yacc.yy"
    {}
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12193 "sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12194 "sql_yacc.yy"
    {}
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12195 "sql_yacc.yy"
    {}
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12196 "sql_yacc.yy"
    {}
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12197 "sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12198 "sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12199 "sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12200 "sql_yacc.yy"
    {}
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12201 "sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12202 "sql_yacc.yy"
    {}
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12203 "sql_yacc.yy"
    {}
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12204 "sql_yacc.yy"
    {}
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12205 "sql_yacc.yy"
    {}
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12206 "sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12207 "sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12208 "sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12209 "sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12210 "sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12211 "sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12212 "sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12213 "sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12214 "sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12215 "sql_yacc.yy"
    {}
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12216 "sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12217 "sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12218 "sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12219 "sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12220 "sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12221 "sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12222 "sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12223 "sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12224 "sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12225 "sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12226 "sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12227 "sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12228 "sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12229 "sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12230 "sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12231 "sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12232 "sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12233 "sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12234 "sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12235 "sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12236 "sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12237 "sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12238 "sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12239 "sql_yacc.yy"
    {}
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12240 "sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12241 "sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12242 "sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12243 "sql_yacc.yy"
    {}
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12244 "sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12245 "sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12246 "sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12247 "sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12248 "sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12249 "sql_yacc.yy"
    {}
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12250 "sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12251 "sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12252 "sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12253 "sql_yacc.yy"
    {}
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12254 "sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12255 "sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12256 "sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12257 "sql_yacc.yy"
    {}
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12258 "sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12259 "sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12260 "sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12261 "sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12262 "sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12263 "sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12264 "sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12265 "sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12266 "sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12267 "sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12268 "sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12269 "sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12270 "sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12271 "sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12272 "sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12273 "sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 12274 "sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12275 "sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12276 "sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12277 "sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12278 "sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12279 "sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12280 "sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 12281 "sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 12282 "sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 12283 "sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 12284 "sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 12285 "sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 12286 "sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 12287 "sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 12288 "sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 12289 "sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 12290 "sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 12291 "sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 12292 "sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 12293 "sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 12294 "sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 12295 "sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 12296 "sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 12297 "sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 12298 "sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 12299 "sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 12300 "sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 12301 "sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 12302 "sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 12303 "sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 12304 "sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 12305 "sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 12306 "sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 12307 "sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 12308 "sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 12309 "sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 12310 "sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 12311 "sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 12312 "sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 12313 "sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 12314 "sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 12315 "sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 12316 "sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 12317 "sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 12318 "sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 12319 "sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 12320 "sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 12321 "sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 12322 "sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 12323 "sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 12324 "sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 12325 "sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 12326 "sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 12327 "sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 12328 "sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 12329 "sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 12330 "sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 12331 "sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 12332 "sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 12333 "sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 12334 "sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 12335 "sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 12336 "sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 12337 "sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 12338 "sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 12339 "sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 12340 "sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 12341 "sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 12342 "sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 12343 "sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 12344 "sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 12345 "sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 12346 "sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 12347 "sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 12348 "sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 12349 "sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 12350 "sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 12351 "sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 12352 "sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 12353 "sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 12354 "sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 12355 "sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 12356 "sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 12357 "sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 12358 "sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 12359 "sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 12360 "sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 12361 "sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 12362 "sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 12363 "sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 12364 "sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 12365 "sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 12366 "sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 12367 "sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 12368 "sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 12369 "sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 12370 "sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 12371 "sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 12372 "sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 12373 "sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 12374 "sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 12375 "sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 12376 "sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 12377 "sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 12378 "sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 12379 "sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 12380 "sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 12381 "sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 12382 "sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 12383 "sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 12384 "sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 12385 "sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 12386 "sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 12387 "sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 12388 "sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 12389 "sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 12390 "sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 12391 "sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 12392 "sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 12393 "sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 12394 "sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 12395 "sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 12396 "sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 12397 "sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 12398 "sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 12399 "sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 12400 "sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 12401 "sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 12402 "sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 12403 "sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 12404 "sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 12405 "sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 12406 "sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 12407 "sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 12408 "sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 12409 "sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 12410 "sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 12411 "sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 12412 "sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 12413 "sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 12414 "sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 12415 "sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 12416 "sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 12417 "sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 12418 "sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 12419 "sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 12420 "sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 12421 "sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 12422 "sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 12423 "sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 12424 "sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 12425 "sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 12426 "sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 12427 "sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 12428 "sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 12429 "sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 12430 "sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 12431 "sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 12432 "sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 12433 "sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 12434 "sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 12435 "sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 12436 "sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 12437 "sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 12438 "sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 12439 "sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 12440 "sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 12441 "sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 12442 "sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 12443 "sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 12444 "sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 12445 "sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 12446 "sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 12447 "sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 12448 "sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 12449 "sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 12450 "sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 12451 "sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 12452 "sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 12459 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 12469 "sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 12473 "sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 12474 "sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 12483 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 12514 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 12565 "sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 12566 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 12567 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 12568 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 12572 "sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 12573 "sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 12577 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 12578 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 12579 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 12580 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 12584 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 12585 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 12586 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 12587 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 12597 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 12639 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 12658 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 12669 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 12682 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 12696 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 12711 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 12730 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->priv_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 12757 "sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 12770 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 12797 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 12840 "sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 12853 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 12854 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 12855 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 12856 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 12860 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 12862 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 12871 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 12882 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 12883 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 12885 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 12891 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 12897 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 12908 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 12919 "sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 12934 "sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type))
              MYSQL_YYABORT;
            /* If table is to be write locked, protect from a impending GRL. */
            if (lock_type >= TL_WRITE_ALLOW_WRITE)
              Lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 12945 "sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 12946 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 12947 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 12948 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 12953 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 12964 "sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 12973 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 12985 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 12997 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13016 "sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
          }
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13022 "sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13023 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13027 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13028 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13032 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13033 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13034 "sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 13035 "sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 13037 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 13045 "sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13049 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13050 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13051 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13052 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 13053 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 13060 "sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 13065 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 13071 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13082 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13093 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13100 "sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13106 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 13113 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13125 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13143 "sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13145 "sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13163 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13164 "sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13166 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 13167 "sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 13169 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13170 "sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13172 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13173 "sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13174 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13175 "sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13176 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13177 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13178 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13179 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13180 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13181 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13182 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13183 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13184 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13185 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13186 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13187 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13188 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13189 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 13190 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 13191 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13192 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 13193 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13194 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13195 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13196 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 13197 "sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13198 "sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 13202 "sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13203 "sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 13213 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 13223 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 13233 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 13246 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 13261 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 13274 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 13287 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 13299 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 13304 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 13312 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 13317 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 13325 "sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 13352 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); }
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 13354 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 13359 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13373 "sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13402 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13406 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13410 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13414 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13420 "sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13425 "sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13426 "sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 13430 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13432 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 13438 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13444 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13450 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13459 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13464 "sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 13468 "sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 13469 "sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13474 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 1); }
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13475 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13476 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13481 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 2); }
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13482 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13483 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 13487 "sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 13488 "sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13493 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13503 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 13511 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 13520 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 13529 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13542 "sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 13548 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result && 
               (lex->result->get_nest_level() == -1 ||
                lex->result->get_nest_level() == lex->nest_level))
              {
                /* 
                   Only the last SELECT can have INTO unless the INTO and UNION
                   are at different nest levels. In version 5.1 and above, INTO
                   will onle be allowed at top level.
                */
                my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
                MYSQL_YYABORT;
              }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* This counter shouldn't be incremented for UNION parts */
            Lex->nest_level--;
            if (mysql_new_select(lex, 0))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage=UNION_TYPE;
            if ((yyvsp[(2) - (2)].num)) /* UNION DISTINCT - remember position */
              lex->current_select->master_unit()->union_distinct=
                lex->current_select;
          }
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13578 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13588 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13589 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13590 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13594 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 13610 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13623 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13624 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13625 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13629 "sql_yacc.yy"
    {
          (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
        }
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 13636 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (5)].select_lex);
        }
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 13641 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (6)].select_lex);
        }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13646 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13667 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            /*
              Set the required lock level for the tables associated with the
              current sub-select. This will overwrite previous lock options set
              using st_select_lex::add_table_to_list in any of the following
              rules: single_multi, table_wild_one, load_data, table_alias_ref,
              table_factor.
              The default lock level is TL_READ_DEFAULT but it can be modified
              with query options specific for a certain (sub-)SELECT.
            */
            lex->current_select->
              set_lock_for_tables(lex->current_select->lock_option);

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 13703 "sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13705 "sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 13707 "sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 13740 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 13754 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 13767 "sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 13769 "sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 13771 "sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 13776 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 13781 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 13783 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 13785 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 13790 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 13792 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 13794 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 13799 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 13812 "sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 13818 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 13823 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 13830 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 13839 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 13861 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 13863 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 13865 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 13867 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 13884 "sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 13890 "sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 13895 "sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 13925 "sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 13958 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 13976 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 13999 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14031 "sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14035 "sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14043 "sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14066 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14075 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14131 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14155 "sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14164 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14172 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14180 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14194 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14198 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14202 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14206 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14210 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14214 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14221 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14228 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14235 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14244 "sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14245 "sql_yacc.yy"
    {}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14249 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14250 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14251 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14255 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14256 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14261 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14263 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14268 "sql_yacc.yy"
    {}
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14269 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14274 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14284 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1455 of yacc.c  */
#line 37469 "sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



