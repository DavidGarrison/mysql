
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 32 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().

** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "rpl_slave.h"
#include "lex_symbol.h"
#include "item.h"
#include "item_create.h"
#include "item_create_window_function.h"
#include "item_window_function.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (pctx && tmp->var == Sys_autocommit_ptr)
    sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

#ifdef HAVE_REPLICATION
  if (lex->uses_stored_routines() &&
      ((tmp->var == Sys_gtid_next_ptr
#ifdef HAVE_GTID_NEXT_LIST
       || tmp->var == Sys_gtid_next_list_ptr
#endif
       ) ||
       Sys_gtid_purged_ptr == tmp->var))
  {
    my_error(ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION, MYF(0),
             tmp->var->name.str);
    return TRUE;
  }
#endif

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}

/**
  Compare a LEX_USER against the current user as defined by the exact user and
  host used during authentication.

  @param user A pointer to a user which needs to be matched against the
              current.

  @see SET PASSWORD rules

  @retval true The specified user is the authorized user
  @retval false The user doesn't match
*/

bool match_authorized_user(Security_context *ctx, LEX_USER *user)
{
  if(user->user.str && my_strcasecmp(system_charset_info,
                                     ctx->priv_user,
                                     user->user.str) == 0)
  {
    /*
      users match; let's compare hosts.
      1. first compare with the host we actually authorized,
      2. then see if we match the host mask of the priv_host
    */
    if (user->host.str && my_strcasecmp(system_charset_info,
                                        user->host.str,
                                        ctx->priv_host) == 0)
    {
      /* specified user exactly match the authorized user */
      return true;
    }
  }
  return false;
}


static char idb_on_clause_err_str[] = "ON clause";
static char idb_where_clause_err_str[] = "WHERE clause";
static char idb_having_clause_err_str[] = "HAVING clause";
static char idb_group_by_clause_err_str[] = "GROUP BY clause";



/* Line 189 of yacc.c  */
#line 1040 "/home/rdempsey/github/mysql-obj/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CATALOG_NAME_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHARSET = 313,
     CHAR_SYM = 314,
     CHECKSUM_SYM = 315,
     CHECK_SYM = 316,
     CIPHER_SYM = 317,
     CLASS_ORIGIN_SYM = 318,
     CLIENT_SYM = 319,
     CLOSE_SYM = 320,
     COALESCE = 321,
     CODE_SYM = 322,
     COLLATE_SYM = 323,
     COLLATION_SYM = 324,
     COLUMNS = 325,
     COLUMN_SYM = 326,
     COLUMN_FORMAT_SYM = 327,
     COLUMN_NAME_SYM = 328,
     COMMENT_SYM = 329,
     COMMITTED_SYM = 330,
     COMMIT_SYM = 331,
     COMPACT_SYM = 332,
     COMPLETION_SYM = 333,
     COMPRESSED_SYM = 334,
     CONCURRENT = 335,
     CONDITION_SYM = 336,
     CONNECTION_SYM = 337,
     CONSISTENT_SYM = 338,
     CONSTRAINT = 339,
     CONSTRAINT_CATALOG_SYM = 340,
     CONSTRAINT_NAME_SYM = 341,
     CONSTRAINT_SCHEMA_SYM = 342,
     CONTAINS_SYM = 343,
     CONTEXT_SYM = 344,
     CONTINUE_SYM = 345,
     CONVERT_SYM = 346,
     COUNT_SYM = 347,
     CPU_SYM = 348,
     CREATE = 349,
     CROSS = 350,
     CUBE_SYM = 351,
     CURDATE = 352,
     CURRENT_SYM = 353,
     CURRENT_USER = 354,
     CURSOR_SYM = 355,
     CURSOR_NAME_SYM = 356,
     CURTIME = 357,
     DATABASE = 358,
     DATABASES = 359,
     DATAFILE_SYM = 360,
     DATA_SYM = 361,
     DATETIME = 362,
     DATE_ADD_INTERVAL = 363,
     DATE_SUB_INTERVAL = 364,
     DATE_SYM = 365,
     DAY_HOUR_SYM = 366,
     DAY_MICROSECOND_SYM = 367,
     DAY_MINUTE_SYM = 368,
     DAY_SECOND_SYM = 369,
     DAY_SYM = 370,
     DEALLOCATE_SYM = 371,
     DECIMAL_NUM = 372,
     DECIMAL_SYM = 373,
     DECLARE_SYM = 374,
     DEFAULT = 375,
     DEFAULT_AUTH_SYM = 376,
     DEFINER_SYM = 377,
     DELAYED_SYM = 378,
     DELAY_KEY_WRITE_SYM = 379,
     DELETE_SYM = 380,
     DESC = 381,
     DESCRIBE = 382,
     DES_KEY_FILE = 383,
     DETERMINISTIC_SYM = 384,
     DIAGNOSTICS_SYM = 385,
     DIRECTORY_SYM = 386,
     DISABLE_SYM = 387,
     DISCARD = 388,
     DISK_SYM = 389,
     DISTINCT = 390,
     DIV_SYM = 391,
     DOUBLE_SYM = 392,
     DO_SYM = 393,
     DROP = 394,
     DUAL_SYM = 395,
     DUMPFILE = 396,
     DUPLICATE_SYM = 397,
     DYNAMIC_SYM = 398,
     EACH_SYM = 399,
     ELSE = 400,
     ELSEIF_SYM = 401,
     ENABLE_SYM = 402,
     ENCLOSED = 403,
     END = 404,
     ENDS_SYM = 405,
     END_OF_INPUT = 406,
     ENGINES_SYM = 407,
     ENGINE_SYM = 408,
     ENUM = 409,
     EQ = 410,
     EQUAL_SYM = 411,
     ERROR_SYM = 412,
     ERRORS = 413,
     ESCAPED = 414,
     ESCAPE_SYM = 415,
     EVENTS_SYM = 416,
     EVENT_SYM = 417,
     EVERY_SYM = 418,
     EXCHANGE_SYM = 419,
     EXECUTE_SYM = 420,
     EXISTS = 421,
     EXIT_SYM = 422,
     EXPANSION_SYM = 423,
     EXPIRE_SYM = 424,
     EXPORT_SYM = 425,
     EXTENDED_SYM = 426,
     EXTENT_SIZE_SYM = 427,
     EXTRACT_SYM = 428,
     FALSE_SYM = 429,
     FAST_SYM = 430,
     FAULTS_SYM = 431,
     FETCH_SYM = 432,
     FILE_SYM = 433,
     FIRST_SYM = 434,
     FIXED_SYM = 435,
     FLOAT_NUM = 436,
     FLOAT_SYM = 437,
     FLUSH_SYM = 438,
     FOLLOWING_SYM = 439,
     FORCE_SYM = 440,
     FOREIGN = 441,
     FOR_SYM = 442,
     FORMAT_SYM = 443,
     FOUND_SYM = 444,
     FROM = 445,
     FULL = 446,
     FULLTEXT_SYM = 447,
     FUNCTION_SYM = 448,
     GE = 449,
     GENERAL = 450,
     GEOMETRYCOLLECTION = 451,
     GEOMETRY_SYM = 452,
     GET_FORMAT = 453,
     GET_SYM = 454,
     GLOBAL_SYM = 455,
     GRANT = 456,
     GRANTS = 457,
     GROUP_SYM = 458,
     GROUP_CONCAT_SYM = 459,
     GT_SYM = 460,
     HANDLER_SYM = 461,
     HASH_SYM = 462,
     HAVING = 463,
     HELP_SYM = 464,
     HEX_NUM = 465,
     HIGH_PRIORITY = 466,
     HOST_SYM = 467,
     HOSTS_SYM = 468,
     HOUR_MICROSECOND_SYM = 469,
     HOUR_MINUTE_SYM = 470,
     HOUR_SECOND_SYM = 471,
     HOUR_SYM = 472,
     IDENT = 473,
     IDENTIFIED_SYM = 474,
     IDENT_QUOTED = 475,
     IF = 476,
     IGNORE_SYM = 477,
     IGNORE_SERVER_IDS_SYM = 478,
     IMPORT = 479,
     INDEXES = 480,
     INDEX_SYM = 481,
     INFILE = 482,
     INITIAL_SIZE_SYM = 483,
     INNER_SYM = 484,
     INOUT_SYM = 485,
     INSENSITIVE_SYM = 486,
     INSERT = 487,
     INSERT_METHOD = 488,
     INSTALL_SYM = 489,
     INTERVAL_SYM = 490,
     INTO = 491,
     INT_SYM = 492,
     INVOKER_SYM = 493,
     IN_SYM = 494,
     IO_AFTER_GTIDS = 495,
     IO_BEFORE_GTIDS = 496,
     IO_SYM = 497,
     IPC_SYM = 498,
     IS = 499,
     ISOLATION = 500,
     ISSUER_SYM = 501,
     ITERATE_SYM = 502,
     JOIN_SYM = 503,
     KEYS = 504,
     KEY_BLOCK_SIZE = 505,
     KEY_SYM = 506,
     KILL_SYM = 507,
     LANGUAGE_SYM = 508,
     LAST_SYM = 509,
     LE = 510,
     LEADING = 511,
     LEAVES = 512,
     LEAVE_SYM = 513,
     LEFT = 514,
     LESS_SYM = 515,
     LEVEL_SYM = 516,
     LEX_HOSTNAME = 517,
     LIKE = 518,
     LIMIT = 519,
     LINEAR_SYM = 520,
     LINES = 521,
     LINESTRING = 522,
     LIST_SYM = 523,
     LOAD = 524,
     LOCAL_SYM = 525,
     LOCATOR_SYM = 526,
     LOCKS_SYM = 527,
     LOCK_SYM = 528,
     LOGFILE_SYM = 529,
     LOGS_SYM = 530,
     LONGBLOB = 531,
     LONGTEXT = 532,
     LONG_NUM = 533,
     LONG_SYM = 534,
     LOOP_SYM = 535,
     LOW_PRIORITY = 536,
     LT = 537,
     MASTER_AUTO_POSITION_SYM = 538,
     MASTER_BIND_SYM = 539,
     MASTER_CONNECT_RETRY_SYM = 540,
     MASTER_DELAY_SYM = 541,
     MASTER_HOST_SYM = 542,
     MASTER_LOG_FILE_SYM = 543,
     MASTER_LOG_POS_SYM = 544,
     MASTER_PASSWORD_SYM = 545,
     MASTER_PORT_SYM = 546,
     MASTER_RETRY_COUNT_SYM = 547,
     MASTER_SERVER_ID_SYM = 548,
     MASTER_SSL_CAPATH_SYM = 549,
     MASTER_SSL_CA_SYM = 550,
     MASTER_SSL_CERT_SYM = 551,
     MASTER_SSL_CIPHER_SYM = 552,
     MASTER_SSL_CRL_SYM = 553,
     MASTER_SSL_CRLPATH_SYM = 554,
     MASTER_SSL_KEY_SYM = 555,
     MASTER_SSL_SYM = 556,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 557,
     MASTER_SYM = 558,
     MASTER_USER_SYM = 559,
     MASTER_HEARTBEAT_PERIOD_SYM = 560,
     MATCH = 561,
     MAX_CONNECTIONS_PER_HOUR = 562,
     MAX_QUERIES_PER_HOUR = 563,
     MAX_ROWS = 564,
     MAX_SIZE_SYM = 565,
     MAX_SYM = 566,
     MAX_UPDATES_PER_HOUR = 567,
     MAX_USER_CONNECTIONS_SYM = 568,
     MAX_VALUE_SYM = 569,
     MEDIUMBLOB = 570,
     MEDIUMINT = 571,
     MEDIUMTEXT = 572,
     MEDIUM_SYM = 573,
     MEMORY_SYM = 574,
     MERGE_SYM = 575,
     MESSAGE_TEXT_SYM = 576,
     MICROSECOND_SYM = 577,
     MIGRATE_SYM = 578,
     MINUTE_MICROSECOND_SYM = 579,
     MINUTE_SECOND_SYM = 580,
     MINUTE_SYM = 581,
     MIN_ROWS = 582,
     MIN_SYM = 583,
     MODE_SYM = 584,
     MODIFIES_SYM = 585,
     MODIFY_SYM = 586,
     MOD_SYM = 587,
     MONTH_SYM = 588,
     MULTILINESTRING = 589,
     MULTIPOINT = 590,
     MULTIPOLYGON = 591,
     MUTEX_SYM = 592,
     MYSQL_ERRNO_SYM = 593,
     NAMES_SYM = 594,
     NAME_SYM = 595,
     NATIONAL_SYM = 596,
     NATURAL = 597,
     NCHAR_STRING = 598,
     NCHAR_SYM = 599,
     NDBCLUSTER_SYM = 600,
     NE = 601,
     NEG = 602,
     NEW_SYM = 603,
     NEXT_SYM = 604,
     NODEGROUP_SYM = 605,
     NONE_SYM = 606,
     NOT2_SYM = 607,
     NOT_SYM = 608,
     NOW_SYM = 609,
     NO_SYM = 610,
     NO_WAIT_SYM = 611,
     NO_WRITE_TO_BINLOG = 612,
     NTH_VALUE_SYM = 613,
     NULL_SYM = 614,
     NULLS_SYM = 615,
     NUM = 616,
     NUMBER_SYM = 617,
     NUMERIC_SYM = 618,
     NVARCHAR_SYM = 619,
     OFFSET_SYM = 620,
     OLD_PASSWORD = 621,
     ON = 622,
     ONE_SYM = 623,
     ONLY_SYM = 624,
     OPEN_SYM = 625,
     OPTIMIZE = 626,
     OPTIONS_SYM = 627,
     OPTION = 628,
     OPTIONALLY = 629,
     OR2_SYM = 630,
     ORDER_SYM = 631,
     OR_OR_SYM = 632,
     OR_SYM = 633,
     OUTER = 634,
     OUTFILE = 635,
     OUT_SYM = 636,
     OVER_SYM = 637,
     OWNER_SYM = 638,
     PACK_KEYS_SYM = 639,
     PAGE_SYM = 640,
     PARAM_MARKER = 641,
     PARSER_SYM = 642,
     PARTIAL = 643,
     PARTITION_SYM = 644,
     PARTITIONS_SYM = 645,
     PARTITIONING_SYM = 646,
     PASSWORD = 647,
     PERCENTILE_CONT_SYM = 648,
     PERCENTILE_DISC_SYM = 649,
     PHASE_SYM = 650,
     PLUGIN_DIR_SYM = 651,
     PLUGIN_SYM = 652,
     PLUGINS_SYM = 653,
     POINT_SYM = 654,
     POLYGON = 655,
     PORT_SYM = 656,
     POSITION_SYM = 657,
     PRECEDING_SYM = 658,
     PRECISION = 659,
     PREPARE_SYM = 660,
     PRESERVE_SYM = 661,
     PREV_SYM = 662,
     PRIMARY_SYM = 663,
     PRIVILEGES = 664,
     PROCEDURE_SYM = 665,
     PROCESS = 666,
     PROCESSLIST_SYM = 667,
     PROFILE_SYM = 668,
     PROFILES_SYM = 669,
     PROXY_SYM = 670,
     PURGE = 671,
     QUARTER_SYM = 672,
     QUERY_SYM = 673,
     QUICK = 674,
     RANGE_SYM = 675,
     READS_SYM = 676,
     READ_ONLY_SYM = 677,
     READ_SYM = 678,
     READ_WRITE_SYM = 679,
     REAL = 680,
     REBUILD_SYM = 681,
     RECOVER_SYM = 682,
     REDOFILE_SYM = 683,
     REDO_BUFFER_SIZE_SYM = 684,
     REDUNDANT_SYM = 685,
     REFERENCES = 686,
     REGEXP = 687,
     RELAY = 688,
     RELAYLOG_SYM = 689,
     RELAY_LOG_FILE_SYM = 690,
     RELAY_LOG_POS_SYM = 691,
     RELAY_THREAD = 692,
     RELEASE_SYM = 693,
     RELOAD = 694,
     REMOVE_SYM = 695,
     RENAME = 696,
     REORGANIZE_SYM = 697,
     REPAIR = 698,
     REPEATABLE_SYM = 699,
     REPEAT_SYM = 700,
     REPLACE = 701,
     REPLICATION = 702,
     REQUIRE_SYM = 703,
     RESET_SYM = 704,
     RESIGNAL_SYM = 705,
     RESOURCES = 706,
     RESPECT_SYM = 707,
     RESTORE_SYM = 708,
     RESTRICT = 709,
     RESUME_SYM = 710,
     RETURNED_SQLSTATE_SYM = 711,
     RETURNS_SYM = 712,
     RETURN_SYM = 713,
     REVERSE_SYM = 714,
     REVOKE = 715,
     RIGHT = 716,
     ROLLBACK_SYM = 717,
     ROLLUP_SYM = 718,
     ROUTINE_SYM = 719,
     ROWS_SYM = 720,
     ROW_FORMAT_SYM = 721,
     ROW_SYM = 722,
     ROW_COUNT_SYM = 723,
     RTREE_SYM = 724,
     SAVEPOINT_SYM = 725,
     SCHEDULE_SYM = 726,
     SCHEMA_NAME_SYM = 727,
     SECOND_MICROSECOND_SYM = 728,
     SECOND_SYM = 729,
     SECURITY_SYM = 730,
     SELECT_SYM = 731,
     SENSITIVE_SYM = 732,
     SEPARATOR_SYM = 733,
     SERIALIZABLE_SYM = 734,
     SERIAL_SYM = 735,
     SESSION_SYM = 736,
     SERVER_SYM = 737,
     SERVER_OPTIONS = 738,
     SET = 739,
     SET_VAR = 740,
     SHARE_SYM = 741,
     SHIFT_LEFT = 742,
     SHIFT_RIGHT = 743,
     SHOW = 744,
     SHUTDOWN = 745,
     SIGNAL_SYM = 746,
     SIGNED_SYM = 747,
     SIMPLE_SYM = 748,
     SLAVE = 749,
     SLOW = 750,
     SMALLINT = 751,
     SNAPSHOT_SYM = 752,
     SOCKET_SYM = 753,
     SONAME_SYM = 754,
     SOUNDS_SYM = 755,
     SOURCE_SYM = 756,
     SPATIAL_SYM = 757,
     SPECIFIC_SYM = 758,
     SQLEXCEPTION_SYM = 759,
     SQLSTATE_SYM = 760,
     SQLWARNING_SYM = 761,
     SQL_AFTER_GTIDS = 762,
     SQL_AFTER_MTS_GAPS = 763,
     SQL_BEFORE_GTIDS = 764,
     SQL_BIG_RESULT = 765,
     SQL_BUFFER_RESULT = 766,
     SQL_CACHE_SYM = 767,
     SQL_CALC_FOUND_ROWS = 768,
     SQL_NO_CACHE_SYM = 769,
     INFINIDB_ORDERED_SYM = 770,
     SQL_SMALL_RESULT = 771,
     SQL_SYM = 772,
     SQL_THREAD = 773,
     SSL_SYM = 774,
     STARTING = 775,
     STARTS_SYM = 776,
     START_SYM = 777,
     STATS_AUTO_RECALC_SYM = 778,
     STATS_PERSISTENT_SYM = 779,
     STATS_SAMPLE_PAGES_SYM = 780,
     STATUS_SYM = 781,
     STDDEV_SAMP_SYM = 782,
     STD_SYM = 783,
     STOP_SYM = 784,
     STORAGE_SYM = 785,
     STRAIGHT_JOIN = 786,
     STRING_SYM = 787,
     SUBCLASS_ORIGIN_SYM = 788,
     SUBDATE_SYM = 789,
     SUBJECT_SYM = 790,
     SUBPARTITIONS_SYM = 791,
     SUBPARTITION_SYM = 792,
     SUBSTRING = 793,
     SUM_SYM = 794,
     SUPER_SYM = 795,
     SUSPEND_SYM = 796,
     SWAPS_SYM = 797,
     SWITCHES_SYM = 798,
     SYSDATE = 799,
     TABLES = 800,
     TABLESPACE = 801,
     TABLE_REF_PRIORITY = 802,
     TABLE_SYM = 803,
     TABLE_CHECKSUM_SYM = 804,
     TABLE_NAME_SYM = 805,
     TEMPORARY = 806,
     TEMPTABLE_SYM = 807,
     TERMINATED = 808,
     TEXT_STRING = 809,
     TEXT_SYM = 810,
     THAN_SYM = 811,
     THEN_SYM = 812,
     TIMESTAMP = 813,
     TIMESTAMP_ADD = 814,
     TIMESTAMP_DIFF = 815,
     TIME_SYM = 816,
     TINYBLOB = 817,
     TINYINT = 818,
     TINYTEXT = 819,
     TO_SYM = 820,
     TRAILING = 821,
     TRANSACTION_SYM = 822,
     TRIGGERS_SYM = 823,
     TRIGGER_SYM = 824,
     TRIM = 825,
     TRUE_SYM = 826,
     TRUNCATE_SYM = 827,
     TYPES_SYM = 828,
     TYPE_SYM = 829,
     UDF_RETURNS_SYM = 830,
     ULONGLONG_NUM = 831,
     UNBOUNDED_SYM = 832,
     UNCOMMITTED_SYM = 833,
     UNDEFINED_SYM = 834,
     UNDERSCORE_CHARSET = 835,
     UNDOFILE_SYM = 836,
     UNDO_BUFFER_SIZE_SYM = 837,
     UNDO_SYM = 838,
     UNICODE_SYM = 839,
     UNINSTALL_SYM = 840,
     UNION_SYM = 841,
     UNIQUE_SYM = 842,
     UNKNOWN_SYM = 843,
     UNLOCK_SYM = 844,
     UNSIGNED = 845,
     UNTIL_SYM = 846,
     UPDATE_SYM = 847,
     UPGRADE_SYM = 848,
     USAGE = 849,
     USER = 850,
     USE_FRM = 851,
     USE_SYM = 852,
     USING = 853,
     UTC_DATE_SYM = 854,
     UTC_TIMESTAMP_SYM = 855,
     UTC_TIME_SYM = 856,
     VALUES = 857,
     VALUE_SYM = 858,
     VARBINARY = 859,
     VARCHAR = 860,
     VARIABLES = 861,
     VARIANCE_SYM = 862,
     VARYING = 863,
     VAR_SAMP_SYM = 864,
     VIEW_SYM = 865,
     WAIT_SYM = 866,
     WARNINGS = 867,
     WEEK_SYM = 868,
     WEIGHT_STRING_SYM = 869,
     WHEN_SYM = 870,
     WHERE = 871,
     WHILE_SYM = 872,
     WITHIN = 873,
     WITH = 874,
     WITH_CUBE_SYM = 875,
     WITH_ROLLUP_SYM = 876,
     WORK_SYM = 877,
     WRAPPER_SYM = 878,
     WRITE_SYM = 879,
     X509_SYM = 880,
     XA_SYM = 881,
     XML_SYM = 882,
     XOR = 883,
     YEAR_MONTH_SYM = 884,
     YEAR_SYM = 885,
     ZEROFILL = 886
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CATALOG_NAME_SYM 309
#define CHAIN_SYM 310
#define CHANGE 311
#define CHANGED 312
#define CHARSET 313
#define CHAR_SYM 314
#define CHECKSUM_SYM 315
#define CHECK_SYM 316
#define CIPHER_SYM 317
#define CLASS_ORIGIN_SYM 318
#define CLIENT_SYM 319
#define CLOSE_SYM 320
#define COALESCE 321
#define CODE_SYM 322
#define COLLATE_SYM 323
#define COLLATION_SYM 324
#define COLUMNS 325
#define COLUMN_SYM 326
#define COLUMN_FORMAT_SYM 327
#define COLUMN_NAME_SYM 328
#define COMMENT_SYM 329
#define COMMITTED_SYM 330
#define COMMIT_SYM 331
#define COMPACT_SYM 332
#define COMPLETION_SYM 333
#define COMPRESSED_SYM 334
#define CONCURRENT 335
#define CONDITION_SYM 336
#define CONNECTION_SYM 337
#define CONSISTENT_SYM 338
#define CONSTRAINT 339
#define CONSTRAINT_CATALOG_SYM 340
#define CONSTRAINT_NAME_SYM 341
#define CONSTRAINT_SCHEMA_SYM 342
#define CONTAINS_SYM 343
#define CONTEXT_SYM 344
#define CONTINUE_SYM 345
#define CONVERT_SYM 346
#define COUNT_SYM 347
#define CPU_SYM 348
#define CREATE 349
#define CROSS 350
#define CUBE_SYM 351
#define CURDATE 352
#define CURRENT_SYM 353
#define CURRENT_USER 354
#define CURSOR_SYM 355
#define CURSOR_NAME_SYM 356
#define CURTIME 357
#define DATABASE 358
#define DATABASES 359
#define DATAFILE_SYM 360
#define DATA_SYM 361
#define DATETIME 362
#define DATE_ADD_INTERVAL 363
#define DATE_SUB_INTERVAL 364
#define DATE_SYM 365
#define DAY_HOUR_SYM 366
#define DAY_MICROSECOND_SYM 367
#define DAY_MINUTE_SYM 368
#define DAY_SECOND_SYM 369
#define DAY_SYM 370
#define DEALLOCATE_SYM 371
#define DECIMAL_NUM 372
#define DECIMAL_SYM 373
#define DECLARE_SYM 374
#define DEFAULT 375
#define DEFAULT_AUTH_SYM 376
#define DEFINER_SYM 377
#define DELAYED_SYM 378
#define DELAY_KEY_WRITE_SYM 379
#define DELETE_SYM 380
#define DESC 381
#define DESCRIBE 382
#define DES_KEY_FILE 383
#define DETERMINISTIC_SYM 384
#define DIAGNOSTICS_SYM 385
#define DIRECTORY_SYM 386
#define DISABLE_SYM 387
#define DISCARD 388
#define DISK_SYM 389
#define DISTINCT 390
#define DIV_SYM 391
#define DOUBLE_SYM 392
#define DO_SYM 393
#define DROP 394
#define DUAL_SYM 395
#define DUMPFILE 396
#define DUPLICATE_SYM 397
#define DYNAMIC_SYM 398
#define EACH_SYM 399
#define ELSE 400
#define ELSEIF_SYM 401
#define ENABLE_SYM 402
#define ENCLOSED 403
#define END 404
#define ENDS_SYM 405
#define END_OF_INPUT 406
#define ENGINES_SYM 407
#define ENGINE_SYM 408
#define ENUM 409
#define EQ 410
#define EQUAL_SYM 411
#define ERROR_SYM 412
#define ERRORS 413
#define ESCAPED 414
#define ESCAPE_SYM 415
#define EVENTS_SYM 416
#define EVENT_SYM 417
#define EVERY_SYM 418
#define EXCHANGE_SYM 419
#define EXECUTE_SYM 420
#define EXISTS 421
#define EXIT_SYM 422
#define EXPANSION_SYM 423
#define EXPIRE_SYM 424
#define EXPORT_SYM 425
#define EXTENDED_SYM 426
#define EXTENT_SIZE_SYM 427
#define EXTRACT_SYM 428
#define FALSE_SYM 429
#define FAST_SYM 430
#define FAULTS_SYM 431
#define FETCH_SYM 432
#define FILE_SYM 433
#define FIRST_SYM 434
#define FIXED_SYM 435
#define FLOAT_NUM 436
#define FLOAT_SYM 437
#define FLUSH_SYM 438
#define FOLLOWING_SYM 439
#define FORCE_SYM 440
#define FOREIGN 441
#define FOR_SYM 442
#define FORMAT_SYM 443
#define FOUND_SYM 444
#define FROM 445
#define FULL 446
#define FULLTEXT_SYM 447
#define FUNCTION_SYM 448
#define GE 449
#define GENERAL 450
#define GEOMETRYCOLLECTION 451
#define GEOMETRY_SYM 452
#define GET_FORMAT 453
#define GET_SYM 454
#define GLOBAL_SYM 455
#define GRANT 456
#define GRANTS 457
#define GROUP_SYM 458
#define GROUP_CONCAT_SYM 459
#define GT_SYM 460
#define HANDLER_SYM 461
#define HASH_SYM 462
#define HAVING 463
#define HELP_SYM 464
#define HEX_NUM 465
#define HIGH_PRIORITY 466
#define HOST_SYM 467
#define HOSTS_SYM 468
#define HOUR_MICROSECOND_SYM 469
#define HOUR_MINUTE_SYM 470
#define HOUR_SECOND_SYM 471
#define HOUR_SYM 472
#define IDENT 473
#define IDENTIFIED_SYM 474
#define IDENT_QUOTED 475
#define IF 476
#define IGNORE_SYM 477
#define IGNORE_SERVER_IDS_SYM 478
#define IMPORT 479
#define INDEXES 480
#define INDEX_SYM 481
#define INFILE 482
#define INITIAL_SIZE_SYM 483
#define INNER_SYM 484
#define INOUT_SYM 485
#define INSENSITIVE_SYM 486
#define INSERT 487
#define INSERT_METHOD 488
#define INSTALL_SYM 489
#define INTERVAL_SYM 490
#define INTO 491
#define INT_SYM 492
#define INVOKER_SYM 493
#define IN_SYM 494
#define IO_AFTER_GTIDS 495
#define IO_BEFORE_GTIDS 496
#define IO_SYM 497
#define IPC_SYM 498
#define IS 499
#define ISOLATION 500
#define ISSUER_SYM 501
#define ITERATE_SYM 502
#define JOIN_SYM 503
#define KEYS 504
#define KEY_BLOCK_SIZE 505
#define KEY_SYM 506
#define KILL_SYM 507
#define LANGUAGE_SYM 508
#define LAST_SYM 509
#define LE 510
#define LEADING 511
#define LEAVES 512
#define LEAVE_SYM 513
#define LEFT 514
#define LESS_SYM 515
#define LEVEL_SYM 516
#define LEX_HOSTNAME 517
#define LIKE 518
#define LIMIT 519
#define LINEAR_SYM 520
#define LINES 521
#define LINESTRING 522
#define LIST_SYM 523
#define LOAD 524
#define LOCAL_SYM 525
#define LOCATOR_SYM 526
#define LOCKS_SYM 527
#define LOCK_SYM 528
#define LOGFILE_SYM 529
#define LOGS_SYM 530
#define LONGBLOB 531
#define LONGTEXT 532
#define LONG_NUM 533
#define LONG_SYM 534
#define LOOP_SYM 535
#define LOW_PRIORITY 536
#define LT 537
#define MASTER_AUTO_POSITION_SYM 538
#define MASTER_BIND_SYM 539
#define MASTER_CONNECT_RETRY_SYM 540
#define MASTER_DELAY_SYM 541
#define MASTER_HOST_SYM 542
#define MASTER_LOG_FILE_SYM 543
#define MASTER_LOG_POS_SYM 544
#define MASTER_PASSWORD_SYM 545
#define MASTER_PORT_SYM 546
#define MASTER_RETRY_COUNT_SYM 547
#define MASTER_SERVER_ID_SYM 548
#define MASTER_SSL_CAPATH_SYM 549
#define MASTER_SSL_CA_SYM 550
#define MASTER_SSL_CERT_SYM 551
#define MASTER_SSL_CIPHER_SYM 552
#define MASTER_SSL_CRL_SYM 553
#define MASTER_SSL_CRLPATH_SYM 554
#define MASTER_SSL_KEY_SYM 555
#define MASTER_SSL_SYM 556
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 557
#define MASTER_SYM 558
#define MASTER_USER_SYM 559
#define MASTER_HEARTBEAT_PERIOD_SYM 560
#define MATCH 561
#define MAX_CONNECTIONS_PER_HOUR 562
#define MAX_QUERIES_PER_HOUR 563
#define MAX_ROWS 564
#define MAX_SIZE_SYM 565
#define MAX_SYM 566
#define MAX_UPDATES_PER_HOUR 567
#define MAX_USER_CONNECTIONS_SYM 568
#define MAX_VALUE_SYM 569
#define MEDIUMBLOB 570
#define MEDIUMINT 571
#define MEDIUMTEXT 572
#define MEDIUM_SYM 573
#define MEMORY_SYM 574
#define MERGE_SYM 575
#define MESSAGE_TEXT_SYM 576
#define MICROSECOND_SYM 577
#define MIGRATE_SYM 578
#define MINUTE_MICROSECOND_SYM 579
#define MINUTE_SECOND_SYM 580
#define MINUTE_SYM 581
#define MIN_ROWS 582
#define MIN_SYM 583
#define MODE_SYM 584
#define MODIFIES_SYM 585
#define MODIFY_SYM 586
#define MOD_SYM 587
#define MONTH_SYM 588
#define MULTILINESTRING 589
#define MULTIPOINT 590
#define MULTIPOLYGON 591
#define MUTEX_SYM 592
#define MYSQL_ERRNO_SYM 593
#define NAMES_SYM 594
#define NAME_SYM 595
#define NATIONAL_SYM 596
#define NATURAL 597
#define NCHAR_STRING 598
#define NCHAR_SYM 599
#define NDBCLUSTER_SYM 600
#define NE 601
#define NEG 602
#define NEW_SYM 603
#define NEXT_SYM 604
#define NODEGROUP_SYM 605
#define NONE_SYM 606
#define NOT2_SYM 607
#define NOT_SYM 608
#define NOW_SYM 609
#define NO_SYM 610
#define NO_WAIT_SYM 611
#define NO_WRITE_TO_BINLOG 612
#define NTH_VALUE_SYM 613
#define NULL_SYM 614
#define NULLS_SYM 615
#define NUM 616
#define NUMBER_SYM 617
#define NUMERIC_SYM 618
#define NVARCHAR_SYM 619
#define OFFSET_SYM 620
#define OLD_PASSWORD 621
#define ON 622
#define ONE_SYM 623
#define ONLY_SYM 624
#define OPEN_SYM 625
#define OPTIMIZE 626
#define OPTIONS_SYM 627
#define OPTION 628
#define OPTIONALLY 629
#define OR2_SYM 630
#define ORDER_SYM 631
#define OR_OR_SYM 632
#define OR_SYM 633
#define OUTER 634
#define OUTFILE 635
#define OUT_SYM 636
#define OVER_SYM 637
#define OWNER_SYM 638
#define PACK_KEYS_SYM 639
#define PAGE_SYM 640
#define PARAM_MARKER 641
#define PARSER_SYM 642
#define PARTIAL 643
#define PARTITION_SYM 644
#define PARTITIONS_SYM 645
#define PARTITIONING_SYM 646
#define PASSWORD 647
#define PERCENTILE_CONT_SYM 648
#define PERCENTILE_DISC_SYM 649
#define PHASE_SYM 650
#define PLUGIN_DIR_SYM 651
#define PLUGIN_SYM 652
#define PLUGINS_SYM 653
#define POINT_SYM 654
#define POLYGON 655
#define PORT_SYM 656
#define POSITION_SYM 657
#define PRECEDING_SYM 658
#define PRECISION 659
#define PREPARE_SYM 660
#define PRESERVE_SYM 661
#define PREV_SYM 662
#define PRIMARY_SYM 663
#define PRIVILEGES 664
#define PROCEDURE_SYM 665
#define PROCESS 666
#define PROCESSLIST_SYM 667
#define PROFILE_SYM 668
#define PROFILES_SYM 669
#define PROXY_SYM 670
#define PURGE 671
#define QUARTER_SYM 672
#define QUERY_SYM 673
#define QUICK 674
#define RANGE_SYM 675
#define READS_SYM 676
#define READ_ONLY_SYM 677
#define READ_SYM 678
#define READ_WRITE_SYM 679
#define REAL 680
#define REBUILD_SYM 681
#define RECOVER_SYM 682
#define REDOFILE_SYM 683
#define REDO_BUFFER_SIZE_SYM 684
#define REDUNDANT_SYM 685
#define REFERENCES 686
#define REGEXP 687
#define RELAY 688
#define RELAYLOG_SYM 689
#define RELAY_LOG_FILE_SYM 690
#define RELAY_LOG_POS_SYM 691
#define RELAY_THREAD 692
#define RELEASE_SYM 693
#define RELOAD 694
#define REMOVE_SYM 695
#define RENAME 696
#define REORGANIZE_SYM 697
#define REPAIR 698
#define REPEATABLE_SYM 699
#define REPEAT_SYM 700
#define REPLACE 701
#define REPLICATION 702
#define REQUIRE_SYM 703
#define RESET_SYM 704
#define RESIGNAL_SYM 705
#define RESOURCES 706
#define RESPECT_SYM 707
#define RESTORE_SYM 708
#define RESTRICT 709
#define RESUME_SYM 710
#define RETURNED_SQLSTATE_SYM 711
#define RETURNS_SYM 712
#define RETURN_SYM 713
#define REVERSE_SYM 714
#define REVOKE 715
#define RIGHT 716
#define ROLLBACK_SYM 717
#define ROLLUP_SYM 718
#define ROUTINE_SYM 719
#define ROWS_SYM 720
#define ROW_FORMAT_SYM 721
#define ROW_SYM 722
#define ROW_COUNT_SYM 723
#define RTREE_SYM 724
#define SAVEPOINT_SYM 725
#define SCHEDULE_SYM 726
#define SCHEMA_NAME_SYM 727
#define SECOND_MICROSECOND_SYM 728
#define SECOND_SYM 729
#define SECURITY_SYM 730
#define SELECT_SYM 731
#define SENSITIVE_SYM 732
#define SEPARATOR_SYM 733
#define SERIALIZABLE_SYM 734
#define SERIAL_SYM 735
#define SESSION_SYM 736
#define SERVER_SYM 737
#define SERVER_OPTIONS 738
#define SET 739
#define SET_VAR 740
#define SHARE_SYM 741
#define SHIFT_LEFT 742
#define SHIFT_RIGHT 743
#define SHOW 744
#define SHUTDOWN 745
#define SIGNAL_SYM 746
#define SIGNED_SYM 747
#define SIMPLE_SYM 748
#define SLAVE 749
#define SLOW 750
#define SMALLINT 751
#define SNAPSHOT_SYM 752
#define SOCKET_SYM 753
#define SONAME_SYM 754
#define SOUNDS_SYM 755
#define SOURCE_SYM 756
#define SPATIAL_SYM 757
#define SPECIFIC_SYM 758
#define SQLEXCEPTION_SYM 759
#define SQLSTATE_SYM 760
#define SQLWARNING_SYM 761
#define SQL_AFTER_GTIDS 762
#define SQL_AFTER_MTS_GAPS 763
#define SQL_BEFORE_GTIDS 764
#define SQL_BIG_RESULT 765
#define SQL_BUFFER_RESULT 766
#define SQL_CACHE_SYM 767
#define SQL_CALC_FOUND_ROWS 768
#define SQL_NO_CACHE_SYM 769
#define INFINIDB_ORDERED_SYM 770
#define SQL_SMALL_RESULT 771
#define SQL_SYM 772
#define SQL_THREAD 773
#define SSL_SYM 774
#define STARTING 775
#define STARTS_SYM 776
#define START_SYM 777
#define STATS_AUTO_RECALC_SYM 778
#define STATS_PERSISTENT_SYM 779
#define STATS_SAMPLE_PAGES_SYM 780
#define STATUS_SYM 781
#define STDDEV_SAMP_SYM 782
#define STD_SYM 783
#define STOP_SYM 784
#define STORAGE_SYM 785
#define STRAIGHT_JOIN 786
#define STRING_SYM 787
#define SUBCLASS_ORIGIN_SYM 788
#define SUBDATE_SYM 789
#define SUBJECT_SYM 790
#define SUBPARTITIONS_SYM 791
#define SUBPARTITION_SYM 792
#define SUBSTRING 793
#define SUM_SYM 794
#define SUPER_SYM 795
#define SUSPEND_SYM 796
#define SWAPS_SYM 797
#define SWITCHES_SYM 798
#define SYSDATE 799
#define TABLES 800
#define TABLESPACE 801
#define TABLE_REF_PRIORITY 802
#define TABLE_SYM 803
#define TABLE_CHECKSUM_SYM 804
#define TABLE_NAME_SYM 805
#define TEMPORARY 806
#define TEMPTABLE_SYM 807
#define TERMINATED 808
#define TEXT_STRING 809
#define TEXT_SYM 810
#define THAN_SYM 811
#define THEN_SYM 812
#define TIMESTAMP 813
#define TIMESTAMP_ADD 814
#define TIMESTAMP_DIFF 815
#define TIME_SYM 816
#define TINYBLOB 817
#define TINYINT 818
#define TINYTEXT 819
#define TO_SYM 820
#define TRAILING 821
#define TRANSACTION_SYM 822
#define TRIGGERS_SYM 823
#define TRIGGER_SYM 824
#define TRIM 825
#define TRUE_SYM 826
#define TRUNCATE_SYM 827
#define TYPES_SYM 828
#define TYPE_SYM 829
#define UDF_RETURNS_SYM 830
#define ULONGLONG_NUM 831
#define UNBOUNDED_SYM 832
#define UNCOMMITTED_SYM 833
#define UNDEFINED_SYM 834
#define UNDERSCORE_CHARSET 835
#define UNDOFILE_SYM 836
#define UNDO_BUFFER_SIZE_SYM 837
#define UNDO_SYM 838
#define UNICODE_SYM 839
#define UNINSTALL_SYM 840
#define UNION_SYM 841
#define UNIQUE_SYM 842
#define UNKNOWN_SYM 843
#define UNLOCK_SYM 844
#define UNSIGNED 845
#define UNTIL_SYM 846
#define UPDATE_SYM 847
#define UPGRADE_SYM 848
#define USAGE 849
#define USER 850
#define USE_FRM 851
#define USE_SYM 852
#define USING 853
#define UTC_DATE_SYM 854
#define UTC_TIMESTAMP_SYM 855
#define UTC_TIME_SYM 856
#define VALUES 857
#define VALUE_SYM 858
#define VARBINARY 859
#define VARCHAR 860
#define VARIABLES 861
#define VARIANCE_SYM 862
#define VARYING 863
#define VAR_SAMP_SYM 864
#define VIEW_SYM 865
#define WAIT_SYM 866
#define WARNINGS 867
#define WEEK_SYM 868
#define WEIGHT_STRING_SYM 869
#define WHEN_SYM 870
#define WHERE 871
#define WHILE_SYM 872
#define WITHIN 873
#define WITH 874
#define WITH_CUBE_SYM 875
#define WITH_ROLLUP_SYM 876
#define WORK_SYM 877
#define WRAPPER_SYM 878
#define WRITE_SYM 879
#define X509_SYM 880
#define XA_SYM 881
#define XML_SYM 882
#define XOR 883
#define YEAR_MONTH_SYM 884
#define YEAR_SYM 885
#define ZEROFILL 886




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 989 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  struct Window_context *Window_context;
  struct Ordering *ordering;
  struct Frame *frame;
  struct Boundary *boundary;
  enum BOUND bound;
  SQL_I_List<ORDER> *list;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2404 "/home/rdempsey/github/mysql-obj/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 1053 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2421 "/home/rdempsey/github/mysql-obj/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  598
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   56856

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  651
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  966
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2723
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4635

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   886

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   644,     2,     2,     2,   638,   633,     2,
     641,   642,   636,   635,   643,   634,   649,   637,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   650,   647,
       2,     2,     2,     2,   648,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   639,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   645,   632,   646,   640,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   129,   131,   133,   138,   140,   143,   144,
     149,   150,   153,   157,   159,   162,   163,   167,   168,   174,
     176,   180,   184,   188,   192,   196,   200,   204,   208,   212,
     216,   220,   224,   228,   232,   236,   240,   244,   248,   252,
     258,   262,   264,   265,   267,   271,   273,   277,   281,   285,
     289,   290,   298,   299,   300,   315,   316,   317,   332,   333,
     334,   349,   350,   357,   358,   362,   367,   372,   376,   379,
     390,   392,   396,   399,   402,   405,   408,   411,   414,   417,
     418,   432,   433,   440,   443,   444,   446,   450,   452,   453,
     456,   457,   460,   461,   463,   467,   472,   473,   476,   477,
     480,   482,   484,   486,   488,   490,   492,   494,   496,   498,
     500,   502,   504,   506,   507,   511,   513,   514,   517,   518,
     521,   524,   527,   530,   533,   537,   541,   543,   545,   547,
     550,   554,   558,   559,   564,   565,   569,   570,   572,   576,
     578,   579,   581,   585,   587,   588,   592,   593,   595,   599,
     601,   606,   607,   609,   611,   613,   614,   618,   621,   625,
     626,   630,   631,   637,   643,   644,   652,   653,   660,   662,
     664,   666,   670,   672,   674,   676,   680,   681,   683,   685,
     687,   689,   692,   694,   698,   700,   702,   703,   705,   706,
     709,   713,   719,   721,   723,   725,   727,   729,   731,   733,
     735,   737,   739,   741,   743,   745,   747,   749,   753,   758,
     759,   761,   763,   767,   769,   773,   777,   779,   782,   784,
     786,   788,   790,   794,   798,   800,   802,   804,   806,   808,
     810,   812,   814,   816,   818,   820,   822,   824,   826,   830,
     831,   832,   836,   838,   840,   842,   844,   846,   848,   850,
     852,   854,   856,   858,   860,   862,   863,   869,   870,   873,
     874,   878,   879,   882,   885,   888,   891,   892,   899,   902,
     903,   906,   908,   910,   914,   915,   916,   917,   925,   926,
     929,   932,   934,   936,   937,   938,   947,   948,   955,   957,
     960,   962,   965,   966,   967,   974,   975,   976,   983,   984,
     987,   988,   994,   995,   997,   998,  1004,  1005,  1008,  1009,
    1015,  1020,  1021,  1022,  1031,  1032,  1033,  1042,  1044,  1046,
    1048,  1050,  1052,  1055,  1060,  1066,  1067,  1072,  1077,  1082,
    1086,  1090,  1093,  1096,  1097,  1100,  1102,  1105,  1109,  1111,
    1113,  1115,  1116,  1118,  1120,  1123,  1127,  1129,  1131,  1133,
    1135,  1137,  1139,  1141,  1143,  1144,  1146,  1148,  1151,  1155,
    1157,  1159,  1161,  1163,  1165,  1166,  1168,  1170,  1173,  1177,
    1179,  1181,  1183,  1185,  1187,  1189,  1191,  1192,  1194,  1196,
    1199,  1203,  1205,  1207,  1209,  1212,  1215,  1218,  1220,  1222,
    1224,  1226,  1229,  1233,  1237,  1241,  1245,  1249,  1253,  1257,
    1261,  1266,  1268,  1270,  1272,  1274,  1277,  1281,  1284,  1289,
    1295,  1296,  1302,  1303,  1304,  1310,  1311,  1319,  1321,  1322,
    1324,  1325,  1330,  1331,  1332,  1336,  1342,  1349,  1350,  1355,
    1358,  1361,  1364,  1367,  1368,  1370,  1371,  1375,  1376,  1378,
    1380,  1384,  1386,  1391,  1397,  1403,  1404,  1407,  1408,  1409,
    1417,  1418,  1429,  1431,  1435,  1437,  1439,  1440,  1443,  1444,
    1448,  1450,  1454,  1455,  1462,  1464,  1465,  1466,  1472,  1473,
    1478,  1480,  1482,  1484,  1488,  1490,  1494,  1495,  1496,  1502,
    1504,  1508,  1510,  1512,  1513,  1517,  1519,  1523,  1524,  1529,
    1531,  1532,  1534,  1537,  1539,  1543,  1548,  1552,  1556,  1560,
    1565,  1570,  1574,  1575,  1576,  1583,  1584,  1586,  1587,  1589,
    1591,  1594,  1596,  1598,  1599,  1601,  1603,  1606,  1608,  1609,
    1613,  1614,  1616,  1618,  1621,  1623,  1626,  1630,  1634,  1638,
    1642,  1646,  1650,  1654,  1658,  1662,  1666,  1670,  1674,  1678,
    1682,  1686,  1690,  1694,  1698,  1702,  1706,  1707,  1714,  1716,
    1718,  1722,  1727,  1732,  1735,  1738,  1741,  1745,  1749,  1754,
    1759,  1761,  1763,  1765,  1767,  1769,  1771,  1773,  1775,  1777,
    1779,  1781,  1783,  1786,  1788,  1790,  1792,  1794,  1796,  1798,
    1802,  1804,  1806,  1809,  1812,  1820,  1829,  1838,  1847,  1856,
    1859,  1860,  1862,  1867,  1868,  1870,  1873,  1874,  1879,  1883,
    1887,  1891,  1893,  1896,  1898,  1900,  1904,  1907,  1911,  1914,
    1917,  1919,  1923,  1927,  1930,  1934,  1936,  1939,  1942,  1945,
    1947,  1950,  1952,  1954,  1956,  1959,  1963,  1966,  1970,  1973,
    1976,  1980,  1984,  1988,  1989,  1996,  1997,  2004,  2007,  2009,
    2011,  2013,  2015,  2017,  2019,  2021,  2023,  2025,  2027,  2029,
    2032,  2035,  2037,  2040,  2042,  2045,  2049,  2052,  2054,  2056,
    2058,  2060,  2062,  2064,  2066,  2069,  2070,  2072,  2074,  2080,
    2081,  2085,  2086,  2089,  2093,  2094,  2096,  2099,  2101,  2103,
    2105,  2107,  2111,  2115,  2119,  2123,  2124,  2126,  2127,  2129,
    2130,  2132,  2135,  2137,  2139,  2142,  2145,  2149,  2151,  2155,
    2158,  2160,  2163,  2166,  2169,  2172,  2175,  2178,  2181,  2184,
    2187,  2190,  2193,  2195,  2197,  2200,  2202,  2204,  2206,  2208,
    2210,  2211,  2214,  2216,  2218,  2220,  2222,  2224,  2225,  2228,
    2230,  2232,  2233,  2235,  2237,  2240,  2243,  2245,  2248,  2251,
    2252,  2254,  2256,  2258,  2262,  2264,  2268,  2269,  2271,  2272,
    2277,  2279,  2281,  2283,  2284,  2286,  2289,  2291,  2293,  2296,
    2298,  2302,  2306,  2308,  2310,  2311,  2314,  2315,  2317,  2323,
    2324,  2328,  2332,  2334,  2335,  2338,  2341,  2344,  2345,  2349,
    2353,  2360,  2367,  2369,  2371,  2374,  2377,  2380,  2382,  2385,
    2388,  2390,  2392,  2393,  2395,  2397,  2399,  2401,  2402,  2404,
    2406,  2408,  2409,  2411,  2414,  2415,  2417,  2418,  2420,  2421,
    2423,  2425,  2428,  2430,  2433,  2435,  2438,  2441,  2444,  2448,
    2451,  2453,  2455,  2457,  2459,  2463,  2465,  2467,  2469,  2474,
    2477,  2479,  2484,  2485,  2487,  2488,  2491,  2493,  2497,  2498,
    2505,  2506,  2512,  2520,  2521,  2527,  2528,  2534,  2535,  2541,
    2542,  2547,  2548,  2559,  2563,  2568,  2572,  2576,  2584,  2589,
    2593,  2599,  2600,  2604,  2606,  2611,  2612,  2616,  2617,  2620,
    2621,  2623,  2624,  2627,  2630,  2633,  2636,  2638,  2640,  2642,
    2646,  2651,  2652,  2659,  2664,  2665,  2671,  2672,  2679,  2684,
    2688,  2690,  2698,  2702,  2704,  2706,  2707,  2713,  2714,  2718,
    2721,  2722,  2728,  2729,  2730,  2737,  2739,  2743,  2745,  2747,
    2751,  2754,  2758,  2761,  2766,  2767,  2774,  2775,  2776,  2785,
    2790,  2795,  2799,  2803,  2806,  2809,  2816,  2822,  2826,  2832,
    2834,  2836,  2838,  2840,  2842,  2843,  2845,  2847,  2850,  2853,
    2857,  2861,  2865,  2869,  2870,  2872,  2873,  2875,  2876,  2878,
    2880,  2881,  2884,  2886,  2887,  2889,  2891,  2893,  2894,  2901,
    2905,  2909,  2910,  2912,  2914,  2918,  2922,  2925,  2928,  2933,
    2934,  2938,  2939,  2943,  2944,  2948,  2949,  2953,  2954,  2956,
    2958,  2962,  2964,  2966,  2967,  2970,  2972,  2976,  2980,  2984,
    2986,  2987,  2993,  2994,  2996,  2998,  2999,  3006,  3007,  3009,
    3011,  3014,  3016,  3018,  3020,  3021,  3027,  3030,  3031,  3037,
    3038,  3040,  3042,  3045,  3047,  3049,  3051,  3053,  3055,  3058,
    3059,  3065,  3066,  3068,  3070,  3071,  3076,  3081,  3085,  3091,
    3093,  3097,  3101,  3102,  3109,  3111,  3113,  3115,  3119,  3122,
    3126,  3128,  3130,  3131,  3138,  3140,  3142,  3144,  3148,  3152,
    3157,  3158,  3165,  3166,  3169,  3170,  3175,  3176,  3179,  3181,
    3184,  3189,  3192,  3196,  3199,  3203,  3204,  3208,  3209,  3210,
    3217,  3220,  3222,  3224,  3227,  3230,  3239,  3244,  3245,  3247,
    3250,  3252,  3254,  3256,  3258,  3260,  3261,  3264,  3269,  3273,
    3275,  3277,  3281,  3286,  3287,  3288,  3289,  3292,  3295,  3297,
    3299,  3300,  3303,  3307,  3311,  3315,  3318,  3322,  3327,  3331,
    3336,  3340,  3345,  3347,  3351,  3356,  3360,  3364,  3371,  3373,
    3379,  3386,  3392,  3400,  3407,  3416,  3422,  3429,  3434,  3439,
    3445,  3449,  3454,  3456,  3460,  3464,  3468,  3472,  3476,  3480,
    3486,  3492,  3496,  3500,  3504,  3508,  3512,  3516,  3518,  3520,
    3522,  3524,  3526,  3528,  3530,  3532,  3534,  3536,  3538,  3540,
    3542,  3544,  3546,  3548,  3550,  3552,  3554,  3556,  3558,  3560,
    3562,  3566,  3568,  3570,  3572,  3574,  3578,  3581,  3584,  3587,
    3590,  3594,  3598,  3604,  3611,  3616,  3621,  3629,  3632,  3639,
    3645,  3652,  3659,  3664,  3669,  3675,  3680,  3687,  3690,  3695,
    3700,  3705,  3716,  3723,  3732,  3739,  3744,  3749,  3756,  3761,
    3766,  3771,  3778,  3783,  3791,  3799,  3807,  3814,  3821,  3828,
    3835,  3839,  3844,  3851,  3860,  3863,  3866,  3875,  3884,  3891,
    3898,  3900,  3907,  3914,  3923,  3932,  3939,  3948,  3955,  3958,
    3967,  3976,  3979,  3982,  3985,  3990,  3995,  4000,  4005,  4009,
    4018,  4025,  4034,  4039,  4046,  4051,  4056,  4061,  4068,  4077,
    4082,  4086,  4093,  4098,  4105,  4111,  4120,  4128,  4139,  4141,
    4148,  4153,  4158,  4163,  4168,  4173,  4180,  4185,  4191,  4198,
    4204,  4211,  4217,  4224,  4231,  4237,  4244,  4250,  4257,  4263,
    4270,  4276,  4282,  4288,  4294,  4302,  4315,  4328,  4329,  4332,
    4335,  4336,  4338,  4341,  4344,  4350,  4351,  4355,  4356,  4358,
    4363,  4369,  4373,  4374,  4377,  4380,  4381,  4383,  4389,  4392,
    4394,  4396,  4399,  4402,  4405,  4410,  4412,  4414,  4419,  4426,
    4429,  4433,  4434,  4439,  4440,  4444,  4445,  4447,  4449,  4453,
    4458,  4463,  4469,  4474,  4479,  4484,  4490,  4495,  4501,  4506,
    4512,  4517,  4523,  4528,  4533,  4538,  4543,  4548,  4554,  4555,
    4564,  4565,  4569,  4573,  4575,  4580,  4581,  4583,  4584,  4587,
    4588,  4589,  4594,  4599,  4602,  4603,  4607,  4610,  4614,  4617,
    4619,  4622,  4624,  4627,  4629,  4632,  4635,  4638,  4639,  4641,
    4643,  4647,  4648,  4652,  4654,  4658,  4660,  4664,  4665,  4667,
    4668,  4671,  4676,  4682,  4684,  4686,  4688,  4690,  4695,  4697,
    4701,  4705,  4709,  4710,  4717,  4718,  4725,  4726,  4735,  4740,
    4741,  4750,  4751,  4762,  4769,  4770,  4779,  4780,  4791,  4798,
    4800,  4803,  4806,  4807,  4809,  4815,  4816,  4822,  4826,  4832,
    4835,  4836,  4837,  4845,  4847,  4848,  4849,  4856,  4857,  4861,
    4862,  4863,  4869,  4870,  4872,  4873,  4875,  4876,  4879,  4883,
    4887,  4889,  4891,  4892,  4900,  4901,  4909,  4911,  4914,  4915,
    4916,  4919,  4920,  4923,  4924,  4926,  4928,  4930,  4932,  4936,
    4938,  4942,  4944,  4946,  4948,  4950,  4952,  4954,  4956,  4958,
    4960,  4962,  4964,  4966,  4968,  4970,  4972,  4974,  4976,  4978,
    4980,  4982,  4984,  4986,  4988,  4990,  4992,  4993,  4995,  4997,
    4998,  5001,  5002,  5004,  5005,  5006,  5010,  5011,  5012,  5016,
    5019,  5020,  5021,  5022,  5028,  5033,  5036,  5037,  5039,  5041,
    5045,  5049,  5051,  5054,  5055,  5057,  5058,  5063,  5068,  5071,
    5072,  5074,  5076,  5077,  5079,  5080,  5082,  5085,  5087,  5091,
    5095,  5097,  5099,  5101,  5103,  5105,  5106,  5109,  5111,  5113,
    5115,  5117,  5119,  5121,  5123,  5125,  5127,  5129,  5131,  5133,
    5135,  5137,  5139,  5141,  5143,  5145,  5147,  5149,  5151,  5153,
    5155,  5156,  5157,  5164,  5165,  5167,  5171,  5173,  5174,  5177,
    5181,  5183,  5186,  5188,  5189,  5193,  5194,  5195,  5203,  5206,
    5208,  5209,  5213,  5214,  5222,  5223,  5224,  5233,  5238,  5245,
    5250,  5255,  5260,  5261,  5268,  5273,  5278,  5283,  5289,  5294,
    5296,  5300,  5302,  5305,  5307,  5311,  5313,  5314,  5317,  5318,
    5320,  5321,  5323,  5325,  5328,  5332,  5334,  5336,  5337,  5338,
    5347,  5348,  5349,  5356,  5357,  5359,  5361,  5363,  5365,  5367,
    5370,  5372,  5374,  5376,  5380,  5385,  5386,  5390,  5394,  5396,
    5399,  5402,  5403,  5407,  5408,  5414,  5418,  5420,  5424,  5426,
    5430,  5432,  5434,  5435,  5437,  5438,  5443,  5444,  5446,  5450,
    5452,  5454,  5456,  5457,  5458,  5465,  5466,  5467,  5479,  5483,
    5485,  5489,  5493,  5495,  5499,  5500,  5502,  5503,  5508,  5509,
    5517,  5518,  5524,  5525,  5532,  5534,  5538,  5541,  5546,  5547,
    5550,  5551,  5554,  5556,  5558,  5560,  5561,  5566,  5567,  5569,
    5570,  5572,  5574,  5578,  5580,  5582,  5585,  5588,  5591,  5593,
    5595,  5597,  5599,  5600,  5604,  5605,  5609,  5612,  5617,  5622,
    5626,  5631,  5636,  5638,  5642,  5646,  5653,  5656,  5659,  5660,
    5667,  5668,  5675,  5681,  5684,  5686,  5692,  5698,  5701,  5704,
    5706,  5711,  5715,  5718,  5722,  5725,  5728,  5730,  5734,  5739,
    5743,  5747,  5750,  5753,  5757,  5761,  5765,  5769,  5773,  5777,
    5781,  5785,  5787,  5789,  5791,  5793,  5795,  5796,  5798,  5799,
    5802,  5803,  5805,  5807,  5809,  5810,  5813,  5814,  5817,  5818,
    5821,  5824,  5825,  5830,  5831,  5836,  5838,  5840,  5842,  5844,
    5846,  5848,  5850,  5851,  5853,  5855,  5859,  5860,  5862,  5864,
    5865,  5870,  5871,  5872,  5878,  5880,  5881,  5885,  5886,  5890,
    5894,  5896,  5899,  5902,  5905,  5908,  5911,  5914,  5917,  5919,
    5921,  5923,  5925,  5927,  5929,  5930,  5932,  5933,  5937,  5941,
    5943,  5944,  5948,  5950,  5953,  5954,  5956,  5957,  5961,  5965,
    5968,  5971,  5975,  5976,  5978,  5980,  5983,  5984,  5985,  5986,
    5987,  6010,  6012,  6014,  6015,  6017,  6018,  6020,  6022,  6023,
    6025,  6027,  6028,  6031,  6034,  6036,  6040,  6045,  6049,  6053,
    6054,  6057,  6060,  6062,  6066,  6070,  6071,  6076,  6077,  6081,
    6083,  6085,  6086,  6090,  6093,  6097,  6099,  6101,  6104,  6105,
    6108,  6112,  6114,  6120,  6122,  6124,  6127,  6130,  6132,  6134,
    6136,  6138,  6140,  6143,  6146,  6148,  6150,  6152,  6154,  6156,
    6158,  6160,  6162,  6165,  6168,  6170,  6172,  6174,  6176,  6178,
    6181,  6184,  6187,  6189,  6191,  6195,  6201,  6203,  6205,  6207,
    6209,  6211,  6215,  6220,  6226,  6228,  6234,  6238,  6241,  6243,
    6247,  6250,  6253,  6258,  6260,  6262,  6264,  6266,  6268,  6270,
    6272,  6274,  6276,  6278,  6280,  6282,  6284,  6286,  6288,  6292,
    6295,  6297,  6299,  6301,  6303,  6305,  6307,  6309,  6311,  6313,
    6315,  6317,  6319,  6321,  6323,  6325,  6327,  6329,  6331,  6333,
    6335,  6337,  6339,  6341,  6343,  6345,  6347,  6349,  6351,  6353,
    6355,  6357,  6359,  6361,  6363,  6365,  6367,  6369,  6371,  6373,
    6375,  6377,  6379,  6381,  6383,  6385,  6387,  6389,  6391,  6393,
    6395,  6397,  6399,  6401,  6403,  6405,  6407,  6409,  6411,  6413,
    6415,  6417,  6419,  6421,  6423,  6425,  6427,  6429,  6431,  6433,
    6435,  6437,  6439,  6441,  6443,  6445,  6447,  6449,  6451,  6453,
    6455,  6457,  6459,  6461,  6463,  6465,  6467,  6469,  6471,  6473,
    6475,  6477,  6479,  6481,  6483,  6485,  6487,  6489,  6491,  6493,
    6495,  6497,  6499,  6501,  6503,  6505,  6507,  6509,  6511,  6513,
    6515,  6517,  6519,  6521,  6523,  6525,  6527,  6529,  6531,  6533,
    6535,  6537,  6539,  6541,  6543,  6545,  6547,  6549,  6551,  6553,
    6555,  6557,  6559,  6561,  6563,  6565,  6567,  6569,  6571,  6573,
    6575,  6577,  6579,  6581,  6583,  6585,  6587,  6589,  6591,  6593,
    6595,  6597,  6599,  6601,  6603,  6605,  6607,  6609,  6611,  6613,
    6615,  6617,  6619,  6621,  6623,  6625,  6627,  6629,  6631,  6633,
    6635,  6637,  6639,  6641,  6643,  6645,  6647,  6649,  6651,  6653,
    6655,  6657,  6659,  6661,  6663,  6665,  6667,  6669,  6671,  6673,
    6675,  6677,  6679,  6681,  6683,  6685,  6687,  6689,  6691,  6693,
    6695,  6697,  6699,  6701,  6703,  6705,  6707,  6709,  6711,  6713,
    6715,  6717,  6719,  6721,  6723,  6725,  6727,  6729,  6731,  6733,
    6735,  6737,  6739,  6741,  6743,  6745,  6747,  6749,  6751,  6753,
    6755,  6757,  6759,  6761,  6763,  6765,  6767,  6769,  6771,  6773,
    6775,  6777,  6779,  6781,  6783,  6785,  6787,  6789,  6791,  6793,
    6795,  6797,  6799,  6801,  6803,  6805,  6807,  6809,  6811,  6813,
    6815,  6817,  6819,  6821,  6823,  6825,  6827,  6829,  6831,  6833,
    6835,  6837,  6839,  6841,  6843,  6845,  6847,  6849,  6851,  6853,
    6855,  6857,  6859,  6861,  6863,  6865,  6867,  6869,  6871,  6873,
    6875,  6877,  6879,  6881,  6883,  6885,  6887,  6889,  6891,  6893,
    6895,  6897,  6899,  6901,  6903,  6905,  6907,  6909,  6911,  6913,
    6915,  6917,  6919,  6921,  6923,  6925,  6927,  6929,  6931,  6933,
    6935,  6937,  6939,  6941,  6943,  6945,  6947,  6949,  6951,  6953,
    6955,  6957,  6959,  6961,  6963,  6965,  6967,  6969,  6971,  6973,
    6975,  6977,  6979,  6981,  6983,  6985,  6987,  6989,  6991,  6993,
    6995,  6997,  6999,  7000,  7004,  7005,  7009,  7010,  7014,  7015,
    7019,  7020,  7024,  7027,  7028,  7031,  7032,  7035,  7036,  7041,
    7042,  7046,  7048,  7050,  7052,  7054,  7055,  7057,  7059,  7061,
    7062,  7065,  7068,  7071,  7075,  7076,  7081,  7086,  7093,  7096,
    7100,  7104,  7108,  7114,  7116,  7120,  7124,  7126,  7128,  7132,
    7136,  7138,  7142,  7145,  7148,  7151,  7154,  7157,  7159,  7161,
    7166,  7171,  7173,  7175,  7177,  7179,  7181,  7182,  7187,  7189,
    7191,  7193,  7197,  7201,  7203,  7205,  7208,  7211,  7212,  7216,
    7221,  7225,  7226,  7234,  7236,  7239,  7241,  7243,  7245,  7247,
    7249,  7251,  7252,  7258,  7260,  7262,  7264,  7266,  7268,  7269,
    7274,  7281,  7288,  7295,  7303,  7309,  7310,  7315,  7324,  7333,
    7342,  7349,  7350,  7352,  7354,  7357,  7358,  7360,  7362,  7366,
    7367,  7371,  7372,  7376,  7377,  7381,  7382,  7386,  7388,  7390,
    7392,  7394,  7396,  7398,  7400,  7402,  7404,  7406,  7408,  7411,
    7414,  7416,  7420,  7423,  7426,  7429,  7432,  7435,  7438,  7441,
    7444,  7446,  7448,  7451,  7452,  7454,  7458,  7460,  7463,  7466,
    7469,  7471,  7475,  7479,  7481,  7483,  7487,  7489,  7493,  7498,
    7504,  7509,  7516,  7518,  7519,  7523,  7527,  7529,  7531,  7532,
    7535,  7538,  7541,  7544,  7545,  7548,  7549,  7553,  7556,  7558,
    7561,  7564,  7567,  7570,  7573,  7574,  7578,  7579,  7581,  7582,
    7586,  7589,  7590,  7592,  7595,  7596,  7598,  7603,  7608,  7614,
    7617,  7621,  7622,  7624,  7625,  7630,  7631,  7633,  7635,  7636,
    7638,  7639,  7642,  7645,  7647,  7648,  7650,  7652,  7655,  7659,
    7662,  7663,  7670,  7674,  7675,  7676,  7677,  7679,  7682,  7684,
    7686,  7688,  7690,  7692,  7694,  7696,  7698,  7700,  7703,  7706,
    7710,  7712,  7714,  7716,  7718,  7720,  7722,  7724,  7726,  7728,
    7730,  7732,  7734,  7736,  7737,  7741,  7743,  7746,  7748,  7751,
    7755,  7759,  7763,  7764,  7768,  7772,  7773,  7781,  7782,  7786,
    7788,  7792,  7793,  7797,  7798,  7802,  7807,  7809,  7813,  7814,
    7818,  7819,  7823,  7828,  7833,  7834,  7835,  7836,  7853,  7862,
    7870,  7871,  7872,  7873,  7874,  7875,  7891,  7892,  7893,  7894,
    7895,  7908,  7913,  7918,  7922,  7927,  7931,  7934,  7936,  7940,
    7946,  7948,  7950,  7951,  7953,  7955,  7956,  7959,  7960,  7961,
    7965,  7966,  7969,  7975
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     652,     0,    -1,   151,    -1,    -1,   655,   653,   647,   654,
      -1,   655,   151,    -1,    -1,   151,    -1,   656,    -1,  1541,
      -1,  1027,    -1,  1093,    -1,  1095,    -1,   708,    -1,   668,
      -1,  1096,    -1,  1085,    -1,  1547,    -1,   675,    -1,   657,
      -1,  1354,    -1,  1386,    -1,  1301,    -1,  1303,    -1,   661,
      -1,  1393,    -1,   743,    -1,  1514,    -1,  1504,    -1,   666,
      -1,  1318,    -1,  1615,    -1,  1413,    -1,  1416,    -1,  1496,
      -1,  1101,    -1,  1109,    -1,   862,    -1,  1116,    -1,   659,
      -1,  1409,    -1,  1550,    -1,  1104,    -1,  1088,    -1,  1321,
      -1,  1403,    -1,   742,    -1,  1511,    -1,  1548,    -1,  1549,
      -1,  1128,    -1,  1468,    -1,   735,    -1,  1372,    -1,  1069,
      -1,  1071,    -1,  1365,    -1,  1616,    -1,  1502,    -1,  1346,
      -1,  1415,    -1,  1607,    -1,   658,   405,  1462,    -1,   116,
      -1,   139,    -1,   405,  1462,   190,   660,    -1,  1459,    -1,
     648,  1464,    -1,    -1,   165,  1462,   662,   663,    -1,    -1,
     598,   664,    -1,   664,   643,   665,    -1,   665,    -1,   648,
    1464,    -1,    -1,   209,   667,  1464,    -1,    -1,    56,   303,
     565,   669,   670,    -1,   671,    -1,   670,   643,   671,    -1,
     287,   155,  1458,    -1,   284,   155,  1458,    -1,   304,   155,
    1458,    -1,   290,   155,  1458,    -1,   291,   155,  1282,    -1,
     285,   155,  1282,    -1,   292,   155,  1282,    -1,   286,   155,
    1282,    -1,   301,   155,  1282,    -1,   295,   155,  1458,    -1,
     294,   155,  1458,    -1,   296,   155,  1458,    -1,   297,   155,
    1458,    -1,   300,   155,  1458,    -1,   302,   155,  1282,    -1,
     298,   155,  1458,    -1,   299,   155,  1458,    -1,   305,   155,
    1445,    -1,   223,   155,   641,   672,   642,    -1,   283,   155,
    1282,    -1,   674,    -1,    -1,   673,    -1,   672,   643,   673,
      -1,  1282,    -1,   288,   155,  1458,    -1,   289,   155,  1284,
      -1,   435,   155,  1458,    -1,   436,   155,  1282,    -1,    -1,
      94,   914,   548,   917,  1454,   676,   851,    -1,    -1,    -1,
      94,  1005,   226,  1462,  1009,   367,  1454,   677,   641,  1022,
     642,  1010,   678,  1061,    -1,    -1,    -1,    94,  1006,   226,
    1462,  1008,   367,  1454,   679,   641,  1022,   642,  1011,   680,
    1061,    -1,    -1,    -1,    94,  1007,   226,  1462,  1008,   367,
    1454,   681,   641,  1022,   642,  1012,   682,  1061,    -1,    -1,
      94,   103,   917,  1462,   683,   911,    -1,    -1,    94,   684,
    1569,    -1,    94,   595,   701,  1531,    -1,    94,   274,   203,
     815,    -1,    94,   546,   812,    -1,    94,   685,    -1,   482,
    1464,   186,   106,   623,  1464,   372,   641,   686,   642,    -1,
     687,    -1,   686,   643,   687,    -1,   595,  1459,    -1,   212,
    1459,    -1,   103,  1459,    -1,   383,  1459,    -1,   392,  1459,
      -1,   498,  1459,    -1,   401,  1282,    -1,    -1,  1145,   162,
     917,   702,   689,   367,   471,   690,   695,   692,   697,   138,
     698,    -1,    -1,   163,  1149,  1253,   691,   693,   694,    -1,
      23,  1149,    -1,    -1,   147,    -1,   132,   367,   494,    -1,
     132,    -1,    -1,   521,  1149,    -1,    -1,   150,  1149,    -1,
      -1,   696,    -1,   367,    78,   406,    -1,   367,    78,   353,
     406,    -1,    -1,    74,  1459,    -1,    -1,   699,   700,    -1,
     760,    -1,   762,    -1,   758,    -1,   779,    -1,   797,    -1,
     799,    -1,   794,    -1,   764,    -1,   766,    -1,   767,    -1,
     768,    -1,   769,    -1,   771,    -1,    -1,  1462,   649,  1462,
      -1,  1462,    -1,    -1,   703,   705,    -1,    -1,   704,   706,
      -1,    74,  1459,    -1,   253,   517,    -1,   355,   517,    -1,
      88,   517,    -1,   421,   517,   106,    -1,   330,   517,   106,
      -1,   707,    -1,   705,    -1,   129,    -1,  1155,   129,    -1,
     517,   475,   122,    -1,   517,   475,   238,    -1,    -1,    49,
     702,   709,   710,    -1,    -1,   641,   711,   642,    -1,    -1,
     712,    -1,   712,   643,  1149,    -1,  1149,    -1,    -1,   714,
      -1,   714,   643,   716,    -1,   716,    -1,    -1,  1462,   715,
     965,    -1,    -1,   718,    -1,   718,   643,   719,    -1,   719,
      -1,   720,   715,  1462,   965,    -1,    -1,   239,    -1,   381,
      -1,   230,    -1,    -1,   721,   757,   647,    -1,   757,   647,
      -1,   722,   757,   647,    -1,    -1,   723,   724,   647,    -1,
      -1,   119,   754,   725,   965,   755,    -1,   119,  1462,    81,
     187,   731,    -1,    -1,   119,   728,   206,   187,   726,   729,
     757,    -1,    -1,   119,  1462,   100,   187,   727,  1128,    -1,
     167,    -1,    90,    -1,   730,    -1,   729,   643,   730,    -1,
     734,    -1,  1282,    -1,   732,    -1,   505,   733,  1460,    -1,
      -1,   603,    -1,   731,    -1,  1462,    -1,   506,    -1,  1155,
     189,    -1,   504,    -1,   491,   736,   738,    -1,  1462,    -1,
     732,    -1,    -1,   736,    -1,    -1,   484,   739,    -1,   741,
     155,   740,    -1,   739,   643,   741,   155,   740,    -1,  1444,
      -1,  1187,    -1,  1450,    -1,    63,    -1,   533,    -1,    85,
      -1,    87,    -1,    86,    -1,    54,    -1,   472,    -1,   550,
      -1,    73,    -1,   101,    -1,   321,    -1,   338,    -1,   450,
     737,   738,    -1,   199,   744,   130,   745,    -1,    -1,    98,
      -1,   746,    -1,    81,   750,   751,    -1,   747,    -1,   746,
     643,   747,    -1,   748,   155,   749,    -1,  1462,    -1,   648,
    1464,    -1,   362,    -1,   468,    -1,   740,    -1,   752,    -1,
     751,   643,   752,    -1,   748,   155,   753,    -1,    63,    -1,
     533,    -1,    85,    -1,    87,    -1,    86,    -1,    54,    -1,
     472,    -1,   550,    -1,    73,    -1,   101,    -1,   321,    -1,
     338,    -1,   456,    -1,  1462,    -1,   754,   643,  1462,    -1,
      -1,    -1,   120,   756,  1149,    -1,   760,    -1,   762,    -1,
     758,    -1,   779,    -1,   797,    -1,   799,    -1,   794,    -1,
     764,    -1,   766,    -1,   767,    -1,   768,    -1,   769,    -1,
     771,    -1,    -1,   221,   759,   774,   149,   221,    -1,    -1,
     761,   656,    -1,    -1,   458,   763,  1149,    -1,    -1,   765,
     803,    -1,   258,  1463,    -1,   247,  1463,    -1,   370,  1462,
      -1,    -1,   177,   772,  1462,   236,   770,   773,    -1,    65,
    1462,    -1,    -1,   349,   190,    -1,   190,    -1,  1462,    -1,
     773,   643,  1462,    -1,    -1,    -1,    -1,   775,  1149,   776,
     557,   722,   777,   778,    -1,    -1,   146,   774,    -1,   145,
     722,    -1,   780,    -1,   783,    -1,    -1,    -1,    52,   781,
    1149,   782,   785,   793,   149,    52,    -1,    -1,    52,   784,
     786,   793,   149,    52,    -1,   787,    -1,   785,   787,    -1,
     790,    -1,   786,   790,    -1,    -1,    -1,   615,   788,  1149,
     789,   557,   722,    -1,    -1,    -1,   615,   791,  1149,   792,
     557,   722,    -1,    -1,   145,   722,    -1,    -1,  1463,   650,
     795,   803,   796,    -1,    -1,  1463,    -1,    -1,  1463,   650,
     798,   801,   796,    -1,    -1,   800,   801,    -1,    -1,    30,
     802,   723,   721,   149,    -1,   280,   722,   149,   280,    -1,
      -1,    -1,   617,   804,  1149,   805,   138,   722,   149,   617,
      -1,    -1,    -1,   445,   722,   591,   806,  1149,   807,   149,
     445,    -1,    29,    -1,     8,    -1,   232,    -1,   592,    -1,
     125,    -1,   837,   839,    -1,   837,    56,   834,   818,    -1,
     837,     6,   834,   813,   822,    -1,    -1,   597,   274,   203,
    1462,    -1,   837,     6,   834,   825,    -1,   837,   139,   834,
     825,    -1,   838,   817,   828,    -1,   838,   817,   831,    -1,
       6,   835,    -1,     6,   836,    -1,    -1,   819,   820,    -1,
     821,    -1,   820,   821,    -1,   820,   643,   821,    -1,   840,
      -1,   841,    -1,   842,    -1,    -1,   823,    -1,   824,    -1,
     823,   824,    -1,   823,   643,   824,    -1,   840,    -1,   841,
      -1,   842,    -1,   843,    -1,   846,    -1,   848,    -1,   849,
      -1,   847,    -1,    -1,   826,    -1,   827,    -1,   826,   827,
      -1,   826,   643,   827,    -1,   840,    -1,   841,    -1,   842,
      -1,   848,    -1,   849,    -1,    -1,   829,    -1,   830,    -1,
     829,   830,    -1,   829,   643,   830,    -1,   840,    -1,   844,
      -1,   845,    -1,   846,    -1,   848,    -1,   849,    -1,   847,
      -1,    -1,   832,    -1,   833,    -1,   832,   833,    -1,   832,
     643,   833,    -1,   840,    -1,   848,    -1,   849,    -1,   105,
    1459,    -1,   581,  1459,    -1,   428,  1459,    -1,  1462,    -1,
    1462,    -1,   422,    -1,   424,    -1,   353,     4,    -1,   228,
    1338,   850,    -1,    24,  1338,   850,    -1,   310,  1338,   850,
      -1,   172,  1338,   850,    -1,   582,  1338,   850,    -1,   429,
    1338,   850,    -1,   350,  1338,  1283,    -1,    74,  1338,  1459,
      -1,  1379,   153,  1338,   925,    -1,   611,    -1,   356,    -1,
    1285,    -1,  1457,    -1,   641,   852,    -1,   918,   857,   854,
      -1,   263,  1454,    -1,   641,   263,  1454,   642,    -1,   931,
     642,   918,   857,   854,    -1,    -1,   857,   907,   642,   853,
    1554,    -1,    -1,    -1,  1424,   910,   907,   855,  1551,    -1,
      -1,  1424,   910,   641,   907,   642,   856,  1554,    -1,   858,
      -1,    -1,   859,    -1,    -1,   389,   861,   860,   864,    -1,
      -1,    -1,   389,   863,   864,    -1,    46,   865,   875,   876,
     883,    -1,   867,   251,   868,   641,   869,   642,    -1,    -1,
     867,   207,   866,   873,    -1,   420,   873,    -1,   420,   872,
      -1,   268,   873,    -1,   268,   872,    -1,    -1,   265,    -1,
      -1,    11,   155,  1283,    -1,    -1,   870,    -1,   871,    -1,
     870,   643,   871,    -1,  1462,    -1,    70,   641,   869,   642,
      -1,   641,  1145,   881,  1146,   642,    -1,   641,  1145,   881,
    1146,   642,    -1,    -1,   390,  1283,    -1,    -1,    -1,   537,
      46,   867,   207,   874,   877,   882,    -1,    -1,   537,    46,
     867,   251,   868,   641,   879,   642,   878,   882,    -1,   880,
      -1,   879,   643,   880,    -1,  1462,    -1,  1152,    -1,    -1,
     536,  1283,    -1,    -1,   641,   884,   642,    -1,   885,    -1,
     884,   643,   885,    -1,    -1,   389,   886,   887,   888,   904,
     899,    -1,  1462,    -1,    -1,    -1,   602,   260,   556,   889,
     891,    -1,    -1,   602,   239,   890,   892,    -1,   314,    -1,
     894,    -1,   894,    -1,   641,   893,   642,    -1,   894,    -1,
     893,   643,   894,    -1,    -1,    -1,   641,   895,   897,   896,
     642,    -1,   898,    -1,   897,   643,   898,    -1,   314,    -1,
    1152,    -1,    -1,   641,   900,   642,    -1,   901,    -1,   900,
     643,   901,    -1,    -1,   537,   902,   903,   904,    -1,  1464,
      -1,    -1,   905,    -1,   905,   906,    -1,   906,    -1,   546,
    1338,  1464,    -1,  1379,   153,  1338,   925,    -1,   350,  1338,
    1283,    -1,   309,  1338,  1285,    -1,   327,  1338,  1285,    -1,
     106,   131,  1338,  1459,    -1,   226,   131,  1338,  1459,    -1,
      74,  1338,  1459,    -1,    -1,    -1,   476,   908,  1139,  1143,
     909,   929,    -1,    -1,    19,    -1,    -1,   912,    -1,   913,
      -1,   912,   913,    -1,   924,    -1,   923,    -1,    -1,   915,
      -1,   916,    -1,   916,   915,    -1,   551,    -1,    -1,   221,
    1155,   166,    -1,    -1,   920,    -1,   921,    -1,   921,   919,
      -1,   921,    -1,   921,   920,    -1,   921,   643,   920,    -1,
     153,  1338,   925,    -1,   309,  1338,  1284,    -1,   327,  1338,
    1284,    -1,    26,  1338,  1282,    -1,   392,  1338,  1459,    -1,
      74,  1338,  1459,    -1,    25,  1338,  1284,    -1,   384,  1338,
    1282,    -1,   384,  1338,   120,    -1,   523,  1338,  1282,    -1,
     523,  1338,   120,    -1,   524,  1338,  1282,    -1,   524,  1338,
     120,    -1,   525,  1338,  1282,    -1,   525,  1338,   120,    -1,
      60,  1338,  1282,    -1,   549,  1338,  1282,    -1,   124,  1338,
    1282,    -1,   466,  1338,   927,    -1,    -1,   586,  1338,   922,
     641,  1402,   642,    -1,   923,    -1,   924,    -1,   233,  1338,
     928,    -1,   106,   131,  1338,  1459,    -1,   226,   131,  1338,
    1459,    -1,   546,  1462,    -1,   530,   134,    -1,   530,   319,
      -1,    82,  1338,  1459,    -1,   250,  1338,  1282,    -1,   977,
     968,  1338,   970,    -1,   977,    68,  1338,   976,    -1,  1464,
      -1,  1464,    -1,   120,    -1,   180,    -1,   143,    -1,    79,
      -1,   430,    -1,    77,    -1,   355,    -1,   179,    -1,   254,
      -1,  1277,    -1,  1138,  1142,    -1,   532,    -1,   425,    -1,
     118,    -1,   237,    -1,   932,    -1,   933,    -1,   932,   643,
     933,    -1,   934,    -1,   935,    -1,   940,   936,    -1,   940,
     994,    -1,  1000,  1024,  1009,   641,  1022,   642,  1010,    -1,
    1006,  1003,  1024,  1008,   641,  1022,   642,  1011,    -1,  1007,
    1003,  1024,  1008,   641,  1022,   642,  1012,    -1,   938,  1001,
    1024,  1009,   641,  1022,   642,  1010,    -1,   938,   186,   251,
    1024,   641,  1022,   642,   994,    -1,   938,   937,    -1,    -1,
     937,    -1,    61,   641,  1149,   642,    -1,    -1,   939,    -1,
      84,  1024,    -1,    -1,  1453,   941,   942,   962,    -1,   950,
     960,   956,    -1,   951,   961,   956,    -1,   182,   952,   956,
      -1,    38,    -1,    38,   959,    -1,    43,    -1,    42,    -1,
     946,   959,   980,    -1,   946,   980,    -1,   947,   959,   981,
      -1,   947,   981,    -1,    33,   959,    -1,    33,    -1,   948,
     959,   980,    -1,   949,   959,   981,    -1,   604,   959,    -1,
     630,   960,   956,    -1,   110,    -1,   561,   954,    -1,   558,
     954,    -1,   107,   954,    -1,   562,    -1,    40,   960,    -1,
     945,    -1,   315,    -1,   276,    -1,   279,   604,    -1,   279,
     948,   980,    -1,   564,   980,    -1,   555,   960,   980,    -1,
     317,   980,    -1,   277,   980,    -1,   118,   952,   956,    -1,
     363,   952,   956,    -1,   180,   952,   956,    -1,    -1,   154,
     943,   641,  1026,   642,   980,    -1,    -1,   484,   944,   641,
    1026,   642,   980,    -1,   279,   980,    -1,   480,    -1,   197,
      -1,   196,    -1,   399,    -1,   335,    -1,   267,    -1,   334,
      -1,   400,    -1,   336,    -1,    59,    -1,   344,    -1,   341,
      59,    -1,   946,   608,    -1,   605,    -1,   341,   605,    -1,
     364,    -1,   344,   605,    -1,   341,    59,   608,    -1,   344,
     608,    -1,   237,    -1,   563,    -1,   496,    -1,   316,    -1,
      32,    -1,   425,    -1,   137,    -1,   137,   404,    -1,    -1,
     959,    -1,   953,    -1,   641,   361,   643,   361,   642,    -1,
      -1,   641,   361,   642,    -1,    -1,   641,   642,    -1,   641,
     361,   642,    -1,    -1,   957,    -1,   957,   958,    -1,   958,
      -1,   492,    -1,   590,    -1,   631,    -1,   641,   278,   642,
      -1,   641,   576,   642,    -1,   641,   117,   642,    -1,   641,
     361,   642,    -1,    -1,   959,    -1,    -1,   953,    -1,    -1,
     963,    -1,   963,   964,    -1,   964,    -1,   359,    -1,  1155,
     359,    -1,   120,   967,    -1,   367,   592,   966,    -1,    25,
      -1,   480,   120,   603,    -1,   993,   251,    -1,   587,    -1,
     587,   251,    -1,    74,  1459,    -1,    68,   974,    -1,    72,
     120,    -1,    72,   180,    -1,    72,   143,    -1,   530,   120,
      -1,   530,   134,    -1,   530,   319,    -1,   942,   975,    -1,
     354,   955,    -1,   966,    -1,  1443,    -1,    59,   484,    -1,
      58,    -1,  1464,    -1,    33,    -1,   969,    -1,   120,    -1,
      -1,   968,   970,    -1,  1464,    -1,    33,    -1,   972,    -1,
     120,    -1,  1464,    -1,    -1,    68,   976,    -1,   974,    -1,
     120,    -1,    -1,   120,    -1,    21,    -1,    33,    21,    -1,
      21,    33,    -1,   584,    -1,   584,    33,    -1,    33,   584,
      -1,    -1,   978,    -1,   979,    -1,    47,    -1,   968,   969,
     981,    -1,    33,    -1,    33,   968,   969,    -1,    -1,    33,
      -1,    -1,   641,  1283,   983,   642,    -1,    20,    -1,   126,
      -1,   459,    -1,    -1,   984,    -1,   984,   985,    -1,   985,
      -1,  1283,    -1,   987,   986,    -1,   988,    -1,   989,   643,
     988,    -1,   987,   634,   987,    -1,   989,    -1,   990,    -1,
      -1,   261,   991,    -1,    -1,   408,    -1,   431,  1454,   995,
     997,   998,    -1,    -1,   641,   996,   642,    -1,   996,   643,
    1462,    -1,  1462,    -1,    -1,   306,   191,    -1,   306,   388,
      -1,   306,   493,    -1,    -1,   367,   592,   999,    -1,   367,
     125,   999,    -1,   367,   592,   999,   367,   125,   999,    -1,
     367,   125,   999,   367,   592,   999,    -1,   454,    -1,    50,
      -1,   484,   359,    -1,   355,     5,    -1,   484,   120,    -1,
    1002,    -1,   408,   251,    -1,   587,  1003,    -1,   251,    -1,
     226,    -1,    -1,  1002,    -1,   249,    -1,   226,    -1,   225,
      -1,    -1,   587,    -1,   192,    -1,   502,    -1,    -1,  1008,
      -1,  1008,  1016,    -1,    -1,  1013,    -1,    -1,  1015,    -1,
      -1,  1014,    -1,  1018,    -1,  1013,  1018,    -1,  1019,    -1,
    1014,  1019,    -1,  1020,    -1,  1015,  1020,    -1,   598,  1021,
      -1,   574,  1021,    -1,   250,  1338,  1282,    -1,    74,  1459,
      -1,  1017,    -1,  1016,    -1,  1017,    -1,  1017,    -1,   619,
     387,  1457,    -1,    45,    -1,   469,    -1,   207,    -1,  1022,
     643,  1023,  1275,    -1,  1023,  1275,    -1,  1462,    -1,  1462,
     641,   361,   642,    -1,    -1,  1453,    -1,    -1,   649,  1462,
      -1,  1441,    -1,  1026,   643,  1441,    -1,    -1,    13,  1065,
     548,  1454,  1028,  1040,    -1,    -1,    13,   103,  1039,  1029,
     912,    -1,    13,   103,  1462,   593,   106,   131,   340,    -1,
      -1,    13,   410,   702,  1030,   703,    -1,    -1,    13,   193,
     702,  1031,   703,    -1,    -1,    13,  1577,  1572,  1032,  1579,
      -1,    -1,    13,  1572,  1033,  1579,    -1,    -1,    13,  1572,
     162,   702,  1034,  1036,  1037,   692,   697,  1038,    -1,    13,
     546,   814,    -1,    13,   274,   203,   816,    -1,    13,   546,
     811,    -1,    13,   546,   810,    -1,    13,   482,  1464,   372,
     641,   686,   642,    -1,    13,   595,   701,  1035,    -1,  1465,
     392,   169,    -1,  1035,   643,  1465,   392,   169,    -1,    -1,
     367,   471,   690,    -1,   696,    -1,   367,   471,   690,   696,
      -1,    -1,   441,   565,   702,    -1,    -1,   138,   698,    -1,
      -1,  1462,    -1,    -1,   133,   546,    -1,   224,   546,    -1,
    1055,   858,    -1,  1055,  1044,    -1,  1044,    -1,   859,    -1,
    1046,    -1,   139,   389,  1053,    -1,   426,   389,  1103,  1045,
      -1,    -1,   371,   389,  1103,  1045,  1041,  1103,    -1,    15,
     389,  1103,  1045,    -1,    -1,    61,   389,  1045,  1042,  1098,
      -1,    -1,   443,   389,  1103,  1045,  1043,  1090,    -1,    66,
     389,  1103,  1283,    -1,   572,   389,  1045,    -1,  1049,    -1,
     164,   389,  1054,   619,   548,  1454,   861,    -1,   440,   391,
     861,    -1,    12,    -1,  1053,    -1,    -1,     6,   389,  1103,
    1047,  1048,    -1,    -1,   641,   884,   642,    -1,   390,  1283,
      -1,    -1,   442,   389,  1103,  1050,  1051,    -1,    -1,    -1,
    1053,  1052,   236,   641,   884,   642,    -1,  1054,    -1,  1053,
     643,  1054,    -1,  1462,    -1,  1057,    -1,  1055,   643,  1057,
      -1,     6,  1064,    -1,  1056,   934,  1067,    -1,     6,   935,
      -1,  1056,   641,   931,   642,    -1,    -1,    56,  1064,  1453,
    1058,   940,  1067,    -1,    -1,    -1,   331,  1064,  1453,  1059,
     942,   962,  1060,  1067,    -1,   139,  1064,  1453,  1066,    -1,
     139,   186,   251,  1453,    -1,   139,   408,   251,    -1,   139,
    1002,  1453,    -1,   132,   249,    -1,   147,   249,    -1,    13,
    1064,  1453,   484,   120,  1443,    -1,    13,  1064,  1453,   139,
     120,    -1,   441,  1068,  1454,    -1,    91,   565,   968,   970,
     975,    -1,   919,    -1,   185,    -1,  1268,    -1,  1062,    -1,
    1063,    -1,    -1,  1063,    -1,  1062,    -1,  1063,  1062,    -1,
    1062,  1063,    -1,    11,  1338,   120,    -1,    11,  1338,  1462,
      -1,   273,  1338,   120,    -1,   273,  1338,  1462,    -1,    -1,
      71,    -1,    -1,   222,    -1,    -1,   454,    -1,    50,    -1,
      -1,     8,  1462,    -1,   179,    -1,    -1,   565,    -1,   155,
      -1,    19,    -1,    -1,   522,   494,  1080,  1070,  1083,  1075,
      -1,   529,   494,  1080,    -1,   522,   567,  1072,    -1,    -1,
    1073,    -1,  1074,    -1,  1073,   643,  1074,    -1,   619,    83,
     497,    -1,   423,   369,    -1,   423,   624,    -1,  1076,  1077,
    1078,  1079,    -1,    -1,   595,   155,  1459,    -1,    -1,   392,
     155,  1459,    -1,    -1,   121,   155,  1459,    -1,    -1,   396,
     155,  1459,    -1,    -1,  1081,    -1,  1082,    -1,  1081,   643,
    1082,    -1,   518,    -1,   437,    -1,    -1,   591,  1084,    -1,
     674,    -1,  1084,   643,   674,    -1,   509,   155,  1459,    -1,
     507,   155,  1459,    -1,   508,    -1,    -1,    60,  1498,  1086,
    1308,  1087,    -1,    -1,   419,    -1,   171,    -1,    -1,   443,
    1103,  1498,  1089,  1308,  1090,    -1,    -1,  1091,    -1,  1092,
      -1,  1092,  1091,    -1,   419,    -1,   171,    -1,   596,    -1,
      -1,    15,  1103,  1498,  1094,  1308,    -1,    34,  1459,    -1,
      -1,    61,  1498,  1097,  1308,  1098,    -1,    -1,  1099,    -1,
    1100,    -1,  1100,  1099,    -1,   419,    -1,   175,    -1,   318,
      -1,   171,    -1,    57,    -1,   187,   593,    -1,    -1,   371,
    1103,  1498,  1102,  1308,    -1,    -1,   357,    -1,   270,    -1,
      -1,   441,  1498,  1105,  1107,    -1,   441,   595,   701,  1106,
      -1,  1465,   565,  1465,    -1,  1106,   643,  1465,   565,  1465,
      -1,  1108,    -1,  1107,   643,  1108,    -1,  1454,   565,  1454,
      -1,    -1,    48,   226,  1110,  1111,   239,  1115,    -1,  1112,
      -1,  1114,    -1,  1113,    -1,  1112,   643,  1113,    -1,  1454,
    1124,    -1,  1454,  1122,  1124,    -1,  1462,    -1,   120,    -1,
      -1,   269,   226,   236,    48,  1117,  1118,    -1,  1121,    -1,
    1119,    -1,  1120,    -1,  1119,   643,  1120,    -1,  1454,  1124,
    1127,    -1,  1454,  1122,  1124,  1127,    -1,    -1,   389,   861,
    1123,   641,  1045,   642,    -1,    -1,  1125,  1126,    -1,    -1,
    1002,   641,  1249,   642,    -1,    -1,   222,   257,    -1,  1129,
      -1,   476,  1132,    -1,   641,  1130,   642,  1554,    -1,   476,
    1134,    -1,   641,  1130,   642,    -1,   476,  1228,    -1,   641,
    1131,   642,    -1,    -1,  1134,  1133,  1551,    -1,    -1,    -1,
    1135,  1139,  1143,  1136,  1137,  1142,    -1,  1271,  1277,    -1,
    1296,    -1,  1138,    -1,  1296,  1138,    -1,  1138,  1296,    -1,
     190,  1208,  1259,  1264,  1261,  1271,  1277,  1288,    -1,   190,
     140,  1259,  1277,    -1,    -1,  1140,    -1,  1140,  1141,    -1,
    1141,    -1,  1568,    -1,   514,    -1,   515,    -1,   512,    -1,
      -1,   187,   592,    -1,   273,   239,   486,   329,    -1,  1143,
     643,  1144,    -1,  1144,    -1,   636,    -1,  1145,  1448,  1146,
      -1,  1145,  1149,  1146,  1147,    -1,    -1,    -1,    -1,    19,
    1462,    -1,    19,  1459,    -1,  1462,    -1,  1459,    -1,    -1,
     641,   642,    -1,  1149,  1153,  1149,    -1,  1149,   628,  1149,
      -1,  1149,  1154,  1149,    -1,   353,  1149,    -1,  1150,   244,
     571,    -1,  1150,   244,  1155,   571,    -1,  1150,   244,   174,
      -1,  1150,   244,  1155,   174,    -1,  1150,   244,   588,    -1,
    1150,   244,  1155,   588,    -1,  1150,    -1,  1150,   244,   359,
      -1,  1150,   244,  1155,   359,    -1,  1150,   156,  1151,    -1,
    1150,  1157,  1151,    -1,  1150,  1157,  1158,   641,  1563,   642,
      -1,  1151,    -1,  1152,   239,   641,  1563,   642,    -1,  1152,
    1155,   239,   641,  1563,   642,    -1,  1152,   239,   641,  1149,
     642,    -1,  1152,   239,   641,  1149,   643,  1199,   642,    -1,
    1152,  1155,   239,   641,  1149,   642,    -1,  1152,  1155,   239,
     641,  1149,   643,  1199,   642,    -1,  1152,    31,  1152,    17,
    1151,    -1,  1152,  1155,    31,  1152,    17,  1151,    -1,  1152,
     500,   263,  1152,    -1,  1152,   263,  1159,  1263,    -1,  1152,
    1155,   263,  1159,  1263,    -1,  1152,   432,  1152,    -1,  1152,
    1155,   432,  1152,    -1,  1152,    -1,  1152,   632,  1152,    -1,
    1152,   633,  1152,    -1,  1152,   487,  1152,    -1,  1152,   488,
    1152,    -1,  1152,   635,  1152,    -1,  1152,   634,  1152,    -1,
    1152,   635,   235,  1149,  1253,    -1,  1152,   634,   235,  1149,
    1253,    -1,  1152,   636,  1152,    -1,  1152,   637,  1152,    -1,
    1152,   638,  1152,    -1,  1152,   136,  1152,    -1,  1152,   332,
    1152,    -1,  1152,   639,  1152,    -1,  1159,    -1,   378,    -1,
     375,    -1,    17,    -1,    16,    -1,   353,    -1,   352,    -1,
     644,    -1,   352,    -1,   155,    -1,   194,    -1,   205,    -1,
     255,    -1,   282,    -1,   346,    -1,    12,    -1,    18,    -1,
    1450,    -1,  1160,    -1,  1161,    -1,  1164,    -1,  1178,    -1,
    1162,    -1,  1159,    68,  1464,    -1,  1444,    -1,  1442,    -1,
    1187,    -1,  1185,    -1,  1159,   377,  1159,    -1,   635,  1159,
      -1,   634,  1159,    -1,   640,  1159,    -1,  1156,  1159,    -1,
     641,  1563,   642,    -1,   641,  1149,   642,    -1,   641,  1149,
     643,  1199,   642,    -1,   467,   641,  1149,   643,  1199,   642,
      -1,   166,   641,  1563,   642,    -1,   645,  1462,  1149,   646,
      -1,   306,  1202,     9,   641,  1152,  1179,   642,    -1,    33,
    1159,    -1,    53,   641,  1149,    19,  1197,   642,    -1,    52,
    1204,  1206,  1205,   149,    -1,    91,   641,  1149,   643,  1197,
     642,    -1,    91,   641,  1149,   598,   969,   642,    -1,   120,
     641,  1450,   642,    -1,   602,   641,  1451,   642,    -1,   235,
    1149,  1253,   635,  1149,    -1,    59,   641,  1199,   642,    -1,
      59,   641,  1199,   598,   969,   642,    -1,    99,  1148,    -1,
     110,   641,  1149,   642,    -1,   115,   641,  1149,   642,    -1,
     217,   641,  1149,   642,    -1,   232,   641,  1149,   643,  1149,
     643,  1149,   643,  1149,   642,    -1,   235,   641,  1149,   643,
    1149,   642,    -1,   235,   641,  1149,   643,  1149,   643,  1199,
     642,    -1,   259,   641,  1149,   643,  1149,   642,    -1,   326,
     641,  1149,   642,    -1,   333,   641,  1149,   642,    -1,   461,
     641,  1149,   643,  1149,   642,    -1,   474,   641,  1149,   642,
      -1,   561,   641,  1149,   642,    -1,   558,   641,  1149,   642,
      -1,   558,   641,  1149,   643,  1149,   642,    -1,   570,   641,
    1149,   642,    -1,   570,   641,   256,  1149,   190,  1149,   642,
      -1,   570,   641,   566,  1149,   190,  1149,   642,    -1,   570,
     641,    44,  1149,   190,  1149,   642,    -1,   570,   641,   256,
     190,  1149,   642,    -1,   570,   641,   566,   190,  1149,   642,
      -1,   570,   641,    44,   190,  1149,   642,    -1,   570,   641,
    1149,   190,  1149,   642,    -1,   595,   641,   642,    -1,   630,
     641,  1149,   642,    -1,     7,   641,  1149,   643,  1149,   642,
      -1,     7,   641,  1149,   643,   235,  1149,  1253,   642,    -1,
      97,  1148,    -1,   102,   955,    -1,   108,   641,  1149,   643,
     235,  1149,  1253,   642,    -1,   109,   641,  1149,   643,   235,
    1149,  1253,   642,    -1,   173,   641,  1253,   190,  1149,   642,
      -1,   198,   641,  1255,   643,  1149,   642,    -1,   966,    -1,
     402,   641,  1152,   239,  1149,   642,    -1,   534,   641,  1149,
     643,  1149,   642,    -1,   534,   641,  1149,   643,   235,  1149,
    1253,   642,    -1,   538,   641,  1149,   643,  1149,   643,  1149,
     642,    -1,   538,   641,  1149,   643,  1149,   642,    -1,   538,
     641,  1149,   190,  1149,   187,  1149,   642,    -1,   538,   641,
    1149,   190,  1149,   642,    -1,   544,   955,    -1,   559,   641,
    1254,   643,  1149,   643,  1149,   642,    -1,   560,   641,  1254,
     643,  1149,   643,  1149,   642,    -1,   599,  1148,    -1,   601,
     955,    -1,   600,   955,    -1,    21,   641,  1149,   642,    -1,
      58,   641,  1149,   642,    -1,    66,   641,  1199,   642,    -1,
      69,   641,  1149,   642,    -1,   103,   641,   642,    -1,   221,
     641,  1149,   643,  1149,   643,  1149,   642,    -1,   188,   641,
    1149,   643,  1149,   642,    -1,   188,   641,  1149,   643,  1149,
     643,  1149,   642,    -1,   322,   641,  1149,   642,    -1,   332,
     641,  1149,   643,  1149,   642,    -1,   366,   641,  1149,   642,
      -1,   392,   641,  1149,   642,    -1,   417,   641,  1149,   642,
      -1,   445,   641,  1149,   643,  1149,   642,    -1,   446,   641,
    1149,   643,  1149,   643,  1149,   642,    -1,   459,   641,  1149,
     642,    -1,   468,   641,   642,    -1,   572,   641,  1149,   643,
    1149,   642,    -1,   613,   641,  1149,   642,    -1,   613,   641,
    1149,   643,  1149,   642,    -1,   614,   641,  1149,   992,   642,
      -1,   614,   641,  1149,    19,    59,   982,   992,   642,    -1,
     614,   641,  1149,    19,    33,   982,   642,    -1,   614,   641,
    1149,   643,  1282,   643,  1282,   643,  1282,   642,    -1,  1163,
      -1,    88,   641,  1149,   643,  1149,   642,    -1,   196,   641,
    1199,   642,    -1,   267,   641,  1199,   642,    -1,   334,   641,
    1199,   642,    -1,   335,   641,  1199,   642,    -1,   336,   641,
    1199,   642,    -1,   399,   641,  1149,   643,  1149,   642,    -1,
     400,   641,  1199,   642,    -1,  1457,   641,  1182,   642,  1168,
      -1,  1457,   641,  1182,   642,  1167,  1168,    -1,   539,   641,
    1195,   642,  1168,    -1,   539,   641,   135,  1195,   642,  1168,
      -1,    27,   641,  1195,   642,  1168,    -1,    27,   641,   135,
    1195,   642,  1168,    -1,    92,   641,  1258,   636,   642,  1168,
      -1,    92,   641,  1195,   642,  1168,    -1,    92,   641,   135,
    1200,   642,  1168,    -1,   328,   641,  1195,   642,  1168,    -1,
     328,   641,   135,  1195,   642,  1168,    -1,   311,   641,  1195,
     642,  1168,    -1,   311,   641,   135,  1195,   642,  1168,    -1,
     607,   641,  1195,   642,  1168,    -1,   609,   641,  1195,   642,
    1168,    -1,   528,   641,  1195,   642,  1168,    -1,   527,   641,
    1195,   642,  1168,    -1,   358,   641,  1183,   642,  1165,  1166,
    1168,    -1,   393,   641,  1184,   642,   618,   203,   641,   376,
      46,  1171,   642,  1168,    -1,   394,   641,  1184,   642,   618,
     203,   641,   376,    46,  1171,   642,  1168,    -1,    -1,   190,
     179,    -1,   190,   254,    -1,    -1,  1167,    -1,   452,   360,
      -1,   222,   360,    -1,   382,   641,  1169,  1170,   642,    -1,
      -1,   389,    46,  1199,    -1,    -1,  1174,    -1,   376,    46,
    1171,  1173,    -1,  1171,   643,  1449,  1275,  1172,    -1,  1449,
    1275,  1172,    -1,    -1,   360,   179,    -1,   360,   254,    -1,
      -1,  1174,    -1,  1175,    31,  1176,    17,  1176,    -1,  1175,
    1176,    -1,   465,    -1,   420,    -1,   577,  1177,    -1,    98,
     467,    -1,  1149,  1177,    -1,   235,  1149,  1253,  1177,    -1,
     403,    -1,   184,    -1,  1457,   641,  1182,   642,    -1,  1462,
     649,  1462,   641,  1198,   642,    -1,  1180,  1181,    -1,   239,
      42,   329,    -1,    -1,   239,   342,   253,   329,    -1,    -1,
     619,   418,   168,    -1,    -1,  1183,    -1,  1184,    -1,  1183,
     643,  1184,    -1,  1145,  1149,  1146,  1147,    -1,    27,   641,
    1195,   642,    -1,    27,   641,   135,  1195,   642,    -1,    36,
     641,  1195,   642,    -1,    37,   641,  1195,   642,    -1,    39,
     641,  1195,   642,    -1,    92,   641,  1258,   636,   642,    -1,
      92,   641,  1195,   642,    -1,    92,   641,   135,  1200,   642,
      -1,   328,   641,  1195,   642,    -1,   328,   641,   135,  1195,
     642,    -1,   311,   641,  1195,   642,    -1,   311,   641,   135,
    1195,   642,    -1,   528,   641,  1195,   642,    -1,   607,   641,
    1195,   642,    -1,   527,   641,  1195,   642,    -1,   609,   641,
    1195,   642,    -1,   539,   641,  1195,   642,    -1,   539,   641,
     135,  1195,   642,    -1,    -1,   204,   641,  1190,  1186,  1199,
    1192,  1191,   642,    -1,    -1,   648,  1188,  1189,    -1,  1464,
     485,  1149,    -1,  1464,    -1,   648,  1484,  1464,  1025,    -1,
      -1,   135,    -1,    -1,   478,  1441,    -1,    -1,    -1,   376,
      46,  1193,  1194,    -1,  1194,   643,  1449,  1275,    -1,  1449,
    1275,    -1,    -1,  1258,  1196,  1149,    -1,    33,   960,    -1,
      59,   960,   980,    -1,   344,   960,    -1,   492,    -1,   492,
     237,    -1,   590,    -1,   590,   237,    -1,   110,    -1,   561,
     954,    -1,   107,   954,    -1,   118,   952,    -1,    -1,  1199,
      -1,  1149,    -1,  1199,   643,  1149,    -1,    -1,  1258,  1201,
    1199,    -1,  1203,    -1,   641,  1203,   642,    -1,  1450,    -1,
    1203,   643,  1450,    -1,    -1,  1149,    -1,    -1,   145,  1149,
      -1,   615,  1149,   557,  1149,    -1,  1206,   615,  1149,   557,
    1149,    -1,  1222,    -1,  1211,    -1,  1210,    -1,  1207,    -1,
     645,  1462,  1207,   646,    -1,  1209,    -1,  1210,   643,  1209,
      -1,  1207,  1219,  1207,    -1,  1207,   531,  1222,    -1,    -1,
    1207,  1219,  1207,   367,  1212,  1149,    -1,    -1,  1207,   531,
    1222,   367,  1213,  1149,    -1,    -1,  1207,  1219,  1207,   598,
    1214,   641,  1252,   642,    -1,  1207,   342,   248,  1222,    -1,
      -1,  1207,   259,  1238,   248,  1207,   367,  1215,  1149,    -1,
      -1,  1207,   259,  1238,   248,  1222,  1216,   598,   641,  1252,
     642,    -1,  1207,   342,   259,  1238,   248,  1222,    -1,    -1,
    1207,   461,  1238,   248,  1207,   367,  1217,  1149,    -1,    -1,
    1207,   461,  1238,   248,  1222,  1218,   598,   641,  1252,   642,
      -1,  1207,   342,   461,  1238,   248,  1222,    -1,   248,    -1,
     229,   248,    -1,    95,   248,    -1,    -1,  1221,    -1,   389,
     641,  1252,   642,   861,    -1,    -1,  1223,  1454,  1220,  1257,
    1247,    -1,  1237,  1236,  1233,    -1,   641,  1236,  1224,   642,
    1257,    -1,  1231,  1555,    -1,    -1,    -1,  1224,   586,  1559,
    1225,  1560,  1226,  1555,    -1,  1228,    -1,    -1,    -1,  1229,
    1566,  1143,  1230,   929,  1142,    -1,    -1,  1236,  1232,  1210,
      -1,    -1,    -1,  1234,  1139,  1143,  1235,   929,    -1,    -1,
     476,    -1,    -1,   379,    -1,    -1,   187,   248,    -1,   187,
     376,    46,    -1,   187,   203,    46,    -1,   185,    -1,   222,
      -1,    -1,  1240,  1002,  1239,  1242,   641,  1251,   642,    -1,
      -1,   597,  1002,  1239,  1243,   641,  1249,   642,    -1,  1241,
      -1,  1244,  1241,    -1,    -1,    -1,  1246,  1244,    -1,    -1,
    1248,  1245,    -1,    -1,  1251,    -1,  1462,    -1,   408,    -1,
    1250,    -1,  1251,   643,  1250,    -1,  1462,    -1,  1252,   643,
    1462,    -1,  1254,    -1,   111,    -1,   112,    -1,   113,    -1,
     114,    -1,   214,    -1,   215,    -1,   216,    -1,   324,    -1,
     325,    -1,   473,    -1,   629,    -1,   115,    -1,   613,    -1,
     217,    -1,   326,    -1,   333,    -1,   417,    -1,   474,    -1,
     322,    -1,   630,    -1,   110,    -1,   561,    -1,   558,    -1,
     107,    -1,    -1,    19,    -1,   155,    -1,    -1,  1256,  1462,
      -1,    -1,    12,    -1,    -1,    -1,   616,  1260,  1149,    -1,
      -1,    -1,   208,  1262,  1149,    -1,   160,  1159,    -1,    -1,
      -1,    -1,   203,    46,  1265,  1266,  1267,    -1,  1266,   643,
    1449,  1275,    -1,  1449,  1275,    -1,    -1,   620,    -1,   621,
      -1,   376,    46,  1269,    -1,  1269,   643,  1270,    -1,  1270,
      -1,  1451,  1275,    -1,    -1,  1272,    -1,    -1,   376,    46,
    1273,  1274,    -1,  1274,   643,  1449,  1275,    -1,  1449,  1275,
      -1,    -1,    20,    -1,   126,    -1,    -1,  1278,    -1,    -1,
    1278,    -1,   264,  1279,    -1,  1280,    -1,  1280,   643,  1280,
      -1,  1280,   365,  1280,    -1,  1462,    -1,  1442,    -1,   576,
      -1,   278,    -1,   361,    -1,    -1,   264,  1280,    -1,   361,
      -1,   210,    -1,   278,    -1,   576,    -1,   117,    -1,   181,
      -1,   361,    -1,   210,    -1,   278,    -1,   576,    -1,  1286,
      -1,   361,    -1,   576,    -1,   278,    -1,   117,    -1,   181,
      -1,   361,    -1,   576,    -1,   278,    -1,  1286,    -1,  1287,
      -1,   117,    -1,   181,    -1,    -1,    -1,   410,    14,  1289,
     641,  1290,   642,    -1,    -1,  1291,    -1,  1291,   643,  1291,
      -1,   361,    -1,    -1,  1293,  1294,    -1,  1294,   643,  1295,
      -1,  1295,    -1,   648,  1464,    -1,  1464,    -1,    -1,   236,
    1297,  1298,    -1,    -1,    -1,   380,  1461,  1299,   971,  1300,
    1425,  1428,    -1,   141,  1461,    -1,  1292,    -1,    -1,   138,
    1302,  1199,    -1,    -1,   139,  1314,  1498,  1313,  1304,  1308,
    1066,    -1,    -1,    -1,   139,   226,  1462,   367,  1454,  1305,
    1306,  1061,    -1,   139,   103,  1313,  1462,    -1,   139,   193,
    1313,  1462,   649,  1462,    -1,   139,   193,  1313,  1462,    -1,
     139,   410,  1313,   702,    -1,   139,   595,   701,  1530,    -1,
      -1,   139,   610,  1313,  1307,  1308,  1066,    -1,   139,   162,
    1313,   702,    -1,   139,   569,  1313,   702,    -1,   139,   546,
     837,  1315,    -1,   139,   274,   203,   838,  1315,    -1,   139,
     482,  1313,  1464,    -1,  1309,    -1,  1308,   643,  1309,    -1,
    1454,    -1,  1454,  1220,    -1,  1312,    -1,  1311,   643,  1312,
      -1,  1455,    -1,    -1,   221,   166,    -1,    -1,   551,    -1,
      -1,  1316,    -1,  1317,    -1,  1316,  1317,    -1,  1315,   643,
    1317,    -1,   848,    -1,   849,    -1,    -1,    -1,   232,  1319,
    1324,  1065,  1326,  1320,  1328,  1344,    -1,    -1,    -1,   446,
    1322,  1325,  1326,  1323,  1328,    -1,    -1,   281,    -1,   123,
      -1,   211,    -1,  1353,    -1,   123,    -1,   236,  1327,    -1,
    1327,    -1,  1310,    -1,  1331,    -1,   641,   642,  1331,    -1,
     641,  1330,   642,  1331,    -1,    -1,   484,  1329,  1335,    -1,
    1330,   643,  1447,    -1,  1447,    -1,   602,  1334,    -1,   603,
    1334,    -1,    -1,   907,  1332,  1551,    -1,    -1,   641,   907,
     642,  1333,  1554,    -1,  1334,   643,  1339,    -1,  1339,    -1,
    1335,   643,  1336,    -1,  1336,    -1,  1451,  1337,  1343,    -1,
     155,    -1,   485,    -1,    -1,  1337,    -1,    -1,   641,  1340,
    1341,   642,    -1,    -1,  1342,    -1,  1342,   643,  1343,    -1,
    1343,    -1,  1149,    -1,   120,    -1,    -1,    -1,   367,   142,
    1345,   251,   592,  1351,    -1,    -1,    -1,   592,  1347,  1353,
    1065,  1208,   484,  1349,  1348,  1259,  1271,  1281,    -1,  1349,
     643,  1350,    -1,  1350,    -1,  1451,  1337,  1343,    -1,  1351,
     643,  1352,    -1,  1352,    -1,  1451,  1337,  1343,    -1,    -1,
     281,    -1,    -1,   125,  1355,  1363,  1356,    -1,    -1,   190,
    1454,  1220,  1357,  1259,  1271,  1281,    -1,    -1,  1360,  1358,
     190,  1208,  1259,    -1,    -1,   190,  1311,  1359,   598,  1208,
    1259,    -1,  1361,    -1,  1360,   643,  1361,    -1,  1462,  1362,
      -1,  1462,   649,  1462,  1362,    -1,    -1,   649,   636,    -1,
      -1,  1364,  1363,    -1,   419,    -1,   281,    -1,   222,    -1,
      -1,   572,  1367,  1366,  1309,    -1,    -1,   548,    -1,    -1,
    1369,    -1,  1370,    -1,  1369,   643,  1370,    -1,    93,    -1,
     319,    -1,    41,   242,    -1,    89,   543,    -1,   385,   176,
      -1,   243,    -1,   542,    -1,   501,    -1,    12,    -1,    -1,
     187,   418,   361,    -1,    -1,   489,  1373,  1374,    -1,   104,
    1385,    -1,  1381,   545,  1380,  1385,    -1,  1381,   568,  1380,
    1385,    -1,   161,  1380,  1385,    -1,   548,   526,  1380,  1385,
      -1,   370,   545,  1380,  1385,    -1,   398,    -1,   153,   926,
    1377,    -1,   153,    12,  1377,    -1,  1381,    70,  1382,  1454,
    1380,  1385,    -1,  1378,   275,    -1,   494,   213,    -1,    -1,
      34,   161,  1383,  1384,  1375,  1276,    -1,    -1,   434,   161,
    1383,  1384,  1376,  1276,    -1,  1004,  1382,  1454,  1380,  1259,
      -1,  1379,   152,    -1,   409,    -1,    92,   641,   636,   642,
     612,    -1,    92,   641,   636,   642,   158,    -1,   612,  1276,
      -1,   158,  1276,    -1,   414,    -1,   413,  1368,  1371,  1276,
      -1,  1483,   526,  1385,    -1,  1381,   412,    -1,  1483,   606,
    1385,    -1,   968,  1385,    -1,    69,  1385,    -1,   202,    -1,
     202,   187,  1465,    -1,    94,   103,   917,  1462,    -1,    94,
     548,  1454,    -1,    94,   610,  1454,    -1,   303,   526,    -1,
     494,   526,    -1,    94,   410,   702,    -1,    94,   193,   702,
      -1,    94,   569,   702,    -1,   410,   526,  1385,    -1,   193,
     526,  1385,    -1,   410,    67,   702,    -1,   193,    67,   702,
      -1,    94,   162,   702,    -1,   526,    -1,   337,    -1,   275,
      -1,   303,    -1,    33,    -1,    -1,   530,    -1,    -1,  1382,
    1462,    -1,    -1,   191,    -1,   190,    -1,   239,    -1,    -1,
     239,  1459,    -1,    -1,   190,  1284,    -1,    -1,   263,  1459,
      -1,   616,  1149,    -1,    -1,  1390,  1454,  1387,  1392,    -1,
      -1,  1390,  1391,  1388,  1389,    -1,  1128,    -1,  1318,    -1,
    1321,    -1,  1346,    -1,  1354,    -1,   126,    -1,   127,    -1,
      -1,   171,    -1,   390,    -1,   188,   155,  1464,    -1,    -1,
    1441,    -1,  1462,    -1,    -1,   183,  1103,  1394,  1395,    -1,
      -1,    -1,  1498,  1396,  1402,  1397,  1398,    -1,  1400,    -1,
      -1,   619,   423,   273,    -1,    -1,   187,  1399,   170,    -1,
    1400,   643,  1401,    -1,  1401,    -1,   157,   275,    -1,   153,
     275,    -1,   195,   275,    -1,   495,   275,    -1,    33,   275,
      -1,   433,   275,    -1,   418,    48,    -1,   213,    -1,   409,
      -1,   275,    -1,   526,    -1,   128,    -1,   451,    -1,    -1,
    1308,    -1,    -1,   449,  1404,  1405,    -1,  1405,   643,  1406,
      -1,  1406,    -1,    -1,   494,  1407,  1408,    -1,   303,    -1,
     418,    48,    -1,    -1,    12,    -1,    -1,   416,  1410,  1411,
      -1,  1378,   275,  1412,    -1,   565,  1459,    -1,    29,  1149,
      -1,   252,  1414,  1149,    -1,    -1,    82,    -1,   418,    -1,
     597,  1462,    -1,    -1,    -1,    -1,    -1,   269,  1421,  1417,
    1423,  1422,   227,  1461,  1418,  1424,   236,   548,  1454,  1220,
    1419,   971,  1420,  1431,  1425,  1428,  1432,  1434,  1437,    -1,
     106,    -1,   627,    -1,    -1,   270,    -1,    -1,    80,    -1,
     281,    -1,    -1,   446,    -1,   222,    -1,    -1,    70,  1426,
      -1,  1426,  1427,    -1,  1427,    -1,   553,    46,  1441,    -1,
     374,   148,    46,  1441,    -1,   148,    46,  1441,    -1,   159,
      46,  1441,    -1,    -1,   266,  1429,    -1,  1429,  1430,    -1,
    1430,    -1,   553,    46,  1441,    -1,   520,    46,  1441,    -1,
      -1,   465,   219,    46,  1441,    -1,    -1,   222,   361,  1433,
      -1,   266,    -1,   465,    -1,    -1,   641,  1435,   642,    -1,
     641,   642,    -1,  1435,   643,  1436,    -1,  1436,    -1,  1451,
      -1,   648,  1464,    -1,    -1,   484,  1438,    -1,  1438,   643,
    1439,    -1,  1439,    -1,  1451,  1337,  1145,  1343,  1146,    -1,
     554,    -1,   343,    -1,   580,   554,    -1,  1440,  1460,    -1,
    1460,    -1,   210,    -1,    35,    -1,   386,    -1,  1444,    -1,
     635,  1445,    -1,   634,  1445,    -1,  1440,    -1,  1445,    -1,
    1446,    -1,   359,    -1,   174,    -1,   571,    -1,   210,    -1,
      35,    -1,   580,   210,    -1,   580,    35,    -1,   361,    -1,
     278,    -1,   576,    -1,   117,    -1,   181,    -1,   110,   554,
      -1,   561,   554,    -1,   558,   554,    -1,  1451,    -1,  1448,
      -1,  1462,   649,   636,    -1,  1462,   649,  1462,   649,   636,
      -1,  1149,    -1,  1462,    -1,  1452,    -1,  1462,    -1,  1452,
      -1,  1462,   649,  1462,    -1,   649,  1462,   649,  1462,    -1,
    1462,   649,  1462,   649,  1462,    -1,  1462,    -1,  1462,   649,
    1462,   649,  1462,    -1,  1462,   649,  1462,    -1,   649,  1462,
      -1,  1462,    -1,  1462,   649,  1462,    -1,   649,  1462,    -1,
    1462,  1362,    -1,  1462,   649,  1462,  1362,    -1,  1462,    -1,
     218,    -1,   220,    -1,  1459,    -1,   554,    -1,   554,    -1,
     554,    -1,  1457,    -1,  1466,    -1,  1457,    -1,  1467,    -1,
    1462,    -1,  1459,    -1,   262,    -1,  1464,    -1,  1464,   648,
    1464,    -1,    99,  1148,    -1,  1467,    -1,    21,    -1,    28,
      -1,    30,    -1,    47,    -1,    48,    -1,    58,    -1,    60,
      -1,    65,    -1,    74,    -1,    76,    -1,    88,    -1,   116,
      -1,   138,    -1,   149,    -1,   165,    -1,   183,    -1,   188,
      -1,   206,    -1,   209,    -1,   212,    -1,   234,    -1,   253,
      -1,   355,    -1,   370,    -1,   372,    -1,   383,    -1,   387,
      -1,   401,    -1,   405,    -1,   440,    -1,   443,    -1,   449,
      -1,   453,    -1,   462,    -1,   470,    -1,   475,    -1,   482,
      -1,   492,    -1,   498,    -1,   494,    -1,   499,    -1,   522,
      -1,   529,    -1,   572,    -1,   584,    -1,   585,    -1,   623,
      -1,   626,    -1,   593,    -1,     5,    -1,     7,    -1,     8,
      -1,     9,    -1,    10,    -1,    11,    -1,    14,    -1,    18,
      -1,    23,    -1,    25,    -1,    24,    -1,    26,    -1,    27,
      -1,    34,    -1,    38,    -1,    41,    -1,    43,    -1,    42,
      -1,    45,    -1,    51,    -1,    54,    -1,    55,    -1,    57,
      -1,    62,    -1,    64,    -1,    63,    -1,    66,    -1,    67,
      -1,    69,    -1,    73,    -1,    72,    -1,    70,    -1,    75,
      -1,    77,    -1,    78,    -1,    79,    -1,    80,    -1,    82,
      -1,    83,    -1,    85,    -1,    87,    -1,    86,    -1,    89,
      -1,    93,    -1,    96,    -1,    98,    -1,   101,    -1,   106,
      -1,   105,    -1,   107,    -1,   110,    -1,   115,    -1,   121,
      -1,   122,    -1,   124,    -1,   128,    -1,   130,    -1,   131,
      -1,   132,    -1,   133,    -1,   134,    -1,   141,    -1,   142,
      -1,   143,    -1,   150,    -1,   154,    -1,   153,    -1,   152,
      -1,   157,    -1,   158,    -1,   160,    -1,   162,    -1,   161,
      -1,   163,    -1,   164,    -1,   168,    -1,   169,    -1,   170,
      -1,   171,    -1,   172,    -1,   176,    -1,   175,    -1,   189,
      -1,   147,    -1,   191,    -1,   178,    -1,   179,    -1,   180,
      -1,   195,    -1,   197,    -1,   196,    -1,   198,    -1,   202,
      -1,   200,    -1,   207,    -1,   213,    -1,   217,    -1,   219,
      -1,   223,    -1,   238,    -1,   224,    -1,   225,    -1,   228,
      -1,   242,    -1,   243,    -1,   245,    -1,   246,    -1,   233,
      -1,   250,    -1,   254,    -1,   257,    -1,   260,    -1,   261,
      -1,   267,    -1,   268,    -1,   270,    -1,   272,    -1,   274,
      -1,   275,    -1,   309,    -1,   303,    -1,   305,    -1,   287,
      -1,   291,    -1,   288,    -1,   289,    -1,   304,    -1,   290,
      -1,   293,    -1,   285,    -1,   292,    -1,   286,    -1,   301,
      -1,   295,    -1,   294,    -1,   296,    -1,   297,    -1,   298,
      -1,   299,    -1,   300,    -1,   283,    -1,   307,    -1,   308,
      -1,   310,    -1,   312,    -1,   313,    -1,   318,    -1,   319,
      -1,   320,    -1,   321,    -1,   322,    -1,   323,    -1,   326,
      -1,   327,    -1,   331,    -1,   329,    -1,   333,    -1,   334,
      -1,   335,    -1,   336,    -1,   337,    -1,   338,    -1,   340,
      -1,   339,    -1,   341,    -1,   344,    -1,   345,    -1,   349,
      -1,   348,    -1,   356,    -1,   350,    -1,   351,    -1,   362,
      -1,   364,    -1,   365,    -1,   366,    -1,   368,    -1,   369,
      -1,   384,    -1,   385,    -1,   388,    -1,   391,    -1,   390,
      -1,   392,    -1,   395,    -1,   396,    -1,   397,    -1,   398,
      -1,   399,    -1,   400,    -1,   406,    -1,   407,    -1,   409,
      -1,   411,    -1,   412,    -1,   413,    -1,   414,    -1,   415,
      -1,   417,    -1,   418,    -1,   419,    -1,   422,    -1,   426,
      -1,   427,    -1,   429,    -1,   428,    -1,   430,    -1,   433,
      -1,   434,    -1,   435,    -1,   436,    -1,   437,    -1,   439,
      -1,   442,    -1,   444,    -1,   447,    -1,   451,    -1,   455,
      -1,   456,    -1,   457,    -1,   459,    -1,   463,    -1,   464,
      -1,   465,    -1,   468,    -1,   466,    -1,   467,    -1,   469,
      -1,   471,    -1,   472,    -1,   474,    -1,   480,    -1,   479,
      -1,   481,    -1,   493,    -1,   486,    -1,   490,    -1,   495,
      -1,   497,    -1,   500,    -1,   501,    -1,   507,    -1,   508,
      -1,   509,    -1,   512,    -1,   511,    -1,   514,    -1,   515,
      -1,   518,    -1,   521,    -1,   523,    -1,   524,    -1,   525,
      -1,   526,    -1,   530,    -1,   532,    -1,   533,    -1,   534,
      -1,   535,    -1,   537,    -1,   536,    -1,   540,    -1,   541,
      -1,   542,    -1,   543,    -1,   550,    -1,   545,    -1,   549,
      -1,   546,    -1,   551,    -1,   552,    -1,   555,    -1,   556,
      -1,   567,    -1,   568,    -1,   558,    -1,   559,    -1,   560,
      -1,   561,    -1,   573,    -1,   574,    -1,   575,    -1,   193,
      -1,   578,    -1,   579,    -1,   582,    -1,   581,    -1,   588,
      -1,   591,    -1,   595,    -1,   596,    -1,   606,    -1,   610,
      -1,   603,    -1,   612,    -1,   611,    -1,   613,    -1,   622,
      -1,   614,    -1,   625,    -1,   627,    -1,   630,    -1,    -1,
     484,  1469,  1470,    -1,    -1,  1486,  1471,  1476,    -1,    -1,
     567,  1472,  1489,    -1,    -1,  1482,  1473,  1474,    -1,    -1,
    1485,  1475,  1476,    -1,   567,  1489,    -1,    -1,   643,  1477,
      -1,    -1,  1478,  1480,    -1,    -1,  1477,   643,  1479,  1480,
      -1,    -1,  1482,  1481,  1485,    -1,  1486,    -1,   200,    -1,
     270,    -1,   481,    -1,    -1,   200,    -1,   270,    -1,   481,
      -1,    -1,   200,   649,    -1,   270,   649,    -1,   481,   649,
      -1,  1488,  1337,  1495,    -1,    -1,  1488,  1337,  1487,  1495,
      -1,   648,  1464,  1337,  1149,    -1,   648,   648,  1484,  1488,
    1337,  1495,    -1,   968,   973,    -1,   339,  1337,  1149,    -1,
     339,   970,   975,    -1,   392,  1337,  1494,    -1,   392,   187,
    1465,  1337,  1494,    -1,  1462,    -1,  1462,   649,  1462,    -1,
     120,   649,  1462,    -1,  1490,    -1,  1491,    -1,  1490,   643,
    1491,    -1,  1491,   643,  1490,    -1,  1492,    -1,   245,   261,
    1493,    -1,   423,   369,    -1,   423,   624,    -1,   423,   578,
      -1,   423,    75,    -1,   444,   423,    -1,   479,    -1,   554,
      -1,   392,   641,   554,   642,    -1,   366,   641,   554,   642,
      -1,  1149,    -1,   120,    -1,   367,    -1,    12,    -1,    33,
      -1,    -1,   273,  1498,  1497,  1499,    -1,   548,    -1,   545,
      -1,  1500,    -1,  1499,   643,  1500,    -1,  1454,  1257,  1501,
      -1,   423,    -1,   624,    -1,   281,   624,    -1,   423,   270,
      -1,    -1,   589,  1503,  1498,    -1,   206,  1454,   370,  1257,
      -1,   206,  1456,    65,    -1,    -1,   206,  1456,   423,  1505,
    1506,  1259,  1277,    -1,  1507,    -1,  1462,  1508,    -1,   179,
      -1,   349,    -1,   179,    -1,   349,    -1,   407,    -1,   254,
      -1,    -1,  1510,  1509,   641,  1342,   642,    -1,   155,    -1,
     194,    -1,   255,    -1,   205,    -1,   282,    -1,    -1,   460,
     701,  1512,  1513,    -1,  1518,   367,  1517,  1529,   190,  1531,
      -1,  1518,   367,   193,  1529,   190,  1531,    -1,  1518,   367,
     410,  1529,   190,  1531,    -1,    12,  1519,   643,   201,   373,
     190,  1531,    -1,   415,   367,  1465,   190,  1531,    -1,    -1,
     201,   701,  1515,  1516,    -1,  1518,   367,  1517,  1529,   565,
    1531,  1536,  1537,    -1,  1518,   367,   193,  1529,   565,  1531,
    1536,  1537,    -1,  1518,   367,   410,  1529,   565,  1531,  1536,
    1537,    -1,   415,   367,  1465,   565,  1531,  1538,    -1,    -1,
     548,    -1,  1520,    -1,    12,  1519,    -1,    -1,   409,    -1,
    1521,    -1,  1520,   643,  1521,    -1,    -1,   476,  1522,  1533,
      -1,    -1,   232,  1523,  1533,    -1,    -1,   592,  1524,  1533,
      -1,    -1,   431,  1525,  1533,    -1,   125,    -1,   594,    -1,
     226,    -1,    13,    -1,    94,    -1,   139,    -1,   165,    -1,
     439,    -1,   490,    -1,   411,    -1,   178,    -1,   201,   373,
      -1,   489,   104,    -1,   540,    -1,    94,   551,   545,    -1,
     273,   545,    -1,   447,   494,    -1,   447,    64,    -1,    94,
     610,    -1,   489,   610,    -1,    94,   464,    -1,    13,   464,
      -1,    94,   595,    -1,   162,    -1,   569,    -1,    94,   546,
      -1,    -1,    17,    -1,  1528,  1526,  1527,    -1,  1528,    -1,
     535,   554,    -1,   246,   554,    -1,    62,   554,    -1,   636,
      -1,  1462,   649,   636,    -1,   636,   649,   636,    -1,  1454,
      -1,  1465,    -1,  1530,   643,  1465,    -1,  1532,    -1,  1531,
     643,  1532,    -1,  1465,   219,    46,   554,    -1,  1465,   219,
      46,   392,   554,    -1,  1465,   219,   619,  1464,    -1,  1465,
     219,   619,  1464,    19,  1459,    -1,  1465,    -1,    -1,   641,
    1534,   642,    -1,  1534,   643,  1535,    -1,  1535,    -1,  1462,
      -1,    -1,   448,  1527,    -1,   448,   519,    -1,   448,   625,
      -1,   448,   351,    -1,    -1,   619,  1539,    -1,    -1,   619,
     201,   373,    -1,  1539,  1540,    -1,  1540,    -1,   201,   373,
      -1,   308,  1282,    -1,   312,  1282,    -1,   307,  1282,    -1,
     313,  1282,    -1,    -1,    30,  1542,  1543,    -1,    -1,   622,
      -1,    -1,    17,   355,    55,    -1,    17,    55,    -1,    -1,
     438,    -1,   355,   438,    -1,    -1,   470,    -1,    76,  1543,
    1544,  1545,    -1,   462,  1543,  1544,  1545,    -1,   462,  1543,
     565,  1546,  1462,    -1,   470,  1462,    -1,   438,   470,  1462,
      -1,    -1,  1552,    -1,    -1,   586,  1559,  1553,  1129,    -1,
      -1,  1552,    -1,  1556,    -1,    -1,  1556,    -1,    -1,  1557,
    1558,    -1,  1272,  1276,    -1,  1278,    -1,    -1,   135,    -1,
      12,    -1,   476,  1227,    -1,   641,  1131,   642,    -1,  1560,
    1555,    -1,    -1,  1561,   586,  1559,  1562,  1560,  1555,    -1,
    1564,  1561,  1565,    -1,    -1,    -1,    -1,  1567,    -1,  1567,
    1568,    -1,  1568,    -1,   531,    -1,   211,    -1,   135,    -1,
     516,    -1,   510,    -1,   511,    -1,   513,    -1,    12,    -1,
    1574,  1570,    -1,  1573,  1571,    -1,  1575,  1572,  1579,    -1,
    1579,    -1,  1591,    -1,  1602,    -1,  1596,    -1,   688,    -1,
    1579,    -1,  1591,    -1,  1602,    -1,  1596,    -1,  1595,    -1,
     688,    -1,  1573,    -1,  1574,    -1,    -1,   122,   155,  1465,
      -1,  1576,    -1,  1576,  1577,    -1,  1577,    -1,   378,   446,
      -1,    11,   155,   579,    -1,    11,   155,   320,    -1,    11,
     155,   552,    -1,    -1,   517,   475,   122,    -1,   517,   475,
     238,    -1,    -1,  1578,   610,  1454,  1580,  1581,    19,  1583,
      -1,    -1,   641,  1582,   642,    -1,  1462,    -1,  1582,   643,
    1462,    -1,    -1,  1584,  1585,  1590,    -1,    -1,  1588,  1586,
    1551,    -1,   641,  1587,   642,  1554,    -1,  1588,    -1,   641,
    1587,   642,    -1,    -1,   476,  1589,  1134,    -1,    -1,   619,
      61,   373,    -1,   619,    51,    61,   373,    -1,   619,   270,
      61,   373,    -1,    -1,    -1,    -1,   569,  1145,   702,   808,
     809,   367,  1145,  1592,  1454,   187,  1145,  1593,   144,   467,
    1594,   757,    -1,    10,  1145,   193,  1462,   457,   930,   499,
    1459,    -1,  1145,   193,  1462,   457,   930,   499,  1459,    -1,
      -1,    -1,    -1,    -1,    -1,  1145,   193,   702,   641,  1597,
     713,   642,  1598,   457,  1599,   965,  1600,   704,  1601,   757,
      -1,    -1,    -1,    -1,    -1,   410,  1145,   702,  1603,   641,
    1604,   717,   642,  1605,   704,  1606,   757,    -1,   626,  1609,
    1608,  1610,    -1,   626,   149,  1608,  1612,    -1,   626,   405,
    1608,    -1,   626,    76,  1608,  1611,    -1,   626,   462,  1608,
      -1,   626,   427,    -1,  1441,    -1,  1441,   643,  1441,    -1,
    1441,   643,  1441,   643,  1282,    -1,    30,    -1,   522,    -1,
      -1,   248,    -1,   455,    -1,    -1,   368,   395,    -1,    -1,
      -1,   541,  1613,  1614,    -1,    -1,   187,   323,    -1,   234,
     397,  1462,   499,  1459,    -1,   585,   397,  1462,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  2012,  2012,  2025,  2024,  2049,  2056,  2058,  2062,  2063,
    2068,  2069,  2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,
    2078,  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2086,  2087,
    2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,  2096,  2097,
    2098,  2099,  2100,  2101,  2102,  2103,  2104,  2105,  2106,  2107,
    2108,  2109,  2110,  2111,  2112,  2113,  2114,  2115,  2116,  2117,
    2118,  2119,  2123,  2133,  2134,  2138,  2158,  2165,  2176,  2175,
    2186,  2188,  2192,  2193,  2197,  2210,  2209,  2229,  2228,  2246,
    2247,  2251,  2255,  2259,  2263,  2268,  2272,  2276,  2281,  2294,
    2299,  2303,  2307,  2311,  2315,  2319,  2324,  2328,  2333,  2364,
    2369,  2376,  2379,  2381,  2382,  2386,  2400,  2404,  2420,  2424,
    2437,  2436,  2482,  2487,  2481,  2494,  2499,  2492,  2506,  2511,
    2504,  2517,  2516,  2529,  2528,  2536,  2540,  2544,  2548,  2555,
    2568,  2569,  2573,  2577,  2581,  2585,  2589,  2594,  2598,  2606,
    2605,  2637,  2636,  2643,  2650,  2651,  2657,  2663,  2673,  2679,
    2685,  2687,  2694,  2695,  2699,  2705,  2714,  2715,  2723,  2723,
    2778,  2779,  2780,  2781,  2782,  2783,  2784,  2785,  2786,  2787,
    2788,  2789,  2790,  2795,  2809,  2823,  2842,  2843,  2847,  2848,
    2853,  2855,  2857,  2859,  2861,  2863,  2865,  2871,  2872,  2873,
    2877,  2881,  2889,  2888,  2901,  2903,  2906,  2908,  2912,  2916,
    2923,  2925,  2929,  2930,  2935,  2954,  2984,  2986,  2990,  2991,
    2995,  3024,  3025,  3026,  3027,  3031,  3032,  3036,  3037,  3042,
    3045,  3072,  3071,  3155,  3172,  3171,  3246,  3245,  3318,  3319,
    3324,  3326,  3331,  3354,  3365,  3369,  3391,  3392,  3396,  3400,
    3413,  3419,  3425,  3434,  3449,  3475,  3481,  3482,  3488,  3491,
    3495,  3503,  3523,  3525,  3543,  3549,  3551,  3553,  3555,  3557,
    3559,  3561,  3563,  3565,  3567,  3569,  3571,  3576,  3592,  3608,
    3609,  3614,  3620,  3629,  3635,  3644,  3652,  3681,  3690,  3692,
    3701,  3706,  3712,  3721,  3729,  3731,  3733,  3735,  3737,  3739,
    3741,  3743,  3745,  3747,  3749,  3751,  3753,  3758,  3778,  3802,
    3804,  3803,  3810,  3811,  3812,  3813,  3814,  3815,  3816,  3817,
    3818,  3819,  3820,  3821,  3822,  3827,  3826,  3837,  3837,  3894,
    3893,  3950,  3950,  3972,  4031,  4081,  4106,  4105,  4131,  4154,
    4156,  4157,  4161,  4179,  4200,  4209,  4245,  4200,  4274,  4276,
    4277,  4281,  4282,  4287,  4298,  4286,  4349,  4348,  4362,  4363,
    4367,  4368,  4373,  4382,  4372,  4431,  4440,  4430,  4484,  4497,
    4502,  4501,  4539,  4540,  4545,  4544,  4578,  4578,  4597,  4596,
    4646,  4663,  4672,  4662,  4726,  4735,  4725,  4775,  4777,  4782,
    4784,  4786,  4803,  4808,  4814,  4821,  4822,  4830,  4836,  4845,
    4851,  4857,  4858,  4862,  4862,  4867,  4868,  4869,  4873,  4874,
    4875,  4878,  4880,  4884,  4885,  4886,  4890,  4891,  4892,  4893,
    4894,  4895,  4896,  4897,  4900,  4902,  4906,  4907,  4908,  4912,
    4913,  4914,  4915,  4916,  4919,  4921,  4925,  4926,  4927,  4931,
    4932,  4933,  4934,  4935,  4936,  4937,  4940,  4942,  4946,  4947,
    4948,  4952,  4953,  4954,  4959,  4967,  4975,  4983,  4995,  5007,
    5012,  5017,  5025,  5033,  5041,  5049,  5057,  5065,  5073,  5086,
    5099,  5113,  5118,  5131,  5132,  5183,  5184,  5187,  5202,  5220,
    5225,  5223,  5230,  5232,  5231,  5235,  5234,  5240,  5277,  5278,
    5283,  5282,  5301,  5320,  5319,  5336,  5340,  5348,  5347,  5350,
    5352,  5354,  5356,  5361,  5362,  5368,  5369,  5386,  5387,  5391,
    5392,  5396,  5415,  5425,  5436,  5445,  5446,  5462,  5464,  5463,
    5468,  5466,  5477,  5478,  5482,  5500,  5516,  5517,  5533,  5548,
    5570,  5571,  5576,  5575,  5599,  5609,  5631,  5630,  5648,  5647,
    5667,  5689,  5693,  5722,  5734,  5735,  5740,  5751,  5739,  5776,
    5777,  5781,  5794,  5815,  5828,  5854,  5855,  5860,  5859,  5896,
    5901,  5902,  5906,  5907,  5911,  5913,  5919,  5921,  5923,  5925,
    5927,  5929,  5939,  5954,  5938,  5968,  5969,  5973,  5974,  5978,
    5979,  5983,  5984,  5988,  5989,  5993,  5994,  5998,  6002,  6003,
    6006,  6008,  6012,  6013,  6017,  6018,  6019,  6023,  6028,  6033,
    6038,  6043,  6048,  6053,  6058,  6073,  6079,  6094,  6099,  6114,
    6120,  6138,  6143,  6148,  6153,  6158,  6164,  6163,  6189,  6190,
    6191,  6196,  6201,  6206,  6208,  6210,  6212,  6218,  6226,  6244,
    6261,  6287,  6305,  6306,  6307,  6308,  6309,  6310,  6314,  6315,
    6316,  6320,  6321,  6325,  6326,  6327,  6328,  6333,  6340,  6341,
    6345,  6346,  6350,  6351,  6358,  6363,  6369,  6375,  6381,  6400,
    6406,  6408,  6412,  6416,  6417,  6421,  6426,  6425,  6448,  6449,
    6450,  6451,  6456,  6460,  6465,  6470,  6474,  6479,  6484,  6490,
    6495,  6501,  6505,  6510,  6515,  6533,  6535,  6537,  6553,  6555,
    6560,  6565,  6577,  6582,  6587,  6592,  6594,  6596,  6598,  6600,
    6602,  6604,  6606,  6609,  6608,  6613,  6612,  6616,  6618,  6627,
    6628,  6629,  6634,  6635,  6636,  6637,  6638,  6642,  6646,  6647,
    6651,  6652,  6656,  6657,  6658,  6659,  6660,  6664,  6665,  6666,
    6667,  6668,  6672,  6677,  6679,  6685,  6686,  6688,  6693,  6703,
    6704,  6708,  6709,  6710,  6718,  6719,  6723,  6724,  6728,  6729,
    6730,  6734,  6735,  6736,  6737,  6740,  6741,  6745,  6746,  6750,
    6751,  6755,  6756,  6760,  6761,  6762,  6763,  6764,  6765,  6771,
    6777,  6783,  6789,  6790,  6803,  6809,  6815,  6821,  6826,  6831,
    6840,  6861,  6869,  6870,  6875,  6876,  6880,  6888,  6892,  6893,
    6897,  6898,  6902,  6911,  6915,  6916,  6920,  6928,  6929,  6933,
    6934,  6938,  6939,  6944,  6945,  6949,  6956,  6965,  6970,  6978,
    6979,  6980,  6981,  6982,  6983,  6988,  6996,  6997,  7002,  7001,
    7014,  7015,  7019,  7022,  7023,  7024,  7025,  7029,  7037,  7044,
    7045,  7049,  7059,  7060,  7064,  7065,  7068,  7070,  7074,  7086,
    7087,  7091,  7098,  7111,  7112,  7114,  7116,  7122,  7127,  7133,
    7139,  7146,  7156,  7157,  7158,  7159,  7160,  7164,  7168,  7169,
    7173,  7174,  7178,  7179,  7183,  7184,  7185,  7189,  7190,  7194,
    7198,  7211,  7223,  7224,  7228,  7229,  7233,  7234,  7238,  7239,
    7243,  7244,  7248,  7249,  7253,  7254,  7258,  7259,  7263,  7265,
    7269,  7270,  7274,  7278,  7279,  7292,  7293,  7294,  7298,  7299,
    7303,  7309,  7323,  7324,  7328,  7329,  7333,  7334,  7342,  7341,
    7387,  7386,  7400,  7412,  7411,  7430,  7429,  7448,  7447,  7466,
    7460,  7480,  7479,  7512,  7517,  7522,  7527,  7532,  7539,  7546,
    7551,  7559,  7560,  7561,  7562,  7566,  7567,  7579,  7580,  7584,
    7585,  7588,  7590,  7598,  7606,  7608,  7610,  7611,  7619,  7620,
    7624,  7633,  7631,  7645,  7659,  7658,  7672,  7670,  7684,  7691,
    7702,  7703,  7731,  7738,  7742,  7747,  7746,  7762,  7764,  7769,
    7777,  7776,  7792,  7796,  7795,  7807,  7808,  7812,  7827,  7828,
    7832,  7841,  7845,  7850,  7856,  7855,  7866,  7875,  7865,  7890,
    7899,  7908,  7917,  7926,  7932,  7938,  7947,  7956,  7984,  8005,
    8015,  8019,  8024,  8025,  8028,  8030,  8031,  8032,  8033,  8036,
    8041,  8052,  8057,  8068,  8069,  8073,  8074,  8078,  8079,  8080,
    8084,  8085,  8090,  8098,  8099,  8100,  8101,  8106,  8105,  8134,
    8144,  8161,  8164,  8171,  8175,  8182,  8186,  8190,  8197,  8202,
    8205,  8212,  8215,  8222,  8225,  8232,  8235,  8243,  8246,  8253,
    8257,  8264,  8268,  8275,  8276,  8301,  8302,  8303,  8308,  8313,
    8321,  8320,  8332,  8333,  8334,  8339,  8338,  8360,  8361,  8365,
    8366,  8370,  8371,  8372,  8377,  8376,  8398,  8407,  8406,  8433,
    8434,  8438,  8439,  8443,  8444,  8445,  8446,  8447,  8448,  8453,
    8452,  8474,  8475,  8476,  8481,  8480,  8486,  8493,  8498,  8506,
    8507,  8511,  8525,  8524,  8537,  8538,  8542,  8543,  8547,  8557,
    8567,  8568,  8573,  8572,  8583,  8584,  8588,  8589,  8593,  8603,
    8614,  8613,  8621,  8621,  8632,  8633,  8638,  8639,  8648,  8657,
    8658,  8662,  8667,  8672,  8677,  8682,  8681,  8701,  8709,  8701,
    8716,  8717,  8718,  8719,  8720,  8724,  8731,  8738,  8740,  8751,
    8752,  8756,  8757,  8785,  8789,  8819,  8821,  8827,  8837,  8838,
    8839,  8854,  8861,  8886,  8892,  8898,  8899,  8900,  8901,  8902,
    8906,  8907,  8912,  8963,  8970,  9013,  9019,  9025,  9031,  9037,
    9043,  9049,  9055,  9059,  9065,  9071,  9077,  9083,  9089,  9093,
    9099,  9109,  9115,  9123,  9129,  9139,  9145,  9154,  9164,  9170,
    9180,  9186,  9195,  9199,  9205,  9211,  9217,  9223,  9229,  9235,
    9241,  9247,  9253,  9259,  9265,  9271,  9277,  9283,  9287,  9288,
    9292,  9293,  9297,  9298,  9302,  9303,  9307,  9308,  9309,  9310,
    9311,  9312,  9316,  9317,  9321,  9322,  9323,  9324,  9325,  9326,
    9327,  9339,  9340,  9341,  9342,  9343,  9349,  9353,  9359,  9365,
    9371,  9377,  9379,  9386,  9393,  9399,  9440,  9449,  9456,  9464,
    9470,  9477,  9483,  9497,  9504,  9520,  9526,  9532,  9540,  9546,
    9552,  9558,  9564,  9579,  9591,  9597,  9603,  9609,  9615,  9621,
    9627,  9633,  9639,  9645,  9651,  9657,  9663,  9669,  9675,  9681,
    9687,  9695,  9716,  9723,  9729,  9736,  9743,  9750,  9757,  9763,
    9769,  9774,  9780,  9787,  9793,  9799,  9805,  9811,  9817,  9835,
    9841,  9847,  9854,  9861,  9876,  9882,  9888,  9894,  9900,  9907,
    9913,  9919,  9925,  9931,  9937,  9944,  9957,  9963,  9969,  9975,
    9981,  9989,  9995, 10007, 10013, 10019, 10027, 10037, 10043, 10059,
   10065, 10072, 10079, 10086, 10093, 10100, 10104, 10117, 10142, 10178,
   10186, 10200, 10208, 10222, 10230, 10238, 10266, 10274, 10288, 10296,
   10310, 10318, 10326, 10334, 10343, 10355, 10363, 10374, 10375, 10376,
   10379, 10380, 10383, 10384, 10387, 10415, 10416, 10420, 10421, 10426,
   10447, 10453, 10467, 10468, 10469, 10473, 10474, 10478, 10493, 10506,
   10507, 10511, 10516, 10521, 10527, 10537, 10538, 10555, 10628, 10668,
   10670, 10675, 10676, 10680, 10681, 10685, 10686, 10690, 10697, 10705,
   10731, 10737, 10743, 10749, 10755, 10761, 10770, 10791, 10797, 10808,
   10814, 10820, 10826, 10832, 10838, 10844, 10850, 10856, 10863, 10862,
   10883, 10882, 10897, 10908, 10916, 10932, 10933, 10938, 10943, 10946,
   10949, 10948, 10965, 10967, 10973, 10972, 10989, 10991, 10993, 10995,
   10997, 10999, 11001, 11003, 11005, 11007, 11009, 11014, 11015, 11019,
   11026, 11035, 11034, 11051, 11052, 11056, 11063, 11071, 11072, 11076,
   11077, 11081, 11089, 11100, 11101, 11110, 11121, 11122, 11128, 11129,
   11149, 11151, 11155, 11153, 11170, 11168, 11186, 11184, 11191, 11200,
   11198, 11216, 11215, 11225, 11236, 11234, 11253, 11252, 11263, 11274,
   11275, 11276, 11284, 11285, 11289, 11304, 11304, 11319, 11359, 11432,
   11443, 11448, 11440, 11467, 11487, 11495, 11487, 11504, 11503, 11526,
   11543, 11526, 11550, 11554, 11580, 11581, 11586, 11589, 11590, 11591,
   11595, 11596, 11601, 11600, 11606, 11605, 11613, 11614, 11617, 11619,
   11619, 11623, 11623, 11628, 11629, 11633, 11635, 11640, 11641, 11645,
   11656, 11669, 11670, 11671, 11672, 11673, 11674, 11675, 11676, 11677,
   11678, 11679, 11680, 11684, 11685, 11686, 11687, 11688, 11689, 11690,
   11691, 11692, 11696, 11697, 11698, 11699, 11702, 11704, 11705, 11709,
   11710, 11718, 11720, 11724, 11726, 11725, 11739, 11742, 11741, 11756,
   11762, 11777, 11780, 11779, 11787, 11789, 11794, 11795, 11815, 11846,
   11850, 11851, 11855, 11868, 11870, 11875, 11874, 11909, 11911, 11916,
   11917, 11918, 11923, 11929, 11933, 11934, 11938, 11945, 11952, 11959,
   11969, 11996, 12000, 12006, 12012, 12022, 12026, 12036, 12037, 12038,
   12039, 12040, 12041, 12045, 12046, 12047, 12048, 12049, 12053, 12054,
   12055, 12056, 12057, 12061, 12062, 12063, 12064, 12068, 12073, 12074,
   12077, 12080, 12079, 12113, 12114, 12118, 12126, 12139, 12139, 12149,
   12150, 12154, 12173, 12213, 12212, 12225, 12233, 12224, 12235, 12247,
   12259, 12258, 12276, 12275, 12286, 12287, 12286, 12303, 12310, 12331,
   12352, 12364, 12369, 12368, 12378, 12384, 12391, 12396, 12401, 12411,
   12412, 12416, 12427, 12440, 12441, 12445, 12456, 12457, 12461, 12462,
   12465, 12467, 12470, 12471, 12472, 12476, 12477, 12485, 12493, 12484,
   12503, 12510, 12502, 12520, 12532, 12533, 12546, 12550, 12551, 12567,
   12568, 12572, 12581, 12582, 12583, 12585, 12584, 12595, 12596, 12600,
   12601, 12603, 12602, 12606, 12605, 12611, 12612, 12616, 12617, 12621,
   12631, 12632, 12636, 12637, 12642, 12641, 12655, 12656, 12660, 12665,
   12673, 12674, 12682, 12684, 12684, 12692, 12700, 12691, 12722, 12723,
   12727, 12735, 12736, 12740, 12750, 12751, 12758, 12757, 12773, 12772,
   12786, 12785, 12797, 12796, 12810, 12811, 12815, 12828, 12844, 12845,
   12849, 12850, 12854, 12855, 12856, 12861, 12860, 12882, 12884, 12887,
   12889, 12892, 12893, 12896, 12900, 12904, 12908, 12912, 12916, 12920,
   12924, 12928, 12936, 12939, 12949, 12948, 12963, 12970, 12978, 12986,
   12994, 13002, 13010, 13017, 13019, 13021, 13030, 13034, 13039, 13038,
   13044, 13043, 13048, 13057, 13064, 13069, 13071, 13073, 13075, 13077,
   13085, 13096, 13104, 13106, 13114, 13121, 13128, 13138, 13145, 13151,
   13160, 13168, 13172, 13176, 13183, 13190, 13196, 13203, 13210, 13215,
   13220, 13228, 13230, 13232, 13237, 13238, 13241, 13243, 13247, 13248,
   13252, 13253, 13257, 13258, 13262, 13263, 13267, 13268, 13271, 13273,
   13280, 13291, 13290, 13306, 13305, 13312, 13313, 13314, 13315, 13316,
   13320, 13321, 13326, 13330, 13336, 13342, 13364, 13365, 13366, 13381,
   13380, 13393, 13402, 13392, 13404, 13408, 13409, 13421, 13420, 13442,
   13443, 13448, 13450, 13452, 13454, 13456, 13458, 13460, 13462, 13464,
   13466, 13468, 13470, 13472, 13477, 13478, 13483, 13482, 13492, 13493,
   13497, 13497, 13499, 13500, 13504, 13505, 13510, 13509, 13520, 13524,
   13528, 13540, 13550, 13551, 13552, 13558, 13570, 13582, 13592, 13602,
   13569, 13610, 13611, 13615, 13616, 13620, 13621, 13633, 13637, 13638,
   13639, 13642, 13644, 13648, 13649, 13653, 13658, 13665, 13670, 13677,
   13679, 13683, 13684, 13688, 13693, 13701, 13702, 13705, 13707, 13715,
   13717, 13721, 13722, 13723, 13727, 13729, 13734, 13735, 13744, 13745,
   13749, 13750, 13754, 13774, 13798, 13810, 13821, 13840, 13848, 13860,
   13875, 13896, 13897, 13898, 13907, 13908, 13909, 13910, 13917, 13923,
   13929, 13935, 13941, 13970, 14001, 14011, 14021, 14027, 14036, 14048,
   14054, 14060, 14076, 14077, 14081, 14090, 14106, 14110, 14161, 14165,
   14183, 14187, 14267, 14292, 14323, 14324, 14340, 14350, 14354, 14360,
   14366, 14376, 14382, 14391, 14401, 14402, 14432, 14445, 14461, 14477,
   14494, 14495, 14506, 14507, 14518, 14519, 14520, 14524, 14551, 14584,
   14599, 14600, 14601, 14602, 14603, 14604, 14605, 14606, 14607, 14608,
   14609, 14610, 14611, 14612, 14613, 14614, 14615, 14616, 14617, 14618,
   14619, 14620, 14621, 14622, 14623, 14624, 14625, 14626, 14627, 14628,
   14629, 14630, 14631, 14632, 14633, 14634, 14635, 14636, 14637, 14638,
   14639, 14640, 14641, 14642, 14643, 14644, 14645, 14646, 14647, 14648,
   14658, 14659, 14660, 14661, 14662, 14663, 14664, 14665, 14666, 14667,
   14668, 14669, 14670, 14671, 14672, 14673, 14674, 14675, 14676, 14677,
   14678, 14679, 14680, 14681, 14682, 14683, 14684, 14685, 14686, 14687,
   14688, 14689, 14690, 14691, 14692, 14693, 14694, 14695, 14696, 14697,
   14698, 14699, 14700, 14701, 14702, 14707, 14708, 14709, 14710, 14711,
   14712, 14713, 14714, 14715, 14716, 14717, 14718, 14719, 14720, 14721,
   14722, 14723, 14724, 14725, 14726, 14727, 14728, 14729, 14730, 14731,
   14732, 14733, 14734, 14735, 14736, 14737, 14738, 14739, 14740, 14741,
   14742, 14743, 14744, 14745, 14746, 14747, 14748, 14749, 14750, 14751,
   14752, 14753, 14754, 14755, 14756, 14757, 14758, 14759, 14760, 14761,
   14762, 14763, 14764, 14765, 14766, 14767, 14768, 14769, 14770, 14771,
   14772, 14773, 14774, 14775, 14776, 14777, 14778, 14779, 14780, 14781,
   14782, 14783, 14784, 14785, 14786, 14787, 14788, 14789, 14790, 14791,
   14792, 14793, 14794, 14795, 14796, 14797, 14798, 14799, 14800, 14801,
   14802, 14803, 14804, 14805, 14806, 14807, 14808, 14809, 14810, 14811,
   14812, 14813, 14814, 14815, 14816, 14817, 14818, 14819, 14820, 14821,
   14822, 14823, 14824, 14825, 14826, 14827, 14828, 14829, 14830, 14831,
   14832, 14833, 14834, 14835, 14836, 14837, 14838, 14839, 14840, 14841,
   14842, 14843, 14844, 14845, 14846, 14847, 14848, 14849, 14850, 14851,
   14852, 14853, 14854, 14855, 14856, 14857, 14858, 14859, 14860, 14861,
   14862, 14863, 14864, 14865, 14866, 14867, 14868, 14869, 14870, 14871,
   14872, 14873, 14874, 14875, 14876, 14877, 14878, 14879, 14880, 14881,
   14882, 14883, 14884, 14885, 14886, 14887, 14888, 14889, 14890, 14891,
   14892, 14893, 14894, 14895, 14896, 14897, 14898, 14899, 14900, 14901,
   14902, 14903, 14904, 14905, 14906, 14907, 14908, 14909, 14910, 14911,
   14912, 14913, 14914, 14915, 14916, 14917, 14918, 14919, 14920, 14921,
   14922, 14923, 14924, 14925, 14926, 14927, 14928, 14929, 14930, 14931,
   14932, 14933, 14934, 14935, 14936, 14937, 14938, 14939, 14940, 14941,
   14942, 14943, 14944, 14945, 14946, 14947, 14948, 14949, 14950, 14951,
   14952, 14953, 14954, 14955, 14956, 14957, 14958, 14959, 14960, 14961,
   14962, 14963, 14975, 14974, 14994, 14993, 15000, 14999, 15009, 15008,
   15019, 15018, 15024, 15032, 15034, 15039, 15039, 15048, 15047, 15061,
   15060, 15065, 15069, 15070, 15071, 15075, 15076, 15077, 15078, 15082,
   15083, 15084, 15085, 15090, 15116, 15115, 15215, 15226, 15239, 15255,
   15268, 15290, 15325, 15367, 15395, 15441, 15455, 15456, 15457, 15458,
   15462, 15480, 15498, 15499, 15503, 15504, 15505, 15506, 15510, 15511,
   15529, 15542, 15543, 15544, 15550, 15556, 15568, 15567, 15583, 15584,
   15588, 15589, 15593, 15606, 15607, 15608, 15613, 15618, 15617, 15637,
   15653, 15670, 15669, 15708, 15709, 15713, 15714, 15718, 15719, 15720,
   15721, 15723, 15722, 15736, 15737, 15738, 15739, 15740, 15746, 15746,
   15751, 15756, 15766, 15776, 15780, 15789, 15789, 15794, 15800, 15811,
   15822, 15830, 15832, 15836, 15843, 15850, 15852, 15856, 15857, 15862,
   15861, 15865, 15864, 15868, 15867, 15871, 15870, 15873, 15874, 15875,
   15876, 15877, 15878, 15879, 15880, 15881, 15882, 15883, 15884, 15885,
   15886, 15887, 15888, 15889, 15890, 15891, 15892, 15893, 15894, 15895,
   15896, 15897, 15898, 15902, 15903, 15907, 15908, 15912, 15922, 15932,
   15945, 15960, 15973, 15986, 15998, 16003, 16011, 16016, 16024, 16042,
   16062, 16074, 16087, 16096, 16100, 16104, 16105, 16109, 16136, 16138,
   16142, 16146, 16150, 16157, 16158, 16162, 16163, 16167, 16168, 16172,
   16173, 16179, 16185, 16191, 16201, 16200, 16210, 16211, 16216, 16217,
   16218, 16223, 16224, 16225, 16229, 16230, 16234, 16246, 16255, 16265,
   16274, 16288, 16289, 16294, 16293, 16309, 16310, 16311, 16315, 16316,
   16320, 16320, 16344, 16345, 16349, 16350, 16351, 16355, 16359, 16366,
   16369, 16367, 16383, 16390, 16411, 16428, 16430, 16434, 16435, 16439,
   16440, 16448, 16449, 16450, 16451, 16457, 16463, 16473, 16475, 16477,
   16482, 16483, 16484, 16485, 16486, 16490, 16491, 16492, 16493, 16494,
   16495, 16505, 16506, 16511, 16524, 16537, 16539, 16541, 16546, 16551,
   16553, 16555, 16561, 16562, 16564, 16570, 16569, 16587, 16588, 16592,
   16597, 16605, 16605, 16631, 16630, 16647, 16651, 16656, 16661, 16660,
   16672, 16673, 16675, 16677, 16695, 16701, 16706, 16688, 16769, 16787,
   16812, 16844, 16849, 16857, 16880, 16808, 16946, 16966, 16979, 16989,
   16945, 17010, 17014, 17018, 17022, 17026, 17030, 17037, 17044, 17051,
   17061, 17062, 17066, 17067, 17068, 17072, 17073, 17078, 17080, 17079,
   17085, 17086, 17090, 17100
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC",
  "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM",
  "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND",
  "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM",
  "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM",
  "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFAULT_AUTH_SYM",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FOLLOWING_SYM", "FORCE_SYM", "FOREIGN",
  "FOR_SYM", "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS",
  "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM",
  "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM",
  "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM",
  "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT",
  "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM",
  "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM",
  "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM", "MASTER_BIND_SYM",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NTH_VALUE_SYM", "NULL_SYM", "NULLS_SYM", "NUM", "NUMBER_SYM",
  "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM", "OLD_PASSWORD", "ON",
  "ONE_SYM", "ONLY_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION",
  "OPTIONALLY", "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER",
  "OUTFILE", "OUT_SYM", "OVER_SYM", "OWNER_SYM", "PACK_KEYS_SYM",
  "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM", "PARTIAL", "PARTITION_SYM",
  "PARTITIONS_SYM", "PARTITIONING_SYM", "PASSWORD", "PERCENTILE_CONT_SYM",
  "PERCENTILE_DISC_SYM", "PHASE_SYM", "PLUGIN_DIR_SYM", "PLUGIN_SYM",
  "PLUGINS_SYM", "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM",
  "PRECEDING_SYM", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM",
  "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM", "PROCESS",
  "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE",
  "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESPECT_SYM", "RESTORE_SYM", "RESTRICT",
  "RESUME_SYM", "RETURNED_SQLSTATE_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM", "ROLLUP_SYM",
  "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "INFINIDB_ORDERED_SYM", "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD",
  "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_CHECKSUM_SYM",
  "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIMESTAMP",
  "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB", "TINYINT",
  "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TRIGGERS_SYM",
  "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM",
  "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNBOUNDED_SYM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE",
  "WHILE_SYM", "WITHIN", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM",
  "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'",
  "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'",
  "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "create", "$@5", "$@6", "$@7",
  "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "server_def",
  "server_options_list", "server_option", "event_tail", "$@14",
  "ev_schedule_time", "$@15", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@16", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@17", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@18", "$@19", "$@20", "sp_handler_type",
  "sp_hcond_list", "sp_hcond_element", "sp_cond", "sqlstate", "opt_value",
  "sp_hcond", "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "$@21", "sp_proc_stmt", "sp_proc_stmt_if", "$@22",
  "sp_proc_stmt_statement", "$@23", "sp_proc_stmt_return", "$@24",
  "sp_proc_stmt_unlabeled", "$@25", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@26", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@27", "$@28", "$@29", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@30", "$@31", "searched_case_stmt", "$@32",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@33", "$@34", "searched_when_clause", "$@35",
  "$@36", "else_clause_opt", "sp_labeled_control", "$@37", "sp_opt_label",
  "sp_labeled_block", "$@38", "sp_unlabeled_block", "$@39",
  "sp_block_content", "$@40", "sp_unlabeled_control", "$@41", "$@42",
  "$@43", "$@44", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@45", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "$@46",
  "create3", "$@47", "$@48", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "$@49", "have_partitioning", "partition_entry", "$@50",
  "partition", "part_type_def", "$@51", "opt_linear", "opt_key_algo",
  "part_field_list", "part_field_item_list", "part_field_item",
  "part_column_list", "part_func", "sub_part_func", "opt_num_parts",
  "opt_sub_part", "$@52", "$@53", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "$@54", "part_name",
  "opt_part_values", "$@55", "$@56", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "$@57", "$@58",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@59", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@60", "$@61", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@62", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@63", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@66", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@67", "$@68", "$@69", "$@70", "$@71", "$@72",
  "$@73", "alter_user_list", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@74", "$@75", "$@76", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@77",
  "add_part_extra", "reorg_partition_rule", "$@78", "reorg_parts_rule",
  "$@79", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "$@80", "$@81", "$@82",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@83", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_connection_opts",
  "slave_user_name_opt", "slave_user_pass_opt", "slave_plugin_auth_opt",
  "slave_plugin_dir_opt", "opt_slave_thread_option_list",
  "slave_thread_option_list", "slave_thread_option", "slave_until",
  "slave_until_opts", "checksum", "$@84", "opt_checksum_type", "repair",
  "$@85", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@86", "binlog_base64_event", "check", "$@87",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@88", "opt_no_write_to_binlog", "rename", "$@89", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@90",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@91",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@92", "cache_keys_spec", "$@93",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@94",
  "select_part2", "$@95", "$@96", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_window", "opt_from", "opt_respect",
  "respect", "window_clause", "opt_window_partition_by_clause",
  "opt_window_order_by_clause", "window_order_list", "opt_nulls",
  "opt_frame", "frame", "boundary_unit", "bounding", "preceding_following",
  "function_call_generic", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@97", "variable", "$@98", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@99", "gorder_list",
  "in_sum_expr", "$@100", "cast_type", "opt_expr_list", "expr_list",
  "in_sum_expr_list", "$@101", "ident_list_arg", "ident_list", "opt_expr",
  "opt_else", "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "$@102", "$@103", "$@104", "$@105",
  "$@106", "$@107", "$@108", "normal_join", "opt_use_partition",
  "use_partition", "table_factor", "$@109", "select_derived_union",
  "$@110", "$@111", "select_init2_derived", "select_part2_derived",
  "$@112", "$@113", "select_derived", "$@114", "select_derived2", "$@115",
  "$@116", "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@117",
  "$@118", "index_hints_list", "opt_index_hints_list", "$@119",
  "opt_key_definition", "$@120", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@121", "having_clause", "$@122", "opt_escape",
  "group_clause", "$@123", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@124", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "$@125",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "$@126", "select_var_list", "select_var_ident",
  "into", "$@127", "into_destination", "$@128", "$@129", "do", "$@130",
  "drop", "$@131", "$@132", "$@133", "$@134", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "drop_ts_options_list",
  "drop_ts_options", "drop_ts_option", "insert", "$@135", "$@136",
  "replace", "$@137", "$@138", "insert_lock_option", "replace_lock_option",
  "insert2", "insert_table", "insert_field_spec", "$@139", "fields",
  "insert_values", "$@140", "$@141", "values_list", "ident_eq_list",
  "ident_eq_value", "equal", "opt_equal", "no_braces", "$@142",
  "opt_values", "values", "expr_or_default", "opt_insert_update", "$@143",
  "update", "$@144", "$@145", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@146", "single_multi", "$@147", "$@148", "$@149", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@150", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@151", "show_param",
  "$@152", "$@153", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@154", "$@155", "explanable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@156", "flush_options", "$@157", "$@158", "opt_flush_lock",
  "$@159", "flush_options_list", "flush_option", "opt_table_list", "reset",
  "$@160", "reset_options", "reset_option", "$@161", "slave_reset_options",
  "purge", "$@162", "purge_options", "purge_option", "kill", "kill_option",
  "use", "load", "$@163", "$@164", "$@165", "$@166", "data_or_xml",
  "opt_local", "load_data_lock", "opt_duplicate", "opt_field_term",
  "field_term_list", "field_term", "opt_line_term", "line_term_list",
  "line_term", "opt_xml_rows_identified_by", "opt_ignore_lines",
  "lines_or_rows", "opt_field_or_var_spec", "fields_or_vars",
  "field_or_var", "opt_load_data_set_spec", "load_data_set_list",
  "load_data_set_elem", "text_literal", "text_string", "param_marker",
  "signed_literal", "literal", "NUM_literal", "temporal_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys_nonewline", "TEXT_STRING_sys", "TEXT_STRING_literal",
  "TEXT_STRING_filesystem", "ident", "label_ident", "ident_or_text",
  "user", "keyword", "keyword_sp", "set", "$@167",
  "start_option_value_list", "$@168", "$@169", "$@170",
  "start_option_value_list_following_option_type", "$@171",
  "option_value_list_continued", "option_value_list", "$@172", "$@173",
  "option_value", "$@174", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "$@175", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@176",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@177", "handler", "$@178", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@179",
  "handler_rkey_mode", "revoke", "$@180", "revoke_command", "grant",
  "$@181", "grant_command", "opt_table", "grant_privileges",
  "opt_privileges", "object_privilege_list", "object_privilege", "$@182",
  "$@183", "$@184", "$@185", "opt_and", "require_list",
  "require_list_element", "grant_ident", "user_list", "grant_list",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@186", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@187",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@188",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@189", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@190",
  "view_list_opt", "view_list", "view_select", "$@191", "view_select_aux",
  "$@192", "create_view_select_paren", "create_view_select", "$@193",
  "view_check_option", "trigger_tail", "$@194", "$@195", "$@196",
  "udf_tail", "sf_tail", "$@197", "$@198", "$@199", "$@200", "$@201",
  "sp_tail", "$@202", "$@203", "$@204", "$@205", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@206", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    64,    46,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   651,   652,   653,   652,   652,   654,   654,   655,   655,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   657,   658,   658,   659,   660,   660,   662,   661,
     663,   663,   664,   664,   665,   667,   666,   669,   668,   670,
     670,   671,   671,   671,   671,   671,   671,   671,   671,   671,
     671,   671,   671,   671,   671,   671,   671,   671,   671,   671,
     671,   671,   672,   672,   672,   673,   674,   674,   674,   674,
     676,   675,   677,   678,   675,   679,   680,   675,   681,   682,
     675,   683,   675,   684,   675,   675,   675,   675,   675,   685,
     686,   686,   687,   687,   687,   687,   687,   687,   687,   689,
     688,   691,   690,   690,   692,   692,   692,   692,   693,   693,
     694,   694,   695,   695,   696,   696,   697,   697,   699,   698,
     700,   700,   700,   700,   700,   700,   700,   700,   700,   700,
     700,   700,   700,   701,   702,   702,   703,   703,   704,   704,
     705,   705,   705,   705,   705,   705,   705,   706,   706,   706,
     707,   707,   709,   708,   710,   710,   711,   711,   712,   712,
     713,   713,   714,   714,   715,   716,   717,   717,   718,   718,
     719,   720,   720,   720,   720,   721,   721,   722,   722,   723,
     723,   725,   724,   724,   726,   724,   727,   724,   728,   728,
     729,   729,   730,   731,   731,   732,   733,   733,   734,   734,
     734,   734,   734,   735,   736,   736,   737,   737,   738,   738,
     739,   739,   740,   740,   740,   741,   741,   741,   741,   741,
     741,   741,   741,   741,   741,   741,   741,   742,   743,   744,
     744,   745,   745,   746,   746,   747,   748,   748,   749,   749,
     750,   751,   751,   752,   753,   753,   753,   753,   753,   753,
     753,   753,   753,   753,   753,   753,   753,   754,   754,   755,
     756,   755,   757,   757,   757,   757,   757,   757,   757,   757,
     757,   757,   757,   757,   757,   759,   758,   761,   760,   763,
     762,   765,   764,   766,   767,   768,   770,   769,   771,   772,
     772,   772,   773,   773,   775,   776,   777,   774,   778,   778,
     778,   779,   779,   781,   782,   780,   784,   783,   785,   785,
     786,   786,   788,   789,   787,   791,   792,   790,   793,   793,
     795,   794,   796,   796,   798,   797,   800,   799,   802,   801,
     803,   804,   805,   803,   806,   807,   803,   808,   808,   809,
     809,   809,   810,   811,   812,   813,   813,   814,   814,   815,
     816,   817,   817,   819,   818,   820,   820,   820,   821,   821,
     821,   822,   822,   823,   823,   823,   824,   824,   824,   824,
     824,   824,   824,   824,   825,   825,   826,   826,   826,   827,
     827,   827,   827,   827,   828,   828,   829,   829,   829,   830,
     830,   830,   830,   830,   830,   830,   831,   831,   832,   832,
     832,   833,   833,   833,   834,   835,   836,   837,   838,   839,
     839,   839,   840,   841,   842,   843,   844,   845,   846,   847,
     848,   849,   849,   850,   850,   851,   851,   851,   851,   852,
     853,   852,   854,   855,   854,   856,   854,   857,   858,   858,
     860,   859,   861,   863,   862,   864,   865,   866,   865,   865,
     865,   865,   865,   867,   867,   868,   868,   869,   869,   870,
     870,   871,   872,   873,   874,   875,   875,   876,   877,   876,
     878,   876,   879,   879,   880,   881,   882,   882,   883,   883,
     884,   884,   886,   885,   887,   888,   889,   888,   890,   888,
     891,   891,   892,   892,   893,   893,   895,   896,   894,   897,
     897,   898,   898,   899,   899,   900,   900,   902,   901,   903,
     904,   904,   905,   905,   906,   906,   906,   906,   906,   906,
     906,   906,   908,   909,   907,   910,   910,   911,   911,   912,
     912,   913,   913,   914,   914,   915,   915,   916,   917,   917,
     918,   918,   919,   919,   920,   920,   920,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   922,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   923,   924,
     925,   926,   927,   927,   927,   927,   927,   927,   928,   928,
     928,   929,   929,   930,   930,   930,   930,   931,   932,   932,
     933,   933,   934,   934,   935,   935,   935,   935,   935,   935,
     936,   936,   937,   938,   938,   939,   941,   940,   942,   942,
     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,
     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,
     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,
     942,   942,   942,   943,   942,   944,   942,   942,   942,   945,
     945,   945,   945,   945,   945,   945,   945,   946,   947,   947,
     948,   948,   949,   949,   949,   949,   949,   950,   950,   950,
     950,   950,   951,   951,   951,   952,   952,   952,   953,   954,
     954,   955,   955,   955,   956,   956,   957,   957,   958,   958,
     958,   959,   959,   959,   959,   960,   960,   961,   961,   962,
     962,   963,   963,   964,   964,   964,   964,   964,   964,   964,
     964,   964,   964,   964,   964,   964,   964,   964,   964,   964,
     965,   966,   967,   967,   968,   968,   969,   969,   970,   970,
     971,   971,   972,   972,   973,   973,   974,   975,   975,   976,
     976,   977,   977,   978,   978,   978,   979,   979,   979,   980,
     980,   980,   980,   980,   980,   980,   981,   981,   983,   982,
     984,   984,   985,   986,   986,   986,   986,   987,   988,   989,
     989,   990,   991,   991,   992,   992,   993,   993,   994,   995,
     995,   996,   996,   997,   997,   997,   997,   998,   998,   998,
     998,   998,   999,   999,   999,   999,   999,  1000,  1001,  1001,
    1002,  1002,  1003,  1003,  1004,  1004,  1004,  1005,  1005,  1006,
    1007,  1008,  1009,  1009,  1010,  1010,  1011,  1011,  1012,  1012,
    1013,  1013,  1014,  1014,  1015,  1015,  1016,  1016,  1017,  1017,
    1018,  1018,  1019,  1020,  1020,  1021,  1021,  1021,  1022,  1022,
    1023,  1023,  1024,  1024,  1025,  1025,  1026,  1026,  1028,  1027,
    1029,  1027,  1027,  1030,  1027,  1031,  1027,  1032,  1027,  1033,
    1027,  1034,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1035,
    1035,  1036,  1036,  1036,  1036,  1037,  1037,  1038,  1038,  1039,
    1039,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,  1040,
    1040,  1041,  1040,  1040,  1042,  1040,  1043,  1040,  1040,  1040,
    1040,  1040,  1044,  1045,  1045,  1047,  1046,  1048,  1048,  1048,
    1050,  1049,  1051,  1052,  1051,  1053,  1053,  1054,  1055,  1055,
    1056,  1057,  1057,  1057,  1058,  1057,  1059,  1060,  1057,  1057,
    1057,  1057,  1057,  1057,  1057,  1057,  1057,  1057,  1057,  1057,
    1057,  1057,  1057,  1057,  1061,  1061,  1061,  1061,  1061,  1062,
    1062,  1063,  1063,  1064,  1064,  1065,  1065,  1066,  1066,  1066,
    1067,  1067,  1067,  1068,  1068,  1068,  1068,  1070,  1069,  1069,
    1071,  1072,  1072,  1073,  1073,  1074,  1074,  1074,  1075,  1076,
    1076,  1077,  1077,  1078,  1078,  1079,  1079,  1080,  1080,  1081,
    1081,  1082,  1082,  1083,  1083,  1084,  1084,  1084,  1084,  1084,
    1086,  1085,  1087,  1087,  1087,  1089,  1088,  1090,  1090,  1091,
    1091,  1092,  1092,  1092,  1094,  1093,  1095,  1097,  1096,  1098,
    1098,  1099,  1099,  1100,  1100,  1100,  1100,  1100,  1100,  1102,
    1101,  1103,  1103,  1103,  1105,  1104,  1104,  1106,  1106,  1107,
    1107,  1108,  1110,  1109,  1111,  1111,  1112,  1112,  1113,  1114,
    1115,  1115,  1117,  1116,  1118,  1118,  1119,  1119,  1120,  1121,
    1123,  1122,  1125,  1124,  1126,  1126,  1127,  1127,  1128,  1129,
    1129,  1130,  1130,  1131,  1131,  1133,  1132,  1135,  1136,  1134,
    1137,  1137,  1137,  1137,  1137,  1138,  1138,  1139,  1139,  1140,
    1140,  1141,  1141,  1141,  1141,  1142,  1142,  1142,  1143,  1143,
    1143,  1144,  1144,  1145,  1146,  1147,  1147,  1147,  1147,  1147,
    1148,  1148,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
    1149,  1149,  1149,  1150,  1150,  1150,  1150,  1150,  1150,  1151,
    1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,
    1151,  1151,  1151,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1153,  1153,
    1154,  1154,  1155,  1155,  1156,  1156,  1157,  1157,  1157,  1157,
    1157,  1157,  1158,  1158,  1159,  1159,  1159,  1159,  1159,  1159,
    1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,
    1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,
    1159,  1159,  1159,  1159,  1159,  1160,  1160,  1160,  1160,  1160,
    1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,
    1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,
    1160,  1160,  1161,  1161,  1161,  1161,  1161,  1161,  1161,  1161,
    1161,  1161,  1161,  1161,  1161,  1161,  1161,  1161,  1161,  1161,
    1161,  1161,  1161,  1161,  1162,  1162,  1162,  1162,  1162,  1162,
    1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,
    1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1163,
    1163,  1163,  1163,  1163,  1163,  1163,  1163,  1164,  1164,  1164,
    1164,  1164,  1164,  1164,  1164,  1164,  1164,  1164,  1164,  1164,
    1164,  1164,  1164,  1164,  1164,  1164,  1164,  1165,  1165,  1165,
    1166,  1166,  1167,  1167,  1168,  1169,  1169,  1170,  1170,  1170,
    1171,  1171,  1172,  1172,  1172,  1173,  1173,  1174,  1174,  1175,
    1175,  1176,  1176,  1176,  1176,  1177,  1177,  1178,  1178,  1179,
    1179,  1180,  1180,  1181,  1181,  1182,  1182,  1183,  1183,  1184,
    1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,
    1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,  1186,  1185,
    1188,  1187,  1189,  1189,  1189,  1190,  1190,  1191,  1191,  1192,
    1193,  1192,  1194,  1194,  1196,  1195,  1197,  1197,  1197,  1197,
    1197,  1197,  1197,  1197,  1197,  1197,  1197,  1198,  1198,  1199,
    1199,  1201,  1200,  1202,  1202,  1203,  1203,  1204,  1204,  1205,
    1205,  1206,  1206,  1207,  1207,  1208,  1209,  1209,  1210,  1210,
    1211,  1211,  1212,  1211,  1213,  1211,  1214,  1211,  1211,  1215,
    1211,  1216,  1211,  1211,  1217,  1211,  1218,  1211,  1211,  1219,
    1219,  1219,  1220,  1220,  1221,  1223,  1222,  1222,  1222,  1224,
    1225,  1226,  1224,  1227,  1229,  1230,  1228,  1232,  1231,  1234,
    1235,  1233,  1236,  1237,  1238,  1238,  1239,  1239,  1239,  1239,
    1240,  1240,  1242,  1241,  1243,  1241,  1244,  1244,  1245,  1246,
    1245,  1248,  1247,  1249,  1249,  1250,  1250,  1251,  1251,  1252,
    1252,  1253,  1253,  1253,  1253,  1253,  1253,  1253,  1253,  1253,
    1253,  1253,  1253,  1254,  1254,  1254,  1254,  1254,  1254,  1254,
    1254,  1254,  1255,  1255,  1255,  1255,  1256,  1256,  1256,  1257,
    1257,  1258,  1258,  1259,  1260,  1259,  1261,  1262,  1261,  1263,
    1263,  1264,  1265,  1264,  1266,  1266,  1267,  1267,  1267,  1268,
    1269,  1269,  1270,  1271,  1271,  1273,  1272,  1274,  1274,  1275,
    1275,  1275,  1276,  1276,  1277,  1277,  1278,  1279,  1279,  1279,
    1280,  1280,  1280,  1280,  1280,  1281,  1281,  1282,  1282,  1282,
    1282,  1282,  1282,  1283,  1283,  1283,  1283,  1283,  1284,  1284,
    1284,  1284,  1284,  1285,  1285,  1285,  1285,  1286,  1287,  1287,
    1288,  1289,  1288,  1290,  1290,  1290,  1291,  1293,  1292,  1294,
    1294,  1295,  1295,  1297,  1296,  1299,  1300,  1298,  1298,  1298,
    1302,  1301,  1304,  1303,  1305,  1306,  1303,  1303,  1303,  1303,
    1303,  1303,  1307,  1303,  1303,  1303,  1303,  1303,  1303,  1308,
    1308,  1309,  1310,  1311,  1311,  1312,  1313,  1313,  1314,  1314,
    1315,  1315,  1316,  1316,  1316,  1317,  1317,  1319,  1320,  1318,
    1322,  1323,  1321,  1324,  1324,  1324,  1324,  1325,  1325,  1326,
    1326,  1327,  1328,  1328,  1328,  1329,  1328,  1330,  1330,  1331,
    1331,  1332,  1331,  1333,  1331,  1334,  1334,  1335,  1335,  1336,
    1337,  1337,  1338,  1338,  1340,  1339,  1341,  1341,  1342,  1342,
    1343,  1343,  1344,  1345,  1344,  1347,  1348,  1346,  1349,  1349,
    1350,  1351,  1351,  1352,  1353,  1353,  1355,  1354,  1357,  1356,
    1358,  1356,  1359,  1356,  1360,  1360,  1361,  1361,  1362,  1362,
    1363,  1363,  1364,  1364,  1364,  1366,  1365,  1367,  1367,  1368,
    1368,  1369,  1369,  1370,  1370,  1370,  1370,  1370,  1370,  1370,
    1370,  1370,  1371,  1371,  1373,  1372,  1374,  1374,  1374,  1374,
    1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1375,  1374,
    1376,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
    1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
    1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
    1374,  1377,  1377,  1377,  1378,  1378,  1379,  1379,  1380,  1380,
    1381,  1381,  1382,  1382,  1383,  1383,  1384,  1384,  1385,  1385,
    1385,  1387,  1386,  1388,  1386,  1389,  1389,  1389,  1389,  1389,
    1390,  1390,  1391,  1391,  1391,  1391,  1392,  1392,  1392,  1394,
    1393,  1396,  1397,  1395,  1395,  1398,  1398,  1399,  1398,  1400,
    1400,  1401,  1401,  1401,  1401,  1401,  1401,  1401,  1401,  1401,
    1401,  1401,  1401,  1401,  1402,  1402,  1404,  1403,  1405,  1405,
    1407,  1406,  1406,  1406,  1408,  1408,  1410,  1409,  1411,  1412,
    1412,  1413,  1414,  1414,  1414,  1415,  1417,  1418,  1419,  1420,
    1416,  1421,  1421,  1422,  1422,  1423,  1423,  1423,  1424,  1424,
    1424,  1425,  1425,  1426,  1426,  1427,  1427,  1427,  1427,  1428,
    1428,  1429,  1429,  1430,  1430,  1431,  1431,  1432,  1432,  1433,
    1433,  1434,  1434,  1434,  1435,  1435,  1436,  1436,  1437,  1437,
    1438,  1438,  1439,  1440,  1440,  1440,  1440,  1441,  1441,  1441,
    1442,  1443,  1443,  1443,  1444,  1444,  1444,  1444,  1444,  1444,
    1444,  1444,  1444,  1444,  1445,  1445,  1445,  1445,  1445,  1446,
    1446,  1446,  1447,  1447,  1448,  1448,  1449,  1450,  1450,  1451,
    1451,  1452,  1452,  1452,  1453,  1453,  1453,  1453,  1454,  1454,
    1454,  1455,  1455,  1456,  1457,  1457,  1458,  1459,  1460,  1461,
    1462,  1462,  1463,  1463,  1464,  1464,  1464,  1465,  1465,  1465,
    1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,
    1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,
    1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,
    1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,
    1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1469,  1468,  1471,  1470,  1472,  1470,  1473,  1470,
    1475,  1474,  1474,  1476,  1476,  1478,  1477,  1479,  1477,  1481,
    1480,  1480,  1482,  1482,  1482,  1483,  1483,  1483,  1483,  1484,
    1484,  1484,  1484,  1485,  1487,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1488,  1488,  1488,  1489,  1489,  1489,  1489,
    1490,  1491,  1492,  1492,  1493,  1493,  1493,  1493,  1494,  1494,
    1494,  1495,  1495,  1495,  1495,  1495,  1497,  1496,  1498,  1498,
    1499,  1499,  1500,  1501,  1501,  1501,  1501,  1503,  1502,  1504,
    1504,  1505,  1504,  1506,  1506,  1507,  1507,  1508,  1508,  1508,
    1508,  1509,  1508,  1510,  1510,  1510,  1510,  1510,  1512,  1511,
    1513,  1513,  1513,  1513,  1513,  1515,  1514,  1516,  1516,  1516,
    1516,  1517,  1517,  1518,  1518,  1519,  1519,  1520,  1520,  1522,
    1521,  1523,  1521,  1524,  1521,  1525,  1521,  1521,  1521,  1521,
    1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,
    1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,
    1521,  1521,  1521,  1526,  1526,  1527,  1527,  1528,  1528,  1528,
    1529,  1529,  1529,  1529,  1530,  1530,  1531,  1531,  1532,  1532,
    1532,  1532,  1532,  1533,  1533,  1534,  1534,  1535,  1536,  1536,
    1536,  1536,  1536,  1537,  1537,  1538,  1538,  1539,  1539,  1540,
    1540,  1540,  1540,  1540,  1542,  1541,  1543,  1543,  1544,  1544,
    1544,  1545,  1545,  1545,  1546,  1546,  1547,  1548,  1548,  1549,
    1550,  1551,  1551,  1553,  1552,  1554,  1554,  1554,  1555,  1555,
    1557,  1556,  1558,  1558,  1559,  1559,  1559,  1560,  1560,  1561,
    1562,  1561,  1563,  1564,  1565,  1566,  1566,  1567,  1567,  1568,
    1568,  1568,  1568,  1568,  1568,  1568,  1568,  1569,  1569,  1569,
    1570,  1570,  1570,  1570,  1570,  1571,  1571,  1571,  1571,  1571,
    1571,  1572,  1572,  1573,  1574,  1575,  1575,  1575,  1576,  1577,
    1577,  1577,  1578,  1578,  1578,  1580,  1579,  1581,  1581,  1582,
    1582,  1584,  1583,  1586,  1585,  1585,  1587,  1587,  1589,  1588,
    1590,  1590,  1590,  1590,  1592,  1593,  1594,  1591,  1595,  1595,
    1597,  1598,  1599,  1600,  1601,  1596,  1603,  1604,  1605,  1606,
    1602,  1607,  1607,  1607,  1607,  1607,  1607,  1608,  1608,  1608,
    1609,  1609,  1610,  1610,  1610,  1611,  1611,  1612,  1613,  1612,
    1614,  1614,  1615,  1616
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     4,     1,     2,     0,     4,
       0,     2,     3,     1,     2,     0,     3,     0,     5,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       3,     1,     0,     1,     3,     1,     3,     3,     3,     3,
       0,     7,     0,     0,    14,     0,     0,    14,     0,     0,
      14,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     0,     6,     1,     1,
       1,     3,     1,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     3,     1,     1,     0,     1,     0,     2,
       3,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     4,     0,
       1,     1,     3,     1,     3,     3,     1,     2,     1,     1,
       1,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     0,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     5,     0,     2,     0,
       3,     0,     2,     2,     2,     2,     0,     6,     2,     0,
       2,     1,     1,     3,     0,     0,     0,     7,     0,     2,
       2,     1,     1,     0,     0,     8,     0,     6,     1,     2,
       1,     2,     0,     0,     6,     0,     0,     6,     0,     2,
       0,     5,     0,     1,     0,     5,     0,     2,     0,     5,
       4,     0,     0,     8,     0,     0,     8,     1,     1,     1,
       1,     1,     2,     4,     5,     0,     4,     4,     4,     3,
       3,     2,     2,     0,     2,     1,     2,     3,     1,     1,
       1,     0,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     2,
       3,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     1,     1,     1,     1,     2,     3,     2,     4,     5,
       0,     5,     0,     0,     5,     0,     7,     1,     0,     1,
       0,     4,     0,     0,     3,     5,     6,     0,     4,     2,
       2,     2,     2,     0,     1,     0,     3,     0,     1,     1,
       3,     1,     4,     5,     5,     0,     2,     0,     0,     7,
       0,    10,     1,     3,     1,     1,     0,     2,     0,     3,
       1,     3,     0,     6,     1,     0,     0,     5,     0,     4,
       1,     1,     1,     3,     1,     3,     0,     0,     5,     1,
       3,     1,     1,     0,     3,     1,     3,     0,     4,     1,
       0,     1,     2,     1,     3,     4,     3,     3,     3,     4,
       4,     3,     0,     0,     6,     0,     1,     0,     1,     1,
       2,     1,     1,     0,     1,     1,     2,     1,     0,     3,
       0,     1,     1,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     0,     6,     1,     1,
       3,     4,     4,     2,     2,     2,     3,     3,     4,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     2,     2,     7,     8,     8,     8,     8,     2,
       0,     1,     4,     0,     1,     2,     0,     4,     3,     3,
       3,     1,     2,     1,     1,     3,     2,     3,     2,     2,
       1,     3,     3,     2,     3,     1,     2,     2,     2,     1,
       2,     1,     1,     1,     2,     3,     2,     3,     2,     2,
       3,     3,     3,     0,     6,     0,     6,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     1,     2,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     0,     1,     1,     5,     0,
       3,     0,     2,     3,     0,     1,     2,     1,     1,     1,
       1,     3,     3,     3,     3,     0,     1,     0,     1,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     3,     2,
       1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     0,     1,     1,     2,     2,     1,     2,     2,     0,
       1,     1,     1,     3,     1,     3,     0,     1,     0,     4,
       1,     1,     1,     0,     1,     2,     1,     1,     2,     1,
       3,     3,     1,     1,     0,     2,     0,     1,     5,     0,
       3,     3,     1,     0,     2,     2,     2,     0,     3,     3,
       6,     6,     1,     1,     2,     2,     2,     1,     2,     2,
       1,     1,     0,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     1,     2,     0,     1,     0,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     3,     2,
       1,     1,     1,     1,     3,     1,     1,     1,     4,     2,
       1,     4,     0,     1,     0,     2,     1,     3,     0,     6,
       0,     5,     7,     0,     5,     0,     5,     0,     5,     0,
       4,     0,    10,     3,     4,     3,     3,     7,     4,     3,
       5,     0,     3,     1,     4,     0,     3,     0,     2,     0,
       1,     0,     2,     2,     2,     2,     1,     1,     1,     3,
       4,     0,     6,     4,     0,     5,     0,     6,     4,     3,
       1,     7,     3,     1,     1,     0,     5,     0,     3,     2,
       0,     5,     0,     0,     6,     1,     3,     1,     1,     3,
       2,     3,     2,     4,     0,     6,     0,     0,     8,     4,
       4,     3,     3,     2,     2,     6,     5,     3,     5,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     2,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     1,
       0,     2,     1,     0,     1,     1,     1,     0,     6,     3,
       3,     0,     1,     1,     3,     3,     2,     2,     4,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     1,     1,
       3,     1,     1,     0,     2,     1,     3,     3,     3,     1,
       0,     5,     0,     1,     1,     0,     6,     0,     1,     1,
       2,     1,     1,     1,     0,     5,     2,     0,     5,     0,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     0,
       5,     0,     1,     1,     0,     4,     4,     3,     5,     1,
       3,     3,     0,     6,     1,     1,     1,     3,     2,     3,
       1,     1,     0,     6,     1,     1,     1,     3,     3,     4,
       0,     6,     0,     2,     0,     4,     0,     2,     1,     2,
       4,     2,     3,     2,     3,     0,     3,     0,     0,     6,
       2,     1,     1,     2,     2,     8,     4,     0,     1,     2,
       1,     1,     1,     1,     1,     0,     2,     4,     3,     1,
       1,     3,     4,     0,     0,     0,     2,     2,     1,     1,
       0,     2,     3,     3,     3,     2,     3,     4,     3,     4,
       3,     4,     1,     3,     4,     3,     3,     6,     1,     5,
       6,     5,     7,     6,     8,     5,     6,     4,     4,     5,
       3,     4,     1,     3,     3,     3,     3,     3,     3,     5,
       5,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     3,     2,     2,     2,     2,
       3,     3,     5,     6,     4,     4,     7,     2,     6,     5,
       6,     6,     4,     4,     5,     4,     6,     2,     4,     4,
       4,    10,     6,     8,     6,     4,     4,     6,     4,     4,
       4,     6,     4,     7,     7,     7,     6,     6,     6,     6,
       3,     4,     6,     8,     2,     2,     8,     8,     6,     6,
       1,     6,     6,     8,     8,     6,     8,     6,     2,     8,
       8,     2,     2,     2,     4,     4,     4,     4,     3,     8,
       6,     8,     4,     6,     4,     4,     4,     6,     8,     4,
       3,     6,     4,     6,     5,     8,     7,    10,     1,     6,
       4,     4,     4,     4,     4,     6,     4,     5,     6,     5,
       6,     5,     6,     6,     5,     6,     5,     6,     5,     6,
       5,     5,     5,     5,     7,    12,    12,     0,     2,     2,
       0,     1,     2,     2,     5,     0,     3,     0,     1,     4,
       5,     3,     0,     2,     2,     0,     1,     5,     2,     1,
       1,     2,     2,     2,     4,     1,     1,     4,     6,     2,
       3,     0,     4,     0,     3,     0,     1,     1,     3,     4,
       4,     5,     4,     4,     4,     5,     4,     5,     4,     5,
       4,     5,     4,     4,     4,     4,     4,     5,     0,     8,
       0,     3,     3,     1,     4,     0,     1,     0,     2,     0,
       0,     4,     4,     2,     0,     3,     2,     3,     2,     1,
       2,     1,     2,     1,     2,     2,     2,     0,     1,     1,
       3,     0,     3,     1,     3,     1,     3,     0,     1,     0,
       2,     4,     5,     1,     1,     1,     1,     4,     1,     3,
       3,     3,     0,     6,     0,     6,     0,     8,     4,     0,
       8,     0,    10,     6,     0,     8,     0,    10,     6,     1,
       2,     2,     0,     1,     5,     0,     5,     3,     5,     2,
       0,     0,     7,     1,     0,     0,     6,     0,     3,     0,
       0,     5,     0,     1,     0,     1,     0,     2,     3,     3,
       1,     1,     0,     7,     0,     7,     1,     2,     0,     0,
       2,     0,     2,     0,     1,     1,     1,     1,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     0,
       2,     0,     1,     0,     0,     3,     0,     0,     3,     2,
       0,     0,     0,     5,     4,     2,     0,     1,     1,     3,
       3,     1,     2,     0,     1,     0,     4,     4,     2,     0,
       1,     1,     0,     1,     0,     1,     2,     1,     3,     3,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     0,     6,     0,     1,     3,     1,     0,     2,     3,
       1,     2,     1,     0,     3,     0,     0,     7,     2,     1,
       0,     3,     0,     7,     0,     0,     8,     4,     6,     4,
       4,     4,     0,     6,     4,     4,     4,     5,     4,     1,
       3,     1,     2,     1,     3,     1,     0,     2,     0,     1,
       0,     1,     1,     2,     3,     1,     1,     0,     0,     8,
       0,     0,     6,     0,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     3,     4,     0,     3,     3,     1,     2,
       2,     0,     3,     0,     5,     3,     1,     3,     1,     3,
       1,     1,     0,     1,     0,     4,     0,     1,     3,     1,
       1,     1,     0,     0,     6,     0,     0,    11,     3,     1,
       3,     3,     1,     3,     0,     1,     0,     4,     0,     7,
       0,     5,     0,     6,     1,     3,     2,     4,     0,     2,
       0,     2,     1,     1,     1,     0,     4,     0,     1,     0,
       1,     1,     3,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     0,     3,     0,     3,     2,     4,     4,     3,
       4,     4,     1,     3,     3,     6,     2,     2,     0,     6,
       0,     6,     5,     2,     1,     5,     5,     2,     2,     1,
       4,     3,     2,     3,     2,     2,     1,     3,     4,     3,
       3,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     0,     1,     0,     2,
       0,     1,     1,     1,     0,     2,     0,     2,     0,     2,
       2,     0,     4,     0,     4,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     1,     3,     0,     1,     1,     0,
       4,     0,     0,     5,     1,     0,     3,     0,     3,     3,
       1,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       1,     1,     1,     1,     0,     1,     0,     3,     3,     1,
       0,     3,     1,     2,     0,     1,     0,     3,     3,     2,
       2,     3,     0,     1,     1,     2,     0,     0,     0,     0,
      22,     1,     1,     0,     1,     0,     1,     1,     0,     1,
       1,     0,     2,     2,     1,     3,     4,     3,     3,     0,
       2,     2,     1,     3,     3,     0,     4,     0,     3,     1,
       1,     0,     3,     2,     3,     1,     1,     2,     0,     2,
       3,     1,     5,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       2,     2,     1,     1,     3,     5,     1,     1,     1,     1,
       1,     3,     4,     5,     1,     5,     3,     2,     1,     3,
       2,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     3,     0,     3,     0,     3,     0,     3,
       0,     3,     2,     0,     2,     0,     2,     0,     4,     0,
       3,     1,     1,     1,     1,     0,     1,     1,     1,     0,
       2,     2,     2,     3,     0,     4,     4,     6,     2,     3,
       3,     3,     5,     1,     3,     3,     1,     1,     3,     3,
       1,     3,     2,     2,     2,     2,     2,     1,     1,     4,
       4,     1,     1,     1,     1,     1,     0,     4,     1,     1,
       1,     3,     3,     1,     1,     2,     2,     0,     3,     4,
       3,     0,     7,     1,     2,     1,     1,     1,     1,     1,
       1,     0,     5,     1,     1,     1,     1,     1,     0,     4,
       6,     6,     6,     7,     5,     0,     4,     8,     8,     8,
       6,     0,     1,     1,     2,     0,     1,     1,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     2,
       1,     1,     2,     0,     1,     3,     1,     2,     2,     2,
       1,     3,     3,     1,     1,     3,     1,     3,     4,     5,
       4,     6,     1,     0,     3,     3,     1,     1,     0,     2,
       2,     2,     2,     0,     2,     0,     3,     2,     1,     2,
       2,     2,     2,     2,     0,     3,     0,     1,     0,     3,
       2,     0,     1,     2,     0,     1,     4,     4,     5,     2,
       3,     0,     1,     0,     4,     0,     1,     1,     0,     1,
       0,     2,     2,     1,     0,     1,     1,     2,     3,     2,
       0,     6,     3,     0,     0,     0,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     2,     1,     2,     3,
       3,     3,     0,     3,     3,     0,     7,     0,     3,     1,
       3,     0,     3,     0,     3,     4,     1,     3,     0,     3,
       0,     3,     4,     4,     0,     0,     0,    16,     8,     7,
       0,     0,     0,     0,     0,    15,     0,     0,     0,     0,
      12,     4,     4,     3,     4,     3,     2,     1,     3,     5,
       1,     1,     0,     1,     1,     0,     2,     0,     0,     3,
       0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2653,  1081,  2584,     0,     0,     0,     0,     0,     0,
    2586,   123,    63,  1756,  1870,  1871,  1660,  1688,     2,     0,
    1081,   269,   173,     0,    75,  1697,     0,  1922,     0,     0,
    1081,   483,     0,  1916,     0,     0,  1081,  1700,  1906,   246,
     173,  2586,     0,  1127,  2392,  1794,     0,     0,     0,  1777,
       0,  2467,  1745,     0,     0,     0,     0,     3,     8,    19,
       0,    39,    24,    29,    14,    18,    13,    52,    46,    26,
      37,    10,    54,    55,    16,    43,    11,    12,    15,    35,
      42,    36,    38,    50,  1118,    22,    23,    30,    44,    59,
      20,    56,    53,    21,  1872,    25,    45,    40,    32,    60,
      33,    51,    34,    58,    28,    47,    27,     9,    17,    48,
      49,    41,    61,    31,    57,     0,   929,     0,     0,  1006,
       0,     0,     0,     0,   173,     0,   909,  2651,  2652,  2653,
    1083,  1082,     0,  2586,  2027,  1066,  1092,  2090,  2091,  2092,
    2093,  2094,  2095,  2096,  2097,  2041,  2098,  2100,  2099,  2101,
    2102,  2042,  2043,  2103,  2104,  2105,  2107,  2106,  2108,  2044,
    2045,  2109,  2110,  2111,  2112,  2046,  2047,  2113,  2115,  2114,
    2048,  2116,  2117,  2118,  2121,  2120,  2119,  2049,  2122,  2050,
    2123,  2124,  2125,  2126,  2127,  2128,  2129,  2131,  2130,  2051,
    2132,  2133,  2134,  2135,  2136,  2138,  2137,  2139,  2140,  2141,
    2052,  2142,  2143,  2144,  2145,  2146,  2147,  2148,  2149,  2150,
    2053,  2151,  2152,  2153,  2173,  2054,  2154,  2157,  2156,  2155,
    2158,  2159,  2160,  2162,  2161,  2163,  2164,  2055,  2165,  2166,
    2167,  2168,  2169,  2171,  2170,  2175,  2176,  2177,  2056,  2057,
    2172,  2174,  2372,  2178,  2180,  2179,  2181,  2183,  2182,  2058,
    2184,  2059,  2060,  2185,  2186,  2024,  2187,  2025,  2188,  2190,
    2191,  2192,  2197,  2061,  2189,  2193,  2194,  2195,  2196,  2198,
    2062,  2199,  2200,  2201,  2202,  2203,  2204,  2205,  2206,  2207,
    2208,  2230,  2219,  2221,  2212,  2214,  2215,  2217,  2213,  2220,
    2218,  2224,  2223,  2225,  2226,  2227,  2228,  2229,  2222,  2210,
    2216,  2211,  2231,  2232,  2209,  2233,  2234,  2235,  2236,  2237,
    2238,  2239,  2240,  2241,  2242,  2243,  2245,  2244,  2246,  2247,
    2248,  2249,  2250,  2251,  2253,  2252,  2254,  2255,  2256,  2258,
    2257,  2260,  2261,  2063,  2259,  2262,  2263,  2264,  2265,  2266,
    2267,  2064,  2065,  2066,  2268,  2269,  2067,  2270,  2272,  2271,
    2273,  2274,  2275,  2276,  2277,  2278,  2279,  2068,  2069,  2280,
    2281,  2282,  2283,  2284,  2285,  2286,  2287,  2288,  2289,  2290,
    2291,  2292,  2293,  2295,  2294,  2296,  2297,  2298,  2299,  2300,
    2301,  2302,  2070,  2303,  2071,  2304,  2305,  2072,  2306,  2073,
    2307,  2308,  2309,  2310,  2074,  2311,  2312,  2313,  2315,  2316,
    2314,  2317,  2075,  2318,  2319,  2320,  2076,  2322,  2321,  2323,
    2077,  2325,  2326,  2078,  2324,  2080,  2327,  2328,  2079,  2081,
    2329,  2330,  2331,  2332,  2333,  2335,  2334,  2336,  2337,  2338,
    2339,  2082,  2340,  2341,  2342,  2343,  2083,  2344,  2345,  2346,
    2347,  2348,  2350,  2349,  2351,  2352,  2353,  2354,  2356,  2358,
    2357,  2355,  2359,  2360,  2361,  2362,  2365,  2366,  2367,  2368,
    2363,  2364,  2084,  2369,  2370,  2371,  2373,  2374,  2376,  2375,
    2085,  2086,  2377,  2378,  2089,  2379,  2380,  2383,  2381,  2382,
    2385,  2384,  2386,  2388,  2387,  2087,  2389,  2088,  2390,  2391,
     192,  2030,   175,  2031,  2040,     0,  2459,  2458,  1050,  1067,
    2587,  2588,   578,   859,     0,     0,   860,     0,   577,   858,
     173,  2653,   128,     0,   574,   575,     0,     0,     0,  1770,
       0,  1686,  1686,  1686,     0,     0,  1686,  1686,     0,  1689,
    1686,   173,  1686,     0,    68,  1879,   270,     0,  2495,     0,
       0,     0,  2023,     0,  1703,     0,  1923,  1924,     0,  1931,
       0,  1932,  1926,  2456,     0,     0,     0,     0,     0,   173,
    1084,     0,  1754,     0,   236,   245,   247,   248,   244,  2488,
    2588,  2599,  1119,  1125,  1137,     0,  1850,   248,  1037,  1021,
    1037,  1778,  1775,     0,     0,  1754,  1925,  2710,     0,     0,
       0,  2706,     0,  2711,     0,  1127,     0,     0,     1,     5,
       0,     0,  2168,  2057,  2272,  1863,  1861,  2018,     0,   900,
     930,     0,   905,     0,   903,  2036,  2035,  2034,     0,   916,
     915,   913,     0,   447,     0,     0,     0,  2662,   907,  1064,
    2585,     0,   194,     0,    77,     0,     0,     0,  2591,     0,
       0,     0,     0,   127,     0,     0,     0,   124,  1153,  1153,
    2653,  2655,  2657,   578,   576,     0,     0,     0,  1774,  1773,
    1772,     0,  1770,  2091,  2041,  2102,     0,  1991,     0,     0,
       0,  1457,     0,  2046,     0,  2116,  2118,  2051,     0,     0,
    1160,  1160,   731,     0,     0,     0,  2140,  2141,  1997,     0,
       0,     0,  1988,  1998,  2057,  2180,  2181,     0,  1990,  2186,
       0,     0,     0,     0,  2203,  1995,     0,     0,  2240,  2242,
       0,     0,  2246,  2247,  2248,  2249,  1974,  1215,     0,   731,
       0,  1987,  1994,  2265,  1980,  2273,     0,     0,  2278,  2279,
       0,  2288,     0,     0,  2310,     0,  2316,  2314,  2320,     0,
       0,  2347,     0,     0,   731,  1973,  2365,  2366,  2367,  2368,
       0,  1989,  2084,  1996,     0,  2379,  1160,   731,   731,     0,
       0,     0,  2386,  2388,  2391,     0,     0,     0,  2623,  1214,
       0,  1420,     0,  1290,  1449,  1172,  1178,  1192,     0,  1207,
    1225,  1226,  1229,  1328,  1227,  1228,  1234,  1233,  1661,  1984,
    1232,  1231,  1985,  1986,  1224,  2008,  2030,  2007,     0,     0,
       0,     0,     0,     0,     0,     0,  1690,     0,     0,  1672,
    1686,    70,     0,     0,     0,  2020,  1566,  2470,  2471,     0,
      76,  1705,  1706,  1704,  1005,     0,  1921,     0,  1935,     0,
    1079,   493,   484,     0,  1845,  1844,     0,  1917,  2600,     0,
       0,  1055,  1708,  1755,     0,  1707,  1912,     0,  1910,  1907,
    1909,   237,     0,     0,   267,     0,  2594,  2591,  2601,  2636,
    2631,  2630,  2633,  2634,  1144,  2635,  1142,  1143,  2632,  2629,
    1153,  1138,  1140,  1141,   775,     0,     0,  2412,  2413,  2253,
    2273,  2414,  2363,     0,     0,  2433,  2393,  2398,  2394,     0,
       0,   775,  1858,     0,     0,  1858,     0,  1602,  1848,  1851,
       0,  2416,  1826,   856,   855,   854,  2417,  1844,     0,  1802,
    1814,     0,  1779,  1819,     0,  2418,     0,  1847,     0,  1602,
    1858,     0,  1795,     0,     0,     0,     0,   243,  1042,  1041,
    1017,  1038,  1039,     0,     0,  1020,  1022,  1023,  1019,     0,
    2723,  2468,  1005,  1979,  1978,  2028,  2707,  1977,  2715,  2717,
    2703,  2705,  2712,  1121,     0,  2605,     6,    62,     0,     0,
    1876,  2660,  2661,  2659,   791,     0,  1160,  2037,  2654,   176,
     914,     0,   448,   176,     0,     0,     0,     0,     0,   449,
     450,   382,   918,     0,   898,   911,     0,     0,   910,  2662,
       0,     0,  1094,  1096,  1095,  1112,   196,   193,   174,     0,
    1052,  1679,  1681,  1069,  2590,     0,     0,  2592,  2596,  1213,
    1212,     0,   121,   126,     0,     0,     0,  2562,   125,  2556,
    2658,  1153,  1153,  1153,  2650,     0,  2638,  2645,  2646,  2649,
    2648,  2647,  2644,     0,  2637,  2640,  2641,  2643,  2642,  2662,
    2656,     0,   861,   861,   861,     0,  1757,  1760,  1764,  1768,
    1771,     0,     0,  1571,  1247,  1571,  1571,  1571,  1458,     0,
       0,     0,     0,     0,     0,     0,     0,  1571,     0,  1284,
    1257,     0,  1285,     0,     0,     0,  1999,     0,     0,     0,
    2623,     0,     0,     0,     0,  1425,     0,     0,     0,  2623,
       0,     0,     0,     0,     0,  1453,  1455,  2007,  1571,     0,
       0,  1571,     0,     0,     0,     0,     0,  1165,   771,  1153,
       0,     0,  1153,  1153,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1571,  1571,     0,     0,  1571,
    1298,  2001,     0,     0,     0,  2000,     0,     0,     0,  1993,
    1992,  1975,     0,  1301,  1303,  1302,     0,  1571,  1571,     0,
       0,     0,  1237,  1236,  1238,     0,     0,     0,     0,     0,
       0,  1211,  1210,  1209,  1208,     0,     0,     0,  1216,     0,
    1217,  1218,     0,  1219,  1220,  1221,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1239,     0,     0,     0,  1976,
    1153,     0,  1687,  1667,  1674,  1669,     0,  1690,  1670,  1678,
     462,   461,  1695,  1696,  1676,  1691,  1692,     0,  1675,  2554,
    1671,     0,  1662,     0,    69,     0,  1902,     0,     0,     0,
    1898,  1900,  1899,     0,     0,  1903,     0,  1901,  1880,  1884,
    1890,  1881,     0,     0,   268,   271,   273,     0,   276,  2505,
    2520,  2521,  2517,  2522,  2540,  2523,  2527,     0,  2519,  2511,
       0,  2526,     0,  2515,  2524,     0,  2509,     0,  2525,  2530,
    2541,  2513,  2518,  2496,     0,  2503,  2507,  1567,  1568,     0,
    2469,     0,  2019,     0,     0,  1102,  1936,  1937,  1933,  1566,
    2457,  2460,     0,   494,     0,     0,   505,     0,     0,    65,
      66,     0,  1086,     0,  1085,  1089,     0,     0,     0,  1711,
    1701,  1710,  1492,  1913,  1914,     0,   235,   260,   255,   263,
     257,   259,   258,   264,   265,   266,   261,   256,   262,   249,
       0,  2505,     0,  2489,     0,  2595,     0,  2597,  2614,  1126,
    2602,  1150,  1128,  1149,     0,  1139,   774,     0,   777,   779,
    1730,  1731,   778,   787,     0,   776,     0,     0,     0,  2419,
       0,   783,   785,   784,  2428,   782,     0,     0,  2403,  2424,
    1854,     0,     0,  1825,     0,   578,     0,     0,     0,     0,
       0,     0,  1796,     0,     0,   621,     0,  1818,  1603,  1852,
    1853,  1858,     0,     0,  1858,     0,  1831,  1848,     0,  1858,
    1791,     0,     0,  1783,  1788,  1784,     0,  1790,  1789,  1792,
    1780,  1781,  1854,  1807,  1832,  1848,  1817,  1824,     0,  1806,
    1813,     0,  1822,  1848,  1848,  1858,  1858,  1043,     0,  1026,
    1027,     0,     0,  1776,  1495,     0,     0,  2704,  2718,  2702,
    2713,  2714,  2701,  1122,  2606,  1120,  2607,     0,     7,     4,
    1875,  1865,  1866,  1867,  1868,  1869,  1864,  1862,  1877,  1878,
     792,   791,   569,   572,   571,     0,     0,  2039,     0,   906,
       0,   436,   904,     0,     0,   414,   393,   414,   451,     0,
       0,   791,   921,     0,     0,   908,  1065,     0,     0,   482,
    1112,  1098,  1114,     0,   197,   199,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      78,    79,   101,  1054,  1053,     0,  1051,  1077,  1076,  1074,
       0,  1075,  1073,  1068,  1070,  1071,  2589,  2593,   579,   791,
     424,     0,   385,     0,     0,     0,     0,     0,   578,     0,
       0,  2639,   110,   862,     0,     0,     0,  1762,  1683,  1492,
    1685,  2018,     0,     0,     0,  1766,     0,     0,  1572,  1571,
       0,  1434,     0,     0,     0,     0,  1459,     0,     0,     0,
       0,     0,     0,     0,  1571,     0,  1434,  1161,     0,   732,
    1308,     0,     0,     0,     0,     0,     0,  1542,  1543,  1544,
    1545,  1553,  1546,  1547,  1548,  1555,  1560,  1549,  1550,  1556,
    1557,  1558,  1551,  1559,  1554,  1552,  1561,     0,  1541,     0,
       0,  1565,  1562,  1564,  1563,     0,  1426,  1418,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1571,
       0,     0,     0,  1571,     0,     0,     0,     0,     0,     0,
       0,     0,  1397,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1320,     0,     0,     0,
       0,     0,  1571,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1280,     0,  2010,  2009,     0,     0,     0,
     824,     0,  1241,     0,  1240,  1504,     0,  2608,  2624,     0,
    2419,  1421,  1423,     0,  1163,  1162,  1164,  1175,  1168,  1173,
    1166,  1170,     0,  1222,  2097,  1176,     0,     0,  1204,  2623,
    1580,  1205,  1190,  1195,  1196,     0,  1193,  1194,     0,  1198,
       0,  1197,  1201,  1202,  1203,  1206,     0,     0,     0,     0,
    1230,  1235,  1450,     0,  1396,  2011,     0,  1664,  1677,  1846,
    1693,  1732,     0,  1007,     0,     0,    71,    73,  1895,  1892,
    1891,  1893,  1897,  1896,  1894,     0,  1904,  2140,  2365,  2368,
     280,     0,   253,   252,   254,   277,     0,     0,  2506,  2504,
    2538,  2537,  2542,     0,  2539,  2535,  2528,  2563,  2532,     0,
    2563,  2534,  2533,  2563,  2529,  2536,  2563,  2501,     0,  1570,
    2176,  2257,     0,  1573,  2473,  1698,  2722,     0,  1934,     0,
       0,     0,  1080,     0,  1153,   492,   491,   490,   489,     0,
     507,   487,   495,    67,     0,     0,  1918,     0,     0,     0,
       0,  1057,  1709,     0,     0,  1682,  1493,  1915,  1911,  1908,
       0,     0,  2504,     0,  2501,  2598,  2616,  2615,  2603,  1153,
    1593,  1154,  1154,  2007,  2435,     0,  2430,  2429,     0,     0,
       0,  2448,  2431,     0,     0,  2397,  2436,  2437,  2440,     0,
       0,     0,     0,     0,  2434,  2363,  2399,  2400,     0,  2405,
    2395,     0,     0,  1856,  1859,  1860,     0,     0,  1840,  1834,
    1833,  1829,  1835,  1830,  1843,  1842,  1841,  1804,  1803,  1613,
    1614,  1612,  1606,  1607,  1611,  1610,  1799,  1849,  1839,  1837,
    1827,  1858,  1838,  1836,  1785,  1786,  1787,     0,  1602,     0,
    1856,  1858,  1848,     0,  1858,  1858,  1821,  1823,     0,  1029,
    1040,  1025,  1024,  1513,  1512,     0,  1466,     0,  1468,  1465,
    1464,  1463,     0,  1512,  2708,  2716,  2720,     0,  1602,  2613,
    2611,   570,  1732,  1732,     0,  2038,     0,     0,     0,     0,
       0,     0,     0,   177,   186,     0,     0,   391,   392,  1732,
     390,   437,   438,   441,   442,   443,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   444,  1732,  1732,   387,   415,
     416,   419,   420,   421,   422,   423,   383,     0,   388,     0,
     919,  1003,  1732,  1003,     0,  1732,  1732,  1003,  1732,     0,
       0,  1732,  1732,     0,     0,  1732,     0,     0,  1003,     0,
    1732,     0,   990,     0,     0,  1732,  1732,  1732,  1732,  1732,
    1003,     0,     0,  1732,   482,  1732,     0,     0,  1013,     0,
       0,  1732,  1732,  1732,  1732,     0,     0,  1732,     0,  1732,
     937,   989,   582,   608,   609,   899,   936,   938,   950,   478,
       0,   968,   992,   993,   991,     0,   923,   925,  2663,  2664,
    2665,  1101,  1093,  1100,  1097,  1112,  1110,  1099,   851,   850,
       0,  1113,   195,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1680,
    1078,  1072,   122,   791,  1732,  1732,  1732,  1732,   389,   425,
     426,   429,   430,   431,   432,   435,   433,   434,     0,     0,
     401,     0,     0,  2557,     0,  2696,     0,     0,     0,   175,
     580,     0,     0,   863,     0,     0,     0,     0,     0,  1758,
       0,  2021,  1765,  1495,  1769,  1768,     0,  1304,     0,  1400,
       0,  1402,  1403,  1404,     0,     0,     0,     0,     0,  1305,
       0,  1255,  1306,  1307,     0,     0,     0,     0,  1451,  1406,
       0,   733,     0,     0,  1258,  1259,  1252,  1244,     0,     0,
    1330,     0,     0,  1260,     0,     0,     0,     0,     0,  1331,
    1454,     0,  1456,  2011,     0,  1410,  1312,  1265,     0,  1408,
       0,  1266,  1332,  1333,  1334,  1154,  1357,  1153,  1314,  1315,
       0,     0,     0,  1336,     0,  1316,     0,     0,  1319,     0,
       0,  1268,  1414,  1412,     0,     0,     0,     0,  1416,  1270,
       0,     0,     0,  1269,     0,     0,     0,     0,     0,     0,
       0,  1272,     0,  1253,  1413,  1415,  1322,     0,     0,     0,
       0,     0,  1281,     0,  2617,  1503,  2625,  1504,     0,     0,
    2619,  2609,  2614,  2622,  1245,     0,     0,  2012,  1169,  1174,
    1167,  1171,  2623,     0,     0,     0,     0,  1188,  1187,     0,
       0,     0,  2623,  1580,  1191,  1387,  1447,     0,  1668,  1665,
    1694,  1733,     0,  2555,  1009,  1008,  1673,  1007,    74,     0,
    1889,  1905,  1882,     0,   272,   281,   274,   278,   279,   275,
    2531,     0,  2512,     0,  2516,  2510,  2514,     0,     0,  2502,
       0,  2508,  2483,  2477,  2484,  2486,  2480,  2485,  2487,  2478,
    2479,  2474,  2481,  1574,  1604,     0,  1103,  1105,  1106,  1104,
    1112,     0,     0,  2463,  2464,  2462,  2461,   497,     0,  1638,
    1639,  1624,  1625,  1623,  1626,   506,  1627,  1637,     0,   518,
       0,     0,     0,  1920,  1919,     0,  1087,  1090,  1091,  1062,
    1061,  1063,  1056,  1058,  1059,   562,  1715,     0,     0,     0,
    1721,  1702,  1712,     0,     0,   250,     0,     0,     0,     0,
       0,     0,  1148,  1495,  1653,  1145,  1132,  1604,  1594,  1131,
    1155,  1151,     0,   790,   789,   788,   786,     0,     0,     0,
       0,  2442,  2443,     0,     0,  2420,  2421,  2422,     0,  2426,
    2402,  2403,     0,  2404,     0,  2454,  2455,  2452,  2453,  2451,
    2425,  1855,     0,  1808,     0,  1828,     0,     0,  1801,     0,
    1820,  1782,  1810,  1800,  1573,  1848,  1797,  1798,     0,  1049,
       0,  1045,  1044,     0,  1018,  1031,  1512,  1495,     0,     0,
    1489,  1514,     0,  1514,  1495,  1495,     0,  1495,  1492,  1509,
       0,     0,  2719,  1595,  2612,     0,     0,   902,   180,   183,
     181,     0,   182,     0,     0,   446,   445,     0,  1846,   439,
     134,   133,   135,   136,  1621,  1622,  1618,  1619,  1617,  1620,
     138,   137,   132,   917,     0,     0,     0,  1846,   417,   394,
     395,   398,   399,   400,     0,  1004,   892,  1081,   972,     0,
     654,   892,   847,   852,   852,   970,     0,     0,  1081,     0,
       0,     0,     0,     0,  1081,     0,     0,     0,  1732,     0,
     983,   932,     0,     0,     0,     0,     0,   984,     0,     0,
     933,  1732,     0,     0,     0,     0,     0,     0,  1081,     0,
       0,   480,     0,  1081,   482,  1016,  1015,  1014,     0,  1081,
    1081,     0,     0,     0,     0,   614,   615,   613,     0,     0,
     606,   583,   791,   934,   479,   935,   653,     0,  1010,   650,
     656,  2014,     0,     0,     0,   144,  2667,     0,  1533,   198,
     102,   100,    82,  2026,    86,    88,    81,   106,  1631,  1632,
    1630,  1628,  1629,   107,    84,    85,    87,    91,    90,    92,
      93,    96,    97,    94,    89,    95,    83,    98,   108,   109,
      80,     0,     0,     0,     0,  1846,   427,     0,     0,  1732,
     384,   402,   403,   406,   407,   408,   409,   410,   413,   411,
     412,     0,  2558,  2560,     0,     0,   378,   377,     0,   139,
    2690,     0,     0,   653,   111,   478,   581,   584,   885,   887,
     886,   877,   876,   112,   115,   118,  1684,  1768,  1495,  1573,
    2019,  1573,     0,  1767,     0,     0,  1401,     0,  1341,  1435,
       0,  1460,     0,  1249,   745,   745,   729,  1443,   725,   745,
    1439,   729,  1441,     0,     0,     0,     0,     0,  1407,     0,
    1344,  1405,     0,     0,     0,     0,     0,  1429,     0,     0,
       0,  1254,     0,  1391,  1411,  1348,  1409,  1346,     0,  1155,
       0,  1360,  1398,     0,     0,     0,     0,     0,     0,     0,
       0,  1353,  1352,     0,     0,     0,     0,  1417,  1339,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1350,  1351,     0,     0,     0,   813,   819,   822,   823,   825,
     817,     0,  1324,  1242,  1153,  2626,  2628,  1123,     0,  2618,
    2620,   894,  1422,     0,  1185,  1181,     0,  1179,  1579,  1200,
    1199,     0,     0,     0,  1189,     0,     0,     0,  1337,     0,
    1448,  2013,   994,   460,   620,  1663,    72,  1885,     0,     0,
    2567,     0,  2566,     0,  2550,  2553,  2018,     0,     0,     0,
       0,     0,  2472,  1605,  1742,     0,  1112,  1116,  2029,  1927,
    2465,  2466,     0,   498,   499,   501,  1154,   515,   493,     0,
     485,   488,     0,   497,     0,  1060,  1137,     0,  1734,  1719,
    1726,  1720,     0,     0,     0,  1718,  2003,  2002,  2009,  2601,
       0,  1539,     0,     0,     0,     0,     0,     0,  2604,  1573,
    1573,  1647,     0,     0,  1129,  1134,  1130,  1133,     0,  1152,
    1159,  1158,  2004,  2011,  2432,     0,     0,     0,     0,  2447,
    2441,  2438,  2439,     0,  2401,  2423,  2407,  2406,  2409,  2411,
    1857,  1602,  1816,  1815,  1609,  1608,  1793,  1602,  1812,  1858,
       0,     0,     0,     0,     0,  1033,     0,  2608,  1507,     0,
    1491,  1490,  1515,     0,  1495,  1514,  1514,     0,  1471,  1470,
    1746,  1749,     0,  1469,  1566,  1497,  1137,  2709,  2721,     0,
     619,   618,   185,   184,   190,   191,  1635,  1633,  1634,   452,
     463,  1636,   464,   440,   131,   453,   454,   418,     0,   396,
     920,   655,   893,   955,     0,     0,     0,   852,   649,   892,
     861,   853,   892,   892,   999,  1000,     0,     0,   593,   590,
     974,   602,   953,   944,   954,   965,   967,     0,   592,   616,
       0,     0,   604,     0,   939,   981,   982,  1007,   587,     0,
       0,   629,   630,   628,   610,   617,  1001,  1002,   588,   589,
     976,     0,  1589,  1591,  1599,   595,   594,     0,   591,     0,
     952,   987,   960,     0,   627,   625,   622,   624,   623,   626,
     605,   597,   596,   599,   598,   601,   600,   603,   949,     0,
    1003,  1003,   969,     0,   637,   638,   640,   641,  2017,     0,
    1012,   971,     0,   642,   651,   643,     0,     0,     0,   154,
       0,     0,   922,     0,   147,   145,   156,     0,     0,     0,
    1536,     0,  1537,  1534,  1535,     0,   103,   105,   459,   458,
     457,   456,   428,     0,     0,     0,  1846,   404,  2559,     0,
       0,  2697,   381,   379,   380,     0,     0,   200,   635,   636,
     634,   633,     0,   467,     0,   465,     0,   477,     0,  1938,
     791,   585,     0,     0,     0,     0,  1573,  1593,  2022,  1761,
       0,  1282,  1342,  1365,  1461,     0,     0,   746,  1436,   799,
       0,  1445,     0,  1446,   727,   726,  1438,  1440,  1444,  1442,
    1248,  1256,  1329,  1251,  1250,  1345,  1452,  1343,     0,     0,
    1288,  1310,     0,  1289,     0,  1427,     0,     0,  1262,     0,
    1264,     0,     0,  1393,  1349,  1347,  1313,  1399,  1358,  1359,
       0,  1361,     0,     0,  1335,  1291,  1317,     0,  1267,  1243,
       0,  1292,     0,  1297,  1295,     0,  1340,  1271,     0,     0,
    1278,     0,  1276,     0,  1277,     0,  1279,  1321,  1323,     0,
       0,   824,   810,   811,   812,     0,   814,   816,   818,     0,
       0,  1505,  2627,  1124,     0,     0,  1424,  1177,     0,  1186,
    1183,     0,  1180,  1363,  1362,  1338,  1388,  1666,   996,   995,
    1887,     0,  1883,   289,   284,   292,   286,   288,   287,   293,
     294,   295,   296,   290,   285,   291,   283,   282,  2564,     0,
    2575,     0,     0,     0,     0,     0,     0,  1575,     0,  1699,
    1107,  1112,  1116,     0,  1108,  1938,   502,     0,     0,     0,
     522,     0,   520,   496,     0,  1088,  1153,  1716,  1728,     0,
    1736,     0,     0,  1713,  1723,     0,     0,     0,  1722,   482,
       0,   251,     0,  2494,     0,     0,     0,  1604,  1581,     0,
       0,  1659,     0,  1654,  1146,     0,  1157,  1156,     0,  2450,
    2449,  2445,  2444,  2446,  2427,     0,     0,  1809,  1811,  1805,
    1048,  1047,  1046,  1030,     0,     0,  1035,  2614,  1566,  1499,
    1495,  1467,  1495,  1478,     0,     0,  1495,  1474,  1472,  1476,
       0,  1573,     0,  1531,  1153,  2006,  1596,  1599,   397,   957,
       0,   892,   848,   849,   861,     0,   861,   861,     0,     0,
     943,     0,  1069,     0,   948,   787,   611,   980,   979,     0,
     612,     0,   941,     0,  1600,  1601,  1592,   481,   940,   962,
     946,  1904,   973,   653,  1011,   829,   721,   670,   661,   745,
     664,   663,   707,   729,   675,   725,   723,   693,   725,   725,
     700,   699,   717,   703,   683,   799,   799,   682,   720,   799,
     704,   702,   706,     0,   708,   725,   713,   701,   705,   722,
     698,   695,   719,   745,   729,   729,   679,   718,   799,     0,
     711,   745,   749,   681,   799,   806,     0,     0,   745,   747,
    2016,   155,   143,     0,     0,   924,   926,     0,     0,   927,
    2669,     0,  2671,     0,  1115,     0,    99,     0,     0,   386,
     455,   405,  2561,     0,   211,  1153,     0,     0,   201,   203,
     204,     0,     0,     0,   580,  1940,  1939,   466,   565,   586,
       0,     0,     0,  1768,  1763,  1615,     0,     0,  1367,  1462,
       0,     0,     0,     0,   793,   804,   802,   796,     0,   800,
     801,  1437,     0,     0,     0,     0,     0,  1430,     0,     0,
       0,     0,     0,     0,     0,  1246,     0,  1389,  1354,     0,
       0,     0,     0,     0,     0,     0,     0,  1275,  1273,  1274,
     808,  1326,     0,   821,   815,   813,   820,     0,  1604,  2608,
     895,  1182,     0,   998,   997,     0,     0,  2565,     0,  2500,
    2552,  2551,  2568,  2568,  2568,  1741,  1740,     0,  1739,  1743,
    1109,  1117,     0,   500,   503,     0,   495,     0,   519,     0,
     486,   563,     0,     0,     0,  1737,  1725,  2605,  1714,  1717,
    2011,  1494,  1540,     0,  2491,  2492,  2490,  1136,     0,  1576,
    1658,  1655,     0,  1648,  1650,  1652,     0,  2005,  2408,  2410,
    1032,     0,     0,  1028,  1500,  1498,  1508,     0,  1463,  1495,
    1495,     0,  1463,     0,     0,     0,  1748,  1593,  1750,  1496,
    1528,  1510,     0,  1598,     0,     0,   956,     0,     0,     0,
       0,     0,     0,   986,     0,  1010,   945,   966,   988,     0,
     749,  1081,  1590,   961,   963,  1057,     0,   639,     0,   833,
     669,   662,   680,   678,   734,   724,     0,   734,   734,   689,
     707,   684,     0,   799,   697,   688,   709,   712,   714,   716,
     734,     0,   799,   677,   676,   686,   673,   734,   757,     0,
       0,     0,     0,   753,     0,   827,     0,     0,   760,   657,
     750,   752,     0,     0,   710,   799,   666,   807,   806,   668,
     799,   806,   734,     0,   748,   734,     0,   141,   146,   157,
     158,   912,  2668,     0,  2666,     0,  1111,  1538,   104,     0,
       0,   214,   212,   213,     0,   207,   209,   204,  2684,     0,
    2691,     0,     0,  2689,   468,   470,   478,   566,     0,     0,
    1599,   890,     0,     0,     0,  1759,  1283,     0,     0,  1380,
    1379,     0,  1368,     0,   743,   741,   744,   742,   795,   794,
     798,     0,   797,   806,   730,     0,  1286,  1287,  1311,     0,
    1428,  1419,  1309,     0,  1263,  1390,     0,     0,     0,     0,
    1318,  1293,  1296,  1294,  1299,  1300,     0,  1325,     0,  1145,
    1145,   631,  2621,  1184,  1888,  1886,     0,     0,  2573,  2573,
    2573,  2482,     0,     0,     0,  1153,   508,     0,   525,   524,
     521,  1604,  1727,  1729,  1735,  1724,  2493,  1582,  1577,  1593,
     780,  1651,     0,  1147,  1034,     0,     0,  1479,     0,  1483,
    1488,  1484,     0,  1475,  1473,     0,  1615,  1532,     0,  1604,
    1599,   959,     0,   652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   985,  1981,   975,   482,   977,   942,
       0,   947,   607,     0,   832,     0,   837,   738,   739,   740,
     690,   735,   737,     0,   692,   660,   685,   715,   691,     0,
     687,   674,   763,   764,   766,   765,   762,   772,   755,   773,
       0,     0,   767,   768,   769,   761,   751,   759,   754,   665,
     667,   671,   672,   658,     0,   659,  2015,   148,   928,   317,
    2670,  2678,     0,  2680,  2673,   129,  2688,  2698,   211,     0,
       0,   152,     0,   202,   787,   205,  2605,  1938,     0,   473,
     864,     0,   889,     0,   866,   868,  1616,  1366,     0,  1364,
       0,  2135,     0,     0,     0,  1378,   805,   803,     0,  1431,
    1599,     0,  1392,  1394,     0,     0,   809,     0,  1506,   632,
    2576,     0,     0,  2572,  2570,     0,  2571,  2569,  2543,     0,
    2498,  2499,  2497,  1738,     0,     0,     0,   516,     0,     0,
     550,   564,     0,     0,  1604,     0,  1656,  1649,  1036,  1501,
       0,     0,     0,     0,     0,  1747,  1520,  1521,     0,     0,
    1526,  1530,  1511,  1597,   958,     0,     0,   864,     0,     0,
    1983,  1982,   951,  1010,     0,   830,     0,   834,   835,   836,
       0,   828,   736,     0,   896,     0,   756,   758,     0,   150,
     343,     0,   329,   315,     0,     0,     0,   319,   159,   162,
     160,     0,   161,   167,     0,   168,   169,   170,   171,   172,
     163,   341,   342,   166,   164,   165,     0,  2032,     0,  2033,
    1127,     0,     0,  2676,     0,  2672,  2601,   178,   208,     0,
       0,   144,   153,  2692,   770,   471,   469,     0,  2601,     0,
    1732,   113,   865,   881,   880,   870,  1599,     0,     0,   116,
     867,   883,   874,   119,   869,   882,   872,  1375,  1599,     0,
    1382,     0,  1386,  1385,  1381,  1383,   728,     0,  1433,  1261,
       0,     0,  1327,  2549,  2548,  2547,  2544,     0,     0,     0,
       0,     0,     0,  2574,  2578,     0,  1492,  1154,     0,   509,
       0,   512,   514,   528,     0,  1732,     0,     0,  1732,  1732,
    1732,  1732,   543,   551,   553,     0,  1586,  1599,  1578,  1640,
     781,  1941,  2608,  1480,     0,  1485,     0,  1477,  1516,  1516,
    1527,     0,   864,   644,   866,   868,   978,     0,   831,     0,
       0,   799,     0,   799,   149,     0,   142,     0,     0,   328,
     331,     0,     0,   334,   324,   323,   325,     0,   318,   317,
     317,   371,   322,   368,   367,   360,  2679,     0,  2605,     0,
       0,     0,  2674,  2699,   210,  1153,   156,     0,   475,   474,
     879,     0,   994,   871,   888,   891,     0,   994,   875,   994,
     873,     0,  1369,  1376,  1372,     0,     0,  1599,     0,     0,
    2545,  2579,  2582,  2580,  2581,  2583,  2577,  1744,  1752,     0,
    1928,     0,   517,   510,     0,     0,   526,     0,  1732,  1732,
       0,     0,     0,     0,     0,   523,   552,  1732,  1587,  1588,
       0,  1583,  1585,     0,  1135,     0,  1949,  1502,     0,     0,
       0,  1524,  1522,   648,   647,   645,   646,     0,   843,     0,
     842,     0,   839,   838,   694,   897,   696,   151,   344,   355,
     358,   350,   330,     0,     0,     0,   320,   317,     0,   304,
     302,   303,   309,   310,   311,   312,   313,   314,   305,   308,
     306,   307,   317,     0,   219,     0,     0,  2677,  2675,     0,
    2681,     0,   188,   187,   179,     0,   317,  2685,     0,  2693,
    2605,   878,   114,   884,   117,   120,  1599,     0,  1371,  1377,
    1384,  1432,  1355,  1356,     0,     0,   780,   504,   516,   513,
     536,   529,   532,     0,   561,     0,     0,   557,   558,   556,
     554,   547,     0,   545,     0,  1599,  1641,     0,     0,     0,
       0,  1942,  1944,     0,  1657,  1482,  1487,     0,  1517,     0,
       0,     0,   964,   845,   846,   844,     0,     0,     0,     0,
     317,   351,     0,   326,     0,   335,     0,     0,   217,   374,
     372,   215,   362,   362,  2682,  2683,   189,  2700,     0,   158,
     178,   476,  1372,  1373,  1374,  1751,  1753,  1929,   511,   536,
       0,   534,     0,   530,   527,   531,   559,   560,     0,   544,
       0,   555,  1584,     0,     0,     0,     0,     0,  1943,     0,
       0,  1950,  1952,  1519,  1518,  1533,     0,     0,     0,   352,
     358,   348,   356,   317,     0,     0,   316,     0,   370,   218,
       0,     0,     0,   317,     0,   361,   363,   365,     0,   140,
    2694,  1370,  1955,   533,     0,   541,   537,   539,   542,   550,
     549,   546,  1643,  1947,  1948,     0,  1945,     0,     0,  1951,
       0,     0,   841,   840,     0,   349,     0,     0,   347,   327,
     332,   317,   375,   317,   229,   228,     0,   221,   297,   369,
       0,   220,  2686,   317,     0,  1941,   535,     0,     0,   548,
    1646,     0,  1644,  1946,  1954,  1953,  1525,  1523,   353,     0,
     317,     0,   317,     0,   317,     0,     0,     0,     0,     0,
     216,   317,  2695,     0,  1949,   540,   538,  1642,     0,     0,
     345,   317,   333,   338,     0,     0,   224,   298,   299,     0,
     226,  2687,     0,  1957,  1645,   317,   317,   334,   337,   376,
     373,     0,   300,   222,   223,   234,   233,     0,  1956,     0,
    1961,   317,   317,   339,   242,   240,   317,   230,   238,   232,
       0,   239,     0,   227,     0,     0,  1968,     0,   225,   241,
     301,  1959,  1960,  1958,  1963,     0,     0,  1965,  1966,     0,
    1930,   231,  1967,  1962,     0,  1969,  1971,     0,  1964,     0,
    1153,  1970,     0,  1154,  1972
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   600,  1449,    57,    58,    59,    60,    61,  1299,
      62,   811,  1224,  1756,  1757,    63,   543,    64,   999,  1520,
    1521,  3085,  3086,  1522,    65,  2140,  3122,  4222,  3123,  4227,
    3124,  4229,  1539,   511,   512,  1983,  1984,  1024,  3106,  3072,
    3917,  3076,  4039,  4186,  4081,  2066,  3459,  3918,  3919,  4048,
     538,  2138,  1469,  4213,  1963,  4334,  1964,    66,   632,   997,
    1493,  1494,  3477,  3478,  3742,  3479,  3734,  3735,  3736,  3737,
    4473,  4307,  4411,  4474,  4547,  4581,  4587,  4516,  4596,  4597,
    4598,  4585,   852,  4599,    67,   566,   567,   854,  1329,  1770,
    1330,    68,    69,   537,  1244,  1245,  1246,  1247,  2319,  1771,
    2314,  2315,  3256,  4517,  4583,  4602,  4308,  4309,  4193,  4310,
    4051,  4311,  4197,  4312,  4054,  4313,  4314,  4315,  4316,  4465,
    4317,  4192,  4509,  4304,  4305,  4467,  4563,  4578,  4318,  4061,
    4187,  4398,  4062,  4188,  4460,  4300,  4461,  4504,  4559,  4301,
    4399,  4507,  4402,  4319,  4325,  4475,  4320,  4326,  4321,  4066,
    4204,  4324,  4202,  4323,  4471,  4470,  4543,  2668,  3105,   619,
     620,   643,  2130,   621,  1013,   970,  1471,  1996,  1997,  2519,
    2520,  2650,  2651,  2652,  1988,  1989,  1990,  2118,  2119,  2120,
    1970,  1971,  1972,  1475,  1967,  1968,   622,   971,   981,  1991,
    1992,  1993,  2656,  2122,  2123,  2124,  2125,  1212,  1213,  2959,
    2674,  3115,  3936,  3487,  4088,  4340,  3116,  3117,  2594,  3027,
    2076,    70,   555,   832,  1296,  2370,  1297,  2372,  2842,  2843,
    2844,  1815,  1816,  3816,  1820,  2369,  3987,  4358,  4140,  4141,
    2846,  4139,  2850,  3281,  3282,  3577,  3818,  3990,  4363,  4255,
    4434,  4361,  4430,  4362,  4432,  4528,  4486,  4487,  4265,  4372,
    4373,  4438,  4489,  4152,  4153,  4154,  2390,  2856,  3821,  3748,
    2112,  1461,  1462,   513,   514,   515,   640,  2675,  2051,  2676,
    2677,  3049,  2053,  2054,  2813,  1384,  3040,  3014,  3799,  3112,
    3053,  3054,  3055,  3056,  3057,  3063,  2978,  2529,  2530,  2599,
    3066,  3934,  3666,  3681,  3443,  3444,  3445,  3446,  3447,  3448,
    3449,  3143,  3144,  3141,  1072,  3880,  3881,  3882,  3137,  3138,
    3715,  3699,  3700,  3701,  3935,   773,  3898,  3508,  1352,  1353,
    3996,  1363,  1364,  2414,  1856,  2415,  1465,  3509,  3510,  3511,
    3709,  3210,  3796,  3216,  3217,  3218,  2775,  2776,  2777,  2778,
    2779,  2261,  3702,  3065,  3659,  3873,  3876,  4031,  4292,  2531,
    2979,  2532,  2982,   921,   516,  2533,  2534,  1553,  1554,  4091,
    4099,  4103,  4092,  4104,  4100,  4093,  4094,  4095,  4106,  4102,
    2681,  3749,  3750,  2971,  3226,  4033,    71,  1481,   964,   973,
     969,   989,   627,  1482,   982,  2067,  2605,  3721,   609,  2055,
    3651,  3372,  3655,  2056,  2993,  2057,  3359,  3636,  2058,  3389,
    3653,  3870,  2994,  2995,  2059,  2060,  2061,  3371,  3381,  4023,
    3237,  3238,  3239,  2535,   125,  2306,  3061,  2578,    72,  1427,
      73,   935,   936,   937,  2464,  2465,  2925,  3336,  3613,   930,
     931,   932,  1929,  2462,    74,   635,  1526,    75,  1307,  2382,
    2383,  2384,    76,   990,    77,    78,   636,  1533,  1534,  1535,
      79,  1292,   132,    80,   840,  1302,  1304,  1305,    81,   631,
     991,   992,   993,   994,  2072,    82,  1807,  2346,  2347,  2348,
    2349,  1490,  2607,  1491,  1492,  2081,  3274,    83,    84,   597,
    2269,   572,   858,   573,   574,  1850,  2405,  3800,   870,   871,
     872,  2884,  1342,  1343,  1344,  2410,  2889,  1069,   774,   775,
     776,   777,  1166,  1167,  3703,   778,  1176,  1716,   779,   780,
     781,   782,   783,   784,  2741,  3180,  2807,  2698,  3498,  3761,
    4107,  4348,  4232,  3762,  3763,  3955,  4114,   785,  3172,  3173,
    3527,  1743,  1651,  1652,   786,  2192,   787,  1159,  1701,  1627,
    3519,  3165,  3779,  3959,  1570,  2160,  2713,  2809,  2263,  2177,
    2719,  1094,  1095,  1059,  2167,  1576,  1936,  1937,  1938,  1939,
    1940,  3624,  3623,  3625,  4000,  3838,  4002,  3842,  2475,  1835,
    1836,  1941,  1942,  2926,  3836,  4162,  2264,  2265,  2266,  3548,
    2927,  3340,  2945,  2946,  3849,  2466,  1943,  2933,  4281,  4009,
    4010,  4391,  4390,  4011,  3847,  3848,  3629,  3630,  3081,  3082,
    3083,  2870,  1617,  1618,  1625,  1279,  1280,  1571,  2344,  2831,
    3829,  3993,  2287,  3599,  3992,  4156,  4271,  2064,  3022,  3023,
    2407,  2408,  2949,  3356,  3386,  1387,  3801,  2833,  1902,  1903,
    3755,  4586,  2780,  2623,  2960,  2366,  2367,  4274,  4443,  4531,
    4532,  3311,  3312,  3603,  3604,  2409,  2881,  3313,  3830,  4161,
      85,   520,    86,  1754,  2299,  2812,  1221,  2311,  1001,  1309,
    1557,  1558,   799,   533,  1214,  1215,  1216,    87,   544,  2345,
      88,   562,  1833,   824,   844,  1310,  1311,  2391,  2857,  2864,
    2392,  2869,  3587,  2859,  3287,  3288,  2301,  2302,  2860,  3290,
    3584,  3567,  3568,  3269,  3813,    89,   585,  3351,  2940,  2941,
    4247,  4248,   845,    90,   519,  1046,  2689,  1563,  2148,  1047,
    1048,  2151,   661,   662,    91,   939,   582,  1409,  1410,  1411,
    1918,    92,   576,   922,  2911,  2917,  1897,   836,  1217,  1391,
     925,  1392,  1883,  2443,  1373,    93,   960,   959,  1456,    94,
     605,  1457,    95,   812,  1238,  1766,  2817,  3242,  3555,  1239,
    1240,  2312,    96,   563,   849,   850,  1314,  1838,    97,   557,
     837,  1826,    98,   548,    99,   100,   828,  3275,  4356,  4482,
     552,  1809,  1288,  3488,  4276,  4381,  4382,  4384,  4451,  4452,
    4525,  4590,  4613,  4606,  4616,  4617,  4620,  4625,  4626,   789,
     946,   790,  3864,   791,   792,   793,  2865,  2866,  4108,   794,
    2867,   795,  2972,  1002,  1560,   541,   491,  2612,   616,   947,
    2839,   797,  4068,   967,  1017,   493,   494,   101,   575,   886,
    1368,  1358,  1367,  1876,  2431,  1880,  2433,  2434,  3325,  2907,
    3326,  2908,   926,  1872,  1877,  2909,  1881,   889,  1865,  1866,
    1867,  1868,  2900,  1862,  2440,   102,   829,   498,  1290,  1291,
    2355,   103,   584,   104,  1281,  1803,  1804,  2341,  2830,  2342,
     105,   855,  1333,   106,   814,  1273,  2330,  1274,  1779,  1275,
    1276,  1793,  1787,  1796,  1790,  4127,  3977,  3978,  2827,  1220,
    1018,  1019,  2322,  2821,  2822,  3808,  3980,  3559,  4133,  4134,
     107,   133,   501,   638,  1008,  1336,   108,   109,   110,   111,
    1339,  1444,  2401,  1445,  2270,  1446,  1447,  1950,  1848,  1697,
    1698,  3224,  1156,  1157,  2273,  2784,  2785,   873,   647,  1034,
    1026,   126,   127,   128,   650,   651,   129,   987,   988,  2606,
    3078,  3461,  3724,  3725,  3923,  4076,  4072,  4073,  4070,  4075,
    1028,  3930,  4418,  4551,  1029,  1030,  3107,  3932,  4217,  4420,
    4523,  1031,  2665,  3474,  4077,  4336,   112,   948,   594,  1442,
    1437,  1439,  1946,  2482,   113,   114
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3868
static const int yypact[] =
{
    5417,  2492,  1077, -3868,  -164,   174, 48766,   127,  1472,  1472,
     488,  2285, -3868, -3868, -3868, -3868, -3868,  2949, -3868, 48766,
    1077,  1047, -3868, 24766, -3868, -3868,   833,   166,   253,  1472,
    1077, -3868, 48766, -3868,   788,  1332,  1077, -3868, -3868, 42652,
   -3868,   488, 48766, -3868, -3868, -3868, 42652,   592,   952,   750,
    1071, -3868, -3868, 48766,  1803,  -141,  1582,  1473, -3868, -3868,
    1288, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, 25376, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868,  1688, 48766,  1710, 48766, -3868,
    1675, 48766, 40822, 48766, -3868,  1196,  1726, -3868, -3868,  1776,
   -3868, -3868,  1472,   488, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868,  1279, -3868, -3868,  1367, -3868, -3868, -3868, -3868,
   -3868,  1923,  1723, -3868,  1778, 40822, -3868, 48766, -3868, -3868,
   -3868,   228, -3868,  1459, -3868,  1493,  1759,  1801,  1846,    73,
   12139,  1856,  1856,  1856, 48766,  1847,  1856,  1856, 48766, -3868,
    1856, -3868,  1856,  1472, -3868, -3868, -3868,  1961, -3868, 48766,
    1731,   171,   -40, 40822,  1644, 48766, -3868, -3868, 12139, -3868,
    1879, -3868, -3868, -3868,  1472,  2099,  1965,   237, 48766, -3868,
   -3868,  1472,   202,   885,  1556, -3868, -3868,  1678, -3868, -3868,
     158, -3868, -3868, -3868,  2093, 27206,  4885,  1678,   -81,   713,
     -81, -3868, -3868, 48766,  1472,  1903, -3868, -3868,   236,   236,
     236, -3868,   236, -3868,   236, -3868,  -141,  1530, -3868, -3868,
    1563, 48766,  1023,  2058,  1228, -3868, -3868,  1566,  1217, -3868,
    1632, 37758, -3868, 48766, -3868, -3868, -3868, -3868,  1862, -3868,
   -3868, -3868,  2080, -3868, 37758, 24766, 48766,  1743, -3868, -3868,
   -3868, 24766,  1599, 48766, -3868, 24766, 24766,   218,  1477,  1679,
   48766, 48766,  2057, -3868,  2250, 37758,  1830, -3868,   655,  1368,
    1776,  2288, -3868,  1723, -3868, 48766, 48766, 48766, -3868, -3868,
   -3868, 43262,    73,  1649,  1687,  1689, 16654, -3868,  1694,  1697,
    1699, 12139,  1706,  1708,  1711,  1727,  1729,  1732,  1745,  1755,
    1773,  1773,  1777,  1791,  1795,  1802,  1209,  1810, -3868,  1812,
    1828,  1840, -3868, -3868,  1852,  1883,  1893,  1897, -3868,  1900,
    1907,  1910, 12784,  1915,  1919, -3868, 21677,  1926,  1929,  1932,
    1934,  1936,  1945,  1951,  1959,  1972, -3868, -3868, 12139,  1777,
    1978, -3868, -3868,  1984, -3868,  1989,  1995,  2001,  2006,  2013,
    2017,  2020,  2027,  2035,  2037,  2041,  2043,  2048,  2051,  2054,
    2070,  2072,  2075,  2096,  1777, -3868,  1241,  2113,  2121,  1260,
    2129, -3868,  2131, -3868,   305,  2136,  1773,  1777,  1777,  2147,
    2159,  2162,  2168,  2173,  2175, 16654, 16654, 16654, 12139, -3868,
   48766, -3868, 48766, -3868,  1415,  3166, -3868,  2977, 16654,   942,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,  1664,  1826,
   -3868, -3868, -3868, -3868, -3868, -3868,  2178,  1695,  2198, 48766,
   48766, 48766,  2015, 48766, 48766, 40822,   865, 48766, 37758, -3868,
    1856,  1786,  3925, 30336,  4201, -3868,   126, -3868, -3868, 48766,
   -3868, -3868, -3868, -3868,  2273,  1902,  1415,  2452,   225, 24766,
   -3868,   890, -3868,  -190, -3868, -3868,  2289, -3868, -3868, 37758,
   24766, -3868, -3868, -3868, 22287, -3868, -3868,  2673, -3868,  2181,
   -3868, -3868,  1826,  2845, -3868,  4426,  2357,  1477,  2244, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
    2207,  2093, -3868, -3868,   485,  2362,  2204,   775,   786, 35318,
     100,   810,  1066, 27832, 35928,  2225, -3868, -3868, -3868,   131,
    2704, -3868,   -29,  2235,  1891,   -29, 38382,  2615,  1696, -3868,
     385, -3868,  2696, -3868, -3868, -3868, -3868,  2359,  2343, -3868,
   -3868,   392,  2322, -3868,  2730, -3868,   791, -3868,  2368,  2615,
     -29,  1696, -3868,  2623,  2748,   129,  -143, -3868, -3868, -3868,
   -3868,  2260, -3868,   638,  2829, -3868,  2274, -3868, -3868, 24766,
   -3868, -3868,  2273, -3868, -3868, -3868,  2291, -3868,  2546,  2395,
   -3868, -3868,   776, -3868,  2305,  1027,  2804, -3868, 40822,  1297,
   38992, -3868, -3868, -3868,  2837,  2858,  1773,  2327, -3868, -3868,
   -3868,  2978, -3868, -3868,  2347,  2886,  2886,  2886,  2996, -3868,
   -3868, -3868,  2364,  2619, -3868, -3868,  2538,  2415, -3868,  1743,
   24766,  2789,  2396, -3868, -3868,  2656, 12139, -3868, -3868,  3607,
     888, -3868, -3868,   270, -3868,  3011,  2632, -3868, -3868, -3868,
   -3868,  2913, -3868, -3868,  2978,  2975,  2886,  2864,  2442, -3868,
   -3868, -3868, -3868, -3868, -3868,   243, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868,  1207, -3868, -3868, -3868, -3868, -3868,  1743,
   -3868, 24766, -3868, -3868, -3868, 24766, -3868,  2449, -3868,  2458,
   -3868, 12139, 12139,   340,  3044,  3106,  3106,  3106,  1415,  2507,
   12139, 12139, 12139, 12139, 12139, 12139, 12139,   358,  2481, -3868,
   -3868,   694, -3868,  2483, 12139, 12139, -3868, 12139, 12139, 25986,
   -3868,  4796, 12139, 12139,   479,  2998, 12139, 12139, 12139, 12139,
    4193, 12139, 12139, 25986,  3117,  2491, -3868,  2486,  1045, 12139,
   12139,  1104, 12139, 12139, 12139, 12139, 12139, -3868, -3868, -3868,
   12139, 12139, -3868, -3868, 12139, 12139, 16654, 12139, 12139, 12139,
   12139, 12139, 12139,  2494, 12139,  3106,  3106, 12139, 12139,  1491,
   -3868, -3868, 12139,  1682,  1682, -3868, 12139,  7624, 12139, -3868,
   -3868, -3868,  2496, -3868, -3868, -3868, 25986,  3106,  3106, 12139,
   12139, 12139,  3044,  3044,  3044,   300,  2497,  1018, 12139, 28458,
    2498, -3868, -3868, -3868, -3868, 12139, 12139, 12139, -3868, 16654,
   -3868, -3868,  1400, -3868, -3868, -3868, 13429, 16654, 16654,  2499,
   16654, 16654, 16654, 16654, 16654,  2878, 16654, 16654, 17299, 17944,
   16654, 16654, 16654, 16654,  1201,  3044, 40822, 16654, 12139, -3868,
    2508, 48766, -3868, -3868, -3868,  2500, 24766,   865, -3868, -3868,
   -3868, -3868, -3868, -3868,  2510,   865, -3868,  3001, -3868, -3868,
    2512, 24766, -3868,  2511, -3868,  2883, -3868,  2888,  2892,  2894,
   -3868, -3868, -3868,  3113,  2897, -3868,  2906, -3868, -3868,  2541,
   -3868, -3868, 18589, 40822, -3868,  2547, -3868,  3034, -3868,  2786,
    2733,  1790, -3868, -3868, -3868, -3868, -3868,  2826, -3868, -3868,
    2658, -3868,  2838, -3868, -3868,   487, -3868,   230, -3868, -3868,
   -3868, -3868, -3868, -3868,  2839,  2564, -3868, -3868, -3868, 48766,
   -3868, 49376, -3868, 22287,  -164, -3868, -3868, -3868,  2938,   247,
    2566, -3868, 24766, -3868,    98,    98,  2820,   187, 40822, -3868,
   -3868,   142,  2568,  2649,  2574, -3868,  2655, 24766, 24766, -3868,
   -3868, -3868,  2832, -3868,  3214,   885, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,  2584,
    3073,  2786,  2862, -3868,  2865, -3868, 48766, -3868,  1494, -3868,
   -3868, -3868,  2588, -3868, 12139, -3868, -3868, 48766, -3868, -3868,
   -3868, -3868, -3868,  3167, 12139, -3868, 37758,  1254,  1300,  1061,
     131, -3868, -3868, -3868, -3868, -3868, 48766, 43872,  2591, -3868,
    3002,  -164, 12139, -3868,  2608,  1723, 48766, 48766, 48766, 24766,
   48766, 24766, -3868,   988,   988, -3868, 36538, -3868, -3868, -3868,
   -3868,   -29, 48766, 48766,   -29, 37758, -3868,  1696, 48766,   -29,
   -3868,  3005,  2706, -3868, -3868, -3868,  3074, -3868, -3868,  3065,
    2612, -3868,  3002, -3868, -3868,  1696, -3868, -3868, 24766, -3868,
   -3868,  1696, -3868,  1696,  1696,   -29,   -29,  2671,   -81, -3868,
   -3868,  2766,   713, -3868,   973,   236,  2869, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868,    93, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868,   188, -3868, -3868, -3868,  2089,  3134, -3868, 40822,  1938,
     630,   805,  1938,  1931,  -164,   978, -3868,   978, -3868, 37758,
    3097,  4374,  2902,   251, 24766, -3868,  2629, 44482, 24766, -3868,
   -3868, -3868,  1760,  2636,  2638,  1415,  3128,  3129,  3130,  3131,
    3132,  3133,  3140,  3142,  3148,  3149,  3150,  3152,  3155,  3156,
    3159,  3161,  3168,  3169,  3170,  3172,  3173,  3178,  3179,  3180,
    2695, -3868, -3868, -3868, -3868, 24766, -3868, -3868, -3868, -3868,
    2749, -3868, -3868, -3868, -3868,  2758, -3868, -3868, -3868,   272,
    2167,  2718,  2746,   123, 37758,  3165, 48766, 48766,  1723, 48766,
   48766, -3868, -3868,  -177,  2994,  2995,  2997,  2702, -3868,  2832,
   -3868,  1440, 48766,  3176, 32212, -3868,   464,   497, -3868,  3106,
    2721, -3868,  2727,  2734,  2737, 12139,   283,   248,   876,  1437,
    1581,  1067,   471,   258,  3106,  2739,  2736, -3868,  2740, -3868,
   -3868,   480,   504,  1080,  1088,  2742,  2747, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868,  3200, -3868,   528,
    1628, -3868, -3868, -3868, -3868,  2750, -3868, -3868,  1096,   532,
     548,   304,  2756,   685,  1642,  1736,  2751, 25986, 48766,  3106,
    2755,  1105,  1134,  3106,  2757,   720,  1146,  1748,  1779,  1788,
   12139,  1824, -3868,  1152,  1161,  2759,  2760,   768,  1833,  2805,
    1185,   847,   868,  1187,   904,   918, -3868,  1200,  2761,  2762,
     945,   294,  3106,  2763,   321,  2765,  2768,  1267,  9559, 10204,
   10849,   434,   951, -3868,  2764, -3868,  2486,  2770,  2771,   331,
     281,  1305, -3868, 12139, -3868, -3868,  1073,    94,  2814,   134,
    1061, -3868,  2929, 48766,  2050,   146, -3868, -3868, -3868, -3868,
   -3868, -3868,    72, -3868,  2775, -3868,  2776,  2091,  2780, 12139,
    1130,  2780,  2714,  2067,  2067, 16654,  2383,  2158, 12784,  1051,
   12784,  1051,  2780,  2780,  2780, -3868, 16654,  2779, 16654, 16654,
   -3868,  3044,  1415,  2781,  2782,  1275, 48766, -3868,  2510,   -53,
   -3868,   131, 37758,   109, 24766, 40822,  2783, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868,  4036, 24766,  2868,  2870,  2873,
   -3868, 30962, -3868, -3868, -3868, -3868, 30962,   -21, -3868, -3868,
   -3868, -3868, -3868,  2884, -3868, -3868, -3868,  2787, -3868, 37758,
    2787, -3868, -3868,  2787, -3868, -3868,  2787,    63,  4511, -3868,
     863,  1003,  2991,  2816, -3868, -3868, -3868, 24766, -3868,  3203,
    1028, 24766,  2629,  2792, -3868, -3868, -3868, -3868, -3868,  1210,
    2898, -3868,  3423, -3868, 12139,  -164, -3868, 37758, 37758, 24766,
   24766,   857, -3868,  2287,  2809, -3868, -3868, -3868, -3868, -3868,
    2845, 18589,  2802, 37758,    66, -3868, -3868, -3868, -3868, -3868,
     119,  1415, -3868,  2811, -3868, 39602, -3868,  1415,   131,  2825,
    2830, -3868, -3868,  3211,   742, -3868,  2833,  2835, -3868,  2834,
    2842,  2844, 45092, 12139, -3868,  1300, -3868, -3868,   131, -3868,
   -3868,  8269,  -164,  3284, -3868,  1415,  2854, 48766, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868,   -47, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868,   -29, -3868, -3868, -3868, -3868, -3868,  3061,  2615,  2322,
    3284,   -29,  1696, 24766,   -29,   -29, -3868, -3868,  2679,  2911,
   -3868, -3868, -3868, -3868, -3868, 48766,  1987,  3023, -3868,  2866,
   -3868, -3868, 24766, -3868,  2867, -3868,  3294,  3462,  2615, -3868,
   -3868, -3868,   131,   131,  3171, -3868,  -164,  3003,  3006,  3007,
    3013,  3014,  3040, -3868, -3868,  -164,  -164, -3868, -3868,   131,
   -3868,  1666, -3868, -3868, -3868, -3868,  -164,  -164,  -164,  -164,
    2595,  -164,  -164,  1863, -3868, -3868,   131,   131, -3868,   669,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868,  1181, -3868,  3143,
   -3868,  2437,   131,  3450,  3153,   131,   131,  3450,   131,  3154,
    3160,   131,   131,  2957,  3401,   131,  3292,  2999,  1859,  3298,
     131,  3162, -3868,  3008,  3417,   131,   131,   131,   131,   131,
    3450,  3174,  3510,   131, -3868,   131,  3181,  3182,   181,  3183,
    3185,   131,   131,   131,   131,  1122, 48766,   131,  3189,   131,
   -3868, -3868,  5511, -3868, -3868, -3868, -3868, -3868, -3868,   804,
   22897, -3868, -3868, -3868, -3868,   500, -3868,  3120, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
    2917, -3868, -3868, 12139,  2924,  2595,  -164,  2595,  2595,  -164,
    -164,  1829,  -164,  2595,  2595,  -164,  -164,  -164,  -164,  -164,
    -164,  -164,  2595,  2595,  -164,  2185,  -164,  2595,  3607, -3868,
   -3868, -3868, -3868,   292,   131,   131,   131,   131, -3868,  2281,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, 40822,  3309,
    2109,   -43, 40822, -3868, 48766, -3868,  1568, 48766,  2944,  -155,
    3478,   175,   175, -3868, 24766, 24766, 24766, 48766,  2988, -3868,
   32212, -3868, -3868,   973, -3868,  2939, 14074, -3868,  2947,  3209,
   12139, -3868, -3868, -3868,   393, 12139, 12139,  3443,  2306, -3868,
   40212, -3868, -3868, -3868, 12139, 40212,  2306,  2951, -3868,  3209,
    2953, -3868,  3359,  3362, -3868, -3868, -3868, -3868, 12139, 12139,
   -3868, 12139, 12139, -3868, 12139, 12139, 12139, 12139, 12139, -3868,
   -3868, 16654, -3868,  2950,  2958,  3209, -3868, -3868,  2959,  3209,
   12139, -3868, -3868, -3868, -3868,  1415,  3413, -3868, -3868, -3868,
    2986,  2987, 12139, -3868, 12139, -3868, 12139, 12139, -3868, 12139,
   12139, -3868,  3209,  3209, 14719, 12139, 12139,  2964,  3209, -3868,
   12139, 12139, 12139, -3868, 12139,  1627, 12139,  1715, 12139,  1741,
   12139, -3868, 12139, -3868,  3209,  3209, -3868, 12139,   374,  1210,
    2595,  2965, -3868,  1870, -3868, -3868,  1445, -3868,  1073,  2966,
   -3868, -3868,  1494, -3868, -3868, 40822, 12139, -3868, -3868, -3868,
   -3868, -3868, -3868, 16654,   344,  2976, 16654, -3868,  2714,  4193,
    4193,  2106, 12139,  1130,  2714,    82, 12139, 48766, -3868, -3868,
   -3868, -3868, 40822, -3868, -3868, -3868, -3868,   109, -3868,  2511,
   -3868,  2629, -3868,  3464,  2974, -3868, -3868, -3868, -3868, -3868,
   -3868, 48766, -3868,  3055, -3868, -3868, -3868, 23507, 23507, -3868,
   23507, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868,  2615,  2287, -3868,  2979, -3868, -3868,
    2656,  3067,  3000,  3353, -3868, -3868, -3868, 48766, 16654, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,  3579,  2989,
    2992,  3471,  3009,  1415, -3868,  3062, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868,   932, -3868, -3868,  3012,  3012, 20438,
   -3868, -3868, -3868, 48766,  3473, -3868,  3428,  3442, 23507, 23507,
   23507,  1131, -3868,   389, -3868,  1403,  3400,  2615, -3868,  3447,
   41432, -3868, 32836, -3868, -3868, -3868, -3868,  1254,  3084,  3085,
     -25, -3868, -3868,  3397,  3221, -3868, -3868, -3868,   131,  1415,
   -3868,  2591,  8269,  3015, 29084, -3868, 16654,  1812, -3868,  1415,
   -3868, -3868,  1829, -3868,   365, -3868, 36538, 36538, -3868,  3285,
   -3868, -3868, -3868, -3868,  2816,  1696, -3868, -3868,  3490, -3868,
    3494, -3868,  3016,  3499, -3868,  3263, -3868,  1159,  3412,  3415,
   -3868,  3282,  1380,  3282,  1159,  1159, 25986,   973,  2832, -3868,
    2595,  3341, -3868, -3868, -3868, 39602, 37148, -3868, -3868, -3868,
   -3868,  3559, -3868,  3561,  1680, -3868, -3868,  2457,  1381, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868,  1931,  2457,  2457,  1557, -3868,    85,
   -3868, -3868, -3868, -3868,  3509, -3868, 26596,  1077, -3868,   466,
   -3868, 26596, -3868,  1760,  1760, -3868, 45702, 26596,  1077,  1829,
    2595, 26596,  2595, 46326,  1077,  -164,  -164,  2387,   131,  2595,
   -3868, -3868,  3429, 48766,  3430, 26596, 26596, -3868, 40822, 48766,
   -3868,   131,   150,  2595, 46936,  1829,  1829, 26596,  1077, 25986,
    2576, -3868,  -164,  1077, -3868, -3868, -3868, -3868, 24766,  1077,
    1077,  2269,  2732,  2799,  2831, -3868, -3868, -3868,  2595, 46326,
   -3868, -3868,  5521, -3868, -3868, -3868, 19828, 48766,  1446,   177,
   -3868,  3019,  1434,   309,  3121,  1005,  3041,  3048, 47546,  1415,
    2595, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868,  -164,  1210,  2457,  2457,  2226, -3868,  3313,  3487,   131,
   -3868,  1977, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868,  3137, -3868,  3674,  3237,  3054, -3868, -3868,   383, -3868,
   -3868,  1167, 24766, 19218, -3868,  3308, -3868,  3004, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868,  3049,   973,  2816,
    1457,  2816,  3064, -3868, 12784,  1323,  3209,  3060, -3868,  1415,
   12139,  1415,  1904, -3868,  3066,  3066,  3068, -3868,  3072,  3066,
    3465,  3068,  3468,  3078,  3079,  1340,  3080,  3081,  3209, 12139,
   -3868,  3209, 12139, 12139,  1351,   352,  1361,   -77,   974,   980,
     370, -3868,  1469,  3038,  3209, -3868,  3209, -3868,  1476, 41432,
    1619,    79, -3868,  3505,  3511,  1485,  1509,  1518,   984,  1567,
    1942, -3868, -3868, 12784,  1579,   451,   401,  3209, -3868,  1584,
    1006,  1030,  1589, 12139,  1594, 12139,  1605, 12139,  1621,  1631,
   -3868, -3868,  1638,  3083,  3083,   162, -3868,  3082, -3868, -3868,
   -3868,  3087, -3868, -3868,  2207,  1445, -3868, -3868,  3089, -3868,
   -3868,  3077,  1415,  3090, -3868, -3868, 12139, -3868,   942, -3868,
   -3868, 16654,   408,  3091, -3868,  3355,  3367,  3209, -3868,  3094,
    1664, -3868,  1197, -3868, -3868, -3868, -3868,    29,  2824, 30962,
   -3868,  1955, -3868, 37758,  3088, -3868,  3096,  3175,  3184,  3190,
    3098, 12139, -3868, -3868,  3379, 24766, -3868,  3525, -3868, -3868,
   -3868, -3868,  3112,  3114, -3868, -3868, -3868,  2714,  3495,  3370,
   -3868, -3868,  1210, 48766, 37758, -3868,  2093, 25986, -3868,  3118,
   -3868,  3118,  1522,  3122,  1979, -3868, -3868, -3868,  3119,  2244,
    1992, -3868, 18589,  3389, 37758,  3576,  3577,  3580, -3868,  2816,
    2816,   152,  3177,  3532, -3868, -3868, -3868, -3868, 48156, -3868,
   -3868, -3868, -3868,  1285, -3868,  3136,  3138,   110,  3350, -3868,
   -3868, -3868, -3868,  8269, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868,  2615, -3868, -3868, -3868, -3868, -3868,  2615, -3868,   -29,
    -164,  -164,  1660,  -164,  3619,  3655,   911,    94, -3868,  1422,
   -3868, -3868, -3868,  3531,  1159,  3282,  3282,  3533,  3416,  1294,
    3139, -3868,   131, -3868,  2307, -3868,  2093, -3868, -3868, 12139,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,  1181, -3868,
   -3868, -3868, -3868, -3868,  3144,  3537,  3538,  1760, -3868, 26596,
   -3868, -3868, 26596, 26596, -3868, -3868,   113, 46326, -3868, -3868,
   -3868, -3868, -3868, -3868,  3147, -3868, -3868,  1210, -3868, -3868,
   37148,  -164, -3868, 26596,  3147, -3868, -3868,   178, -3868,  3187,
    -164, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, 46326,  3157, -3868,   323, -3868, -3868,  2099, -3868, 46326,
   -3868, -3868, -3868, 46326, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,  3163,
    2689,  2271, -3868,  3186,  3164, -3868, -3868, -3868, -3868, 48766,
   -3868, -3868, 24766, -3868, -3868, -3868,  6362, 48766,  3385, -3868,
   12139, 12139,  3431, 48766,  3432, -3868,  3721, 48766,  3777, 46326,
   -3868,  3191, -3868,  3188, -3868,  2014, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868,  3193, 48766,  2457,  1742, -3868, -3868,  -164,
    1167, -3868, -3868, -3868, -3868,  3434,  3435, 48766, -3868, -3868,
   -3868, -3868,  3304, -3868, 24766, -3868,  3321, -3868,  3194,    56,
    4808, -3868,  3196,  3197,  3199, 32212,  2816,  3433, -3868, -3868,
    4193, -3868, -3868,  3419,  1415, 12139,   972, -3868, -3868,   356,
    3449, -3868,  1064, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868,  1664, -3868,  4193,  4193,
   -3868, -3868, 12139, -3868,  3766,  3335, 12139, 12139, -3868, 12139,
   -3868,   238,  3201,  3195, -3868, -3868, -3868, -3868, -3868, -3868,
    3209, -3868,  3204,  3205, -3868, -3868, -3868, 12139, -3868, -3868,
    4193, -3868, 12139, -3868, -3868, 12139, -3868, -3868, 12139, 12139,
   -3868,  1646, -3868,  1650, -3868,  1655, -3868, -3868, -3868,  1210,
    3208,  3554, -3868, -3868, -3868,  1210,  3357, -3868, -3868,  1210,
    2595,  2588, -3868, -3868,  1018, 48766, -3868, -3868,  2030, -3868,
   -3868, 12139, -3868, -3868, -3868, -3868, -3868, -3868,  3544,  3807,
   -3868,  3396, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, 48766,
    1060,  3206, 33460, 37758, 37758, 37758, 15364,  1415,  3678, -3868,
   -3868, -3868,  3525,  3564, -3868,   794, -3868, 48766,  3212,   189,
   -3868,  2038, -3868, -3868,  3213, -3868,  2207,  3192, -3868,   131,
   15364,  3012,  3321, -3868, -3868,  1522, 25986, 32836, -3868, -3868,
   48766, -3868,  3633,  2442, 37758, 37758, 37758,  2615,  3624,  3067,
    3067, -3868, 29710, -3868, -3868,  3346, -3868, -3868, 34084, -3868,
   -3868, -3868, -3868, -3868, -3868, 29084, 45092, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868,  -164,  3686,  3451,  1494,  2596, -3868,
     973, -3868,  1159, -3868,  3608,  3609,  1159, -3868, -3868, -3868,
   25986,  2816, 15364, -3868,  2207,  1415,  3215,   323, -3868,  -122,
   12139, 26596, -3868, -3868, -3868,  3218, -3868, -3868,  3740,  3743,
   -3868, 26596,  2758, 48766, -3868,  3167, -3868, -3868, -3868,  3316,
   -3868,  6362, -3868, 25986, -3868, -3868, -3868, -3868, -3868, 48766,
   -3868, 24766, -3868, 19828, -3868,  3224, -3868,  3066,  3066,  3066,
   -3868, -3868, -3868,  3068, -3868,  3072,  3463, -3868,  3072,  3072,
   -3868, -3868, -3868, -3868, -3868,   356,   427, -3868, -3868,   356,
   -3868, -3868, -3868,   186,  1524,  3072, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868,  3066,  3068,  3068, -3868, -3868,   356,  3066,
   -3868,  3066,  2626, -3868,   286,    80,  3066,  3066,  3066,  3225,
    3219, -3868,  1415,  4193,  3793, -3868, -3868,  3378,  -164,  3735,
   -3868,  2110, -3868,  3232, -3868, 47546, -3868,  2595,  1931, -3868,
   -3868, -3868, -3868,  3376,   935, -3868,  3405,  3235,  3236, -3868,
   -3868,  -164,  3238,  3240,  5511, -3868, -3868, -3868,  3859, -3868,
   48766, 48766, 48766,  2939, -3868,  3620,   842,  3837,    -9,  1415,
    3243,  3244,  3245,  3246,  3856,   203, -3868,  3867, 40212, -3868,
   -3868, -3868,  3268,  2116,  3271,  3272,  1661, -3868,   236,  3273,
    1703,  1032,  2122,  3589,  3667, -3868,  3503, -3868, -3868,  3546,
    3549,  1734,  1262,  1739,  1775,  1814,  1836, -3868, -3868, -3868,
   -3868, -3868,  3286, -3868, -3868,   198, -3868,  3283,  1520,    94,
   -3868, -3868,  2132, -3868, -3868,  3757,  3656, -3868,  3729, -3868,
   -3868, -3868,  -117,  -117,  -117,  1812,  1415,  2137, -3868, -3868,
   -3868, -3868,  3695, -3868, -3868,  3291,  3423, 48766, -3868,  3370,
   -3868,  2588, 25986, 15364,  3295,  3290, -3868,  1027, -3868, -3868,
    3287, -3868, -3868, 37758,  2442,  2442,  2442, -3868,  3888,  3730,
   -3868, -3868, 40822,  3296, -3868, -3868,  3611, -3868, -3868, -3868,
   -3868,  -164,  3786, -3868, -3868, -3868,  2866,  2553,  3344,  1159,
    1159,  2806,  3345, 12139, 12139,  3305, -3868,  3433, -3868, -3868,
     832,  2588, 12139, -3868,  1210,  3370, -3868,  1854,  3306,  3307,
   48766,  3310,  3311, -3868,  3158,  1446, -3868, -3868, -3868, 24766,
    2626,  1077, -3868, -3868,  3147,   932,  3312, -3868, 48766,  3643,
   -3868, -3868, -3868, -3868,  1269, -3868,  3314,  1269,  1269, -3868,
    2362, -3868,  3342,   356, -3868, -3868,  3348, -3868, -3868, -3868,
    1269,  3318,   356, -3868, -3868, -3868, -3868,  1269, -3868, 40822,
    2022,  -164,  3108, -3868,  3361, -3868,  3840,  1063,  3706, -3868,
    2626, -3868,  3710,  3603, -3868,   356, -3868, -3868,  3930, -3868,
     356,  3930,  1269,  3604, -3868,  1269, 48766, -3868, -3868, -3868,
   -3868, -3868, -3868, 48766, -3868,  1193, -3868, -3868, -3868,  2164,
    -164, -3868, -3868, -3868,  3322,  3323, -3868, -3868, -3868,   309,
   -3868, 48766,  6362, -3868, -3868, -3868,  3308, -3868,  1215,  2179,
     323,  3326,  2192,  2197, 36538, -3868, -3868, 12139,  3922, -3868,
   -3868,  3327, -3868,  8914, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, 40212, -3868,  3930, -3868,  3612, -3868, -3868, -3868, 12139,
   -3868, -3868, -3868, 12139, -3868, -3868,  3641,  3804,  3928,  3929,
   -3868, -3868, -3868, -3868, -3868, -3868,  3334, -3868,  2595,  1403,
    1403, -3868, -3868, -3868, -3868, -3868,  3605,   441,  3358,  3358,
    3358, -3868, 15364,  3733,  3437, -3868, -3868,  3339,  3384, -3868,
   -3868,  1520, -3868, -3868, -3868, -3868,  2442, -3868, -3868,  3433,
    2387, -3868, 29710, -3868, -3868,  -164,  1018, -3868,  3390, -3868,
   -3868, -3868,  3392,  1415,  1415, 48766,  3620, -3868,  1115,  1520,
     323, -3868,  2199, -3868, 48766, 48766,  2214, 48766, 48766,  2868,
    2870,  2873,  2185,  2185, -3868, -3868, -3868, -3868, -3868, -3868,
    3751, -3868, -3868,  2216, -3868,   909,  3625, -3868, -3868, -3868,
   -3868,  1269, -3868,   236, -3868, -3868, -3868, -3868, -3868,   236,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
    3637,  3391, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868,  3352, -3868, -3868,  3472, -3868, 54978,
   -3868, -3868,  1266,  3377, -3868, -3868, -3868, -3868,  1538, 48766,
   24766,  3431,  3540, -3868,  3167, -3868,  1027,    56,  3321, -3868,
     874, 48766, -3868,  3638,   156,   240, -3868,  1664, 12139, -3868,
   11494,  3539, 12784,   809,  1058, -3868, -3868, -3868,  3356,  3364,
     323,  1886, -3868, -3868, 12139, 12139, -3868,  3363, -3868, -3868,
   -3868,  3446,  3455, -3868, -3868,  3456, -3868, -3868,   141,  2176,
   -3868, -3868, -3868, -3868,  3420, 24766, 16654,  3475, 48766,  1597,
    2952, -3868, 12139, 12139,  2615, 37148, -3868, -3868, -3868, -3868,
   12139,  3372, 12139,  3373,  2219, -3868, -3868, -3868,  1760,  1760,
   -3868,  1115, -3868, -3868, -3868,  2264,  2279,   874,  2301,  2317,
   -3868, -3868, -3868,  1446,  3374, -3868, 48766, -3868, -3868, -3868,
     307, -3868, -3868,  2319, -3868,  2323, -3868, -3868, 12139,  3854,
    3402, 48766,  1036, -3868, 56226, 56226, 48766, -3868, -3868, -3868,
   -3868,  5923, -3868, -3868,   747, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868,  3986, -3868,  3368, -3868,
   -3868,  1266,  3380, -3868,  1263, -3868,  2244, -3868, -3868,  6362,
    3832,  1005, -3868, -3868, -3868, -3868, -3868,  3381,  2244,  -164,
     131, -3868,   874, -3868, -3868, -3868,   323,  3383,  3634, -3868,
     156, -3868, -3868, -3868,   240, -3868, -3868,  1085,   323,  4009,
   -3868,  4193, -3868, -3868, -3868, -3868, -3868, 12139, -3868, -3868,
    2328,  2389, -3868, -3868, -3868, -3868, -3868,   382,  3657,  2595,
    2595,  2595,  2595,  2176, -3868, 25986,  2832, -3868,  1210, -3868,
    2394, -3868, -3868, -3868,  3476,   131,  3897,  3898,   131,   131,
     131,   131,  3393,  2952, -3868,  3878,  1554,   323,  1415,  3623,
   -3868,  3968,    94,  1415, 48766,  1415, 48766, -3868,  3852,  3852,
   -3868,  3610,   874, -3868,   156,   240, -3868,  3370, -3868,  1132,
    1132,   356,   236,   356,  1415, 12139, -3868, 12139,  3439, -3868,
   -3868,  3862, 48766, -3868, -3868, -3868, -3868, 12139, -3868, 54978,
   54978, -3868, -3868, -3868, -3868,  4014, -3868,  3414,  1027,  3994,
    3684,  3997, -3868,  3227, -3868, -3868,  3721,  6362, -3868, -3868,
   -3868,  2595,  1197, -3868, -3868, -3868,  1986,  1197, -3868,  1197,
   -3868, 12139, -3868, -3868,  3701, 11494,   815,   323,  3209,  3209,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868,  3422, -3868,   131,
   -3868,  3424, -3868, -3868, 48766,  3438, -3868,  -164,   131,   131,
    2193,  2193,  1210, 40822,  3543, -3868, -3868,   131, -3868, -3868,
   12139, -3868, -3868,  4056, -3868,  1308,  3809, -3868,  2400,  2406,
    1190, -3868, -3868, -3868, -3868, -3868, -3868,  2408, -3868,  4076,
   -3868,   242,  3716,  3719, -3868, -3868, -3868,  1415,  1415, -3868,
     290, -3868, -3868,  3857,  3943, 12139,  1415, 51858,  3461, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, 55602, 12139, -3868,   747,  3986, -3868, -3868,  3724,
   -3868,  3725, -3868, -3868, -3868,  3965, 54978, -3868,  3972, -3868,
    1027, -3868, -3868, -3868, -3868, -3868,   323,  1669, -3868, -3868,
   -3868, -3868, -3868, -3868, 25986, 15364,  2387, -3868,  3475, -3868,
    3470, -3868, -3868,   -24, -3868,  -164,  -164, -3868, -3868, -3868,
   -3868, -3868,  2417, -3868, 40822,   323, -3868,  4068,  4069,  3970,
    4070,  1308, -3868,  -127, -3868, -3868, -3868,  4078, -3868,  4079,
    3485,  3486, -3868, -3868, -3868, -3868,  3536,  4005,  3516, 12139,
   54978, -3868,  3983, -3868,  3912,  1415,  3860,  3492, -3868,  3491,
    1415,  4018, 56226, 56226, -3868, -3868, -3868, -3868,  4000, -3868,
   -3868, -3868,  3701, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
    2426, -3868, 16009, -3868, -3868, -3868, -3868, -3868, 40822, -3868,
    3543, -3868, -3868,  3504,   236,   236,  4100,   236, -3868,  4102,
    4107,  -127, -3868, -3868, -3868, 47546, 47546,  1132,  1132, -3868,
     297, -3868,  1415, 52482,  4103, 48766, -3868,  3599, -3868, -3868,
   12139,  4019, 42042, 53106,  3512, -3868, -3868, -3868,  3712, -3868,
    3227, -3868,  3715, -3868,  3470, -3868,  3541, -3868,  2714,  2952,
   -3868, -3868,  3820, -3868, -3868,   236, -3868,   236,   236, -3868,
    3545,  2432, -3868, -3868, 12139, -3868,  4039,  3628, -3868,  3547,
   -3868, 54978,  1415, 54978, -3868, -3868,  3985,  3551,   320, -3868,
    3548, -3868, -3868, 54978,  3973,  3968, -3868, 16009,  3556, -3868,
   -3868,  3557,  3553, -3868, -3868, -3868, -3868, -3868,  1415,  4149,
   54978, 48766, 49986,  4055, 53730,  4020, 48766,  6362,  4021,  4031,
   -3868, 54978, -3868,  4159,  3809, -3868, -3868, -3868,  3820,  3649,
   -3868, 50610, -3868,  2519,  3774,  3606, -3868, -3868,  4101,  2076,
   -3868, -3868,   236,  3998, -3868, 54978, 54978, -3868, -3868, -3868,
   -3868, 34708, -3868, -3868, -3868, -3868, -3868,  1131, -3868,  3861,
    3583, 51234, 54354, -3868, -3868, -3868, 31588, -3868, -3868, -3868,
    4038, -3868, 12139, -3868,   822, 21048,  3746, 34708, -3868, -3868,
    1415, -3868, -3868, -3868, -3868, 40822,  2447, -3868, -3868, 25986,
   -3868, -3868, -3868, -3868, 24137,  3591, -3868,   131, -3868, 25986,
   -3868, -3868, 15364, -3868, -3868
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3868, -3868, -3868, -3868, -3868,   184, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868,  1935, -3868, -3868, -3868, -3868, -3868,
    2124, -3868,   769, -1844, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868,   773,  1733,  3594, -3868,   506,
   -3868,   165, -3868, -3868, -3868, -2986,    36,  -163, -3868, -3868,
     784,    21,  3293,  -165, -3867, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868,   521,   518, -3868, -3868,   335, -3868,
   -3868, -1411, -3868, -3868, -3868, -3868, -3868, -3868, -3868,  -343,
    -302,  1927, -3868, -3868, -3868,  4228, -3868,  3699, -3868, -1754,
    2440, -3868, -3868, -3868, -3868, -3868,  2501, -1691, -3868, -3868,
   -3868,  1462, -3868, -3868, -3868, -3868,  -767,   363, -3868,   366,
   -3868,   367, -3868,   371, -3868,   372,   373,   375,   377, -3868,
     378, -3868, -3868,  -293, -3868, -3868, -3868, -3868,   379, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868,  -167, -3868, -3868,    -1,
   -3868, -3868,  -157,   391, -3868,  -101,   394, -3868,   395, -3868,
      -7, -3868,   -10, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868,  3317, -3868, -3868, -3868,
   -2085, -3868, -3868, -2438,  2843, -3868, -1783, -3868, -3868, -1935,
   -3868, -3868, -1794,  1223, -3868, -3868,  1541,   931, -3868, -1404,
   -1907, -1851, -3868, -3868, -3868, -1990, -1987, -1379, -1228, -2265,
   -3868, -3868, -3868,   384, -3868, -3868, -2611,  2263,  2846, -3868,
   -1991, -3868, -3868,  1296, -3868, -3868,  1480,   749,  1479, -3868,
    1053,  3042, -1237, -3868, -3868, -3868, -3868, -3868, -3868,    87,
     347,   -23, -3868, -3410,   757, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -2658, -3868, -3868, -3868,  -185, -3868, -3868,
     -96, -3868, -3868,  -144, -3868,   193, -2335, -3868, -3868, -3868,
   -3868,  2808, -1354, -3868,  3835, -3868,  -556,   867,  2300, -2444,
   -1407, -3868,  -893,  -886, -2516, -3868, -3868, -3868, -3422,  1253,
    1681, -3868,   962,  2296, -1924, -3868,  1761, -3868, -3868,   990,
   -3868, -2744, -3868, -3868, -3868,   943, -3868,   946, -3868, -3868,
   -3868,  -765,   915, -2567,  1728,  -536, -3868,   484, -2594, -2552,
   -3868,   717, -3868,   670, -3618, -2485, -3868,  -570, -2114, -2426,
      13, -3868, -3868,   682, -3203,  1887, -3868, -3868, -3868, -3175,
   -1724,  1600, -3868, -3868,  1157, -3868, -1440,  1156, -3868, -3868,
   -3868,  1166, -3868,   207, -3868, -3868, -3868, -3868, -2942, -3868,
   -3868, -1464, -2024, -3868, -3868,  4370,  4371, -1006, -2761, -2587,
     209,   211, -3868, -3868, -3868,  2840, -2393,   296,   280,   291,
    2248,  -859,   453, -2423, -3868,   503, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868,  2336,  -835, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -2464, -2457, -3868, -3868,  1804, -3868, -3868, -3868,
   -1977, -1435, -1428, -1816,  -471, -2202, -3419, -3868, -3868, -3868,
   -3868, -3868, -3868,  2969, -3868, -3868, -3868, -3868, -3868,  3817,
   -3868,  2970, -3868, -3868, -3868, -3868, -3868, -3868, -3868,   748,
    2021, -3868, -3868, -3868, -3868, -3868, -3868,  1034,  2876, -3868,
   -3868, -3868,   -11, -3868, -3868, -3868, -3868,  2575, -3868, -3868,
   -3868, -3868,  2925, -3868, -3868, -3868, -3868, -3868, -3868,  1577,
   -3868,  2064, -3868, -1446, -3868, -3868,  1143,  -952,  2016,  3822,
    2148, -3868, -3868,  -580, -3868, -3868, -3868, -1660, -2468, -3868,
    3550, -1081, -2371,  2570,  -647, -1831,  1683,  -405,  3151, -3868,
   -1117, -1059, -3868, -3868,  -636, -3868, -3868, -3868,  -618, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868,  1684, -2001, -3868, -3868,
   -1180,     1, -3868,   317, -3868, -2809, -3712, -3868, -3868, -3868,
   -3868, -3868,  3226, -1031, -3868, -3868, -1187, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868,  1561, -3868,  2252, -3868,  -421, -3868,
   -3868, -3868,  3336, -3868, -3868, -3868, -2364, -1964,  1954,  1097,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -1547,
   -3868, -2391, -3868, -3868, -3868, -3868, -3868,  2169, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -1716, -3868, -1916,   273, -3868,
     430, -3868, -3868, -3868, -3868, -3868, -3868, -3868,   -12,   979,
      -4, -2860, -1056,  1962, -3868, -3868, -1250,  -752, -2363, -3868,
   -3868, -3868,  2160, -3868, -3868, -3868, -3868, -3868, -3868,  1072,
   -2960,  3010, -3868, -3868, -3152,  -846, -2281,  -847, -3868, -2378,
     612, -1722, -1788,  -445, -1162, -2422, -3868, -3868, -3868, -3868,
     -98, -3868, -3868, -3868,   629,  2056, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868,  -535,  -787, -3868,
   -3868,  2316,  2460, -3868,  3257, -3868, -1017,  3508, -3868, -3868,
    3513, -3868, -3868, -3868, -3868,  3198,  3202,  2123, -3868, -3868,
   -2292, -3868, -3868,  2083, -3868,   893,  -869, -1832,  1186, -3868,
   -3868,  1188, -3287, -3868, -3868,  3517, -3868, -3868, -3868,  1129,
   -3868,   130,  3900,  3523, -3868, -3868, -3868, -3868, -3868, -3868,
    2921, -1025,  3824, -3868, -3868, -3868, -3868, -3868, -3868,  2569,
   -3868, -3868, -3868, -3868, -3868, -3868,  3105,  3914,  -572, -1259,
   -3868,  -740,  3092,  2571,  -844, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
    2728,  1101, -3868, -3868, -3868,  3207, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868,  1221,   -28, -3868,   118,   -54, -3868,    51,
   -3868, -3868, -3868, -3868, -3868,  -121, -3868, -3868,  -120, -3868,
    -931, -1356,   816, -1219, -2056, -3868,  1216,  3210, -2843,  -671,
   -1132, -1130, -1965,   212, -3868, -3868,  2985,  1357,    81,  1056,
    -206,    -6, -2522,  -114,  -579, -3868, -2601, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868,  2085, -3868, -3868, -3868,  1189,
   -3868,  3936, -3868,  2828,  1203,  3955, -3868, -1326,  2657,  2112,
    2111, -3868, -3868,  2120, -2016, -3868, -3868,   157, -3868,  2722,
   -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868,  2697,  3687,  3216, -3868,
    2741, -3868, -3868, -3868, -3868, -3868,   416, -3868,   271, -3868,
   -2551,  3017,   515, -3868,  1286,  -447,  -689, -3868, -3868,   411,
   -3868, -3868,  1424,  3976,  3691, -3868, -3868, -3868, -3868, -3868,
   -2807,  -840, -3868, -3483, -2857, -1675, -3868, -3868, -2193, -3089,
   -3868, -3868, -1014, -3868, -3868, -3868, -3868, -1975, -3868, -3868,
   -3868,   128,  4041,  4042, -3868, -3868,  -169, -3868,   565, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868,   478,   825, -3868, -3868,
    3906, -3868, -3868, -3868, -3868,  3907, -3868, -3868, -3868, -3868,
   -3868,  3908, -3868, -3868, -3868, -3868, -3868,  2142, -3868, -3868,
   -3868, -3868, -3868, -3868, -3868, -3868
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2663
static const yytype_int16 yytable[] =
{
     492,  1025,  1033,  1011,   924,   884,   920,  1451,   618,   535,
    1354,  1357,  2149,   534,  1684,   953,  1685,   542,  1340,   554,
    1369,  2411,  2271,  1773,  1565,   561,   556,   490,  2080,  1458,
    1904,  2365,   968,   568,  1632,  1096,   571,  1555,  1556,  1810,
     568,  1878,  3008,  2571,  2077,   983,  2062,   586,  1054,  2637,
    1388,  1382,  1707,  2063,  2863,  1772,  2714,  1659,  1818,  1715,
    2951,  2716,  3298,  2832,  3119,  3628,  1596,  1973,  2914,  2915,
    3339,  1463,  1388,  1416,  2052,  2961,  1417,  2528,  1464,  2790,
    2313,  1655,  1656,  2938,  2461,   135,  3455,  2395,   607,  3004,
    2522,  2918,  1974,  2961,  2961,  2600,  1994,  1041,  1994,   788,
    1000,  1003,  3009,  2929,  3825,  2815,  3357,  1951,  2980,  1986,
     610,  2939,   492,  3707,  3145,   492,   617,   623,  1717,  1718,
    2485,  2486,  1721,  1722,  1723,  1724,  2886,  1726,  1727,  1729,
    1731,  1732,  1733,  1734,  1735,  3549,  2121,  2497,  1911,   612,
    2657,  1194,   614,  2658,  3148,  1277,  2523,  1152,  1153,  1154,
    1161,  1162,  1433,  3139,  2515,  2516,  1921,  3146,  4126,  2304,
    1195,  2126,  1161,  1162,  1924,  1925,   499,  3495,  1813,  2131,
    2536,  1824,  3648,  2539,  2540,   637,  2542,  2499,  2720,  2545,
    2546,  1418,  3212,  2549,  2646,  3321,   553,  2537,  2558,  2691,
    2406,  2541,   560,  2562,  2563,  2564,  2565,  2566,  1750,  1421,
    2575,  2570,  2556,  2572,  2735,  3633,  2518,  -472,  2737,  2581,
    2582,  2583,  2584,  3097,  2567,  2588,  3240,  2590,  3212,  3365,
    2678,  2961,  2961,  2654,  3769,  3852,  3866,  2479,  2304,  1219,
    4089,  2751,  2752,  3121,  1371,   540,   817,  2758,  2974,   115,
    3669,  3674,  4115,  1975,  3675,  3676,  2278,  1995,   546,  1995,
    2965,  2966,  3368,  2770,  2771,  1350,  2327,   628,  2510,  2398,
    1303,   891,   875,  3685,  1161,  1162,  1277,  2168,  3634,  3706,
     834,   943,  3260,  1004,  1161,  1162,  1070, -1569,  3485,  2655,
    3523,  1278,  2641,  2642,  2643,  2644,  1350,  1356,  3213,   629,
    4433,  2786, -2546,  3309,  2808,   658,  3823,  1161,  1162,  3164,
    2258,  2805,  2671,  1210,  2805,  1286,   606,  3504,  1460,  2403,
    1161,  1162,  2127,  1969,  4089,  1586,  1161,  1162,  2446,  3505,
    1161,  1162,  3442,  3303,  3213,   842,  3127,  1527,  3129,  3011,
   -2018,  3807,  3070,  3506,  1794,   595,  2576,  1161,  1162,  -901,
    1139,  2317,   652,  3384,   891,   875,  4333,  1161,  1162,  2661,
     117,  1143,  1568,  1283,   659,  2404,   928,  1386, -2610,   549,
    1161,  1162,  4394,  2611,   134,  2614,  2615,  3758,  1161,  1162,
    1568,  2625,  2626,  2068,  1545,  1546,  1547,  3504,  3090,  3091,
    2634,  2635,  2679,  1425,  2739,  2639,  1161,  1162,  3286,  3505,
     134,   642,  1460,  4449,  1821,  1987,  3575,  2141,  2897,  3991,
     136,  4548,  1278,  3506,  3012,  1548,  4090,  2773,  1595,  1161,
    1162,  3759,  1460,  3221,   891,   875,  2905,  1161,  1162,  2898,
    4549,  2142,  1096,  -567,  1161,  1162,  4450,  4012,  2165,   820,
     495,  2279,  4179,  2774,  2969,  4400,  1549,   929,  1822,  2880,
    3576,  1528,  4400,  -568,  3971,  1529,   944,  2318,  3504,  3385,
    1161,  1162,  1393,  4085,  2899,  1486,  3760,  1530,  1298,  1398,
    3505,  4214,  1650,  1426,  2697,  1650,  1650,  1161,  1162,  1947,
   -2610,  1434,  3071,  2328,  3506,  1569,  2399,   917,  3354,   550,
    1161,  1162,  1040,   843,  2235,   891,  3670,  1161,  1162,  2069,
    4090,  1873,   660,  1584,   633,  1947,  1161,  1162,  3886,   617,
     596,   623,  3486,  3971,  1944,  3013,  1287,  3890,  3102,  1163,
    2983,  2662,  1164,  1161,  1162,  1140,  3307,  3308,   802,  3635,
    1161,  1162,   623,  2912,  4350,  3983,  1544,  2974, -1569,  2879,
    3909,  2806,  3310,   815,  2806,  3911,  1712,   617,  2781,   825,
     835,  1422,  2259,  3343,  1161,  1162,  2428,  1906,  1161,  1162,
    1909,  1791,   838,  1650,  2555,  1913,  3364,  2937,  1211,  3366,
    3367,  1467,  1720,  2305,  1161,  1162,  1198,  1973,  1463,   885,
    3293,  1774,  2986,  1005,  3375,  1464,  2990,   940,  2602,  1741,
    3524,  1926,  1927,  3030,   547,  1351,  1621,  1372,  1531,  1622,
    3006,  3007,  1974,  2521,   818,   957,  2447,  3369,  3942,  4339,
    1949,  4395,  3020,  3639,  4176,   617,   646,   972,  3062,   819,
    1994,  2329,  2522,  4333,  2329,  3103,  1351,  4429,   617,   607,
     492,  3214,  1773,  1163,  2250,   607,  1164,   998,  3972,   607,
     607,  2600,  2305,  1163,  1012,   972,  1164,  3650,  3192,   617,
   -2046,  1579,  1580,  2280,  2680,  2052,  1463,   985,  3241,  1042,
    1043,  1044,  2975,  1464,  1772,  1049,  1163,  3214,  3471,  1164,
    2281,  2657,  1620,  2454,  2658,  1021,  2288,  3846,  2523,  1163,
   -1569,  1634,  1164,  2961,  1423,  1163,  3489,  2291,  1164,  1163,
    2294,  1923,  1164,  1647,  1648,  1649,  1753,  3972,  3322,  1532,
     810,  1209,  3802,  1986,  1658,  3132,  1163,  1424,  4013,  1164,
    1097,  1161,  1162,  -472,  2963,  2285,  1163,  1825,  2600,  1164,
    3092,   830,  3562,  3563,  3564,  2121,  3001,  3155,   841,  1163,
    3157,  3136,  1164,   856,  3126,  4328,  2653,  1163,  2968,  3010,
    1164,  4084,  2300,  3174,  2967,  3175,  1161,  1162,  2109,  1814,
    2126,   941,  2132,  1975,  2654,  1163,  2577,  3999,  1164,  2887,
    2928,  2659,  1525,  3594,  3595,  3596,  3196,  1812,  2947,  1951,
   -2546,  1995,  1165,  3494,  1158,  1355,  1160,  4287,  1163,  1360,
    1365,  1164,  1831, -1569,  1165,  4098,  1163,  1858,  1039,  1164,
    2274,  3483,  1385,  1163,  1161,  1162,  1164,  3770, -2546,  3850,
     945,  3677,  3973,  1203,   492,  1205,  3215,   972,   492,   617,
    2655,   492,   617,  3660,  3661,  3378,  3235,  1248,  4118,  1163,
    3222,  3145,  1164,  1282,  3145,  3145,  1910,  3095,  2989,  1887,
    2991,  1204, -1846,   607,   569,  1208,  1163,  3002,  1218,  1164,
    3470,  3145,  2178,   617,   607,  -901,  3663,   984,   607,  1163,
    1795,  3015,  1164,   995,  1450,  3686,  1163,  3662,  3026,  1164,
    3705,  3708,  3710,  3711,  3089,  1163,  2175,  4421,  1164,  1141,
    3042,  3044,  3046,  1161,  1162,  1933,  3047,  3683,  3684,  3994,
    3507, -1569,  1163,   617,  2976,  1164,  1165,   617,   617,  1163,
     551,  3682,  1164,  3358,  1161,  1162,  1165,  3324,  3087,  3687,
     617,  2127,  1161,  1162,  3704,  1953,  3712,  1969,  2166,  4180,
    1999,  2176,  2660,  1163,  2837,  4299,  1164,  1163,   624,  1165,
    1164,  1394,  4459,  1525,  1300,  3581,  3647,  3975,  1399,  -567,
    1161,  1162,  1165,  1163,  2260,  3654,  1164,  3136,  1165,  4568,
   -2183,  2944,  1165,   607,  1161,  1162,  3960,  2236,  3638,  -568,
    3507, -2205,  1692,  1693,  4224,  4082,  1692,  2196,  4089,  1165,
    2700,  3618,   617,  3363,  1459,  3622,  4234,  2863, -1846,  1165,
    3974,  1161,  1162,  2239,  2240, -2323,  2202,  1161,  1162,  1241,
   -2046,  2603,  1165,  2256,  2257,  3104,  3975,  2913,  3617,  1987,
    1165,  1792,  3621,  3631,   607,  4004,  2795,  2796,  3627,  2417,
    1161,  1162,  2137,  4112,  3161,  3162,  1161,  1162,  1165,  4112,
    1161,  1162,  1986,  3588,  1413,  4272,  4294,  1429,  4296,  2432,
    1196,  3507,  3168,  3169, -2475,  3278,  3485, -1529, -1846,  3344,
    3345,  1165,  1161,  1162,  1440,  1210,  3597,  4199,  2379,  1165,
    1934,  3671,  3440,  1969,  1935,   607,  1165,  1623,  3377,  1561,
    1624,  1289,  3826,  3194,  3195,  1702,  1161,  1162,  1161,  1162,
    3230,  3231,  1306,  2977, -1529,  1588,  1312,  1568,  1965,  1523,
    1163,  2522,  1165,  1164,  3283,  1022,  3976,  2448,  4426,  2981,
    2981,  1388,  2450,  1097,  1161,  1162,  2251,  2453,  3332,  1165,
    2456,  2457,  1740,  1161,  1162,  4351,   578,  1097,  4611,  3500,
    1904,  1904,  1165,  3193,  1973,  1163,  1161,  1162,  1164,  1165,
    4027,  1388,  2484,  2379,  1161,  1162,  2657,  2156,  1165,  2658,
     500,  2421,  1161,  1162,  2174,  2521,  1568,  2523,  3301,  1974,
    2293,  1161,  1162,  2182,  4090,  1165,  2528, -2475,  2313,  1775,
    2693, -1846,  1165,  2851, -2046,  3937,   933,  3074,  1994,  2157,
    1686,  4109,  2733,  1163,  3614,   536,  1164,  2183, -1873,  4157,
    1161,  1162,  3075,   617, -2476,  1293,  1165,  2062,  1294,   579,
    1165,  1210,  1161,  1162,  2063,  3731,  2794,  2358,  1161,  1162,
    1774,  2189,   986,  2303,  3732,  2194,  1165,  1161,  1162,  3528,
    1639,  3500,  4288,  3902,  1823,  2052,  2742,  1178,   846,  2654,
     617,  2195,  4200,  2034,  4422,  1745,  2919,  3903,  1196,   917,
     607,  1161,  1162,  1161,  1162,  1986,  1969,  3897,  2002,  3374,
    2323,  1966,  4113,  1027,  1035,   607,  1161,  1162,  4113,  2307,
    1463,  1210,  1163,  4442,  1023,  1164,  4190,  1464,  3839,  3840,
     545,  1441,  1736,  2799,  2800,  2556,  1097,   617,  4293,  1643,
    3486,  2121,  4112,  1163,  2037,  2655,  1164,  2653,  2375,  2376,
    3501,  1163,  2271,  1552,  1164, -1873,  2585,  1559,   558,  1685,
   -2183,  1869,  1430,  1894,  2397, -2662,  2126, -2476,  2793,  4212,
    1975, -2205,  2659,  1799,  4237,  1802,  2380,   607,  2803,  1163,
    1211,  4219,  1164,  1161,  1162,  3108,   607,  4612,  1987,  1995,
    2286, -2610,   617,  1163,   645, -2323,  1164,  4028,   581,  2847,
    4006,   607,   607,   847,  4278,  4277,  4279,  1524,  3591,  2352,
    1295, -2396,  2517,  1165,  4209,   808,  3733,  1414,  4069,  1197,
    1163,  1161,  1162,  1164,  4210,  1895,  1163,  2359,  2198,  1164,
    1845,  1870,   934,  3502,  1210,   917,  1589,  4007,  1853,  1161,
    1162,  1854,  3501,   839,  2942,  4633,  1685,   130,  1165,  1163,
     617,  2380,  1164, -1874,  1955,  1163,  1161,  1162,  1164,  1163,
    1874,   885,  1164,  2210,  4201,  1806,  2422,  1161,  1162,  1548,
     492,   492,   492,   607,   492,   607,  3946,  1161,  1162,   848,
    1905,  1163,  3904,  1181,  1164,  4191,  1907,   492,  4346,   617,
    3272,  2360,   492,  4387,  3773,   917,  1165,  1888,  1889,  1890,
    1550,  1892,  4029, -2610,  3109,  1163,  2600,  1163,  1164,  1969,
    1164,  2222,   607,  3939,  1908,  4036,  1211,  2127,  1747,  1912,
    2361,  3540,    13,  2660, -2183,  3513,  4349,  4375,  2600, -1529,
    4173,  1161,  1162,  1163,   131, -2205,  1164,  3024,  4388,  1685,
    1737,  2586,  1163,  4069,  4069,  1164,   580,  2592,  2141,  1933,
    2197,  2353,  1884,  2381,  3059,  1163,  4377,   859,  1164, -2323,
   -1874,  4113,   617,  1163,  1738,   570,  1164,  4378,   583, -1873,
    2027,  1163,  2142,   617,  1164,  1165,  1211,  2197,   607, -2475,
    1163,  2073,   607,  1164,  3756,  1161,  1162,  4289,  2362, -2396,
    2226,  1987,  1161,  1162,  1695,  1312,  1165,  3337,  3547, -1873,
    1525,  1161,  1162,  1568,  1165,  3759,  1846,  1197,   917,  1163,
   -2475,  2227,  1164,  2981,  1896,  4502,  4503,  2468,  2169,   607,
    1312,  1163,  4194,  4195,  1164,  1161,  1162,  1163,  2381,    25,
    1164,  1525,  1165,  4211,  1161,  1162,  1163,   961,   617,  1164,
     492,   492,  1871,  2139,   492,  1863,  1165,  2229,  3503,  2267,
    3760,  4101,  4105,  3338,  1485,  1985,  1049,   630,  2155,  2903,
    1163,  2230,  1163,  1164,  2521,  1164,  4389,  2135,  2136,  4160,
    1650,  2363,  1014,  1165,  1708,  1163,  2666,  -206,  1164,  1165,
     860,  1986,   598,  1161,  1162,  4284,  4290,  2555,  2234,  1211,
    2882,  1891,  3110,  1893,  2252,  1161,  1162,  2667,  4069,  4069,
    1161,  1162,  1165,  4087,  1551,  1161,  1162,    43,  1165,  1969,
    1161,  1162,  1165,  1338,  1934, -1873,  4291,  3166,  1935, -2476,
    1859,  1161,  1162,  3167,   599,  3060,  1672,  3187,  2934,  1847,
    1922,  1097,  2203,  1739,  1165,  1933,  2472,  1161,  1162,  2935,
    3503,  2308,  1163,  1161,  1162,  1164,  1860,  1161,  1162,  3198,
   -2476,  2469,  2354,  1773,  1161,  1162,   861,  3956,  1165,  1696,
    1165,  3348,  1161,  1162, -1873,  3128,  1161,  1162,  2798,  3921,
    2470,  1161,  1162,  3199, -1874,  3783,  2883,  1161,  1162,  3558,
    1163,  2471,  4379,  1164,  3229,  1772,  1165,  1190,  1191,  1192,
    1193,  2385,  2653,   601,  3353,  1165,  2070,  2277,  1163,  3111,
    2075,  1164,  4431,  1544, -1874,  4435,  4069,  4101,  1165,  2173,
    2403,  4105,  4008,  4159,  2268,  1163,  1165,  2659,  1164,  1161,
    1162,  4069,  2184,  1864,  1165,  3289,  1163,  1685,  4231,  1164,
    2185,  1161,  1162,  1165,  1207,  4069,  1163,  1210,  2193,  1164,
    2298,  2416,  3921,    37,   625,  3087,   617,  2206,   607,   617,
    1161,  1162,  1009,  1010,  3048,  1161,  1162,  1161,  1162,  1709,
     607,  3877,  1165,  1076,  2472,  1248,  1986,   821,  3731,   962,
    1248,  2727,    55,    43,  1165,  3543,  2207,  3732,  1022,  3545,
    1165,  4101,  4105,   617,  1386,  1969,  2364,  3068,  2211,  1165,
    1163,  1161,  1162,  1164,  2218,  1131,   963,  1601,  3178,  4069,
    1934,   607,  2954,  2219,  3554,   607,  4020,  4021,  1861,  2750,
    3553,  4069,  4069,  1165,  1135,  1165,  2114,  2763,  1054, -1846,
   -1874,   617,   617,   607,   607,  2837,  4526,  2225,  1165,  2228,
    1161,  1162,  1006,   587,  3922,  1097,  4143,   617,  2961,  2961,
    3069,  2936,  2231,   608,  1163,  1199,  3851,  1164,  4423,   617,
    1077,  1163,  1161,  1162,  1164,   822,  3938,  4144,  4441,  3878,
    1163,  4380,  4069,  1164,   884,   611,   885,  1987,  2660, -1874,
    1161,  1162,  4069,  3179,  2271,  2810,  4022,   496,   613,   588,
     497,  2445,  1132,  2473,  1163,   986,  1389,  1164,   626,    52,
    4476,  4476,  3349,  1163,  1969,  1165,  1164,  2197,   117,  1605,
    3879,  1136,  1161,  1162,  3791,  2765,  2374,  4071,  1316,  2243,
    4069,   917,  4069,  1210,  2649,  1007,  2296,   607,  2955,  3733,
    1161,  1162,  4069,  4424,  2297,   823,  2296,   559,   633,  2467,
    2525,  2767,   634,  1165,  3318,  1390,   607,  1023,    55,  4069,
     637,  4069,  1163,  4069,   639,  1164,  2618,  2262,  1502,  1503,
    4069,  1165,   589,  2474,  1163,   862,   863,  1164,   865,  1163,
    4069,   868,  1164,  2441,  1163,  3131,   565,  1164,  1165,  1163,
    1969,  1710,  1164,   565,  4069,  4069,   869,  3000, -2662,  1165,
    1163,   641,  3152,  1164,  3910,   655,  2078,  3912,  1711,  1165,
    4069,  4069,  1211,  3160,  1375,  4069,  1163,  2910,  2385,  1164,
    1878,  1986,  1163,  3163,  1606,  1164,  1163,   653,  1609,  1164,
    2619,  2079,  1956,  1163,  2647,  1610,  1164,   496,  2663,  2350,
     497,  1163,  1210,  1289,  1164,  1163,  1957,   656,  1164,  1340,
    1163,  1009,  1010,  1164,  1976,  2170,  1163,  2488, -1768,  1164,
    2587,  1306,  2378,  1165,   508,  2552,  2495,  2496,   644,  3957,
     803,  2114,  1987,  1376,  2601, -1768,  1355,  2500,  2501,  2502,
    2503,  1355,  2511,  2512,  1388,  3327,  1161,  1162,  3341,   806,
    1388,  3328,   657,  3352,  3496,  3329,  3967,   798,  1163,  2171,
    1198,  1164,  2468, -1768,  1377,  2078,   975,   917,  3615,  2150,
    1163,   813,  2115,  1164,  2988,  1518,  1519,  1165,  1210,  1611,
   -1768,   816,  3514,  3515,  1165,   859,  2692,  2620,  2283,  1163,
    2079,  3170,  1164,  1165,  1163,   827,  1163,  1164,  3176,  1164,
    3018,  3019,   617,  2801,  2387,  2388,   617,  3184,  2664,  3678,
   -1846,   492,  3679,  1986,  3532,  2455,   976,  1165,   607,   607,
     607,  2687,  3893,  1977,  2690,   831,  1165,   891,   875,  2649,
    1163,  3185,  3370,  1164,  2478,   833,  1613,  1952,  2669,   851,
    3186,  2791,   853,  3292,   617,  3894,  1685,  2613,  1211,   617,
    2613,  2613,   955,  2613,  4268,  4269,  2613,  2613,  2613,  2613,
    2613,  2613,  2613,  2114,   843,  2613,  3382,  2613,  2814,  1163,
    2621,  1958,  1164,  2504,  3388,  1165,   917,  4270,  3390,  1476,
    1477,  1774,  3895,  1178,   255,  1969,   257,  1165,   590,  3188,
     956,  1163,  1165,   958,  1164,   819,  2469,  1165,  2942,   977,
    1685,  3191,  1165,  2172,  1198,   965,  3197,  1178,   860,  1163,
     591,  3200,  1164,  1165,   974,  2470,  3202,  4352,  4353,  1542,
     996,  2114,  1178,  1015,  3463,  4342,  2471,  3204,  2553,  1165,
    4344,  3024,  4345,  1685,  1781,  1165,  1016,  2505,  4221,  1165,
     986,  1163, -1846,  3206,  1164,   592,  1165,  2554,  1959,   617,
    2190,  1198,   917,  3207,  1165,  3285,  1020,  1211,  1165,  1163,
    3208,  2649,  1164,  1165,  2199,  1198,  2506,  1987,  3537,  1165,
    1051,  2811,  3538,  1960,  1178,  1614,   617,  3539,  3156,   115,
    2114,  1378,   688,  3778,   861,  2324,  4251,  1198,  2325,  2498,
    2359,  2326,  1616,  4257,  1978,  2820,  4260,  4261,  4262,  4263,
   -1846,  2826,  2826,  1979,  2826,   593,  1277,  2115,  1052,  2472,
    1053,  1165,  1980,  1210,  1400,  1055,  1782,  1969,  1056,  2704,
    1057,  1783,  2525,  1165,  1201,  3782,  3034,  1060,  3035,  1061,
    4252,  2845,  1062,  1211,  2507,  2114,  2683,  2684,  2685,  1961,
    3641,  3642,  1165,  1401,  1202,  2705,   693,  1165,  1063,  1165,
    1064,  2416,  1355,  1065,  2360,  3228,  3790,  4128,  2200,  1637,
     945,  3792,  1206,  2868,  1223,  1784,  1066,  2871,   502,  3036,
    2212,  1198,  2826,  2826,  2826,  1969,  1067,  3717,  1904,  1181,
    1785,  1284, -1569,  1165,  2891,  2622,  2893,  4242,  4243,  4244,
    4245,  1402,  3037,  2706,  1068,  1403,  2707,  3793,  1071,  1987,
    3583,  2213,  1198,  1181,  2708,  3865,  4365,  4366,   885,  1981,
    2214,  1198,  1073,   978, -1846,  4374,  1074,  2508,  1181,  1379,
    1905,  1905,  1165,  1075,  2814,   891,   875,  1108,  2473,  3038,
    3289,  1078,  1685,  1079,  1969,  1962,  3794,  2552, -1569,  2115,
    1380,  3135,  1278,   705,  1165,  1210,  2216,  2217,  3128,  1080,
    1686,  2956,  1130,  3865,  4369,  2223,  1198,   503,  3795,   617,
     617,  1081,  1165,  4129,  4130,  1144,  1145,  2271,  4131,  4132,
    1181,  2890, -1569,  1082, -1569,   119,  3853,  2078,  -653,  4341,
    1285,  1381,   979,   115,   980,  2513,  2514,   917,  2525,  1969,
   -1569,  -857,  2783,  1198,  1165, -1569,  2973,  2115,  2474,  1178,
    2601,  2526,  2079,  1210,  1083,  2601,  1982,  2987,  4119, -1569,
    2985,  2601,  1165,  2997,  1084,  2601, -1569,  2996,  1085,  2825,
    2825,  1086,  2825, -1569,  4168,  4169,   722,  2996,  1087,  2601,
    2601,  1088,   617,  2996,  2957, -1569,  1091,  3021,  3017,   504,
    1092,  2601,  3029,  1686,  1301,  1404, -1569,  1098,  3032,  3033,
    1099, -1569,   607,  1100,  2359,  1101,  2115,  1102,  1183,  1184,
   -1569,   564,  1210,  2996,  3189,  1198,  1103,  3780,  1211,  4250,
    2601,  3058,  1104,  1183,  1184,   116,  2116,  3258,  3259,  2828,
    1105,  2829,  3084,   862,   863,   864,   865,   866,   867,   868,
    2825,  2825,  2825,  1106,   117,  1277,  1572,  1573,  1574,  1109,
    3096,  3295,  3296,  -653,   869,  1110,  2998,  2999,  1585,   503,
    1111,  2115,  3752,  3753,  3299,  3300,  1112,  1210,  2360,   917,
    3664,  1405,  1113,  3667,  3668,  1183,  1184,  1114,  2468, -1569,
    2709,  3688,  2509,  3028,  1115,  2116,  3466,  3467,  1116,  1640,
    3680,  1117,  1644,  2078,  4576,  4577,   607,  2601,  1118,  2875,
    2876,  2877,  3551,  1198, -1569,   255,  1119,   257,  1120,  2554,
    3578,  3579,  1121, -1569,  1122,   118,  1668,  1669,  2079,  1123,
    1673, -1569,  1124,  2504,  3689,  1125,  3025,   917,  3690,  3039,
    3691,  1188,  1189,  1190,  1191,  1192,  1193,  1406,  1687,  1688,
    2116,  1126,  2504,  1127,   119,  1181,  1128, -1569,  3968,  3969,
    1211,  1313,  3088,  1186,  1187,  1188,  1189,  1190,  1191,  1192,
    1193,   949,   950,  2891,   951,  2956,   952,  1129,  1186,  1187,
    1188,  1189,  1190,  1191,  1192,  1193,  3692, -1569,  3522,  2117,
    -653,  1278,  3722,  3723,  1133,   884,   917,  2505,  3766,  3775,
    2525,   753,  1134,  2385,  3784,  1198,   120,   505, -1569,  2958,
    1137,  2386,  1138,  2526,  3803,  1198,  2505,  1142,  1211,  3811,
    3812,  3856,  2469, -1569,  4120,  4121,  2506,   506,  1146,  4322,
    3031, -1569,  1188,  1189,  1190,  1191,  1192,  1193,  2710, -1569,
    1147,  2470,  4634,  1148, -1569,  2506,  3925,  2514,  2117,  1149,
    3552,   917,  2471,  1248,  1150,  1527,  1151,   617,  2957,  1200,
    2890,  3940,  3941,  1407,  1315, -1569,  2527,  1335,  3738,   607,
    1338,   507, -1569,  -573,  3944,  3941,   508,  1211, -1569,  3945,
    3941,  4014,  3579,  1341, -1569,  -653,  1346,  2845,   617,  2504,
    1178,  1686,  3041,  1347,  2507, -1569,  4017,  3941,  4025,  4026,
   -1569,  4167,  3300,  2117,  1408,  1370,  1097,  2711,   617, -1569,
    1183,  1184,   509,  2507,  1366,  -653,  1374,  -826,  3243,  1386,
     510,   503,  3317,  1395,  3113,  1396,  1355,  3244,  1397,  2387,
    2388,  1412,  1211, -1569,  1415,  2472,  2712,  3245,  1419,  1317,
    1420,  2468,   121,  1428, -1569, -1569,  4171,  3941,  1318,  3246,
    3247,  3248,  1431,  2505,  1436,  2078,  2504,  1432,  1319,  3043,
    3837,  4172,  3941, -1569,  2645,  3249, -1569,  2847,  2389,  1528,
    1320,  1321,  1322,  1529,  1435,  3771,  1438,  2508, -1569,   506,
    2079,  1178,  2506,  4174,  3941,  1530,  1323,  1443,  2504, -1569,
   -1569,  3045,  4034, -1569, -1569,  1448,  2508,  1460,  4034,  4175,
    3941,  4181,  4182, -1569,  1466,  4183,  4182,  1502,  1503,  3316,
    4238,  4231, -1569,  2601,   122,  1468,  2601,  2601,  1009,  1010,
    2505,  2996,   800,   801,  1470,  3693,   804,   805,  1473,  4463,
     807,  1474,   809,  3694,   617,  4015,  4016,  2601,  4018,  4019,
    1478,  3330,  3331,  4249,  3333,  1685, -1569,  1479,  1177,  2506,
    2507,  1480,  2505,  1483,  2473,  2996,  1187,  1188,  1189,  1190,
    1191,  1192,  1193,  2996,  -653,  1484,  4145,  2996,  1487,  2005,
    2006,  4239,  4231,  2958,  3695,  2469,  4253,  4254,   123,  1488,
   -1005,  2506,  4385,  3300,  2224,  1489,  1181,  3271,  4386,  3300,
    4392,  3579,   521,  3394,  2470,  4236,   607, -1569,  4146,  4439,
    4440,  3450,  -791,  -791,  2008,  2471,  1536,   492,  4483,  4484,
    1537,  3460,  -791,  2996,  4537,  3465,  1531,  2507,  2011,  1538,
   -1569,  1541,  3376,  1543,  2474,  1544,  2012,   124,  3469,  4623,
    4624,  3380,  1562,  2508,  3456,  1675,  1676,  -653,  4367,  4368,
    4542,  3480,  4544,  3600,  3601, -1846,  3696,  1564,   607,  2507,
    2014,   522,  1196,  1178,  1518,  1519,  3809,  3810,  1568,  3493,
    3981,  3982,  1575,  1587,  1460,  1590,  1636, -1569,  2015,  4561,
    2158,  3884,  3885,  1626,  1637,  1638,  1666,  1181,  1683,  1694,
    1719,  1725,   523,   667,  3888,  3250,  2332,  1703,  2472,  1746,
   -1395,  3891,  2509,  1749,  1751,  1752,  3697,  2020,  1758,  1755,
    2508,  1762,  3251,  1759,  4591,  4592,  1324,  1760,  3986,  1761,
    2333,  2509,  1763,  3841,  1178,   524,  3913,  1532,  4147,  3915,
    3472,  1764, -1569,  1325,  1765,  2334,  2458,  2459,  2460,  1777,
    1776,   506,  2508,   667, -1569,  1778,  2335,  1780,  3605,  1786,
    2204,  1183,  1184,  1788,  2208,  1789,  1797,  1798,  1808,  1811,
    1819,  1827, -1569,  3698,  1828, -1569,  1179,  1829,  3859,  3550,
    1830,  1834,  4249,   525,  1685,   688,  1837,  1840,  1841,  1843,
    2024,  1849,  1844,  2237,  1879,  1855,  1340,  2025, -1569, -1569,
    1180,  1882, -1569, -1569,  1886,  2336,  2337,  1914,  1340,  1915,
    1916,  4295,  1917,  2820,  2026,  1919,  1282,   617,   617,   617,
    3995,  4148,  1928,  1931,  1945,  1954,  2000,  2473,  3859,  2065,
    1222,  2845,  1525,  2338,  3395,   688,  -653,  3171,  2082,  4149,
    3252,  2083,   692,  2084,  2085,  2086,  2087,  2088,  2089,   693,
    2868,  3590,  1183,  1184,  3592,  2090,  3253,  2091,   617,   617,
     617,  1956,  4150,  2092,  2093,  2094,   617,  2095,  2509,  1181,
    2096,  2097,  2811,  2028,  2098,  1957,  2099,  1326,   698,   885,
     885,  1168,  1169,  2100,  2101,  2102,  3482,  2103,  2104,  1009,
    1010,  2029,   692,  2105,  2106,  2107,  3947,  2474,  2108,   693,
    2339,  2128,  2110,  2129,  1686,  2147,  1186,  1187,  1188,  1189,
    1190,  1191,  1192,  1193,   -64,  2601,  4332,  3254,  2134,   526,
    1170,  2144,  2145,  2159,  2146,  2601,  2153,  2996,   698,  2161,
    1181,  1171,  2180,  4488,  3255,  2509,  2162,  1686,  1327,  2163,
    4355,  2179,  2181,  2996,  2186,   607,   705,  2601,  2033,  2187,
    2188,  2197,  2201,  2191,  1355,  1328,  2035,  2205,  2340,  2209,
    2272,  2220,  2221,  2232,  2233,  2238,  2253,  2509,  2241,  1182,
    1172,  2242,  2254,  2255,  2276,  3610, -1223,  2282,  4155,  1193,
    2292,  1173,  1076,  2295,  1131,  2217,  2309,  1135,  2321,  2320,
    2351,   527,  2343,  2357,  2371,  2368,   705,  1186,  1187,  1188,
    1189,  1190,  1191,  1192,  1193,  2396,  2616,  2617,  1174,  2624,
    2393,   716,  2627,  2628,  2629,  2630,  2631,  2632,  2633,  3084,
    2412,  2636,   719,  2638,  1183,  1184,  2418,   721,  4488,   722,
    2041,  2419,  2420,  4618,  2442,  1685,  2423,  1185,  2424,  2449,
    1958,  2481,   917,  2425,  3751,  3751,  3751,  4627,  3831,  1685,
    4206,  2426,  4618,  2427,  1685,   528,  2444,  4627,  4151,  1685,
     529,   716,   617,  2005,  2006,   796,  2463,  2476,  2483,  2477,
    2480,  2487,  1175,  4493,  4494,  2494,  4496,   721,   530,   722,
    2489,  2525,  2547,  2490,  2491,  1183,  1184,  2042,  2043,  2044,
    2492,  2493,  2548,   796,  2045,  2524,  -791,  -791,  2008,  3719,
    4407,  2550,  2538,  2543,   531,  2551,  -791,  2557,  2561,  2544,
    2046,  2559,  2011,  2047,  2560,  4407,  2569,  1959,  2608,   532,
    2012,  2604,  3743,  2568,  4533,  2610,  4534,  4535,  4337,  4417,
    2573,  3819,  2579,  2574,  2580,  2416,  1686,  4335,  2589,  1009,
    1010,  4155,  1960,  2648,  2014,  2670,  2688,   617,  2692,  2696,
    2049,  2697,  2703,  2718,  2722,  2721,   617,  2723,  1460,  2297,
    2734,  2736,  2015,  2740,  2743,  2744,  2757,  2782,  2789,  1186,
    1187,  1188,  1189,  1190,  1191,  1192,  1193,  2819,  2797,  2818,
    2823,  2838,  2835,  2841,  2840,  2848,  2852,  2854,  2872,  2873,
    2849,  2020,  2874,  1814,  3751,  4603,  2404,  2403,  2895,  2896,
    3869,  4588,  1863,   607,  1864,  2920,  2916,  3120,  1961,  2921,
    2853,   796,  3874,  2858,  2923,  2924,   796,  1355,  2906,  2922,
    2930,  2932,   745,  2931,  2948,  2952,  3860,  2953,  3067,  3861,
    1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,  2970,   751,
    3003,  3005,  3077,   617,   753,  3093,  3073,   796,   754,  3079,
    3094,  3098,  3834,  3099,  3100,  3101,  4407,  2034,  3125,   826,
    2154,  3133,  3147,   796,  2024,  3149,  4520,  3136,  3182,  3140,
    3916,  2025,   745,  3142,  3183,  3233,  3860,  3920,  3605,  3861,
    3150,  3151,  3153,  3154,  3209,  3219,  3225,  3234,  2026,   751,
    3220,  3223,  3227,  3232,   753,  3480,  3236,  3261,   754,  3266,
    3263,  2672,  3862,  3863,  1962,  3262,  3268,  3273,  1905,  3264,
     796,   796,   796,   796,  3276,  3265,  4552,  3277,  4630,  3280,
    1293,  3291,  3302,   796,  3294,   617,  3304,  3305,  3297,  3314,
    3306,  3315,  3896,  3323,  3334,  4407,  3335,  4407,  3319,  3342,
    3320,  3346,  3350,  3347,  4571,  3360,  3995,  2028,  3361,  3362,
    3373,  3451,  3862,  3863,  4407,  3458,  3462,  2385,  3454,  3457,
    3383,  3475,  3476,  3481,  3391,  2029,  3379,  3393,  3497,  1947,
    3512,  3926,  3517,  3518,  3526,  2259,  3214,  2027,  2002,  3556,
    3569,  3571,  1058,  3593,  4407,  4407,   617,  3598,  3392,  4608,
    1496,  3465,  3606,  3464,  3468,  3582,  3484,  3490,  3491,  2871,
    3492,  3611,  3560,  3525,  4335,  3529,  3530,  3612,  3751,  3751,
    3541,  3751,  3751,  1090,  3574,  3580,  3619,  3620,  3632,  3640,
    3643,  3867,  2033,  3644,  3649,  3658,  3713,  3665,  3716,  1107,
    2035,  2602,  3718,  3720,  3726,  3730,  3739,  3740,  3747,  3741,
    3744,  1355,  3745,  3757,  3754,  3764,  3765,  3766,  3767,  3768,
    1497,  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,
    3772,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,
    3774,  1516,  1517,  3776,  3777,  3781,  3998,  4155,  3785,  1155,
    3786,  3787,  3788,  4079,   607,  3789,  3798,  3804,  3797,  3805,
    3806,  3814,  3815,  3812,  3827,  3751,  3318,  3824,  3828,  3832,
    3833,  3835, -1481, -1486,  2041,  4600,  3845,  3854,  3855,  3875,
    3704,  3857,  3858,  3900,  3872,  3883,  3887,  3905,  1225,  3889,
    3901,  3907,  3908,  3707,  3927,  3914,  3928,  3943,  3948,  3949,
    3962,  4600,  3963,  3958,  3964,  3965,  3966,  3979,  3970,   607,
    3988,   796,  4142,  4632,  3984,  3985,  3989,  4024,  4001,   617,
    4003,   719,  4030,  4038,  4037,  3775,  4074,  4083,  4116,  4097,
    4123,  2042,  2043,  2044,  4185,  4122,  4110,  4117,  2045,  4124,
    4125,  4138,  4135,  4164,  4166,  4177,  4203,  -346,  4205,  4215,
    4178,  4226,  4208,  4218,  2046,  4225,  4235,  2047,  4258,  4259,
    4241,  4267,  4256,  4273,  4264,  4189,   796,   796,  4275,  4280,
    4196,  3062,  1518,  1519,  -364,   796,   796,   796,   796,   796,
     796,   796,  4302,  1226,  4299,  4329,  4327,  4330,  4331,   796,
     796,  4347,   796,   796,  2049,  4354,  4357,   796,   796,  1225,
    4376,   796,   796,   796,   796,  4383,   796,   796,  1227,  4360,
    4371,  4393,  1228,  4396,   796,   796,  4397,   796,   796,   796,
     796,   796,  4404,  4403,  4416,   796,   796,  4414,  4415,   796,
     796,   796,   796,   796,   796,   796,   796,   796,  4408,   796,
    4419,  4429,   796,   796,  4444,  4445,  4447,   796,  4446,  2673,
    1229,   796,   796,   796,  4453,  4454,  4455,  4456,  4457,  1686,
    4458,  4459,  4464,  4466,   796,   796,   796,  4472,  1230,  4469,
    4468, -2378,  4080,   796,  4478,  4492,  4495,  1495,  4497,  4370,
     796,   796,   796,  4498,   796,  4508,  4511,  4513,  2871,  4521,
    2871,   796,   796,   796,  1226,   796,   796,   796,   796,   796,
    4220,   796,   796,   796,   796,   796,   796,   796,   796,  4522,
    4524,  4530,   796,   796,  4527,  4540,  4303,  4536,  4539,  1227,
    4541,  4545,  4553,  1228,  4546,  4550,  4558,  4136,  4556,  4557,
    1231,  4560,  1566,  1567,  4564,  4572,  4575,  4566,  4569,  1161,
    1162,  1577,  1578,  1249,  1250,  1581,  1582,  1583,  4570,  4579,
    4589,  4582,  4604,  4580,  4605,  1591,  1592,  4609,  1593,  1594,
    4619,  1229,  2640,  1619,  4629,  4198,  3728,  1628,  1629,  1630,
    1631,  3729,  1633,  1032,  2816,  3931,  4216,  2964,  4142,  1230,
    1641,  1642,  4338,  1645,  1646,  4480,  4479,   617,  3929,  3933,
    2814,  1653,  1654,  4078,  4621,  1657,  1472,  4584,  1660,  1661,
    1662,  1663,  1664,  1665,   577,  1667,   927,  2316,  1670,  1671,
    2394,  3257,  4049,  1674,  4593,  4050,  4052,  1677,  1681,  1682,
    4053,  4055,  4056,  4505,  4057,  1251,  4058,  4059,  4060,  4401,
    1689,  1690,  1691,  4506,  1597,  1598,  1599,  1600,  1601,  1699,
    4063,  1231,  4477,  4064,  4065,  4412,  1704,  1705,  1706,  4413,
    1998,  4086,  2593,  3387,  4490,  3817,  1252,  2050,  3279,   796,
    3573,  1540,  3284,  4137,  1232,  4428,  3820,  1817,  4364,   796,
    1253,  4359,  4555,  1233,  4491,  4529,  4266,  2113,  1686,  1742,
     654,  3746,  2591,  3473,  3118,  3657,  2598,   796,  1234,  3672,
    3064,  3645,  3673,  1254,  3714,  4032,  1255,  3868,   617,  4427,
    3906,  3892,  2950,  3544,  3211,  3546,  1235,  3542,  4283,  1256,
    2001,   517,   518,  4285,  4230,  2002,  4286,  2003,  4223,  2004,
    2682,  4228,  4035,  2143,  4096,  2595,  3052,   938,  1930,  2005,
    2006,  1932,  1257,  3871,  2377,  2855,  3646,  1602,  1603,  1604,
    1605,  2111,  3270,  2074,  2836,  3570,  2788,  2878,   954,  2402,
    1236,  1345,  3177,  4481,  4233,  3181,  1744,  1258,  2717,  1635,
    2007,  2943,   617,  1259,  2008,  2009,  2787,  3616,  1331,  1250,
    2010,  4170,  4282,  4500,  3727,  1232,  4436,  4437,  2011,  3084,
    3084,  1237,  4501,  2804,  1233,  3652,  2012,  1948,  4005,  4510,
    4574,  3997,  2885,  2686,  1748,  2013,  4518,  1452,  2834,  1234,
     496,  2861,  1453,   497,  1260,  3822,  1454,  3586,  3585,  3626,
    2014,  1805,  1455,  2152,  4425,   942,  1050,  1235,  2451,  1898,
     923,  2452,  3656,  2310,  1460,  1851,  3572,  4554,  2015,  4448,
    4573,  4622,  4499,  4628,  1920,  1857,  2016,  2017,  3899,  4631,
    1832,   887,  3589,  2018,  3608,  1606,  2904,  1607,  1608,  1609,
    1251,  2019,  1839,  1885,  1250,  -931,  1610,  2020,  2275,  3609,
     888,  1236,  2430,  2356,  2901,  4562,  2902,  2894,  2021,  2331,
    4567,  2400,  1334,  4240,  4246,  3557,   857,  1842,  1337,  4207,
    3924,  1252,   648,   649,  1852,  1036,  1037,  1038,     0,  2022,
     796,  2133,  1237,     0,     0,  1253,     0,     0,  1163,     0,
       0,  1164,     0,     0,     0,  4601,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1254,     0,
       0,  1255,     0,     0,     0,     0,     0,     0,  2023,  1686,
    2024,  4601,     0,     0,  1256,  1251,     0,  2025,     0,   617,
    1611,     0,  1261,  1686,     0,     0,  1262,     0,  1686,     0,
       0,     0,     0,  1686,  2026,     0,     0,  1257,     0,     0,
       0,     0,  1263,     0,     0,   796,  1252,     0,     0,     0,
    1264,     0,     0,     0,     0,     0,     0,  2027,  1265,     0,
    1253,     0,  1258,     0,     0,     0,     0,     0,  1259,     0,
       0,     0,     0,   796,   796,   796,  1612,  1613,     0,     0,
       0,     0,     0,  1254,     0,     0,  1255,  1266,   796,     0,
       0,     0,     0,  2028,     0,     0,     0,     0,     0,  1256,
    1267,  1268,     0,     0,     0,     0,     0,     0,     0,  1260,
       0,  2029,     0,     0,   796,  2030,     0,     0,     0,     0,
     796,     0,  1257,   796,     0,   796,     0,     0,     0,     0,
       0,   796,     0,   796,   796,     0,  2164,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1258,     0,     0,
       0,  1269,     0,  1259,     0,  2031,     0,     0,     0,     0,
    2032,     0,     0,     0,     0,     0,     0,     0,  2033,     0,
       0,     0,     0,  2034,     0,     0,  2035,     0,     0,     0,
    1270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1260,     0,     0,     0,     0,     0,
       0,     0,     0,  1271,     0,  1272,     0,     0,     0,     0,
    2036,  2215,     0,     0,     0,     0,  1614,     0,     0,   796,
       0,     0,     0,     0,  2037,  2038,  2039,  2040,     0,     0,
       0,  1165,  1615,  1616,     0,     0,     0,     0,     0,  2245,
    2247,  2249,     0,  2005,  2006,     0,     0,  1261,     0,     0,
    2041,  1332,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1263,   796,     0,
       0,     0,     0,     0,     0,  1264,   796,     0,  2008,     0,
    2284,     0,     0,  1265,     0,     0,     0,     0,     0,  2289,
       0,  2290,  2011,     0,     0,     0,     0,     0,     0,     0,
    2012,     0,     0,     0,     0,     0,     0,  2042,  2043,  2044,
       0,     0,  1266,     0,  2045,     0,     0,  1597,  1598,  1599,
    1600,  1601,     0,     0,  2014,  1267,  1268,     0,   834,   890,
    2046,     0,  1261,  2047,     0,     0,     0,     0,  1460,     0,
       0,     0,  2015,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1263,   891,   875,     0,  2048,     0,     0,     0,
    1264,     0,     0,     0,   892,     0,     0,     0,  1265,     0,
    2049,  2020,     0,     0,     0,     0,  1269,     0,     0,     0,
       0,     0,     0,     0,     0,  2373,     0,   893,     0,   894,
       0,     0,     0,     0,     0,     0,     0,  1266,     0,   895,
       0,     0,     0,     0,     0,  1270,     0,     0,     0,     0,
    1267,  1268,     0,     0,     0,     0,     0,     0,     0,     0,
    1602,  1603,  1604,  1605,     0,     0,     0,     0,  1271,     0,
    1272,  -931,     0,     0,  2429,     0,     0,     0,     0,     0,
       0,     0,  2439,     0,  2024,     0,     0, -1846,   896,     0,
       0,  2025,     0,   897,     0,     0,   898,     0,     0,     0,
       0,  1269,     0,     0,     0,     0,     0,     0,  2026,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,   899,     0,   900,     0,
    1270,     0,     0,     0,     0,   901,     0,   902,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1271,     0,  1272,     0,     0,     0,     0,
     903,   904,     0,     0,     0,     0,     0,  2028,  1606,     0,
    1607,  1608,  1609,     0,     0,     0,     0,     0,     0,  1610,
       0,     0,     0,     0,   905,  2029,     0,     0,     0,     0,
       0,   796,     0,     0,     0,   796,     0,     0,     0,     0,
     796,   796,     0,     0,     0,   906,     0,     0,     0,   796,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   796,   796,     0,   796,   796,     0,   796,
     796,   796,   796,   796,     0,     0,   796,     0,   907,     0,
       0,     0,  2033,     0,     0,   796,     0,     0,     0,     0,
    2035,     0,     0,     0,     0,     0,     0,   796,     0,   796,
       0,   796,   796,  1611,   796,   796,     0,     0,     0,   796,
     796,   796,     0,     0,     0,   796,   796,   796,     0,   796,
       0,   796,     0,   796,  2609,   796,     0,   796,     0,     0,
       0,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   908,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,     0,     0,   796,  1612,
    1613,   796,     0,     0,  2041,     0,     0,   796,     0,     0,
       0,   796,     0,   909,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   910,   911,     0,     0,   912,   913,
       0,     0,     0,     0,     0,     0,     0,  2695,     0,     0,
       0,  2699,     0,     0,     0,     0,  2701,  2702,     0,   914,
       0,     0,     0,     0,     0,  2715,     0,     0,     0,     0,
       0,  2042,  2043,  2044,     0,     0,     0,     0,  2045,  2724,
    2725,     0,  2726,   796,     0,  2728,  2729,  2730,  2731,  2732,
       0,     0,     0,     0,  2046,     0,     0,  2047,     0,     0,
       0,  2738,     0,     0,     0,     0,   915,     0,     0,     0,
       0,     0,     0,  2745,     0,  2746,     0,  2747,  2748,   916,
    2749,     0,     0,     0,     0,  2754,  2755,  2756,     0,     0,
       0,  2759,  2760,  2761,  2049,  2762,     0,  2764,     0,  2766,
       0,  2768,     0,  2769,     0,     0,     0,     0,  2772,  1614,
       0, -2415,     0,     0,     0,   917,     0,   796,     0,     0,
       0,   796,     0,     0,     0,  1615,  1616,  2792,     0,     0,
       1,     0,     2,   918,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2802,     0,     0,     0,     3,     0,     0,
       0,     4,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     5,     6,     0,     0,     0,
       0,     0,     0,     7,     0,     0,     0,     8,     9,     0,
       0,     0,  2962,     0,     0,     0,     0,     0,     0,     0,
       0, -2415,     0,    10,     0,     0,     0,   919,     0,     0,
    2962,  2962,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    11,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3050,     0,     0,
       0,     0,  2002,    12,  2003,     0,  2005,  2006,     0,     0,
       0,     0,    13,    14,    15,     0,  2005,  2006,     0,     0,
       0,     0,     0,     0,     0,    16,    17,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    18,  -791,
    -791,  2008,     0,     0,     0,     0,     0,  2007,     0,  -791,
       0,  2008,    19,  2439,     0,  2011,     0,     0,     0,     0,
       0,     0,     0,  2012,     0,  2011,     0,     0,     0,     0,
      20,     0,     0,  2012,     0,     0,     0,     0,     0,     0,
       0,     0,  2013,     0,     0,     0,    21,  2014,    22,     0,
       0,     0,     0,    23,     0,     0,    24,  2014,  2962,  2962,
       0,  1460,     0,     0,     0,  2015,     0,     0,     0,     0,
       0,  1460,     0,     0,     0,  2015,     0,     0,     0,    25,
       0,    26,     0,  2016,     0,     0,     0,     0,     0,     0,
    3051,     0,     0,     0,  2020,     0,     0,     0,  2019,    27,
       0,     0,     0,     0,  2020,     0,     0,     0,     0,   796,
       0,     0,     0,     0,     0,   796,    28,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,  2022,   796,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2024,   796,     0,
       0,     0,     0,     0,  2025,     0,     0,  2024,   796,     0,
     796,     0,   796,     0,  2025,     0,     0,     0,     0,     0,
       0,  2026,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2026,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,   796,     0,    30,     0,
       0,     0,     0,     0,  2027,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
    2028,     0,    32,     0,     0,     0,     0,     0,     0,     0,
    2028,     0,     0,    33,     0,     0,     0,     0,  2029,     0,
       0,     0,     0,     0,     0,  3130,     0,     0,  2029,     0,
       0,  3134,  2030,     0,     0,    34,     0,     0,    35,     0,
      36,     0,     0,    37,     0,     0,    38,    39,     0,     0,
       0,     0,     0,  3158,  3159,     0,     0,    40,     0,    41,
       0,     0,     0,     0,     0,     0,     0,    42,   796,     0,
       0,     0,     0,    43,     0,  2033,     0,  2032,     0,     0,
       0,    44,     0,  2035,  3190,  2033,    45,     0,    46,     0,
       0,     0,     0,  2035,  3201,     0,  3203,     0,  3205,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,     1,     0,     2,    47,
       0,     0,     0,     0,     0,     0,    48,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     4,     0,     0,
       0,     0,  2038,     0,     0,     0,     0,     0,     0,     0,
       0,     5,     6,     0,     0,     0,     0,  2041,     0,     7,
       0,     0,  3267,     8,     9,     0,     0,  2041,     0,    49,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    10,
       0,     0,    50,     0,     0,     0,    51,     0,     0,    52,
       0,     0,     0,     0,    53,     0,     0,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2042,  2043,  2044,     0,     0,    12,
       0,  2045,     0,    54,  2042,  2043,  2044,     0,    13,    14,
      15,  2045,     0,     0,  2439,   796,   796,  2046,    55,     0,
    2047,    16,    17,     0,     0,     0,     0,  2046,     0,     0,
    2047,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2962,     0,     0,     0,     0,     0,     0,     0,    19,     0,
       0,     0,     0,     0,     0,     0,     0,  2049,     0,     0,
    3355,     0,     0,     0,     0,     0,    20,  2049,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,    21,     0,    22,     0,     0,     0,     0,    23,
       0,     0,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,     0,
       0,   796,   796,     0,   796,    25,     0,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   796,     0,     0,    27,     0,   796,     0,     0,
     796,     0,     0,   796,   796,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,  3452,  3453,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3499,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,  3516,     0,     0,     0,  3520,  3521,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,     0,     0,     0,     0,   796,  3531,    33,
       0,     0,     0,  3533,     0,   796,  3534,     0,     0,  3535,
    3536,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,     0,    35,     0,    36,     0,     0,    37,
       0,     0,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,    41,     0,     0,     0,     0,
       0,     0,     0,    42,  3396,  3397,     0,     0,     0,    43,
    3398,     0,  3399,     0,  3400,  3401,     0,    44,     0,     0,
       0,     0,    45,     0,    46,     0,     0,  3566,     0,     0,
       0,  3402,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3566,     0,     0,     0,    47,     0,     0,     0,     0,
       0,     0,    48,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3403,
       0,     0,  3404,     0,     0,     0,     0,     0,     0,     0,
    3405,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    49,     0,     0,     0,  3406,
       0,     0,     0,  3566,     0,     0,     0,     0,    50,     0,
       0,  3637,    51,     0,     0,    52,  3407,     0,     0,     0,
      53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3408,     0,  3409,     0,     0,     0,     0,    54,
       0,     0,     0,     0,     0,     0,     0,     0,  3410,  3411,
       0,     0,     0,     0,    55,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3412,
       0,     0,     0,     0,     0,     0,     0,     0,   796,   796,
       0,     0,     0,     0,     0,     0,     0,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3413,
       0,     0,     0,     0,     0,     0,     0,     0,  3414,  3415,
       0,  3416,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3417,  3418,  3419,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3420,  3421,  3422,     0,
       0,     0,     0,  3423,     0,     0,  3424,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3425,  3426,     0,     0,     0,
       0,     0,     0,     0,  3566,     0,     0,     0,     0,     0,
       0,     0,   796,     0,     0,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3427,  3428,     0,   796,     0,     0,     0,   796,     0,
       0,     0,     0,     0,  3843,  3844,     0,     0,     0,     0,
       0,     0,     0,  3355,     0,     0,     0,  3429,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3430,     0,     0,     0,  3431,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3432,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4067,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3954,     0,     0,  3433,     0,     0,
    3434,     0,     0,  3435,  3436,  3437,  3438,     0,     0,     0,
    3355,     0,     0,   796,  3961,   796,     0,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3566,     0,     0,  3439,  3440,     0,     0,
       0,   796,     0,     0,     0,     0,     0,   796,   796,     0,
       0,     0,     0,     0,     0,   796,     0,   796,     0,     0,
       0,     0,  3441,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   796,     0,     0,     0,     0,     0,  4067,
    4067,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3355,
       0,  3954,   796,  4111,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3355,  3355,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3355,  4158,     0,     0,     0,     0,     0,
       0,  4163,     0,  4165,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   796,     0,  4067,  4067,     0,     0,     0,  4184,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4343,     0,     0,     0,     0,   796,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3355,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,  4067,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4067,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4067,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4297,     0,  4298,     0,
     796,     0,     0,     0,     0,     0,     0,     0,  4306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3355,     0,   796,  4067,  3954,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4067,  4067,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,     0,
       0,  3355,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4067,     0,
       0,     0,     0,     0,     0,   796,  4405,     0,  4067,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4410,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
       0,     0,     0,     0,     0,     0,  4067,     0,  4067,     0,
       0,     0,     0,     0,     0,     0,  3566,     0,  4067,     0,
       0,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4067,     0,  4067,     0,  4067,
       0,     0,     0,     0,     0,     0,  4067,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4067,     0,     0,     0,
    4462,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4067,  4067,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4067,  4067,     0,     0,
       0,  4067,     0,     0,     0,     0,     0,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,     0,
       0,  4512,     0,     0,     0,     0,     0,     0,     0,   137,
       0,   663,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   664,     0,   146,   147,   148,
     149,   665,   151,     0,   152,  4538,     0,   666,   153,   667,
     668,   669,   154,   670,     0,   155,   156,   157,  1678,   158,
       0,   159,   160,     0,     0,   161,   671,   672,   162,   163,
       0,   164,   673,   674,   166,     0,   167,   168,   169,   170,
     675,   172,     0,   676,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   677,   190,     0,   678,   679,   191,     0,     0,
     192,   680,   193,   681,     0,   194,   682,   683,     0,   195,
     196,   197,   684,   685,   686,     0,     0,     0,     0,   687,
     200,   688,     0,     0,   689,   201,   202,     0,   203,     0,
       0,     0,   204,  4610,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,  3566,   222,   223,   224,   225,   226,   227,
     690,     0,   228,   229,   230,   231,   232,   691,   692,   233,
     234,     0,   235,   236,   237,   693,     0,   238,     0,     0,
       0,     0,   694,   240,     0,   241,     0,   242,     0,   243,
     695,   245,   696,     0,   247,     0,   248,     0,   697,     0,
     249,   250,     0,   251,   698,     0,   252,   253,     0,     0,
       0,   699,   255,   256,   257,   700,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   701,   262,   263,   702,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
    1679,   272,     0,   703,   273,   274,     0,     0,     0,     0,
       0,   704,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   705,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     706,   302,   303,   304,   305,   707,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   708,   313,     0,     0,
     709,   315,   710,   316,     0,   317,   711,   712,   713,   714,
     715,   322,   323,   324,   325,   326,     0,   716,   327,   328,
       0,     0,   329,   330,   331,   332,   717,   718,   719,   333,
     334,     0,   720,   721,     0,   722,   335,     0,   336,   337,
     723,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
     724,   346,   347,     0,   348,   349,   725,   726,   727,   351,
     352,   353,   354,   728,   729,   357,   730,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   731,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,   732,
     733,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   734,     0,   735,   394,   395,   396,   397,
     398,   736,   737,   401,   402,   403,   404,     0,   738,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   739,   740,   436,   437,     0,   438,   439,   741,   441,
     442,   443,   742,   743,   444,   445,   446,   447,   744,   448,
     449,     0,     0,   450,   451,   452,   453,     0,   745,   454,
     455,     0,   746,   747,   748,   749,     0,     0,     0,     0,
    1680,   460,   461,     0,   750,   751,   752,   463,   464,   465,
     753,     0,   466,   467,   754,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   755,
     476,     0,     0,   756,   757,   758,   759,   477,     0,     0,
     478,   760,     0,   761,   479,   480,   481,   762,   763,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   764,     0,     0,     0,   765,   766,
       0,     0,     0,     0,   767,   768,     0,     0,   769,   770,
       0,     0,   771,   772,   137,     0,   663,   139,   140,   141,
     142,  2435,     0,   143,     0,     0,     0,   144,     0,     0,
     664,     0,   146,   147,   148,   149,   665,   151,     0,   152,
       0,     0,  2436,   153,   667,   668,   669,   154,   670,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,   671,   672,   162,   163,     0,   164,   673,   674,   166,
       0,   167,   168,   169,   170,   675,   172,     0,   676,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   677,   190,     0,
     678,   679,   191,     0,     0,   192,   680,   193,   681,     0,
     194,   682,   683,     0,   195,   196,   197,   684,   685,   686,
       0,     0,     0,     0,   687,   200,   688,     0,     0,  2437,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,   690,     0,   228,   229,   230,
     231,   232,   691,   692,   233,   234,     0,   235,   236,   237,
     693,     0,   238,     0,     0,     0,     0,   694,   240,     0,
     241,     0,   242,     0,   243,   695,   245,   696,     0,   247,
       0,   248,     0,   697,     0,   249,   250,     0,   251,   698,
       0,   252,   253,     0,     0,     0,   699,   255,   256,   257,
     700,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   701,   262,   263,   702,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   703,   273,
     274,     0,     0,     0,     0,     0,   704,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   705,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   706,   302,   303,   304,   305,
     707,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   708,   313,     0,     0,   709,   315,   710,   316,     0,
     317,   711,   712,   713,   714,   715,   322,   323,   324,   325,
     326,     0,   716,   327,   328,     0,     0,   329,   330,   331,
     332,   717,   718,   719,   333,   334,     0,   720,   721,     0,
     722,   335,     0,   336,   337,   723,  2438,   339,   340,   341,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,   724,   346,   347,     0,   348,
     349,   725,   726,   727,   351,   352,   353,   354,   728,   729,
     357,   730,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   731,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,   732,   733,   386,     0,   387,     0,
     388,     0,   389,     0,   390,   391,   392,     0,   734,     0,
     735,   394,   395,   396,   397,   398,   736,   737,   401,   402,
     403,   404,     0,   738,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,   428,     0,     0,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   739,   740,   436,   437,
       0,   438,   439,   741,   441,   442,   443,   742,   743,   444,
     445,   446,   447,   744,   448,   449,     0,     0,   450,   451,
     452,   453,     0,   745,   454,   455,     0,   746,   747,   748,
     749,     0,     0,     0,     0,     0,   460,   461,     0,   750,
     751,   752,   463,   464,   465,   753,     0,   466,   467,   754,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   755,   476,     0,     0,   756,   757,
     758,   759,   477,     0,     0,   478,   760,     0,   761,   479,
     480,   481,   762,   763,     0,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   764,
       0,     0,     0,   765,   766,     0,     0,     0,     0,   767,
     768,     0,     0,   769,   770,     0,     0,   771,   772,   137,
       0,   663,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   664,     0,   146,   147,   148,
     149,   665,   151,     0,   152,  3950,     0,   666,   153,   667,
     668,   669,   154,   670,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   671,   672,   162,   163,
       0,   164,   673,   674,   166,     0,   167,   168,   169,   170,
     675,   172,     0,   676,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   677,   190,     0,   678,   679,   191,     0,     0,
     192,   680,  3951,   681,     0,   194,   682,   683,     0,   195,
     196,   197,   684,   685,   686,     0,     0,     0,     0,   687,
     200,   688,     0,     0,   689,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     690,     0,   228,   229,   230,   231,   232,   691,   692,   233,
     234,     0,   235,   236,   237,   693,     0,   238,     0,     0,
       0,     0,   694,   240,     0,   241,     0,   242,     0,   243,
     695,   245,   696,     0,   247,     0,   248,     0,   697,     0,
     249,   250,     0,   251,   698,     0,   252,   253,     0,     0,
       0,   699,   255,   256,   257,   700,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   701,   262,   263,  3952,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   703,   273,   274,     0,     0,     0,     0,
       0,   704,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   705,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     706,   302,   303,   304,   305,   707,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   708,   313,     0,     0,
     709,   315,   710,   316,     0,   317,   711,   712,   713,   714,
     715,   322,   323,   324,   325,   326,     0,   716,   327,   328,
       0,     0,   329,   330,   331,   332,   717,   718,   719,   333,
     334,     0,   720,   721,     0,   722,   335,     0,   336,   337,
     723,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
     724,   346,   347,     0,   348,   349,   725,   726,   727,   351,
     352,   353,   354,   728,   729,   357,   730,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   731,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,   732,
     733,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   734,     0,   735,   394,   395,   396,   397,
     398,   736,   737,   401,   402,   403,   404,     0,   738,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   739,   740,   436,   437,     0,   438,   439,   741,   441,
     442,   443,   742,   743,   444,   445,   446,   447,   744,   448,
     449,     0,     0,   450,   451,   452,   453,     0,   745,   454,
     455,     0,   746,   747,   748,   749,     0,     0,     0,     0,
       0,   460,   461,     0,   750,   751,   752,   463,   464,   465,
     753,  3953,   466,   467,   754,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   755,
     476,     0,     0,   756,   757,   758,   759,   477,     0,     0,
     478,   760,     0,   761,   479,   480,   481,   762,   763,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   764,     0,     0,     0,   765,   766,
       0,     0,     0,     0,   767,   768,     0,     0,   769,   770,
       0,     0,   771,   772,   137,     0,   663,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     664,     0,   146,   147,   148,   149,   665,   151,     0,   152,
       0,     0,   666,   153,   667,   668,   669,   154,   670,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,   671,   672,   162,   163,     0,   164,   673,   674,   166,
       0,   167,   168,   169,   170,   675,   172,     0,   676,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   677,   190,     0,
     678,   679,   191,     0,     0,   192,   680,   193,   681,     0,
     194,   682,   683,     0,   195,   196,   197,   684,   685,   686,
       0,     0,     0,     0,   687,   200,   688,     0,     0,   689,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,   690,     0,   228,   229,   230,
     231,   232,   691,   692,   233,   234,     0,   235,   236,   237,
     693,     0,   238,     0,     0,     0,     0,   694,   240,  2244,
     241,     0,   242,     0,   243,   695,   245,   696,     0,   247,
       0,   248,     0,   697,     0,   249,   250,     0,   251,   698,
       0,   252,   253,     0,     0,     0,   699,   255,   256,   257,
     700,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   701,   262,   263,   702,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   703,   273,
     274,     0,     0,     0,     0,     0,   704,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   705,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   706,   302,   303,   304,   305,
     707,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   708,   313,     0,     0,   709,   315,   710,   316,     0,
     317,   711,   712,   713,   714,   715,   322,   323,   324,   325,
     326,     0,   716,   327,   328,     0,     0,   329,   330,   331,
     332,   717,   718,   719,   333,   334,     0,   720,   721,     0,
     722,   335,     0,   336,   337,   723,     0,   339,   340,   341,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,   724,   346,   347,     0,   348,
     349,   725,   726,   727,   351,   352,   353,   354,   728,   729,
     357,   730,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   731,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,   732,   733,   386,     0,   387,     0,
     388,     0,   389,     0,   390,   391,   392,     0,   734,     0,
     735,   394,   395,   396,   397,   398,   736,   737,   401,   402,
     403,   404,     0,   738,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,   428,     0,     0,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   739,   740,   436,   437,
       0,   438,   439,   741,   441,   442,   443,   742,   743,   444,
     445,   446,   447,   744,   448,   449,     0,     0,   450,   451,
     452,   453,     0,   745,   454,   455,     0,   746,   747,   748,
     749,     0,     0,     0,     0,     0,   460,   461,     0,   750,
     751,   752,   463,   464,   465,   753,     0,   466,   467,   754,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   755,   476,     0,     0,   756,   757,
     758,   759,   477,     0,     0,   478,   760,     0,   761,   479,
     480,   481,   762,   763,     0,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   764,
       0,     0,     0,   765,   766,     0,     0,     0,     0,   767,
     768,     0,     0,   769,   770,     0,     0,   771,   772,   137,
       0,   663,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   664,     0,   146,   147,   148,
     149,   665,   151,     0,   152,     0,     0,   666,   153,   667,
     668,   669,   154,   670,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   671,   672,   162,   163,
       0,   164,   673,   674,   166,     0,   167,   168,   169,   170,
     675,   172,     0,   676,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   677,   190,     0,   678,   679,   191,     0,     0,
     192,   680,   193,   681,     0,   194,   682,   683,     0,   195,
     196,   197,   684,   685,   686,     0,     0,     0,     0,   687,
     200,   688,     0,     0,   689,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     690,     0,   228,   229,   230,   231,   232,   691,   692,   233,
     234,     0,   235,   236,   237,   693,     0,   238,     0,     0,
       0,     0,   694,   240,  2246,   241,     0,   242,     0,   243,
     695,   245,   696,     0,   247,     0,   248,     0,   697,     0,
     249,   250,     0,   251,   698,     0,   252,   253,     0,     0,
       0,   699,   255,   256,   257,   700,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   701,   262,   263,   702,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   703,   273,   274,     0,     0,     0,     0,
       0,   704,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   705,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     706,   302,   303,   304,   305,   707,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   708,   313,     0,     0,
     709,   315,   710,   316,     0,   317,   711,   712,   713,   714,
     715,   322,   323,   324,   325,   326,     0,   716,   327,   328,
       0,     0,   329,   330,   331,   332,   717,   718,   719,   333,
     334,     0,   720,   721,     0,   722,   335,     0,   336,   337,
     723,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
     724,   346,   347,     0,   348,   349,   725,   726,   727,   351,
     352,   353,   354,   728,   729,   357,   730,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   731,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,   732,
     733,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   734,     0,   735,   394,   395,   396,   397,
     398,   736,   737,   401,   402,   403,   404,     0,   738,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   739,   740,   436,   437,     0,   438,   439,   741,   441,
     442,   443,   742,   743,   444,   445,   446,   447,   744,   448,
     449,     0,     0,   450,   451,   452,   453,     0,   745,   454,
     455,     0,   746,   747,   748,   749,     0,     0,     0,     0,
       0,   460,   461,     0,   750,   751,   752,   463,   464,   465,
     753,     0,   466,   467,   754,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   755,
     476,     0,     0,   756,   757,   758,   759,   477,     0,     0,
     478,   760,     0,   761,   479,   480,   481,   762,   763,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   764,     0,     0,     0,   765,   766,
       0,     0,     0,     0,   767,   768,     0,     0,   769,   770,
       0,     0,   771,   772,   137,     0,   663,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     664,     0,   146,   147,   148,   149,   665,   151,     0,   152,
       0,     0,   666,   153,   667,   668,   669,   154,   670,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,   671,   672,   162,   163,     0,   164,   673,   674,   166,
       0,   167,   168,   169,   170,   675,   172,     0,   676,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   677,   190,     0,
     678,   679,   191,     0,     0,   192,   680,   193,   681,     0,
     194,   682,   683,     0,   195,   196,   197,   684,   685,   686,
       0,     0,     0,     0,   687,   200,   688,     0,     0,   689,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,   690,     0,   228,   229,   230,
     231,   232,   691,   692,   233,   234,     0,   235,   236,   237,
     693,     0,   238,     0,     0,     0,     0,   694,   240,  2248,
     241,     0,   242,     0,   243,   695,   245,   696,     0,   247,
       0,   248,     0,   697,     0,   249,   250,     0,   251,   698,
       0,   252,   253,     0,     0,     0,   699,   255,   256,   257,
     700,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   701,   262,   263,   702,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   703,   273,
     274,     0,     0,     0,     0,     0,   704,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   705,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   706,   302,   303,   304,   305,
     707,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   708,   313,     0,     0,   709,   315,   710,   316,     0,
     317,   711,   712,   713,   714,   715,   322,   323,   324,   325,
     326,     0,   716,   327,   328,     0,     0,   329,   330,   331,
     332,   717,   718,   719,   333,   334,     0,   720,   721,     0,
     722,   335,     0,   336,   337,   723,     0,   339,   340,   341,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,   724,   346,   347,     0,   348,
     349,   725,   726,   727,   351,   352,   353,   354,   728,   729,
     357,   730,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   731,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,   732,   733,   386,     0,   387,     0,
     388,     0,   389,     0,   390,   391,   392,     0,   734,     0,
     735,   394,   395,   396,   397,   398,   736,   737,   401,   402,
     403,   404,     0,   738,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,   428,     0,     0,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   739,   740,   436,   437,
       0,   438,   439,   741,   441,   442,   443,   742,   743,   444,
     445,   446,   447,   744,   448,   449,     0,     0,   450,   451,
     452,   453,     0,   745,   454,   455,     0,   746,   747,   748,
     749,     0,     0,     0,     0,     0,   460,   461,     0,   750,
     751,   752,   463,   464,   465,   753,     0,   466,   467,   754,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   755,   476,     0,     0,   756,   757,
     758,   759,   477,     0,     0,   478,   760,     0,   761,   479,
     480,   481,   762,   763,     0,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   764,
       0,     0,     0,   765,   766,     0,     0,     0,     0,   767,
     768,     0,     0,   769,   770,     0,     0,   771,   772,   137,
       0,   663,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   664,     0,   146,   147,   148,
     149,   665,   151,     0,   152,     0,     0,   666,   153,   667,
     668,   669,   154,   670,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   671,   672,   162,   163,
       0,   164,   673,   674,   166,     0,   167,   168,   169,   170,
     675,   172,     0,   676,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   677,   190,     0,   678,   679,   191,     0,     0,
     192,   680,  3951,   681,     0,   194,   682,   683,     0,   195,
     196,   197,   684,   685,   686,     0,     0,     0,     0,   687,
     200,   688,     0,     0,   689,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     690,     0,   228,   229,   230,   231,   232,   691,   692,   233,
     234,     0,   235,   236,   237,   693,     0,   238,     0,     0,
       0,     0,   694,   240,     0,   241,     0,   242,     0,   243,
     695,   245,   696,     0,   247,     0,   248,     0,   697,     0,
     249,   250,     0,   251,   698,     0,   252,   253,     0,     0,
       0,   699,   255,   256,   257,   700,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   701,   262,   263,  3952,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   703,   273,   274,     0,     0,     0,     0,
       0,   704,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   705,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     706,   302,   303,   304,   305,   707,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   708,   313,     0,     0,
     709,   315,   710,   316,     0,   317,   711,   712,   713,   714,
     715,   322,   323,   324,   325,   326,     0,   716,   327,   328,
       0,     0,   329,   330,   331,   332,   717,   718,   719,   333,
     334,     0,   720,   721,     0,   722,   335,     0,   336,   337,
     723,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
     724,   346,   347,     0,   348,   349,   725,   726,   727,   351,
     352,   353,   354,   728,   729,   357,   730,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   731,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,   732,
     733,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   734,     0,   735,   394,   395,   396,   397,
     398,   736,   737,   401,   402,   403,   404,     0,   738,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   739,   740,   436,   437,     0,   438,   439,   741,   441,
     442,   443,   742,   743,   444,   445,   446,   447,   744,   448,
     449,     0,     0,   450,   451,   452,   453,     0,   745,   454,
     455,     0,   746,   747,   748,   749,     0,     0,     0,     0,
       0,   460,   461,     0,   750,   751,   752,   463,   464,   465,
     753,  3953,   466,   467,   754,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   755,
     476,     0,     0,   756,   757,   758,   759,   477,     0,     0,
     478,   760,     0,   761,   479,   480,   481,   762,   763,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   764,     0,     0,     0,   765,   766,
       0,     0,     0,     0,   767,   768,     0,     0,   769,   770,
       0,     0,   771,   772,   137,     0,   663,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     664,     0,   146,   147,   148,   149,   665,   151,     0,   152,
       0,     0,   666,   153,   667,   668,   669,   154,   670,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,   671,   672,   162,   163,     0,   164,   673,   674,   166,
       0,   167,   168,   169,   170,   675,   172,     0,   676,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   677,   190,     0,
     678,   679,   191,     0,     0,   192,   680,   193,   681,     0,
     194,   682,   683,     0,   195,   196,   197,   684,   685,   686,
       0,     0,     0,     0,   687,   200,   688,     0,     0,   689,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,   690,     0,   228,   229,   230,
     231,   232,   691,   692,   233,   234,     0,   235,   236,   237,
     693,     0,   238,     0,     0,     0,     0,   694,   240,     0,
     241,     0,   242,     0,   243,   695,   245,   696,     0,   247,
       0,   248,     0,   697,     0,   249,   250,     0,   251,   698,
       0,   252,   253,     0,     0,     0,   699,   255,   256,   257,
     700,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   701,   262,   263,   702,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   703,   273,
     274,     0,     0,     0,     0,     0,   704,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   705,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   706,   302,   303,   304,   305,
     707,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   708,   313,     0,     0,   709,   315,   710,   316,     0,
     317,   711,   712,   713,   714,   715,   322,   323,   324,   325,
     326,     0,   716,   327,   328,     0,     0,   329,   330,   331,
     332,   717,   718,   719,   333,   334,     0,   720,   721,     0,
     722,   335,     0,   336,   337,   723,     0,   339,   340,   341,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,   724,   346,   347,     0,   348,
     349,   725,   726,   727,   351,   352,   353,   354,   728,   729,
     357,   730,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   731,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,   732,   733,   386,     0,   387,     0,
     388,     0,   389,     0,   390,   391,   392,     0,   734,     0,
     735,   394,   395,   396,   397,   398,   736,   737,   401,   402,
     403,   404,     0,   738,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,   428,     0,     0,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   739,   740,   436,   437,
       0,   438,   439,   741,   441,   442,   443,   742,   743,   444,
     445,   446,   447,   744,   448,   449,     0,     0,   450,   451,
     452,   453,     0,   745,   454,   455,     0,   746,   747,   748,
     749,     0,     0,     0,     0,     0,   460,   461,     0,   750,
     751,   752,   463,   464,   465,   753,     0,   466,   467,   754,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   755,   476,     0,     0,   756,   757,
     758,   759,   477,     0,     0,   478,   760,     0,   761,   479,
     480,   481,   762,   763,     0,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   764,
       0,     0,     0,   765,   766,     0,     0,     0,     0,   767,
     768,     0,     0,   769,   770,     0,     0,   771,   772,   137,
       0,   663,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   664,     0,   146,   147,   148,
     149,   665,   151,     0,   152,     0,     0,   666,   153,   667,
     668,   669,   154,   670,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   671,   672,   162,   163,
       0,   164,   673,   674,   166,     0,   167,   168,   169,   170,
     675,   172,     0,   676,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   677,   190,     0,   678,   679,   191,     0,     0,
     192,   680,   193,   681,     0,   194,   682,   683,     0,   195,
     196,   197,   684,   685,   686,     0,     0,     0,     0,   687,
     200,   688,     0,     0,   689,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     690,     0,   228,   229,   230,   231,   232,   691,   692,   233,
     234,     0,   235,   236,   237,   693,     0,   238,     0,     0,
       0,     0,   694,   240,     0,   241,     0,   242,     0,   243,
     695,   245,   696,     0,   247,     0,   248,     0,   697,     0,
     249,   250,     0,   251,   698,     0,   252,   253,     0,     0,
       0,   699,   255,   256,   257,   700,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   701,   262,   263,   702,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   703,   273,   274,     0,     0,     0,     0,
       0,   704,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   705,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     706,   302,   303,   304,   305,   707,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   708,   313,     0,     0,
     709,   315,   710,   316,     0,   317,   711,   712,   713,   714,
     715,   322,   323,   324,   325,   326,     0,   716,   327,   328,
       0,     0,   329,   330,   331,   332,   717,   718,   719,   333,
     334,     0,   720,   721,     0,   722,   335,     0,   336,   337,
     723,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
     724,   346,   347,     0,   348,   349,   725,   726,   727,   351,
     352,   353,   354,   728,   729,   357,   730,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   731,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,   732,
     733,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   734,     0,   735,   394,   395,   396,   397,
     398,   736,   737,   401,   402,   403,   404,     0,   738,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   739,   740,   436,   437,     0,   438,   439,   741,   441,
     442,   443,   742,   743,   444,   445,   446,   447,   744,   448,
     449,     0,     0,   450,   451,   452,   453,     0,   745,   454,
     455,     0,   746,   747,   748,   749,     0,     0,     0,     0,
       0,   460,   461,     0,   750,   751,   752,   463,   464,   465,
     753,     0,   466,   467,   754,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   755,
     476,     0,     0,   756,   757,   758,   759,   477,     0,     0,
     478,   760,     0,   761,   479,   480,   481,   762,   763,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   764,     0,     0,     0,   765,   766,
       0,     0,     0,     0,   767,  1089,     0,     0,   769,   770,
       0,     0,   771,   772,   137,     0,   663,   139,   140,   141,
     142,  1713,     0,   143,     0,     0,     0,  1714,     0,     0,
     664,     0,   146,   147,   148,   149,   665,   151,     0,   152,
       0,     0,   666,   153,   667,   668,   669,   154,   670,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,   671,   672,   162,   163,     0,   164,   673,   674,   166,
       0,   167,   168,   169,   170,   675,   172,     0,   676,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   677,   190,     0,
     678,   679,   191,     0,     0,   192,   680,   193,   681,     0,
     194,   682,   683,     0,   195,   196,   197,   684,   685,   686,
       0,     0,     0,     0,   687,   200,   688,     0,     0,   689,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,   690,     0,   228,   229,   230,
     231,   232,   691,   692,   233,   234,     0,   235,   236,   237,
     693,     0,   238,     0,     0,     0,     0,   694,   240,     0,
     241,     0,   242,     0,   243,   695,   245,   696,     0,   247,
       0,   248,     0,   697,     0,   249,   250,     0,   251,   698,
       0,   252,   253,     0,     0,     0,   699,   255,   256,   257,
     700,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   701,   262,   263,   702,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   703,   273,
     274,     0,     0,     0,     0,     0,   704,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   705,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   706,   302,   303,   304,   305,
     707,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   708,   313,     0,     0,   709,   315,   710,   316,     0,
     317,   711,   712,   713,   714,   715,   322,   323,   324,   325,
     326,     0,   716,   327,   328,     0,     0,   329,   330,   331,
     332,   717,     0,   719,   333,   334,     0,   720,   721,     0,
     722,   335,     0,   336,   337,   723,     0,   339,   340,   341,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,   724,   346,   347,     0,   348,
     349,   725,   726,   727,   351,   352,   353,   354,   728,   729,
     357,   730,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   731,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,   732,   733,   386,     0,   387,     0,
     388,     0,   389,     0,   390,   391,   392,     0,   734,     0,
     735,   394,   395,   396,   397,   398,   736,   737,   401,   402,
     403,   404,     0,   738,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,   428,     0,     0,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   739,   740,   436,   437,
       0,   438,   439,   741,   441,   442,   443,   742,   743,   444,
     445,   446,   447,   744,   448,   449,     0,     0,   450,   451,
     452,   453,     0,   745,   454,   455,     0,   746,   747,   748,
     749,     0,     0,     0,     0,     0,   460,   461,     0,   750,
     751,   752,   463,   464,   465,   753,     0,   466,   467,   754,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   755,   476,     0,     0,   756,   757,
     758,   759,   477,     0,     0,   478,   760,     0,   761,   479,
     480,   481,   762,   763,     0,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   764,
       0,     0,     0,   765,   766,     0,     0,     0,     0,   767,
     768,     0,     0,   769,   770,     0,     0,   771,   772,   137,
       0,   663,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   664,     0,   146,   147,   148,
     149,   665,   151,     0,   152,     0,     0,   666,   153,   667,
     668,   669,   154,   670,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   671,   672,   162,   163,
       0,   164,   673,   674,   166,     0,   167,   168,   169,   170,
     675,   172,     0,   676,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   677,   190,     0,   678,   679,   191,     0,     0,
     192,   680,   193,   681,     0,   194,   682,   683,     0,   195,
     196,   197,   684,   685,   686,     0,     0,     0,     0,   687,
     200,   688,     0,     0,   689,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     690,     0,   228,   229,   230,   231,   232,   691,   692,   233,
     234,     0,   235,   236,   237,   693,     0,   238,     0,     0,
       0,     0,   694,   240,     0,   241,     0,   242,     0,   243,
     695,   245,   696,     0,   247,     0,   248,     0,   697,     0,
     249,   250,     0,   251,   698,     0,   252,   253,     0,     0,
       0,   699,   255,   256,   257,   700,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   701,   262,   263,  2694,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   703,   273,   274,     0,     0,     0,     0,
       0,   704,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   705,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     706,   302,   303,   304,   305,   707,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   708,   313,     0,     0,
     709,   315,   710,   316,     0,   317,   711,   712,   713,   714,
     715,   322,   323,   324,   325,   326,     0,   716,   327,   328,
       0,     0,   329,   330,   331,   332,   717,   718,   719,   333,
     334,     0,   720,   721,     0,   722,   335,     0,   336,   337,
     723,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
     724,   346,   347,     0,   348,   349,   725,   726,   727,   351,
     352,   353,   354,   728,   729,   357,   730,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   731,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,   732,
     733,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   734,     0,   735,   394,   395,   396,   397,
     398,   736,   737,   401,   402,   403,   404,     0,   738,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   739,   740,   436,   437,     0,   438,   439,   741,   441,
     442,   443,   742,   743,   444,   445,   446,   447,   744,   448,
     449,     0,     0,   450,   451,   452,   453,     0,   745,   454,
     455,     0,   746,   747,   748,   749,     0,     0,     0,     0,
       0,   460,   461,     0,   750,   751,   752,   463,   464,   465,
     753,     0,   466,   467,   754,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   755,
     476,     0,     0,   756,   757,   758,   759,   477,     0,     0,
     478,   760,     0,   761,   479,   480,   481,   762,   763,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   764,     0,     0,     0,   765,   766,
       0,     0,     0,     0,   767,   768,     0,     0,   769,   770,
       0,     0,   771,   772,   137,     0,   663,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     664,     0,   146,   147,   148,   149,   665,   151,     0,   152,
       0,     0,   666,   153,   667,   668,   669,   154,   670,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,   671,   672,   162,   163,     0,   164,   673,   674,   166,
       0,   167,   168,   169,   170,   675,   172,     0,   676,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   677,   190,     0,
     678,   679,   191,     0,     0,   192,   680,   193,   681,     0,
     194,   682,   683,     0,   195,   196,   197,   684,   685,   686,
       0,     0,     0,     0,   687,   200,   688,     0,     0,   689,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,   690,     0,   228,   229,   230,
     231,   232,   691,   692,   233,   234,     0,   235,   236,   237,
     693,     0,   238,     0,     0,     0,     0,   694,   240,     0,
     241,     0,   242,     0,   243,   695,   245,   696,     0,   247,
       0,   248,     0,   697,     0,   249,   250,     0,   251,   698,
       0,   252,   253,     0,     0,     0,   699,   255,   256,   257,
     700,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   701,   262,   263,  2753,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   703,   273,
     274,     0,     0,     0,     0,     0,   704,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   705,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   706,   302,   303,   304,   305,
     707,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   708,   313,     0,     0,   709,   315,   710,   316,     0,
     317,   711,   712,   713,   714,   715,   322,   323,   324,   325,
     326,     0,   716,   327,   328,     0,     0,   329,   330,   331,
     332,   717,   718,   719,   333,   334,     0,   720,   721,     0,
     722,   335,     0,   336,   337,   723,     0,   339,   340,   341,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,   724,   346,   347,     0,   348,
     349,   725,   726,   727,   351,   352,   353,   354,   728,   729,
     357,   730,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   731,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,   732,   733,   386,     0,   387,     0,
     388,     0,   389,     0,   390,   391,   392,     0,   734,     0,
     735,   394,   395,   396,   397,   398,   736,   737,   401,   402,
     403,   404,     0,   738,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,   428,     0,     0,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   739,   740,   436,   437,
       0,   438,   439,   741,   441,   442,   443,   742,   743,   444,
     445,   446,   447,   744,   448,   449,     0,     0,   450,   451,
     452,   453,     0,   745,   454,   455,     0,   746,   747,   748,
     749,     0,     0,     0,     0,     0,   460,   461,     0,   750,
     751,   752,   463,   464,   465,   753,     0,   466,   467,   754,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   755,   476,     0,     0,   756,   757,
     758,   759,   477,     0,     0,   478,   760,     0,   761,   479,
     480,   481,   762,   763,     0,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   764,
       0,     0,     0,   765,   766,     0,     0,     0,     0,   767,
     768,     0,     0,   769,   770,     0,     0,   771,   772,   137,
       0,   663,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   664,     0,   146,   147,   148,
     149,   665,   151,     0,   152,     0,     0,   666,   153,   667,
     668,   669,   154,   670,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   671,   672,   162,   163,
       0,   164,   673,   674,   166,     0,   167,   168,   169,   170,
     675,   172,     0,   676,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   677,   190,     0,   678,   679,   191,     0,     0,
     192,   680,   193,   681,     0,   194,   682,   683,     0,   195,
     196,   197,   684,   685,   686,     0,     0,     0,     0,   687,
     200,   688,     0,     0,  3565,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     690,     0,   228,   229,   230,   231,   232,   691,   692,   233,
     234,     0,   235,   236,   237,   693,     0,   238,     0,     0,
       0,     0,   694,   240,     0,   241,     0,   242,     0,   243,
     695,   245,   696,     0,   247,     0,   248,     0,   697,     0,
     249,   250,     0,   251,   698,     0,   252,   253,     0,     0,
       0,   699,   255,   256,   257,   700,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   701,   262,   263,   702,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   703,   273,   274,     0,     0,     0,     0,
       0,   704,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   705,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     706,   302,   303,   304,   305,   707,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   708,   313,     0,     0,
     709,   315,   710,   316,     0,   317,   711,   712,   713,   714,
     715,   322,   323,   324,   325,   326,     0,   716,   327,   328,
       0,     0,   329,   330,   331,   332,   717,   718,   719,   333,
     334,     0,   720,   721,     0,   722,   335,     0,   336,   337,
     723,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
     724,   346,   347,     0,   348,   349,   725,   726,   727,   351,
     352,   353,   354,   728,   729,   357,   730,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   731,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,   732,
     733,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   734,     0,   735,   394,   395,   396,   397,
     398,   736,   737,   401,   402,   403,   404,     0,   738,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   739,   740,   436,   437,     0,   438,   439,   741,   441,
     442,   443,   742,   743,   444,   445,   446,   447,   744,   448,
     449,     0,     0,   450,   451,   452,   453,     0,   745,   454,
     455,     0,   746,   747,   748,   749,     0,     0,     0,     0,
       0,   460,   461,     0,   750,   751,   752,   463,   464,   465,
     753,     0,   466,   467,   754,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   755,
     476,     0,     0,   756,   757,   758,   759,   477,     0,     0,
     478,   760,     0,   761,   479,   480,   481,   762,   763,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   764,     0,     0,     0,   765,   766,
       0,     0,     0,     0,   767,   768,     0,     0,   769,   770,
       0,     0,   771,   772,   137,     0,   663,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     664,     0,   146,   147,   148,   149,   665,   151,     0,   152,
       0,     0,   666,   153,   667,   668,   669,   154,   670,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,   671,   672,   162,   163,     0,   164,   673,   674,   166,
       0,   167,   168,   169,   170,   675,   172,     0,   676,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   677,   190,     0,
     678,   679,   191,     0,     0,   192,   680,   193,   681,     0,
     194,   682,   683,     0,   195,   196,   197,   684,   685,   686,
       0,     0,     0,     0,   687,   200,   688,     0,     0,   689,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,   690,     0,   228,   229,   230,
     231,   232,   691,   692,   233,   234,     0,   235,   236,   237,
     693,     0,   238,     0,     0,     0,     0,   694,   240,     0,
     241,     0,   242,     0,   243,   695,   245,   696,     0,   247,
       0,   248,     0,   697,     0,   249,   250,     0,   251,   698,
       0,   252,   253,     0,     0,     0,   699,   255,   256,   257,
     700,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   701,   262,   263,   702,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   703,   273,
     274,     0,     0,     0,     0,     0,   704,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   705,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   706,   302,   303,   304,   305,
     707,   306,   307,  4485,     0,     0,     0,   308,   309,   310,
     311,   708,   313,     0,     0,   709,   315,   710,   316,     0,
     317,   711,   712,   713,   714,   715,   322,   323,   324,   325,
     326,     0,   716,   327,   328,     0,     0,   329,   330,   331,
     332,   717,     0,   719,   333,   334,     0,   720,   721,     0,
     722,   335,     0,   336,   337,   723,     0,   339,   340,   341,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,   724,   346,   347,     0,   348,
     349,   725,   726,   727,   351,   352,   353,   354,   728,   729,
     357,   730,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   731,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,   732,   733,   386,     0,   387,     0,
     388,     0,   389,     0,   390,   391,   392,     0,   734,     0,
     735,   394,   395,   396,   397,   398,   736,   737,   401,   402,
     403,   404,     0,   738,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,   428,     0,     0,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   739,   740,   436,   437,
       0,   438,   439,   741,   441,   442,   443,   742,   743,   444,
     445,   446,   447,   744,   448,   449,     0,     0,   450,   451,
     452,   453,     0,   745,   454,   455,     0,   746,   747,   748,
     749,     0,     0,     0,     0,     0,   460,   461,     0,   750,
     751,   752,   463,   464,   465,   753,     0,   466,   467,   754,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   755,   476,     0,     0,   756,   757,
     758,   759,   477,     0,     0,   478,   760,     0,   761,   479,
     480,   481,   762,   763,     0,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   764,
       0,     0,     0,   765,   766,     0,     0,     0,     0,   767,
     768,     0,     0,   769,   770,     0,     0,   771,   772,   137,
       0,   663,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   664,     0,   146,   147,   148,
     149,   665,   151,     0,   152,     0,     0,   666,   153,   667,
     668,   669,   154,   670,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   671,   672,   162,   163,
       0,   164,   673,   674,   166,     0,   167,   168,   169,   170,
     675,   172,     0,   676,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   677,   190,     0,   678,   679,   191,     0,     0,
     192,   680,   193,   681,     0,   194,   682,   683,     0,   195,
     196,   197,   684,   685,   686,     0,     0,     0,     0,   687,
     200,   688,     0,     0,   689,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     690,     0,   228,   229,   230,   231,   232,   691,   692,   233,
     234,     0,   235,   236,   237,   693,     0,   238,     0,     0,
       0,     0,   694,   240,     0,   241,     0,   242,     0,   243,
     695,   245,   696,     0,   247,     0,   248,     0,   697,     0,
     249,   250,     0,   251,   698,     0,   252,   253,     0,     0,
       0,   699,   255,   256,   257,   700,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   701,   262,   263,   702,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   703,   273,   274,     0,     0,     0,     0,
       0,   704,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   705,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     706,   302,   303,   304,   305,   707,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   708,   313,     0,     0,
     709,   315,   710,   316,     0,   317,   711,   712,   713,   714,
     715,   322,   323,   324,   325,   326,     0,   716,   327,   328,
       0,     0,   329,   330,   331,   332,   717,     0,   719,   333,
     334,     0,   720,   721,     0,   722,   335,     0,   336,   337,
     723,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
     724,   346,   347,     0,   348,   349,   725,   726,   727,   351,
     352,   353,   354,   728,   729,   357,   730,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   731,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,   732,
     733,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   734,     0,   735,   394,   395,   396,   397,
     398,   736,   737,   401,   402,   403,   404,     0,   738,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   739,   740,   436,   437,     0,   438,   439,   741,   441,
     442,   443,   742,   743,   444,   445,   446,   447,   744,   448,
     449,     0,     0,   450,   451,   452,   453,     0,   745,   454,
     455,     0,   746,   747,   748,   749,     0,     0,     0,     0,
       0,   460,   461,     0,   750,   751,   752,   463,   464,   465,
     753,     0,   466,   467,   754,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   755,
     476,     0,     0,   756,   757,   758,   759,   477,     0,     0,
     478,   760,     0,   761,   479,   480,   481,   762,   763,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   764,     0,     0,     0,   765,   766,
       0,     0,     0,     0,   767,   768,     0,     0,   769,   770,
       0,     0,   771,   772,   137,     0,   663,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     664,     0,   146,   147,   148,   149,   665,   151,     0,   152,
       0,     0,   666,   153,   667,   668,   669,   154,   670,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,   671,   672,   162,   163,     0,   164,   673,   674,   166,
       0,   167,   168,   169,   170,   675,   172,     0,   676,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   677,   190,     0,
     678,   679,   191,     0,     0,   192,   680,   193,   681,     0,
     194,   682,   683,     0,   195,   196,   197,   684,   685,   686,
       0,     0,     0,     0,   687,   200,   688,     0,     0,   689,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,   690,     0,   228,   229,   230,
     231,   232,   691,   692,   233,   234,     0,   235,   236,   237,
     693,     0,   238,     0,     0,     0,     0,   694,   240,     0,
     241,     0,   242,     0,   243,   695,   245,   696,     0,   247,
       0,   248,     0,   697,     0,   249,   250,     0,   251,   698,
       0,   252,   253,     0,     0,     0,   699,   255,   256,   257,
     700,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   701,   262,   263,  1728,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   703,   273,
     274,     0,     0,     0,     0,     0,   704,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   705,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   706,   302,   303,   304,   305,
     707,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   708,   313,     0,     0,   709,   315,   710,   316,     0,
     317,   711,   712,   713,   714,   715,   322,   323,   324,   325,
     326,     0,   716,   327,   328,     0,     0,   329,   330,   331,
     332,   717,     0,   719,   333,   334,     0,   720,   721,     0,
     722,   335,     0,   336,   337,   723,     0,   339,   340,   341,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,   724,   346,   347,     0,   348,
     349,   725,   726,   727,   351,   352,   353,   354,   728,   729,
     357,   730,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   731,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,   732,   733,   386,     0,   387,     0,
     388,     0,   389,     0,   390,   391,   392,     0,   734,     0,
     735,   394,   395,   396,   397,   398,   736,   737,   401,   402,
     403,   404,     0,   738,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,   428,     0,     0,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   739,   740,   436,   437,
       0,   438,   439,   741,   441,   442,   443,   742,   743,   444,
     445,   446,   447,   744,   448,   449,     0,     0,   450,   451,
     452,   453,     0,   745,   454,   455,     0,   746,   747,   748,
     749,     0,     0,     0,     0,     0,   460,   461,     0,   750,
     751,   752,   463,   464,   465,   753,     0,   466,   467,   754,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   755,   476,     0,     0,   756,   757,
     758,   759,   477,     0,     0,   478,   760,     0,   761,   479,
     480,   481,   762,   763,     0,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   764,
       0,     0,     0,   765,   766,     0,     0,     0,     0,   767,
     768,     0,     0,   769,   770,     0,     0,   771,   772,   137,
       0,   663,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   664,     0,   146,   147,   148,
     149,   665,   151,     0,   152,     0,     0,   666,   153,   667,
     668,   669,   154,   670,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   671,   672,   162,   163,
       0,   164,   673,   674,   166,     0,   167,   168,   169,   170,
     675,   172,     0,   676,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   677,   190,     0,   678,   679,   191,     0,     0,
     192,   680,   193,   681,     0,   194,   682,   683,     0,   195,
     196,   197,   684,   685,   686,     0,     0,     0,     0,   687,
     200,   688,     0,     0,   689,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
     690,     0,   228,   229,   230,   231,   232,   691,   692,   233,
     234,     0,   235,   236,   237,   693,     0,   238,     0,     0,
       0,     0,   694,   240,     0,   241,     0,   242,     0,   243,
     695,   245,   696,     0,   247,     0,   248,     0,   697,     0,
     249,   250,     0,   251,   698,     0,   252,   253,     0,     0,
       0,   699,   255,   256,   257,   700,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   701,   262,   263,  1730,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   703,   273,   274,     0,     0,     0,     0,
       0,   704,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   705,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     706,   302,   303,   304,   305,   707,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   708,   313,     0,     0,
     709,   315,   710,   316,     0,   317,   711,   712,   713,   714,
     715,   322,   323,   324,   325,   326,     0,   716,   327,   328,
       0,     0,   329,   330,   331,   332,   717,     0,   719,   333,
     334,     0,   720,   721,     0,   722,   335,     0,   336,   337,
     723,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
     724,   346,   347,     0,   348,   349,   725,   726,   727,   351,
     352,   353,   354,   728,   729,   357,   730,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   731,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,   732,
     733,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   734,     0,   735,   394,   395,   396,   397,
     398,   736,   737,   401,   402,   403,   404,     0,   738,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   739,   740,   436,   437,     0,   438,   439,   741,   441,
     442,   443,   742,   743,   444,   445,   446,   447,   744,   448,
     449,     0,     0,   450,   451,   452,   453,     0,   745,   454,
     455,     0,   746,   747,   748,   749,     0,     0,     0,     0,
       0,   460,   461,     0,   750,   751,   752,   463,   464,   465,
     753,     0,   466,   467,   754,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   755,
     476,     0,     0,   756,   757,   758,   759,   477,     0,     0,
     478,   760,     0,   761,   479,   480,   481,   762,   763,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   764,     0,     0,     0,   765,   766,
       0,     0,     0,     0,   767,   768,     0,     0,   769,   770,
       0,     0,   771,   772,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,   667,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,  1767,
       0,     0,     0,     0,   199,   200,   688,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,   692,   233,   234,     0,   235,   236,   237,
     693,     0,   238,     0,     0,     0,     0,   239,   240,     0,
     241,     0,   242,     0,   243,   244,   245,   246,     0,   247,
       0,   248,     0,     0,     0,   249,   250,     0,   251,   698,
       0,   252,   253,     0,     0,     0,   254,   255,   256,   257,
       0,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,     0,   262,   263,     0,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,     0,   273,
     274,     0,     0,     0,     0,     0,   275,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   705,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,     0,   302,   303,   304,   305,
       0,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,   316,     0,
     317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   716,   327,   328,     0,     0,   329,   330,   331,
     332,     0,     0,     0,   333,   334,     0,     0,   721,     0,
     722,   335,     0,   336,   337,   338,     0,   339,   340,   341,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,     0,   346,   347,     0,   348,
     349,   350,     0,     0,   351,   352,   353,   354,   355,   356,
     357,     0,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   367,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,   387,     0,
     388,     0,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,   405,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,   428,     0,     0,   429,     0,     0,
     430,   431,   432,   433,   434,   435,     0,     0,   436,   437,
       0,   438,   439,   440,   441,   442,   443,     0,     0,   444,
     445,   446,   447,     0,   448,   449,     0,     0,   450,   451,
     452,   453,     0,   745,   454,   455,     0,  1768,   457,   458,
    1769,     0,     0,     0,     0,     0,   460,   461,     0,     0,
     751,   462,   463,   464,   465,   753,     0,   466,   467,   754,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,     0,     0,     0,     0,
       0,     0,   477,     0,     0,   478,     0,     0,     0,   479,
     480,   481,   482,   483,     0,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   489,
       0,     0,     0,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   771,   772,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,  2526,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
     503,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,  2078,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,  2079,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,  3114,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,  2034,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,  -478,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     506,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,   137,     0,   138,   139,   140,   141,   142,
     484,   485,   143,   486,   487,   488,   144,     0,   489,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,  2597,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,  2526,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
     503,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,  2078,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,  2079,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     506,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,   137,     0,   138,   139,   140,   141,   142,
     484,   485,   143,   486,   487,   488,   144,     0,   489,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,  2597,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,  2385,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,   137,     0,   138,   139,   140,   141,   142,
     484,   485,   143,   486,   487,   488,   144,     0,   489,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
    2862,     0,   153,     0,     0,     0,   154,   772,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,     0,
     484,   485,     0,   486,   487,   488,     0,     0,   489,     0,
       0,     0,   137,     0,   138,   139,   140,   141,   142,     0,
    4614,   143,     0,     0,     0,   144,  4615,   772,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,     0,   239,   240,     0,   241,     0,
     242,     0,   243,   244,   245,   246,     0,   247,     0,   248,
       0,     0,     0,   249,   250,     0,   251,     0,     0,   252,
     253,     0,     0,     0,   254,   255,   256,   257,     0,     0,
     258,   259,   260,     0,     0,   261,     0,     0,     0,     0,
     262,   263,     0,     0,     0,   264,     0,     0,     0,   265,
     266,     0,   267,   268,     0,     0,     0,   269,     0,     0,
     270,   271,     0,     0,   272,     0,     0,   273,   274,     0,
       0,     0,     0,     0,   275,   276,     0,   277,     0,   278,
       0,   279,   280,     0,     0,     0,     0,     0,     0,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     299,   300,   301,     0,   302,   303,   304,   305,     0,   306,
     307,     0,     0,     0,     0,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,   316,     0,   317,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
       0,   327,   328,     0,     0,   329,   330,   331,   332,     0,
       0,     0,   333,   334,     0,     0,     0,     0,     0,   335,
       0,   336,   337,   338,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
       0,     0,   351,   352,   353,   354,   355,   356,   357,     0,
       0,     0,   358,   359,   360,     0,   361,     0,   362,   363,
     364,   365,   366,     0,   367,   368,   369,     0,     0,   370,
       0,     0,     0,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,     0,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,   405,   406,     0,     0,     0,   407,   408,   409,   410,
       0,     0,     0,   411,     0,     0,     0,   412,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,   425,   426,
       0,   427,   428,     0,     0,   429,     0,     0,   430,   431,
     432,   433,   434,   435,     0,     0,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,   444,   445,   446,
     447,     0,   448,   449,     0,     0,   450,   451,   452,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,     0,
       0,     0,     0,     0,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,     0,     0,     0,     0,     0,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
     482,   483,   137,     0,   138,   139,   140,   141,   142,   484,
     485,   143,   486,   487,   488,   144,     0,   489,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,  1093,     0,
       0,   153,     0,     0,     0,   154,   772,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,     0,   239,   240,     0,   241,     0,
     242,     0,   243,   244,   245,   246,     0,   247,     0,   248,
       0,     0,     0,   249,   250,     0,   251,     0,     0,   252,
     253,     0,     0,     0,   254,   255,   256,   257,     0,     0,
     258,   259,   260,     0,     0,   261,     0,     0,     0,     0,
     262,   263,     0,  1308,     0,   264,     0,     0,     0,   265,
     266,     0,   267,   268,     0,     0,     0,   269,     0,     0,
     270,   271,     0,     0,   272,     0,     0,   273,   274,     0,
       0,     0,     0,     0,   275,   276,     0,   277,     0,   278,
       0,   279,   280,     0,     0,     0,     0,     0,     0,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     299,   300,   301,     0,   302,   303,   304,   305,     0,   306,
     307,     0,     0,     0,     0,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,   316,     0,   317,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
       0,   327,   328,     0,     0,   329,   330,   331,   332,     0,
       0,     0,   333,   334,     0,     0,     0,     0,     0,   335,
       0,   336,   337,   338,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
       0,     0,   351,   352,   353,   354,   355,   356,   357,     0,
       0,     0,   358,   359,   360,     0,   361,     0,   362,   363,
     364,   365,   366,     0,   367,   368,   369,     0,     0,   370,
       0,     0,     0,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,     0,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,   405,   406,     0,     0,     0,   407,   408,   409,   410,
       0,     0,     0,   411,     0,     0,     0,   412,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,   425,   426,
       0,   427,   428,     0,     0,   429,     0,     0,   430,   431,
     432,   433,   434,   435,     0,     0,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,   444,   445,   446,
     447,     0,   448,   449,     0,     0,   450,   451,   452,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,     0,
       0,     0,     0,     0,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,     0,     0,     0,     0,     0,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
     482,   483,   137,     0,   138,   139,   140,   141,   142,   484,
     485,   143,   486,   487,   488,   144,     0,   489,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,   539,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,     0,   239,   240,     0,   241,     0,
     242,     0,   243,   244,   245,   246,     0,   247,     0,   248,
       0,     0,     0,   249,   250,     0,   251,     0,     0,   252,
     253,     0,     0,     0,   254,   255,   256,   257,     0,     0,
     258,   259,   260,     0,     0,   261,     0,     0,     0,     0,
     262,   263,     0,     0,     0,   264,     0,     0,     0,   265,
     266,     0,   267,   268,     0,     0,     0,   269,     0,     0,
     270,   271,     0,     0,   272,     0,     0,   273,   274,     0,
       0,     0,     0,     0,   275,   276,     0,   277,     0,   278,
       0,   279,   280,     0,     0,     0,     0,     0,     0,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     299,   300,   301,     0,   302,   303,   304,   305,     0,   306,
     307,     0,     0,     0,     0,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,   316,     0,   317,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
       0,   327,   328,     0,     0,   329,   330,   331,   332,     0,
       0,     0,   333,   334,     0,     0,     0,     0,     0,   335,
       0,   336,   337,   338,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
       0,     0,   351,   352,   353,   354,   355,   356,   357,     0,
       0,     0,   358,   359,   360,     0,   361,     0,   362,   363,
     364,   365,   366,     0,   367,   368,   369,     0,     0,   370,
       0,     0,     0,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,     0,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,   405,   406,     0,     0,     0,   407,   408,   409,   410,
       0,     0,     0,   411,     0,     0,     0,   412,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,   425,   426,
       0,   427,   428,     0,     0,   429,     0,     0,   430,   431,
     432,   433,   434,   435,     0,     0,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,   444,   445,   446,
     447,     0,   448,   449,     0,     0,   450,   451,   452,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,     0,
       0,     0,     0,     0,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,     0,     0,     0,     0,     0,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
     482,   483,   137,     0,   138,   139,   140,   141,   142,   484,
     485,   143,   486,   487,   488,   144,     0,   489,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,  2596,     0,
       0,   153,     0,     0,     0,   154,  2597,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,     0,   239,   240,     0,   241,     0,
     242,     0,   243,   244,   245,   246,     0,   247,     0,   248,
       0,     0,     0,   249,   250,     0,   251,     0,     0,   252,
     253,     0,     0,     0,   254,   255,   256,   257,     0,     0,
     258,   259,   260,     0,     0,   261,     0,     0,     0,     0,
     262,   263,     0,     0,     0,   264,     0,     0,     0,   265,
     266,     0,   267,   268,     0,     0,     0,   269,     0,     0,
     270,   271,     0,     0,   272,     0,     0,   273,   274,     0,
       0,     0,     0,     0,   275,   276,     0,   277,     0,   278,
       0,   279,   280,     0,     0,     0,     0,     0,     0,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     299,   300,   301,     0,   302,   303,   304,   305,     0,   306,
     307,     0,     0,     0,     0,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,   316,     0,   317,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
       0,   327,   328,     0,     0,   329,   330,   331,   332,     0,
       0,     0,   333,   334,     0,     0,     0,     0,     0,   335,
       0,   336,   337,   338,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
       0,     0,   351,   352,   353,   354,   355,   356,   357,     0,
       0,     0,   358,   359,   360,     0,   361,     0,   362,   363,
     364,   365,   366,     0,   367,   368,   369,     0,     0,   370,
       0,     0,     0,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,     0,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,   405,   406,     0,     0,     0,   407,   408,   409,   410,
       0,     0,     0,   411,     0,     0,     0,   412,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,   425,   426,
       0,   427,   428,     0,     0,   429,     0,     0,   430,   431,
     432,   433,   434,   435,     0,     0,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,   444,   445,   446,
     447,     0,   448,   449,     0,     0,   450,   451,   452,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,     0,
       0,     0,     0,     0,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,     0,     0,     0,     0,     0,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,     0,   484,
     485,     0,   486,   487,   488,     0,     0,   489,     0,     0,
       0,     0,   137,  2824,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   539,     0,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,     0,   239,   240,     0,   241,     0,
     242,     0,   243,   244,   245,   246,     0,   247,     0,   248,
       0,     0,     0,   249,   250,     0,   251,     0,     0,   252,
     253,     0,     0,     0,   254,   255,   256,   257,     0,     0,
     258,   259,   260,     0,     0,   261,     0,     0,     0,     0,
     262,   263,     0,     0,     0,   264,     0,     0,     0,   265,
     266,     0,   267,   268,     0,     0,     0,   269,     0,     0,
     270,   271,     0,     0,   272,     0,     0,   273,   274,     0,
       0,     0,     0,     0,   275,   276,     0,   277,     0,   278,
       0,   279,   280,     0,     0,     0,     0,     0,     0,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     299,   300,   301,     0,   302,   303,   304,   305,     0,   306,
     307,     0,     0,     0,     0,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,   316,     0,   317,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
       0,   327,   328,     0,     0,   329,   330,   331,   332,     0,
       0,     0,   333,   334,     0,     0,     0,     0,     0,   335,
       0,   336,   337,   338,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
       0,     0,   351,   352,   353,   354,   355,   356,   357,     0,
       0,     0,   358,   359,   360,     0,   361,     0,   362,   363,
     364,   365,   366,     0,   367,   368,   369,     0,     0,   370,
       0,     0,     0,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,     0,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,   405,   406,     0,     0,     0,   407,   408,   409,   410,
       0,     0,     0,   411,     0,     0,     0,   412,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,   425,   426,
       0,   427,   428,     0,     0,   429,     0,     0,   430,   431,
     432,   433,   434,   435,     0,     0,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,   444,   445,   446,
     447,     0,   448,   449,     0,     0,   450,   451,   452,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,     0,
       0,     0,     0,     0,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,     0,     0,     0,     0,     0,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,     0,   484,
     485,     0,   486,   487,   488,     0,     0,   489,     0,     0,
       0,   137,     0,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,  4615,   772,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,   539,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   602,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   603,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   604,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,   539,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,   772,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,  2597,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   874,   875,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,   876,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   877,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   878,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   879,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   880,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   881,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   882,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,     0,   489,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,   883,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,   615,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,   134,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,     0,   489,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,   145,
    1359,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
     615,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,   134,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,     0,
     484,   485,     0,   486,   487,   488,     0,     0,   489,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,  1700,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   874,   875,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   189,   190,     0,     0,     0,   191,     0,     0,
     192,     0,   193,     0,     0,   194,     0,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,     0,   876,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
       0,     0,   228,   229,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,     0,     0,   238,     0,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   877,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   878,     0,   278,     0,   279,   280,
       0,     0,     0,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   879,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
       0,   346,   347,     0,   348,   349,   880,     0,     0,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   393,     0,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   881,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,     0,     0,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,   444,   445,   446,   447,     0,   448,
     449,     0,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,     0,     0,     0,     0,     0,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,   482,   483,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   489,   137,     0,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   145,   883,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   189,   190,
       0,     0,     0,   191,     0,     0,   192,     0,   193,     0,
       0,   194,     0,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,     0,
       0,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,     0,     0,   228,   229,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,     0,     0,   238,     0,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,   249,   250,     0,   251,
       0,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,   615,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   343,   344,   345,     0,   346,   347,     0,
     348,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,   357,     0,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,     0,   389,     0,   390,   391,   392,     0,   393,
       0,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,   428,     0,     0,   429,     0,
       0,   430,   431,   432,   433,   434,   435,     0,     0,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
     444,   445,   446,   447,     0,   448,   449,     0,     0,   450,
     451,   452,   453,     0,   134,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,     0,     0,     0,
       0,     0,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,   482,   483,     0,     0,     0,     0,     0,
       0,     0,   484,   485,     0,   486,   487,   488,     0,     0,
     489,   137,     0,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,     0,     0,   145,  3602,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,  1242,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,     0,   489,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,  1243,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,     0,   489,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,     0,
    1243,   146,   147,   148,   149,   150,     0,     0,  -366,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,     0,     0,     0,     0,   161,
    4040,     0,   162,   163,     0,   164,     0,     0,     0,     0,
     167,   168,   169,  4041,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   178,     0,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,     0,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,     0,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,     0,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,  4042,   235,   236,   237,     0,
       0,     0,     0,     0,     0,     0,     0,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,     0,   250,     0,     0,     0,     0,
       0,   253,     0,     0,     0,   254,   255,   256,   257,  4043,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,     0,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,  4044,     0,     0,   269,     0,
       0,     0,   271,     0,     0,   272,  4045,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,  -321,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,     0,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,  4046,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   344,   345,     0,     0,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,     0,
       0,     0,     0,     0,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,     0,     0,
     383,     0,   385,  -321,     0,   386,     0,     0,     0,   388,
       0,     0,     0,   390,   391,   392,  4047,   393,     0,     0,
       0,   395,   396,   397,   398,   399,   400,   401,     0,   403,
     404,     0,   405,     0,     0,     0,     0,   407,   408,   409,
       0,     0,     0,     0,   411,     0,     0,     0,   412,     0,
       0,   414,     0,   416,     0,   417,     0,     0,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
       0,   432,   433,   434,   435,     0,     0,     0,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
       0,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,     0,     0,     0,     0,   472,     0,     0,   473,
       0,     0,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,     0,     0,  -321,     0,     0,     0,     0,
     484,     0,     0,   486,     0,   488,     0,   137,   489,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,  4607,     0,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,   137,   489,   138,   139,   140,   141,   142,  2154,     0,
     143,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,   137,   489,   138,   139,   140,
     141,   142,  2892,     0,   143,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   189,   190,
       0,     0,     0,   191,     0,     0,   192,     0,   193,     0,
       0,   194,     0,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,     0,
       0,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,     0,     0,   228,   229,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,     0,     0,   238,     0,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,   249,   250,     0,   251,
       0,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   343,   344,   345,     0,   346,   347,     0,
     348,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,   357,     0,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,     0,   389,     0,   390,   391,   392,     0,   393,
       0,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,   428,     0,     0,   429,     0,
       0,   430,   431,   432,   433,   434,   435,     0,     0,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
     444,   445,   446,   447,     0,   448,   449,     0,     0,   450,
     451,   452,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,     0,     0,     0,
       0,     0,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,   482,   483,     0,     0,     0,     0,     0,
       0,     0,   484,   485,     0,   486,   487,   488,     0,   137,
     489,   138,   139,   140,   141,   142,  3561,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   189,   190,     0,     0,     0,   191,     0,     0,
     192,     0,   193,     0,     0,   194,     0,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,     0,     0,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
       0,     0,   228,   229,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,     0,     0,   238,     0,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
       0,   346,   347,     0,   348,   349,   350,     0,     0,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,     0,   389,     0,   390,
     391,   392,     0,   393,     0,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,   431,   432,   433,   434,
     435,     0,     0,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,   444,   445,   446,   447,     0,   448,
     449,     0,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,     0,     0,     0,     0,     0,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,   482,   483,     0,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,   137,   489,   138,   139,   140,   141,   142,
    3607,     0,   143,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,  2504,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,  2505,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,  2506,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,  2507,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
    1009,  1010,     0,   333,   334,     0,     0,     0,     0,  2508,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,  4594,   564,  4595,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,  2509,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,   137,     0,   138,   139,   140,   141,   142,
     484,   485,   143,   486,   487,   488,   144,     0,   489,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,  1348,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,  1349,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,  1350,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
     615,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,  1351,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,   134,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,   137,     0,   138,   139,   140,   141,   142,
     484,   485,   143,   486,   487,   488,   144,     0,   489,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,  1361,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,  1362,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
     615,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,   134,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,   137,     0,   138,   139,   140,   141,   142,
     484,   485,   143,   486,   487,   488,   144,     0,   489,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,  1899,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,  1900,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,   724,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,  1901,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,   137,     0,   138,   139,   140,   141,   142,
     484,   485,   143,   486,   487,   488,   144,     0,   489,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,  1348,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,  1349,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
     615,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,   134,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,   137,     0,   138,   139,   140,   141,   142,
     484,   485,   143,   486,   487,   488,   144,     0,   489,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,   966,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
     615,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   345,     0,   346,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   357,
       0,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
       0,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
     431,   432,   433,   434,   435,     0,     0,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,   134,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,     0,
     484,   485,     0,   486,   487,   488,     0,   137,   489,   138,
     139,   140,   141,   142,  1383,     0,   143,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,   615,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,   134,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,   943,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,   944,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,   945,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,  2413,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,   615,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,   134,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,  1348,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,   615,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,   134,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,   615,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,   134,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,  2888,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,   134,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,  4514,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,  4515,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,   564,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,  1045,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,   876,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,  1875,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,  2071,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,   876,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,   137,     0,   138,
     139,   140,   141,   142,   484,   485,   143,   486,   487,   488,
     144,     0,   489,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
     189,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,     0,  2984,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,   215,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,   227,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,     0,     0,   238,     0,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   357,     0,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,     0,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,   431,   432,   433,   434,   435,     0,
       0,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,   137,   489,   138,   139,   140,   141,   142,  2992,     0,
     143,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,  3016,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,  3080,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
     134,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,  1800,   237,     0,     0,   238,
       0,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,  1801,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   357,     0,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,     0,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,   431,   432,
     433,   434,   435,     0,     0,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,   137,     0,   138,   139,   140,   141,   142,   484,   485,
     143,   486,   487,   488,   144,     0,   489,     0,     0,   146,
     147,   148,   149,   150,     0,     0,  -366,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,     0,     0,     0,     0,   161,  4040,     0,
     162,   163,     0,   164,     0,     0,     0,     0,   167,   168,
     169,  4041,   171,   172,     0,   173,   174,     0,   175,   176,
       0,   178,     0,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,     0,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,     0,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,     0,     0,     0,   211,   212,   213,
       0,  -336,  -336,   214,     0,  -336,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,  4042,   235,   236,   237,     0,     0,     0,
       0,     0,     0,     0,     0,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,   253,
       0,     0,     0,   254,   255,   256,   257,  4043,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
       0,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,  4044,     0,     0,   269,     0,     0,     0,
     271,     0,     0,   272,  4045,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,  -321,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,     0,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,  4046,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     344,   345,     0,     0,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,     0,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,     0,     0,   383,     0,
     385,  -321,     0,   386,     0,     0,     0,   388,     0,     0,
       0,   390,   391,   392,  4047,   393,     0,     0,     0,   395,
     396,   397,   398,   399,   400,   401,     0,   403,   404,     0,
     405,     0,     0,     0,     0,   407,   408,   409,     0,     0,
       0,     0,   411,     0,     0,     0,   412,     0,     0,   414,
       0,   416,     0,   417,     0,     0,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,     0,   432,
     433,   434,   435,     0,     0,     0,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,     0,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
       0,     0,     0,     0,   472,     0,     0,   473,     0,     0,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,     0,     0,  -321,     0,     0,     0,     0,   484,     0,
       0,   486,     0,   488,     0,   137,   489,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,     0,     0,
    -366,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,     0,     0,     0,
       0,   161,  4040,     0,   162,   163,     0,   164,     0,     0,
       0,     0,   167,   168,   169,  4041,   171,   172,     0,   173,
     174,     0,   175,   176,     0,   178,     0,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,     0,   190,
       0,     0,     0,   191,     0,     0,   192,     0,   193,     0,
       0,   194,     0,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,     0,     0,     0,     0,
       0,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,     0,     0,
       0,   211,   212,   213,     0,  -357,     0,   214,     0,  -357,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   228,   229,
     230,   231,   232,     0,     0,   233,   234,  4042,   235,   236,
     237,     0,     0,     0,     0,     0,     0,     0,     0,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,     0,   250,     0,     0,
       0,     0,     0,   253,     0,     0,     0,   254,   255,   256,
     257,  4043,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,     0,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,  4044,     0,     0,
     269,     0,     0,     0,   271,     0,     0,   272,  4045,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
    -321,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,     0,   334,     0,     0,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
    4046,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   344,   345,     0,     0,   347,     0,
     348,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,     0,     0,     0,     0,     0,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
       0,     0,   383,     0,   385,  -321,     0,   386,     0,     0,
       0,   388,     0,     0,     0,   390,   391,   392,  4047,   393,
       0,     0,     0,   395,   396,   397,   398,   399,   400,   401,
       0,   403,   404,     0,   405,     0,     0,     0,     0,   407,
     408,   409,     0,     0,     0,     0,   411,     0,     0,     0,
     412,     0,     0,   414,     0,   416,     0,   417,     0,     0,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,   428,     0,     0,   429,     0,
       0,   430,     0,   432,   433,   434,   435,     0,     0,     0,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
     444,   445,   446,   447,     0,   448,   449,     0,     0,   450,
     451,   452,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,     0,
       0,     0,     0,   463,   464,   465,     0,     0,   466,   467,
       0,   468,   469,     0,     0,     0,     0,     0,   472,     0,
       0,   473,     0,     0,     0,   475,   476,     0,     0,     0,
       0,     0,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,   482,   483,  -357,     0,  -321,     0,     0,
       0,     0,   484,     0,     0,   486,     0,   488,     0,   137,
     489,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,     0,     0,  -366,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,     0,     0,     0,     0,   161,  4040,     0,   162,   163,
       0,   164,     0,     0,     0,     0,   167,   168,   169,  4041,
     171,   172,     0,   173,   174,     0,   175,   176,     0,   178,
       0,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,     0,   190,     0,     0,     0,   191,     0,     0,
     192,     0,   193,     0,     0,   194,     0,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
       0,     0,     0,     0,     0,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,     0,     0,     0,   211,   212,   213,     0,  -354,
       0,   214,     0,  -354,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,     0,
       0,     0,   228,   229,   230,   231,   232,     0,     0,   233,
     234,  4042,   235,   236,   237,     0,     0,     0,     0,     0,
       0,     0,     0,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
       0,   250,     0,     0,     0,     0,     0,   253,     0,     0,
       0,   254,   255,   256,   257,  4043,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,     0,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,  4044,     0,     0,   269,     0,     0,     0,   271,     0,
       0,   272,  4045,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,  -321,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,     0,
     334,     0,     0,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,  4046,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   344,   345,
       0,     0,   347,     0,   348,   349,   350,     0,     0,   351,
     352,   353,   354,   355,   356,     0,     0,     0,     0,     0,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,     0,     0,   383,     0,   385,  -321,
       0,   386,     0,     0,     0,   388,     0,     0,     0,   390,
     391,   392,  4047,   393,     0,     0,     0,   395,   396,   397,
     398,   399,   400,   401,     0,   403,   404,     0,   405,     0,
       0,     0,     0,   407,   408,   409,     0,     0,     0,     0,
     411,     0,     0,     0,   412,     0,     0,   414,     0,   416,
       0,   417,     0,     0,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,     0,   432,   433,   434,
     435,     0,     0,     0,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,   444,   445,   446,   447,     0,   448,
     449,     0,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,     0,     0,     0,     0,   463,   464,   465,
       0,     0,   466,   467,     0,   468,   469,     0,     0,     0,
       0,     0,   472,     0,     0,   473,     0,     0,     0,   475,
     476,     0,     0,     0,     0,     0,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,   482,   483,  -354,
       0,  -321,     0,     0,     0,     0,   484,     0,     0,   486,
       0,   488,     0,   137,   489,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,     0,     0,  -366,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,     0,     0,     0,     0,   161,
    4040,     0,   162,   163,     0,   164,     0,     0,     0,     0,
     167,   168,   169,  4041,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   178,     0,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,     0,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,     0,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,     0,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,  4406,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,  4042,   235,   236,   237,     0,
       0,     0,     0,     0,     0,     0,     0,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,     0,   250,     0,     0,     0,     0,
       0,   253,     0,     0,     0,   254,   255,   256,   257,  4043,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,     0,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,  4044,     0,     0,   269,     0,
       0,     0,   271,     0,     0,   272,  4045,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,  -321,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,     0,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,  4046,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   344,   345,     0,     0,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,     0,
       0,     0,     0,     0,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,     0,     0,
     383,     0,   385,  -321,     0,   386,     0,     0,     0,   388,
       0,     0,     0,   390,   391,   392,  4047,   393,     0,     0,
       0,   395,   396,   397,   398,   399,   400,   401,     0,   403,
     404,     0,   405,     0,     0,     0,     0,   407,   408,   409,
       0,     0,     0,     0,   411,     0,     0,     0,   412,     0,
       0,   414,     0,   416,     0,   417,     0,     0,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
       0,   432,   433,   434,   435,     0,     0,     0,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
       0,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,     0,     0,     0,     0,   472,     0,     0,   473,
       0,     0,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,     0,     0,  -321,     0,     0,     0,     0,
     484,     0,     0,   486,     0,   488,     0,   137,   489,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
       0,     0,  -366,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,     0,
       0,     0,     0,   161,  4040,     0,   162,   163,     0,   164,
       0,     0,     0,     0,   167,   168,   169,  4041,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   178,     0,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
       0,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,     0,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
       0,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,  -359,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,  4042,
     235,   236,   237,     0,     0,     0,     0,     0,     0,     0,
       0,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,     0,   250,
       0,     0,     0,     0,     0,   253,     0,     0,     0,   254,
     255,   256,   257,  4043,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,     0,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,  4044,
       0,     0,   269,     0,     0,     0,   271,     0,     0,   272,
    4045,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,  -321,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,     0,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,  4046,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   344,   345,     0,     0,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,     0,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,     0,     0,   383,     0,   385,  -321,     0,   386,
       0,     0,     0,   388,     0,     0,     0,   390,   391,   392,
    4047,   393,     0,     0,     0,   395,   396,   397,   398,   399,
     400,   401,     0,   403,   404,     0,   405,     0,     0,     0,
       0,   407,   408,   409,     0,     0,     0,     0,   411,     0,
       0,     0,   412,     0,     0,   414,     0,   416,     0,   417,
       0,     0,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,     0,   432,   433,   434,   435,     0,
       0,     0,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,     0,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,     0,     0,     0,     0,
     472,     0,     0,   473,     0,     0,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,     0,     0,  -321,
       0,     0,     0,     0,   484,     0,     0,   486,     0,   488,
       0,   137,   489,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,     0,     0,  -366,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,     0,     0,     0,     0,   161,  4040,     0,
     162,   163,     0,   164,     0,     0,     0,     0,   167,   168,
     169,  4041,   171,   172,     0,   173,   174,     0,   175,   176,
       0,   178,     0,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,     0,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,     0,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,     0,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,  4519,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,  4042,   235,   236,   237,     0,     0,     0,
       0,     0,     0,     0,     0,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,   253,
       0,     0,     0,   254,   255,   256,   257,  4043,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
       0,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,  4044,     0,     0,   269,     0,     0,     0,
     271,     0,     0,   272,  4045,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,  -321,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,     0,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,  4046,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     344,   345,     0,     0,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,     0,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,     0,     0,   383,     0,
     385,  -321,     0,   386,     0,     0,     0,   388,     0,     0,
       0,   390,   391,   392,  4047,   393,     0,     0,     0,   395,
     396,   397,   398,   399,   400,   401,     0,   403,   404,     0,
     405,     0,     0,     0,     0,   407,   408,   409,     0,     0,
       0,     0,   411,     0,     0,     0,   412,     0,     0,   414,
       0,   416,     0,   417,     0,     0,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,     0,   432,
     433,   434,   435,     0,     0,     0,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,     0,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
       0,     0,     0,     0,   472,     0,     0,   473,     0,     0,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,     0,     0,  -321,     0,     0,     0,     0,   484,     0,
       0,   486,     0,   488,     0,   137,   489,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,     0,     0,
    -366,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,     0,     0,     0,
       0,   161,  4040,     0,   162,   163,     0,   164,     0,     0,
       0,     0,   167,   168,   169,  4041,   171,   172,     0,   173,
     174,     0,   175,   176,     0,   178,     0,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,     0,   190,
       0,     0,     0,   191,     0,     0,   192,     0,   193,     0,
       0,   194,     0,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,     0,     0,     0,     0,
       0,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,     0,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,  4565,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,     0,     0,     0,   228,   229,
     230,   231,   232,     0,     0,   233,   234,  4042,   235,   236,
     237,     0,     0,     0,     0,     0,     0,     0,     0,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,     0,   250,     0,     0,
       0,     0,     0,   253,     0,     0,     0,   254,   255,   256,
     257,  4043,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,     0,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,  4044,     0,     0,
     269,     0,     0,     0,   271,     0,     0,   272,  4045,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
    -321,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,     0,   334,     0,     0,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
    4046,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   344,   345,     0,     0,   347,     0,
     348,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,     0,     0,     0,     0,     0,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
       0,     0,   383,     0,   385,  -321,     0,   386,     0,     0,
       0,   388,     0,     0,     0,   390,   391,   392,  4047,   393,
       0,     0,     0,   395,   396,   397,   398,   399,   400,   401,
       0,   403,   404,     0,   405,     0,     0,     0,     0,   407,
     408,   409,     0,     0,     0,     0,   411,     0,     0,     0,
     412,     0,     0,   414,     0,   416,     0,   417,     0,     0,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,   428,     0,     0,   429,     0,
       0,   430,     0,   432,   433,   434,   435,     0,     0,     0,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
     444,   445,   446,   447,     0,   448,   449,     0,     0,   450,
     451,   452,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,     0,
       0,     0,     0,   463,   464,   465,     0,     0,   466,   467,
       0,   468,   469,     0,     0,     0,     0,     0,   472,     0,
       0,   473,     0,     0,     0,   475,   476,     0,     0,     0,
       0,     0,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,   482,   483,     0,     0,  -321,     0,     0,
       0,     0,   484,     0,     0,   486,     0,   488,     0,   137,
     489,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,     0,     0,  -366,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,     0,     0,     0,     0,   161,  4040,     0,   162,   163,
       0,   164,     0,     0,     0,     0,   167,   168,   169,  4041,
     171,   172,     0,   173,   174,     0,   175,   176,     0,   178,
       0,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,     0,   190,     0,     0,     0,   191,     0,     0,
     192,     0,   193,     0,     0,   194,     0,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
       0,     0,     0,     0,     0,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,     0,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,  -340,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,     0,
       0,     0,   228,   229,   230,   231,   232,     0,     0,   233,
     234,  4042,   235,   236,   237,     0,     0,     0,     0,     0,
       0,     0,     0,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
       0,   250,     0,     0,     0,     0,     0,   253,     0,     0,
       0,   254,   255,   256,   257,  4043,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,     0,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,  4044,     0,     0,   269,     0,     0,     0,   271,     0,
       0,   272,  4045,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,  -321,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,     0,
     334,     0,     0,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,  4046,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   344,   345,
       0,     0,   347,     0,   348,   349,   350,     0,     0,   351,
     352,   353,   354,   355,   356,     0,     0,     0,     0,     0,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,     0,     0,   383,     0,   385,  -321,
       0,   386,     0,     0,     0,   388,     0,     0,     0,   390,
     391,   392,  4047,   393,     0,     0,     0,   395,   396,   397,
     398,   399,   400,   401,     0,   403,   404,     0,   405,     0,
       0,     0,     0,   407,   408,   409,     0,     0,     0,     0,
     411,     0,     0,     0,   412,     0,     0,   414,     0,   416,
       0,   417,     0,     0,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,   428,
       0,     0,   429,     0,     0,   430,     0,   432,   433,   434,
     435,     0,     0,     0,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,   444,   445,   446,   447,     0,   448,
     449,     0,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,     0,     0,     0,     0,   463,   464,   465,
       0,     0,   466,   467,     0,   468,   469,     0,     0,     0,
       0,     0,   472,     0,     0,   473,     0,     0,     0,   475,
     476,     0,     0,     0,     0,     0,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,   482,   483,     0,
       0,  -321,     0,     0,     0,     0,   484,     0,     0,   486,
       0,   488,     0,   137,   489,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,     0,     0,  -366,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,     0,     0,     0,     0,   161,
    4040,     0,   162,   163,     0,   164,     0,     0,     0,     0,
     167,   168,   169,  4041,   171,   172,     0,   173,   174,     0,
     175,   176,     0,   178,     0,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,     0,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,     0,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,     0,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,     0,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,  4042,   235,   236,   237,     0,
       0,     0,     0,     0,     0,     0,     0,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,     0,   250,     0,     0,     0,     0,
       0,   253,     0,     0,     0,   254,   255,   256,   257,  4043,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,     0,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,  4044,     0,     0,   269,     0,
       0,     0,   271,     0,     0,   272,  4045,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,  -321,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,     0,   334,     0,     0,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,  4046,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   344,   345,     0,     0,   347,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,     0,
       0,     0,     0,     0,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,     0,     0,
     383,     0,   385,  -321,     0,   386,     0,     0,     0,   388,
       0,     0,     0,   390,   391,   392,  4047,   393,     0,     0,
       0,   395,   396,   397,   398,   399,   400,   401,     0,   403,
     404,     0,   405,     0,     0,     0,     0,   407,   408,   409,
       0,     0,     0,     0,   411,     0,     0,     0,   412,     0,
       0,   414,     0,   416,     0,   417,     0,     0,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,   428,     0,     0,   429,     0,     0,   430,
       0,   432,   433,   434,   435,     0,     0,     0,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,   444,   445,
     446,   447,     0,   448,   449,     0,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,     0,     0,     0,
       0,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,     0,     0,     0,     0,     0,   472,     0,     0,   473,
       0,     0,     0,   475,   476,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,   482,   483,     0,     0,  -321,     0,     0,     0,     0,
     484,     0,     0,   486,     0,   488,     0,   137,   489,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
       0,     0,  -366,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,     0,
       0,     0,     0,   161,  4040,     0,   162,   163,     0,   164,
       0,     0,     0,     0,   167,   168,   169,  4041,   171,   172,
       0,   173,   174,     0,   175,   176,     0,   178,     0,   180,
     181,   182,   183,     0,   184,   185,     0,   186,   187,   188,
       0,   190,     0,     0,     0,   191,     0,     0,   192,     0,
     193,     0,     0,   194,     0,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,     0,     0,
       0,     0,     0,   201,   202,     0,   203,     0,     0,     0,
     204,     0,   205,   206,   207,   208,   209,     0,     0,     0,
       0,     0,     0,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   216,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,   225,   226,     0,     0,     0,
     228,   229,   230,   231,   232,     0,     0,   233,   234,  4042,
     235,   236,   237,     0,     0,     0,     0,     0,     0,     0,
       0,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,     0,   250,
       0,     0,     0,     0,     0,   253,     0,     0,     0,   254,
     255,   256,   257,  4043,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,     0,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,  4044,
       0,     0,   269,     0,     0,     0,   271,     0,     0,   272,
    4045,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,  -321,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,     0,   334,     0,
       0,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,  4046,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   344,   345,     0,     0,
     347,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,     0,     0,     0,     0,     0,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,     0,     0,   383,     0,   385,  -321,     0,   386,
       0,     0,     0,   388,     0,     0,     0,   390,   391,   392,
    4047,   393,     0,     0,     0,   395,   396,   397,   398,   399,
     400,   401,     0,   403,   404,     0,   405,     0,     0,     0,
       0,   407,   408,   409,     0,     0,     0,     0,   411,     0,
       0,     0,   412,     0,     0,   414,     0,   416,     0,   417,
       0,     0,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,   428,     0,     0,
     429,     0,     0,   430,     0,   432,   433,   434,   435,     0,
       0,     0,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,   444,   445,   446,   447,     0,   448,   449,     0,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,     0,     0,     0,     0,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,     0,     0,     0,     0,     0,
     472,     0,     0,  4409,     0,     0,     0,   475,   476,     0,
       0,     0,     0,     0,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,   482,   483,     0,     0,  -321,
       0,     0,     0,     0,   484,     0,     0,   486,     0,   488,
       0,   137,   489,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,     0,     0,     0,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,     0,     0,     0,     0,   161,     0,     0,
     162,   163,     0,   164,     0,     0,     0,     0,   167,   168,
     169,     0,   171,   172,     0,   173,   174,     0,   175,   176,
       0,   178,     0,   180,   181,   182,   183,     0,   184,   185,
       0,   186,   187,   188,     0,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,     0,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,     0,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,     0,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,     0,
       0,     0,     0,     0,     0,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
       0,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,     0,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,     0,   334,     0,     0,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     344,   345,     0,     0,   347,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,     0,     0,     0,
       0,     0,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,     0,     0,   383,     0,
     385,     0,     0,   386,     0,     0,     0,   388,     0,     0,
       0,   390,   391,   392,     0,   393,     0,     0,     0,   395,
     396,   397,   398,   399,   400,   401,     0,   403,   404,     0,
     405,     0,     0,     0,     0,   407,   408,   409,     0,     0,
       0,     0,   411,     0,     0,     0,   412,     0,     0,   414,
       0,   416,     0,   417,     0,     0,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,   428,     0,     0,   429,     0,     0,   430,     0,   432,
     433,   434,   435,     0,     0,     0,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,   444,   445,   446,   447,
       0,   448,   449,     0,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,     0,     0,     0,     0,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,     0,
       0,     0,     0,     0,   472,     0,     0,   473,     0,     0,
       0,   475,   476,     0,     0,     0,     0,     0,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,     0,   484,     0,
       0,   486,     0,   488,     0,     0,   489
};

static const yytype_int16 yycheck[] =
{
       6,   648,   649,   639,   576,   575,   576,   959,   122,    20,
     879,   880,  1559,    19,  1146,   595,  1146,    23,   858,    30,
     889,  1852,  1697,  1242,  1049,    36,    32,     6,  1492,   960,
    1386,  1819,   611,    39,  1090,   706,    42,  1043,  1044,  1289,
      46,  1367,  2558,  2034,  1490,   624,  1481,    53,   666,  2105,
     897,   895,  1169,  1481,  2389,  1242,  2170,  1116,  1295,  1176,
    2486,  2175,  2869,  2344,  2675,  3352,  1080,  1471,  2446,  2447,
    2927,   964,   919,   919,  1481,  2497,   920,  2001,   964,  2272,
    1771,  1112,  1113,  2474,  1928,     4,  3072,  1841,    94,  2553,
    1997,  2454,  1471,  2515,  2516,  2060,  1475,   653,  1477,   520,
     635,   636,  2559,  2467,  3587,  2307,  2949,  1461,  2531,    24,
     116,  2475,   118,    33,  2708,   121,   122,   123,  1177,  1178,
    1952,  1953,  1181,  1182,  1183,  1184,  2407,  1186,  1187,  1188,
    1189,  1190,  1191,  1192,  1193,  3224,  1540,  1969,  1397,   118,
    2130,   777,   121,  2130,  2711,    19,  1997,   765,   766,   767,
      16,    17,   939,  2705,  1986,  1987,  1415,  2709,    17,    50,
     778,  1540,    16,    17,  1423,  1424,     9,  3127,    70,    46,
    2002,    29,  3375,  2005,  2006,    17,  2008,  1971,  2179,  2011,
    2012,   921,    20,  2015,  2119,    75,    29,  2003,  2020,  2153,
    1850,  2007,    35,  2025,  2026,  2027,  2028,  2029,  1215,    70,
      19,  2033,  2018,  2035,  2205,  3357,  1989,   151,  2209,  2041,
    2042,  2043,  2044,  2651,  2030,  2047,   187,  2049,    20,  2980,
      45,  2643,  2644,  2130,    21,  3635,  3645,  1943,    50,   808,
      74,  2232,  2233,  2677,   263,    23,    65,  2238,    61,    11,
    3415,  3416,  3954,  1471,  3419,    59,   174,  1475,    82,  1477,
    2515,  2516,   139,  2254,  2255,   155,   193,   129,  1980,   193,
     839,    58,    59,  3438,    16,    17,    19,    19,   390,  3444,
      33,    35,  2823,    55,    16,    17,   681,   151,   222,  2130,
      42,   155,  2114,  2115,  2116,  2117,   155,   187,   126,   132,
     314,  2266,   151,   141,  2295,   222,  3583,    16,    17,   376,
      19,   222,   457,   356,   222,    80,    94,    21,   120,   190,
      16,    17,  1540,   228,    74,  1067,    16,    17,   365,    33,
      16,    17,  3066,  2874,   126,   123,  2689,    57,  2691,   179,
     370,   448,    23,    47,   104,   476,   155,    16,    17,   151,
      35,   362,   511,    20,    58,    59,  4213,    16,    17,   392,
     122,   756,    12,   824,   281,   236,   437,   264,   264,   106,
      16,    17,   120,  2085,   554,  2087,  2088,   376,    16,    17,
      12,  2093,  2094,   122,  1021,  1022,  1023,    21,  2643,  2644,
    2102,  2103,   207,   526,  2215,  2107,    16,    17,  2856,    33,
     554,   505,   120,   520,   207,   310,   207,   574,   423,  3821,
     226,    81,   155,    47,   254,   162,   250,    33,  1079,    16,
      17,   420,   120,  2784,    58,    59,  2432,    16,    17,   444,
     100,   598,  1093,   151,    16,    17,   553,  3849,   145,   543,
     303,   359,   125,    59,  2519,   145,   193,   518,   251,  2403,
     251,   171,   145,   151,    62,   175,   210,   468,    21,   126,
      16,    17,    67,  3936,   479,   990,   465,   187,   648,    67,
      33,  4079,  1109,   606,   382,  1112,  1113,    16,    17,   376,
     376,   942,   163,   410,    47,   135,   410,   530,  2946,   226,
      16,    17,   651,   281,   190,    58,    59,    16,    17,   238,
     250,  1360,   419,   135,   649,   376,    16,    17,  3673,   505,
     641,   507,   446,    62,  1435,   355,   281,  3682,   125,   375,
    2534,   554,   378,    16,    17,   210,  2879,  2880,   524,   641,
      16,    17,   528,   158,  4236,  3812,   643,    61,   281,   140,
    3705,   452,   380,   539,   452,  3710,  1172,   543,  2260,   545,
     303,   412,   261,  2934,    16,    17,  1872,  1391,    16,    17,
    1394,    64,   558,  1200,  2018,  1399,  2979,  2473,   611,  2982,
    2983,   966,  1180,   454,    16,    17,   643,  1971,  1461,   575,
    2862,  1242,  2537,   355,  3000,  1461,  2541,   583,    78,  1197,
     342,  1425,  1426,  2574,   418,   485,   107,   616,   318,   110,
    2555,  2556,  1971,  1997,   423,   601,   643,   484,  3750,  4217,
    1447,   359,  2567,  3364,  4023,   611,   378,   613,   431,   649,
    1989,   548,  2519,  4480,   548,   232,   485,   641,   624,   625,
     626,   459,  1841,   375,   190,   631,   378,   633,   246,   635,
     636,  2596,   454,   375,   640,   641,   378,  3381,   187,   645,
     155,  1062,  1063,   571,   469,  2052,  1539,   626,   619,   655,
     656,   657,   186,  1539,  1841,   661,   375,   459,  3096,   378,
     588,  2651,  1083,  1922,  2651,    10,  1725,  3627,  2519,   375,
     423,  1092,   378,  3095,   545,   375,  3120,  1736,   378,   375,
    1739,  1421,   378,  1104,  1105,  1106,  1221,   246,   578,   419,
     533,   805,  3549,    24,  1115,  2696,   375,   568,  3850,   378,
     706,    16,    17,   647,  2498,  1719,   375,   565,  2673,   378,
    2645,   554,  3263,  3264,  3265,  2119,  2548,  2718,   561,   375,
    2721,   641,   378,   565,  2688,  4208,  2130,   375,   643,  2561,
     378,  3934,  1749,  2734,  2517,  2736,    16,    17,  1525,   641,
    2119,   584,   619,  1971,  2651,   375,   565,  3836,   378,  2409,
    2466,  2130,   643,  3304,  3305,  3306,  2757,  1292,  2480,  2113,
     619,  1989,   628,  3126,   770,   879,   772,  4177,   375,   883,
     884,   378,  1307,   647,   628,   619,   375,  1356,   650,   378,
     646,  3116,   896,   375,    16,    17,   378,   584,   647,  3632,
     554,   605,   351,   799,   800,   801,   634,   803,   804,   805,
    2651,   807,   808,  3397,  3398,  3007,  2807,   813,  3960,   375,
    2785,  3405,   378,   819,  3408,  3409,  1395,  2649,  2540,  1375,
    2542,   800,   153,   829,    40,   804,   375,  2549,   807,   378,
    3095,  3425,  1584,   839,   840,   647,  3403,   625,   844,   375,
     610,  2563,   378,   631,   958,  3439,   375,  3399,  2570,   378,
    3444,  3445,  3446,  3447,  2642,   375,   598,  4340,   378,   554,
    2582,  2583,  2584,    16,    17,   476,  2588,  3434,  3435,  3829,
     584,   624,   375,   879,   408,   378,   628,   883,   884,   375,
     627,  3433,   378,  2968,    16,    17,   628,  2903,  2610,  3441,
     896,  2119,    16,    17,   608,  1465,  3448,   228,   615,   592,
    1479,   643,  2130,   375,  2350,   615,   378,   375,   124,   628,
     378,   526,   615,   643,   833,  3286,  3373,   535,   526,   647,
      16,    17,   628,   375,   643,  3389,   378,   641,   628,  4547,
     155,  2478,   628,   939,    16,    17,  3779,   643,  3361,   647,
     584,   155,   642,   643,  4096,  3931,   642,   643,    74,   628,
     557,  3342,   958,  2977,   960,  3346,  4108,  3292,   153,   628,
     519,    16,    17,   642,   643,   155,  1637,    16,    17,   812,
     485,   471,   628,   642,   643,   592,   535,   612,  3342,   310,
     628,   494,  3346,  3354,   990,  3845,   642,   643,  3351,  1858,
      16,    17,  1548,   184,   642,   643,    16,    17,   628,   184,
      16,    17,    24,  3295,   213,  4157,  4181,   369,  4183,  1878,
      68,   584,   642,   643,   151,  2846,   222,   185,   153,  2935,
    2936,   628,    16,    17,   248,   356,  3307,   280,   171,   628,
     641,   604,   605,   228,   645,  1041,   628,   558,  3003,  1045,
     561,   829,  3593,   642,   643,  1159,    16,    17,    16,    17,
     642,   643,   840,   587,   222,   361,   844,    12,   428,   171,
     375,  2968,   628,   378,  2852,   410,   625,  1911,  4355,  2533,
    2534,  1918,  1918,  1079,    16,    17,   642,  1921,  2922,   628,
    1924,  1925,  1196,    16,    17,  4237,   494,  1093,   266,   117,
    2446,  2447,   628,   642,  2498,   375,    16,    17,   378,   628,
     191,  1948,  1948,   171,    16,    17,  3096,   643,   628,  3096,
     622,   369,    16,    17,   643,  2519,    12,  2968,  2872,  2498,
    1738,    16,    17,   643,   250,   628,  3050,   264,  2819,  1243,
    2155,   153,   628,  2370,   649,  3746,   423,   132,  2517,   642,
    1146,  3950,  2201,   375,  3337,    98,   378,   643,   125,  3992,
      16,    17,   147,  1159,   151,   265,   628,  2592,   268,   567,
     628,   356,    16,    17,  2592,   230,  2283,  1814,    16,    17,
    1841,   643,   517,  1752,   239,   643,   628,    16,    17,  3180,
     135,   117,    50,   120,  1298,  2592,  2217,   136,   303,  3096,
    1196,   643,   445,   389,  4346,  1201,  2455,   134,    68,   530,
    1206,    16,    17,    16,    17,    24,   228,  3692,    11,  2997,
    1789,   581,   403,   648,   649,  1221,    16,    17,   403,  1754,
    2113,   356,   375,  4375,   569,   378,   190,  2113,  3619,  3620,
     397,   455,    31,  2289,  2290,  3051,  1242,  1243,  4180,   135,
     446,  2645,   184,   375,   440,  3096,   378,  2651,  1827,  1828,
     278,   375,  2927,  1041,   378,   232,   134,  1045,   470,  2389,
     485,   200,   624,   275,  1843,   610,  2645,   264,  2282,  4076,
    2498,   485,  2651,  1279,  4117,  1281,   419,  1283,  2292,   375,
     611,  4088,   378,    16,    17,   118,  1292,   465,   310,  2517,
     160,   264,  1298,   375,   510,   485,   378,   388,   548,  2358,
     185,  1307,  1308,   418,  4164,  4162,  4166,   419,  3299,   281,
     420,   245,   643,   628,    51,   531,   381,   526,  3919,   377,
     375,    16,    17,   378,    61,   337,   375,   117,   643,   378,
    1336,   270,   619,   361,   356,   530,   642,   222,  1344,    16,
      17,  1347,   278,   559,  2476,  4632,  2476,   270,   628,   375,
    1356,   419,   378,   125,  1468,   375,    16,    17,   378,   375,
    1366,  1367,   378,   643,   617,  1284,   624,    16,    17,   162,
    1376,  1377,  1378,  1379,  1380,  1381,  3754,    16,    17,   494,
    1386,   375,   319,   332,   378,   349,  1392,  1393,  4231,  1395,
    2836,   181,  1398,   203,  3508,   530,   628,  1376,  1377,  1378,
     193,  1380,   493,   376,   237,   375,  3371,   375,   378,   228,
     378,   643,  1418,  3748,  1393,  3900,   611,  2645,  1206,  1398,
     210,  3209,   125,  2651,   649,   361,  4235,  4270,  3393,   597,
    4017,    16,    17,   375,   357,   649,   378,  2569,   248,  2569,
     239,   319,   375,  4044,  4045,   378,   494,   643,   574,   476,
     635,   423,  1371,   596,     8,   375,   148,    12,   378,   649,
     232,   403,  1468,   375,   263,    41,   378,   159,   397,   446,
     273,   375,   598,  1479,   378,   628,   611,   635,  1484,   616,
     375,  1487,  1488,   378,   642,    16,    17,   355,   278,   423,
     643,   310,    16,    17,   476,  1283,   628,   586,  3220,   476,
     643,    16,    17,    12,   628,   420,    12,   377,   530,   375,
     647,   643,   378,  2977,   526,  4457,  4458,    95,   642,  1525,
    1308,   375,  4044,  4045,   378,    16,    17,   375,   596,   232,
     378,   643,   628,   270,    16,    17,   375,   320,  1544,   378,
    1546,  1547,   481,  1549,  1550,   245,   628,   643,   576,   476,
     465,  3944,  3945,   642,   989,  1474,  1562,   133,  1564,  2428,
     375,   643,   375,   378,  2968,   378,   376,  1546,  1547,  3995,
    2217,   361,   641,   628,   174,   375,     8,   642,   378,   628,
     135,    24,     0,    16,    17,  4172,   454,  3051,   643,   611,
     187,  1379,   425,  1381,   643,    16,    17,    29,  4199,  4200,
      16,    17,   628,  3938,  1039,    16,    17,   476,   628,   228,
      16,    17,   628,   586,   641,   592,   484,   643,   645,   616,
     366,    16,    17,   643,   151,   179,   135,   643,   248,   135,
    1418,  1637,  1638,   432,   628,   476,   342,    16,    17,   259,
     576,  1755,   375,    16,    17,   378,   392,    16,    17,   643,
     647,   229,   624,  2872,    16,    17,   211,  3771,   628,   641,
     628,   367,    16,    17,   641,  2690,    16,    17,  2286,   476,
     248,    16,    17,   643,   446,   643,   273,    16,    17,   619,
     375,   259,   374,   378,  2801,  2872,   628,   636,   637,   638,
     639,   476,  3096,   405,  2944,   628,  1484,  1703,   375,   532,
    1488,   378,  4360,   643,   476,  4363,  4307,  4100,   628,   642,
     190,  4104,   597,  3994,   641,   375,   628,  3096,   378,    16,
      17,  4322,   642,   423,   628,  2857,   375,  2857,   643,   378,
     642,    16,    17,   628,   803,  4336,   375,   356,   642,   378,
    1746,  1855,   476,   446,   548,  3467,  1752,   642,  1754,  1755,
      16,    17,   352,   353,  2589,    16,    17,    16,    17,   359,
    1766,   492,   628,   554,   342,  1771,    24,   123,   230,   552,
    1776,  2192,   641,   476,   628,  3215,   642,   239,   410,  3219,
     628,  4174,  4175,  1789,   264,   228,   576,   353,   642,   628,
     375,    16,    17,   378,   642,   554,   579,   115,   179,  4400,
     641,  1807,   122,   642,  3239,  1811,  3862,  3863,   554,  2230,
    3238,  4412,  4413,   628,   554,   628,    74,   190,  2436,   153,
     592,  1827,  1828,  1829,  1830,  3271,  4484,   642,   628,   642,
      16,    17,   355,    30,   641,  1841,   239,  1843,  4260,  4261,
     406,   461,   642,   155,   375,   789,  3634,   378,   179,  1855,
     641,   375,    16,    17,   378,   211,   641,   260,  4374,   590,
     375,   553,  4463,   378,  2434,   155,  1872,   310,  3096,   641,
      16,    17,  4473,   254,  3549,  2296,  3867,   545,   203,    76,
     548,  1887,   641,   461,   375,   517,   190,   378,   162,   592,
    4412,  4413,   598,   375,   228,   628,   378,   635,   122,   217,
     631,   641,    16,    17,   642,   190,  1825,   641,   852,   642,
    4511,   530,  4513,   356,   172,   438,   641,  1923,   238,   381,
      16,    17,  4523,   254,   649,   281,   641,   595,   649,  1935,
      71,   190,   565,   628,   649,   239,  1942,   569,   641,  4540,
      17,  4542,   375,  4544,   221,   378,   117,   642,   288,   289,
    4551,   628,   149,   531,   375,   510,   511,   378,   513,   375,
    4561,   516,   378,  1882,   375,   642,    39,   378,   628,   375,
     228,   571,   378,    46,  4575,  4576,   531,  2547,   610,   628,
     375,   203,   642,   378,  3708,   226,   226,  3711,   588,   628,
    4591,  4592,   611,   642,   103,  4596,   375,  2442,   476,   378,
    3326,    24,   375,   642,   322,   378,   375,   548,   326,   378,
     181,   251,    74,   375,  2128,   333,   378,   545,  2132,  1807,
     548,   375,   356,  1811,   378,   375,    88,   226,   378,  2869,
     375,   352,   353,   378,   103,   598,   375,  1956,   598,   378,
    2046,  1829,  1830,   628,   551,   186,  1965,  1966,   507,  3773,
     203,    74,   310,   162,  2060,   598,  2170,  1976,  1977,  1978,
    1979,  2175,  1981,  1982,  2911,  2911,    16,    17,   646,   528,
    2917,  2917,   226,  2942,  3130,  2919,  3798,   221,   375,   642,
     643,   378,    95,   643,   193,   226,     6,   530,  3338,   649,
     375,   130,   350,   378,  2539,   435,   436,   628,   356,   417,
     643,   370,  3158,  3159,   628,    12,   649,   278,    17,   375,
     251,   642,   378,   628,   375,   236,   375,   378,   642,   378,
    2565,  2566,  2128,    17,   602,   603,  2132,   642,  2134,   605,
     153,  2137,   608,    24,  3190,  1923,    56,   628,  2144,  2145,
    2146,  2147,   120,   212,  2150,    46,   628,    58,    59,   172,
     375,   642,  2987,   378,  1942,   190,   474,    68,  2137,   603,
     642,  2275,   484,   641,  2170,   143,  3296,  2086,   611,  2175,
    2089,  2090,   642,  2092,   620,   621,  2095,  2096,  2097,  2098,
    2099,  2100,  2101,    74,   281,  2104,  3021,  2106,  2302,   375,
     361,   253,   378,   117,  3029,   628,   530,   643,  3033,   976,
     977,  2872,   180,   136,   218,   228,   220,   628,   405,   642,
     647,   375,   628,   155,   378,   649,   229,   628,  3350,   139,
    3350,   642,   628,   642,   643,   593,   642,   136,   135,   375,
     427,   642,   378,   628,   372,   248,   642,  4238,  4239,  1016,
     641,    74,   136,   186,  3079,  4222,   259,   642,   389,   628,
    4227,  3383,  4229,  3383,   464,   628,     6,   181,  4090,   628,
     517,   375,   153,   642,   378,   462,   628,   408,   330,  2275,
     642,   643,   530,   642,   628,  2854,   446,   611,   628,   375,
     642,   172,   378,   628,   642,   643,   210,   310,   642,   628,
     641,  2297,   642,   355,   136,   613,  2302,   642,  2719,    11,
      74,   410,   117,   642,   211,  1790,  4137,   643,  1793,   643,
     117,  1796,   630,  4145,   383,  2321,  4148,  4149,  4150,  4151,
     153,  2327,  2328,   392,  2330,   522,    19,   350,   641,   342,
     641,   628,   401,   356,    12,   641,   546,   228,   641,    33,
     641,   551,    71,   628,   649,   642,    77,   641,    79,   641,
    4138,  2357,   641,   611,   278,    74,  2144,  2145,  2146,   421,
    3366,  3367,   628,    41,   166,    59,   181,   628,   641,   628,
     641,  2485,  2486,   641,   181,  2796,   642,   201,   642,   643,
     554,   642,   367,  2389,   598,   595,   641,  2393,   103,   120,
     642,   643,  2398,  2399,  2400,   228,   641,  3453,  3754,   332,
     610,   499,    95,   628,  2410,   576,  2412,  4129,  4130,  4131,
    4132,    89,   143,   107,   641,    93,   110,   642,   641,   310,
    3289,   642,   643,   332,   118,  3644,  4258,  4259,  2434,   498,
     642,   643,   641,   353,   153,  4267,   641,   361,   332,   548,
    2446,  2447,   628,   641,  2558,    58,    59,   719,   461,   180,
    3582,   641,  3582,   641,   228,   517,   642,   186,   151,   350,
     569,   557,   155,   278,   628,   356,   642,   643,  3493,   641,
    2476,   278,   744,  3692,  4262,   642,   643,   192,   642,  2485,
    2486,   641,   628,   307,   308,   757,   758,  4162,   312,   313,
     332,  2410,   185,   641,   187,   222,   642,   226,    61,  4221,
      48,   610,   422,    11,   424,   642,   643,   530,    71,   228,
     203,   226,   642,   643,   628,   208,  2527,   350,   531,   136,
    2526,    84,   251,   356,   641,  2531,   595,  2538,   642,   222,
    2536,  2537,   628,  2544,   641,  2541,   229,  2543,   641,  2327,
    2328,   641,  2330,   236,  4008,  4009,   361,  2553,   641,  2555,
    2556,   641,  2558,  2559,   361,   248,   641,  2568,  2564,   274,
     641,  2567,  2573,  2569,   275,   243,   259,   641,  2579,  2580,
     641,   264,  2578,   641,   117,   641,   350,   641,   487,   488,
     273,   505,   356,  2589,   642,   643,   641,  3518,   611,  4136,
    2596,  2597,   641,   487,   488,   103,   429,   642,   643,  2328,
     641,  2330,  2608,   510,   511,   512,   513,   514,   515,   516,
    2398,  2399,  2400,   641,   122,    19,  1055,  1056,  1057,   641,
     643,   642,   643,   186,   531,   641,  2545,  2546,  1067,   192,
     641,   350,  3491,  3492,   642,   643,   641,   356,   181,   530,
    3405,   319,   641,  3408,  3409,   487,   488,   641,    95,   342,
     344,    25,   576,  2572,   641,   429,   642,   643,   641,  1098,
    3425,   641,  1101,   226,   145,   146,  2672,  2673,   641,  2398,
    2399,  2400,   642,   643,   367,   218,   641,   220,   641,   408,
     642,   643,   641,   376,   641,   193,  1125,  1126,   251,   641,
    1129,    95,   641,   117,    68,   641,   120,   530,    72,   430,
      74,   634,   635,   636,   637,   638,   639,   385,  1147,  1148,
     429,   641,   117,   641,   222,   332,   641,   410,  3799,  3800,
     611,    48,  2641,   632,   633,   634,   635,   636,   637,   638,
     639,   589,   590,  2739,   592,   278,   594,   641,   632,   633,
     634,   635,   636,   637,   638,   639,   120,   151,  3169,   582,
      61,   155,   642,   643,   641,  3325,   530,   181,   642,   643,
      71,   576,   641,   476,   642,   643,   274,   482,   461,   576,
     641,   484,   641,    84,   642,   643,   181,   641,   611,   642,
     643,  3640,   229,   187,  3964,  3965,   210,   502,   641,  4200,
    2578,   484,   634,   635,   636,   637,   638,   639,   492,   203,
     641,   248,  4633,   641,   208,   210,   642,   643,   582,   641,
    3231,   530,   259,  2819,   641,    57,   641,  2823,   361,   641,
    2739,   642,   643,   501,   643,   229,   389,   470,  3475,  2835,
     586,   546,   236,   548,   642,   643,   551,   611,   531,   642,
     643,   642,   643,   636,   248,   408,   484,  2853,  2854,   117,
     136,  2857,   120,   649,   278,   259,   642,   643,   642,   643,
     264,   642,   643,   582,   542,   161,  2872,   561,  2874,   273,
     487,   488,   587,   278,   649,   186,   641,   251,    54,   264,
     595,   192,  2888,   187,  2672,   526,  3000,    63,   545,   602,
     603,   161,   611,   586,   526,   342,   590,    73,   275,    54,
     152,    95,   410,   643,   597,   598,   642,   643,    63,    85,
      86,    87,    83,   181,   368,   226,   117,   643,    73,   120,
     367,   642,   643,   616,   643,   101,   619,  3986,   641,   171,
      85,    86,    87,   175,   643,  3505,   541,   361,   342,   502,
     251,   136,   210,   642,   643,   187,   101,   642,   117,   642,
     643,   120,  3883,   646,   647,   151,   361,   120,  3889,   642,
     643,   642,   643,   367,   106,   642,   643,   288,   289,  2888,
     642,   643,   376,  2979,   482,   648,  2982,  2983,   352,   353,
     181,  2987,   522,   523,     6,   359,   526,   527,   641,  4400,
     530,   105,   532,   367,  3000,  3854,  3855,  3003,  3857,  3858,
       4,  2920,  2921,  4135,  2923,  4135,   410,   643,    31,   210,
     278,   392,   181,   475,   461,  3021,   633,   634,   635,   636,
     637,   638,   639,  3029,   587,   610,    74,  3033,   239,    25,
      26,   642,   643,   576,   408,   229,   642,   643,   546,   643,
     548,   210,   642,   643,   239,   389,   332,  2835,   642,   643,
     642,   643,   103,  3059,   248,  4111,  3062,   461,   106,   642,
     643,  3067,    58,    59,    60,   259,    55,  3073,   642,   643,
     438,  3077,    68,  3079,   642,   643,   318,   278,    74,   166,
     484,   106,  3001,   219,   531,   643,    82,   595,  3094,   642,
     643,  3010,   643,   361,  3073,  1133,  1134,   408,  4260,  4261,
    4511,  3107,  4513,  3309,  3310,   153,   480,   649,  3114,   278,
     106,   162,    68,   136,   435,   436,  3563,  3564,    12,  3125,
    3809,  3810,   615,   642,   120,   642,     9,   531,   124,  4540,
    1569,  3667,  3668,   135,   643,   649,   642,   332,   642,   642,
     641,   263,   193,    35,  3680,   321,   155,   649,   342,   649,
     642,  3687,   576,   643,   153,   643,   530,   153,   275,   648,
     361,    48,   338,   275,  4575,  4576,   321,   275,  3815,   275,
     179,   576,   275,   367,   136,   226,  3712,   419,   226,  3715,
    3099,   275,   586,   338,   643,   194,   507,   508,   509,   155,
     643,   502,   361,    35,   598,   409,   205,   464,  3312,   373,
    1639,   487,   488,   545,  1643,   367,   367,   643,   270,   643,
     390,   643,   616,   587,   565,   619,   239,   643,   110,  3225,
     565,   389,  4354,   274,  4354,   117,    12,   643,   155,   367,
     226,   643,   367,  1672,   643,    68,  4076,   233,   642,   643,
     263,   239,   646,   647,   636,   254,   255,   242,  4088,   543,
     176,  4182,   187,  3259,   250,   643,  3262,  3263,  3264,  3265,
    3830,   309,   591,   497,   395,   131,   169,   461,   110,   367,
     810,  3277,   643,   282,  3062,   117,   587,   239,   642,   327,
     456,   643,   174,   155,   155,   155,   155,   155,   155,   181,
    3296,  3297,   487,   488,  3300,   155,   472,   155,  3304,  3305,
    3306,    74,   350,   155,   155,   155,  3312,   155,   576,   332,
     155,   155,  3318,   309,   155,    88,   155,   472,   210,  3325,
    3326,   155,   156,   155,   155,   155,  3114,   155,   155,   352,
     353,   327,   174,   155,   155,   155,  3757,   531,   643,   181,
     349,   623,   593,   597,  3350,   643,   632,   633,   634,   635,
     636,   637,   638,   639,   405,  3361,   129,   533,   193,   410,
     194,   367,   367,   642,   367,  3371,   190,  3373,   210,   642,
     332,   205,   636,  4432,   550,   576,   642,  3383,   533,   642,
    4249,   642,   642,  3389,   642,  3391,   278,  3393,   384,   642,
     190,   635,   641,   643,  3508,   550,   392,   642,   407,   642,
     586,   642,   642,   642,   642,   642,   642,   576,   643,   432,
     244,   643,   642,   642,   485,  3334,   641,   641,  3990,   639,
     641,   255,   554,   642,   554,   643,   643,   554,   641,   545,
     227,   482,   616,   641,    11,   537,   278,   632,   633,   634,
     635,   636,   637,   638,   639,   643,  2089,  2090,   282,  2092,
     641,   343,  2095,  2096,  2097,  2098,  2099,  2100,  2101,  3465,
     649,  2104,   354,  2106,   487,   488,   641,   359,  4527,   361,
     466,   641,   261,  4605,   190,  4605,   643,   500,   643,   418,
     253,   187,   530,   649,  3490,  3491,  3492,  4619,  3602,  4619,
    4070,   649,  4624,   649,  4624,   546,   642,  4629,   546,  4629,
     551,   343,  3508,    25,    26,   520,   595,   484,    46,   643,
     643,   340,   346,  4444,  4445,   475,  4447,   359,   569,   361,
     517,    71,   565,   517,   517,   487,   488,   523,   524,   525,
     517,   517,   131,   548,   530,   392,    58,    59,    60,  3458,
    4307,   249,   389,   389,   595,   546,    68,   249,   131,   389,
     546,   389,    74,   549,   546,  4322,    46,   330,   641,   610,
      82,   441,  3481,   389,  4495,   641,  4497,  4498,  4215,  4336,
     389,  3577,   389,   391,   389,  3689,  3582,  4213,   389,   352,
     353,  4153,   355,   274,   106,   641,   598,  3593,   649,   642,
     586,   382,   149,   642,   235,   642,  3602,   235,   120,   649,
     642,   642,   124,   190,   618,   618,   642,   642,   642,   632,
     633,   634,   635,   636,   637,   638,   639,   643,   642,   155,
     565,   554,   643,   270,   624,    46,   155,   565,   155,   201,
     641,   153,   190,   641,  3640,  4587,   236,   190,   554,   554,
    3651,  4572,   245,  3649,   423,   155,   361,   643,   421,   155,
     641,   666,  3658,   641,   155,   392,   671,  3771,   643,   643,
     248,   379,   554,   248,   323,   106,   558,   106,   649,   561,
     632,   633,   634,   635,   636,   637,   638,   639,   169,   571,
     251,   251,   641,  3689,   576,   372,   565,   702,   580,   641,
     203,   554,  3611,    19,   457,   641,  4463,   389,   649,   548,
     636,   641,   237,   718,   226,   237,  4473,   641,   203,   641,
    3716,   233,   554,   641,   203,   360,   558,  3723,  3832,   561,
     642,   642,   642,   642,   641,   643,   649,   360,   250,   571,
     643,   642,   642,   642,   576,  3741,   642,   649,   580,   641,
     565,   263,   634,   635,   517,   649,   367,   222,  3754,   565,
     765,   766,   767,   768,   642,   565,  4523,   643,  4627,   389,
     265,   643,   373,   778,   642,  3771,   190,   190,   649,   592,
     190,   239,  3691,   423,   155,  4542,   121,  4544,   642,   248,
     642,   248,   643,   367,  4551,   641,  4356,   309,   251,   251,
     643,   406,   634,   635,  4561,    74,    19,   476,   367,   367,
     643,   367,   367,   499,   641,   327,   619,   643,   389,   376,
     361,  3730,    46,   478,   619,   261,   459,   273,    11,   423,
     142,   257,   671,   190,  4591,  4592,  3832,   203,   642,  4596,
     223,   643,   486,   642,   641,   643,   642,   641,   641,  3845,
     641,   155,   636,   642,  4480,   641,   641,   396,  3854,  3855,
     642,  3857,  3858,   702,   642,   642,   248,   248,   643,   641,
     120,  3649,   384,   120,   548,   641,   641,   404,   649,   718,
     392,    78,   494,   138,   642,   499,   471,   642,    19,   643,
     642,  3995,   642,    46,   264,   642,   642,   642,   642,    33,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
      33,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     642,   304,   305,   642,   642,   642,  3835,  4489,   329,   768,
     253,   418,   376,  3929,  3930,   376,   643,   170,   642,   273,
     201,   236,   641,   643,    46,  3941,   649,   642,   208,   643,
     329,   155,   598,   598,   466,  4581,   641,   641,   641,   306,
     608,   641,   641,   592,   642,   641,   608,   251,    33,   641,
     120,   251,   359,    33,   642,   361,   643,   641,    46,   642,
     329,  4607,   168,   361,    46,    46,   642,   619,   373,  3985,
     641,   996,  3988,  4630,   251,   548,   602,   236,   598,  3995,
     598,   354,   367,   521,   603,   643,   619,   457,   642,   361,
     554,   523,   524,   525,   150,   642,   467,   643,   530,   554,
     554,   536,   592,   641,   641,   641,    30,   615,   650,   187,
    4026,   387,   642,   642,   546,   642,    17,   549,   131,   131,
     373,   153,   556,   410,   641,  4041,  1051,  1052,    70,   187,
    4046,   431,   435,   436,    30,  1060,  1061,  1062,  1063,  1064,
    1065,  1066,   190,   128,   615,    61,   642,   373,    61,  1074,
    1075,   360,  1077,  1078,   586,   643,   642,  1082,  1083,    33,
      14,  1086,  1087,  1088,  1089,   266,  1091,  1092,   153,   641,
     537,     5,   157,   367,  1099,  1100,   367,  1102,  1103,  1104,
    1105,  1106,   149,   236,   129,  1110,  1111,   373,   373,  1114,
    1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,   647,  1124,
     138,   641,  1127,  1128,    46,    46,    46,  1132,   148,   641,
     195,  1136,  1137,  1138,    46,    46,   641,   641,   592,  4135,
     125,   615,   149,   221,  1149,  1150,  1151,   119,   213,   647,
     280,   650,  3930,  1158,   144,   641,    46,   996,    46,  4263,
    1165,  1166,  1167,    46,  1169,    52,   557,   138,  4164,   647,
    4166,  1176,  1177,  1178,   128,  1180,  1181,  1182,  1183,  1184,
    4089,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,   467,
     465,   361,  1197,  1198,   643,   557,  4192,   642,   149,   153,
     643,   206,   219,   157,   643,   647,   643,  3985,   642,   642,
     275,    52,  1051,  1052,   149,    46,   557,   187,   187,    16,
      17,  1060,  1061,    12,    13,  1064,  1065,  1066,   187,   445,
     222,   120,   361,   617,   641,  1074,  1075,   189,  1077,  1078,
     484,   195,  2108,  1082,   643,  4051,  3467,  1086,  1087,  1088,
    1089,  3468,  1091,   649,  2309,  3739,  4081,  2514,  4254,   213,
    1099,  1100,  4216,  1102,  1103,  4420,  4419,  4263,  3737,  3741,
    4374,  1110,  1111,  3928,  4607,  1114,   973,  4569,  1117,  1118,
    1119,  1120,  1121,  1122,    46,  1124,   577,  1776,  1127,  1128,
    1840,  2819,  3919,  1132,  4577,  3919,  3919,  1136,  1137,  1138,
    3919,  3919,  3919,  4460,  3919,    94,  3919,  3919,  3919,  4300,
    1149,  1150,  1151,  4460,   111,   112,   113,   114,   115,  1158,
    3919,   275,  4413,  3919,  3919,  4325,  1165,  1166,  1167,  4326,
    1477,  3937,  2059,  3027,  4438,  3576,   125,  1481,  2848,  1344,
    3277,  1014,  2853,  3986,   409,  4358,  3579,  1295,  4257,  1354,
     139,  4254,  4527,   418,  4440,  4489,  4153,  1539,  4354,  1198,
     515,  3484,  2052,  3100,  2673,  3393,  2060,  1372,   433,  3416,
    2599,  3371,  3416,   162,  3449,  3881,   165,  3650,  4374,  4356,
    3700,  3689,  2485,  3216,  2774,  3219,   451,  3211,  4171,   178,
       6,    11,    11,  4174,  4104,    11,  4175,    13,  4092,    15,
    2142,  4100,  3889,  1553,  3941,  2059,  2592,   580,  1428,    25,
      26,  1432,   201,  3655,  1829,  2384,  3372,   214,   215,   216,
     217,  1535,  2835,  1488,  2350,  3272,  2268,  2401,   596,  1849,
     495,   871,  2739,  4422,  4107,  2741,  1200,   226,  2176,  1093,
      56,  2477,  4438,   232,    60,    61,  2267,  3340,    12,    13,
      66,  4011,  4169,  4455,  3465,   409,  4365,  4366,    74,  4455,
    4456,   526,  4456,  2293,   418,  3383,    82,  1447,  3846,  4465,
    4558,  3832,  2406,  2147,  1207,    91,  4472,   959,  2345,   433,
     545,  2388,   959,   548,   273,  3582,   959,  3291,  3290,  3350,
     106,  1283,   959,  1562,  4354,   585,   662,   451,  1919,  1384,
     576,  1920,  3391,  1765,   120,  1344,  3275,  4525,   124,  4381,
    4554,  4615,  4451,  4624,  1412,  1354,   132,   133,  3692,  4629,
    1308,   575,  3296,   139,  3325,   322,  2431,   324,   325,   326,
      94,   147,  1315,  1372,    13,   151,   333,   153,  1700,  3326,
     575,   495,  1875,  1811,  2423,  4541,  2424,  2417,   164,  1798,
    4546,  1844,   855,  4127,  4133,  3259,   570,  1331,   857,  4071,
    3725,   125,   511,   511,  1344,   649,   649,   649,    -1,   185,
    1575,  1544,   526,    -1,    -1,   139,    -1,    -1,   375,    -1,
      -1,   378,    -1,    -1,    -1,  4581,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,
      -1,   165,    -1,    -1,    -1,    -1,    -1,    -1,   224,  4605,
     226,  4607,    -1,    -1,   178,    94,    -1,   233,    -1,  4615,
     417,    -1,   411,  4619,    -1,    -1,   415,    -1,  4624,    -1,
      -1,    -1,    -1,  4629,   250,    -1,    -1,   201,    -1,    -1,
      -1,    -1,   431,    -1,    -1,  1650,   125,    -1,    -1,    -1,
     439,    -1,    -1,    -1,    -1,    -1,    -1,   273,   447,    -1,
     139,    -1,   226,    -1,    -1,    -1,    -1,    -1,   232,    -1,
      -1,    -1,    -1,  1678,  1679,  1680,   473,   474,    -1,    -1,
      -1,    -1,    -1,   162,    -1,    -1,   165,   476,  1693,    -1,
      -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,   178,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
      -1,   327,    -1,    -1,  1719,   331,    -1,    -1,    -1,    -1,
    1725,    -1,   201,  1728,    -1,  1730,    -1,    -1,    -1,    -1,
      -1,  1736,    -1,  1738,  1739,    -1,  1575,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,
      -1,   540,    -1,   232,    -1,   371,    -1,    -1,    -1,    -1,
     376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,
      -1,    -1,    -1,   389,    -1,    -1,   392,    -1,    -1,    -1,
     569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,   594,    -1,    -1,    -1,    -1,
     426,  1650,    -1,    -1,    -1,    -1,   613,    -1,    -1,  1824,
      -1,    -1,    -1,    -1,   440,   441,   442,   443,    -1,    -1,
      -1,   628,   629,   630,    -1,    -1,    -1,    -1,    -1,  1678,
    1679,  1680,    -1,    25,    26,    -1,    -1,   411,    -1,    -1,
     466,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   431,  1873,    -1,
      -1,    -1,    -1,    -1,    -1,   439,  1881,    -1,    60,    -1,
    1719,    -1,    -1,   447,    -1,    -1,    -1,    -1,    -1,  1728,
      -1,  1730,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,   525,
      -1,    -1,   476,    -1,   530,    -1,    -1,   111,   112,   113,
     114,   115,    -1,    -1,   106,   489,   490,    -1,    33,    34,
     546,    -1,   411,   549,    -1,    -1,    -1,    -1,   120,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   431,    58,    59,    -1,   572,    -1,    -1,    -1,
     439,    -1,    -1,    -1,    69,    -1,    -1,    -1,   447,    -1,
     586,   153,    -1,    -1,    -1,    -1,   540,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1824,    -1,    92,    -1,    94,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   476,    -1,   104,
      -1,    -1,    -1,    -1,    -1,   569,    -1,    -1,    -1,    -1,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     214,   215,   216,   217,    -1,    -1,    -1,    -1,   592,    -1,
     594,   647,    -1,    -1,  1873,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1881,    -1,   226,    -1,    -1,   152,   153,    -1,
      -1,   233,    -1,   158,    -1,    -1,   161,    -1,    -1,    -1,
      -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,   250,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2083,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,
     569,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,   594,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,    -1,    -1,   309,   322,    -1,
     324,   325,   326,    -1,    -1,    -1,    -1,    -1,    -1,   333,
      -1,    -1,    -1,    -1,   249,   327,    -1,    -1,    -1,    -1,
      -1,  2156,    -1,    -1,    -1,  2160,    -1,    -1,    -1,    -1,
    2165,  2166,    -1,    -1,    -1,   270,    -1,    -1,    -1,  2174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2188,  2189,    -1,  2191,  2192,    -1,  2194,
    2195,  2196,  2197,  2198,    -1,    -1,  2201,    -1,   303,    -1,
      -1,    -1,   384,    -1,    -1,  2210,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,    -1,  2222,    -1,  2224,
      -1,  2226,  2227,   417,  2229,  2230,    -1,    -1,    -1,  2234,
    2235,  2236,    -1,    -1,    -1,  2240,  2241,  2242,    -1,  2244,
      -1,  2246,    -1,  2248,  2083,  2250,    -1,  2252,    -1,    -1,
      -1,    -1,  2257,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,
      -1,  2276,    -1,    -1,    -1,    -1,    -1,    -1,  2283,   473,
     474,  2286,    -1,    -1,   466,    -1,    -1,  2292,    -1,    -1,
      -1,  2296,    -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   409,   410,    -1,    -1,   413,   414,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2156,    -1,    -1,
      -1,  2160,    -1,    -1,    -1,    -1,  2165,  2166,    -1,   434,
      -1,    -1,    -1,    -1,    -1,  2174,    -1,    -1,    -1,    -1,
      -1,   523,   524,   525,    -1,    -1,    -1,    -1,   530,  2188,
    2189,    -1,  2191,  2358,    -1,  2194,  2195,  2196,  2197,  2198,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,  2210,    -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,
      -1,    -1,    -1,  2222,    -1,  2224,    -1,  2226,  2227,   494,
    2229,    -1,    -1,    -1,    -1,  2234,  2235,  2236,    -1,    -1,
      -1,  2240,  2241,  2242,   586,  2244,    -1,  2246,    -1,  2248,
      -1,  2250,    -1,  2252,    -1,    -1,    -1,    -1,  2257,   613,
      -1,   526,    -1,    -1,    -1,   530,    -1,  2432,    -1,    -1,
      -1,  2436,    -1,    -1,    -1,   629,   630,  2276,    -1,    -1,
      13,    -1,    15,   548,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2292,    -1,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    -1,
      -1,    -1,  2497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   606,    -1,    76,    -1,    -1,    -1,   612,    -1,    -1,
    2515,  2516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
      -1,    -1,    11,   116,    13,    -1,    25,    26,    -1,    -1,
      -1,    -1,   125,   126,   127,    -1,    25,    26,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   151,    58,
      59,    60,    -1,    -1,    -1,    -1,    -1,    56,    -1,    68,
      -1,    60,   165,  2432,    -1,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    74,    -1,    -1,    -1,    -1,
     183,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,   199,   106,   201,    -1,
      -1,    -1,    -1,   206,    -1,    -1,   209,   106,  2643,  2644,
      -1,   120,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,   120,    -1,    -1,    -1,   124,    -1,    -1,    -1,   232,
      -1,   234,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
     139,    -1,    -1,    -1,   153,    -1,    -1,    -1,   147,   252,
      -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,    -1,  2694,
      -1,    -1,    -1,    -1,    -1,  2700,   269,    -1,    -1,    -1,
     273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2719,    -1,   185,  2722,  2723,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,  2753,    -1,
      -1,    -1,    -1,    -1,   233,    -1,    -1,   226,  2763,    -1,
    2765,    -1,  2767,    -1,   233,    -1,    -1,    -1,    -1,    -1,
      -1,   250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2796,    -1,    -1,    -1,    -1,  2801,    -1,   371,    -1,
      -1,    -1,    -1,    -1,   273,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   389,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2831,    -1,    -1,    -1,
     309,    -1,   405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     309,    -1,    -1,   416,    -1,    -1,    -1,    -1,   327,    -1,
      -1,    -1,    -1,    -1,    -1,  2694,    -1,    -1,   327,    -1,
      -1,  2700,   331,    -1,    -1,   438,    -1,    -1,   441,    -1,
     443,    -1,    -1,   446,    -1,    -1,   449,   450,    -1,    -1,
      -1,    -1,    -1,  2722,  2723,    -1,    -1,   460,    -1,   462,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,  2903,    -1,
      -1,    -1,    -1,   476,    -1,   384,    -1,   376,    -1,    -1,
      -1,   484,    -1,   392,  2753,   384,   489,    -1,   491,    -1,
      -1,    -1,    -1,   392,  2763,    -1,  2765,    -1,  2767,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2949,    -1,    13,    -1,    15,   522,
      -1,    -1,    -1,    -1,    -1,    -1,   529,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    -1,   441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    49,    -1,    -1,    -1,    -1,   466,    -1,    56,
      -1,    -1,  2831,    60,    61,    -1,    -1,   466,    -1,   572,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      -1,    -1,   585,    -1,    -1,    -1,   589,    -1,    -1,   592,
      -1,    -1,    -1,    -1,   597,    -1,    -1,    94,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   523,   524,   525,    -1,    -1,   116,
      -1,   530,    -1,   626,   523,   524,   525,    -1,   125,   126,
     127,   530,    -1,    -1,  2903,  3070,  3071,   546,   641,    -1,
     549,   138,   139,    -1,    -1,    -1,    -1,   546,    -1,    -1,
     549,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3095,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   165,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   586,    -1,    -1,
    2949,    -1,    -1,    -1,    -1,    -1,   183,   586,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3135,    -1,   199,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3162,    -1,    -1,
      -1,  3166,  3167,    -1,  3169,   232,    -1,   234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3187,    -1,    -1,   252,    -1,  3192,    -1,    -1,
    3195,    -1,    -1,  3198,  3199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3231,    -1,    -1,    -1,
      -1,  3070,  3071,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3266,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3290,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   389,  3162,    -1,    -1,    -1,  3166,  3167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3352,  3187,   416,
      -1,    -1,    -1,  3192,    -1,  3360,  3195,    -1,    -1,  3198,
    3199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   438,    -1,    -1,   441,    -1,   443,    -1,    -1,   446,
      -1,    -1,   449,   450,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   460,    -1,   462,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   470,    32,    33,    -1,    -1,    -1,   476,
      38,    -1,    40,    -1,    42,    43,    -1,   484,    -1,    -1,
      -1,    -1,   489,    -1,   491,    -1,    -1,  3266,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3290,    -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,
      -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   572,    -1,    -1,    -1,   137,
      -1,    -1,    -1,  3352,    -1,    -1,    -1,    -1,   585,    -1,
      -1,  3360,   589,    -1,    -1,   592,   154,    -1,    -1,    -1,
     597,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   180,    -1,   182,    -1,    -1,    -1,    -1,   626,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,
      -1,    -1,    -1,    -1,   641,    -1,    -1,    -1,  3583,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3623,  3624,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3632,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,   277,
      -1,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   315,   316,   317,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,    -1,    -1,   344,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3583,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3757,    -1,    -1,    -1,    -1,    -1,  3763,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   399,   400,    -1,  3779,    -1,    -1,    -1,  3783,    -1,
      -1,    -1,    -1,    -1,  3623,  3624,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3632,    -1,    -1,    -1,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3812,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3919,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3763,    -1,    -1,   555,    -1,    -1,
     558,    -1,    -1,   561,   562,   563,   564,    -1,    -1,    -1,
    3779,    -1,    -1,  3948,  3783,  3950,    -1,  3952,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3964,
    3965,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3812,    -1,    -1,   604,   605,    -1,    -1,
      -1,  3986,    -1,    -1,    -1,    -1,    -1,  3992,  3993,    -1,
      -1,    -1,    -1,    -1,    -1,  4000,    -1,  4002,    -1,    -1,
      -1,    -1,   630,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4038,    -1,    -1,    -1,    -1,    -1,  4044,
    4045,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3948,
      -1,  3950,  4117,  3952,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3964,  3965,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3992,  3993,    -1,    -1,    -1,    -1,    -1,
      -1,  4000,    -1,  4002,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4185,    -1,  4187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4197,    -1,  4199,  4200,    -1,    -1,    -1,  4038,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4226,    -1,    -1,    -1,    -1,  4231,    -1,    -1,    -1,
    4235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4270,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4305,    -1,  4307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4322,  4323,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4185,    -1,  4187,    -1,
    4355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4197,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4231,    -1,  4399,  4400,  4235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4412,  4413,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4432,    -1,    -1,
      -1,  4270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4463,    -1,
      -1,    -1,    -1,    -1,    -1,  4470,  4305,    -1,  4473,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4323,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4504,
      -1,    -1,    -1,    -1,    -1,    -1,  4511,    -1,  4513,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4355,    -1,  4523,    -1,
      -1,    -1,  4527,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4540,    -1,  4542,    -1,  4544,
      -1,    -1,    -1,    -1,    -1,    -1,  4551,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4561,    -1,    -1,    -1,
    4399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4575,  4576,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4591,  4592,    -1,    -1,
      -1,  4596,    -1,    -1,    -1,    -1,    -1,  4602,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4632,    -1,    -1,
      -1,  4470,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,  4504,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    44,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,  4602,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,  4632,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
     256,   257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
      -1,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
     566,   567,   568,    -1,   570,   571,   572,   573,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,   599,   600,   601,   602,   603,    -1,    -1,
     606,   607,    -1,   609,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,    -1,    -1,   640,   641,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,    -1,   209,   210,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
     221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,   232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,    -1,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,    -1,   409,    -1,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,    -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,
     481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,
      -1,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,
     511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,   574,   575,   576,    -1,   578,   579,   580,
     581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,
     591,    -1,   593,    -1,   595,   596,    -1,    -1,   599,   600,
     601,   602,   603,    -1,    -1,   606,   607,    -1,   609,   610,
     611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,   635,    -1,    -1,    -1,    -1,   640,
     641,    -1,    -1,   644,   645,    -1,    -1,   648,   649,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
      -1,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,   580,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,   599,   600,   601,   602,   603,    -1,    -1,
     606,   607,    -1,   609,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,    -1,    -1,   640,   641,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,   190,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,    -1,   209,   210,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
     221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,   232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,    -1,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,    -1,   409,    -1,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,    -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,
     481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,
      -1,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,
     511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,   574,   575,   576,    -1,   578,   579,   580,
     581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,
     591,    -1,   593,    -1,   595,   596,    -1,    -1,   599,   600,
     601,   602,   603,    -1,    -1,   606,   607,    -1,   609,   610,
     611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,   635,    -1,    -1,    -1,    -1,   640,
     641,    -1,    -1,   644,   645,    -1,    -1,   648,   649,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,   190,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
      -1,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,   599,   600,   601,   602,   603,    -1,    -1,
     606,   607,    -1,   609,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,    -1,    -1,   640,   641,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,   190,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,    -1,   209,   210,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
     221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,   232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,    -1,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,    -1,   409,    -1,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,    -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,
     481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,
      -1,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,
     511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,   574,   575,   576,    -1,   578,   579,   580,
     581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,
     591,    -1,   593,    -1,   595,   596,    -1,    -1,   599,   600,
     601,   602,   603,    -1,    -1,   606,   607,    -1,   609,   610,
     611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,   635,    -1,    -1,    -1,    -1,   640,
     641,    -1,    -1,   644,   645,    -1,    -1,   648,   649,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
      -1,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,   580,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,   599,   600,   601,   602,   603,    -1,    -1,
     606,   607,    -1,   609,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,    -1,    -1,   640,   641,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,    -1,   209,   210,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
     221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,   232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,    -1,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,    -1,   409,    -1,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,    -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,
     481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,
      -1,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,
     511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,   574,   575,   576,    -1,   578,   579,   580,
     581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,
     591,    -1,   593,    -1,   595,   596,    -1,    -1,   599,   600,
     601,   602,   603,    -1,    -1,   606,   607,    -1,   609,   610,
     611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,   635,    -1,    -1,    -1,    -1,   640,
     641,    -1,    -1,   644,   645,    -1,    -1,   648,   649,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
      -1,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,   599,   600,   601,   602,   603,    -1,    -1,
     606,   607,    -1,   609,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,    -1,    -1,   640,   641,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,    -1,   209,   210,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
     221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,   232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,    -1,    -1,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,    -1,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,    -1,   409,    -1,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,    -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,
     481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,
      -1,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,
     511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,   574,   575,   576,    -1,   578,   579,   580,
     581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,
     591,    -1,   593,    -1,   595,   596,    -1,    -1,   599,   600,
     601,   602,   603,    -1,    -1,   606,   607,    -1,   609,   610,
     611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,   635,    -1,    -1,    -1,    -1,   640,
     641,    -1,    -1,   644,   645,    -1,    -1,   648,   649,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
      -1,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,   599,   600,   601,   602,   603,    -1,    -1,
     606,   607,    -1,   609,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,    -1,    -1,   640,   641,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,    -1,   209,   210,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
     221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,   232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,    -1,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,    -1,   409,    -1,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,    -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,
     481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,
      -1,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,
     511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,   574,   575,   576,    -1,   578,   579,   580,
     581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,
     591,    -1,   593,    -1,   595,   596,    -1,    -1,   599,   600,
     601,   602,   603,    -1,    -1,   606,   607,    -1,   609,   610,
     611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,   635,    -1,    -1,    -1,    -1,   640,
     641,    -1,    -1,   644,   645,    -1,    -1,   648,   649,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
      -1,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,   599,   600,   601,   602,   603,    -1,    -1,
     606,   607,    -1,   609,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,    -1,    -1,   640,   641,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,    -1,   209,   210,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
     221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,   232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,    -1,    -1,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,    -1,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,    -1,   409,    -1,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,    -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,
     481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,
      -1,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,
     511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,   574,   575,   576,    -1,   578,   579,   580,
     581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,
     591,    -1,   593,    -1,   595,   596,    -1,    -1,   599,   600,
     601,   602,   603,    -1,    -1,   606,   607,    -1,   609,   610,
     611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,   635,    -1,    -1,    -1,    -1,   640,
     641,    -1,    -1,   644,   645,    -1,    -1,   648,   649,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
      -1,    -1,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,    -1,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,   599,   600,   601,   602,   603,    -1,    -1,
     606,   607,    -1,   609,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,    -1,    -1,   640,   641,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,   204,    -1,   206,   207,    -1,   209,   210,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
     221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,   232,   233,   234,   235,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,    -1,    -1,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,    -1,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,    -1,   409,    -1,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,    -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,
     481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,
      -1,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,
     511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,   574,   575,   576,    -1,   578,   579,   580,
     581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,
     591,    -1,   593,    -1,   595,   596,    -1,    -1,   599,   600,
     601,   602,   603,    -1,    -1,   606,   607,    -1,   609,   610,
     611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,   635,    -1,    -1,    -1,    -1,   640,
     641,    -1,    -1,   644,   645,    -1,    -1,   648,   649,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,    -1,   209,   210,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,   232,   233,   234,   235,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
      -1,    -1,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,    -1,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,   599,   600,   601,   602,   603,    -1,    -1,
     606,   607,    -1,   609,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,   635,
      -1,    -1,    -1,    -1,   640,   641,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,
     191,    -1,   193,    -1,   195,   196,   197,   198,    -1,   200,
      -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,   210,
      -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,   220,
      -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,
      -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,
     261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,
      -1,   272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,    -1,    -1,   348,   349,   350,
     351,    -1,    -1,    -1,   355,   356,    -1,    -1,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,   387,   388,    -1,   390,
     391,   392,    -1,    -1,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,   435,   436,   437,    -1,   439,   440,
      -1,   442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,
     451,    -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,
     481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,
      -1,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,
     511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,
     521,   522,   523,   524,   525,   526,    -1,    -1,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,
     571,   572,   573,   574,   575,   576,    -1,   578,   579,   580,
     581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,
     591,    -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,
      -1,    -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,
     611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,   648,   649,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,   226,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,   251,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,   263,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,   476,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,     5,    -1,     7,     8,     9,    10,    11,
     622,   623,    14,   625,   626,   627,    18,    -1,   630,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,   649,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,   226,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,   251,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,     5,    -1,     7,     8,     9,    10,    11,
     622,   623,    14,   625,   626,   627,    18,    -1,   630,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,   649,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,   476,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,     5,    -1,     7,     8,     9,    10,    11,
     622,   623,    14,   625,   626,   627,    18,    -1,   630,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
     642,    -1,    34,    -1,    -1,    -1,    38,   649,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     622,   623,    -1,   625,   626,   627,    -1,    -1,   630,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
     642,    14,    -1,    -1,    -1,    18,   648,   649,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,    -1,   195,   196,   197,   198,    -1,   200,    -1,   202,
      -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,
     213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,
     223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,
     243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,
     253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,
      -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,    -1,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
      -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,    -1,   442,
     443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,
     453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,   482,
      -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,
      -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,
     523,   524,   525,   526,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,    -1,
      -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
      -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,
     593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,
     603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,
     613,   614,     5,    -1,     7,     8,     9,    10,    11,   622,
     623,    14,   625,   626,   627,    18,    -1,   630,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,   641,    -1,
      -1,    34,    -1,    -1,    -1,    38,   649,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,    -1,   195,   196,   197,   198,    -1,   200,    -1,   202,
      -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,
     213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,
     223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,
     233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,   242,
     243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,
     253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,
      -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,    -1,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
      -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,    -1,   442,
     443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,
     453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,   482,
      -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,
      -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,
     523,   524,   525,   526,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,    -1,
      -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
      -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,
     593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,
     603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,
     613,   614,     5,    -1,     7,     8,     9,    10,    11,   622,
     623,    14,   625,   626,   627,    18,    -1,   630,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,   649,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,    -1,   195,   196,   197,   198,    -1,   200,    -1,   202,
      -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,
     213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,
     223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,
     243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,
     253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,
      -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,    -1,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
      -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,    -1,   442,
     443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,
     453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,   482,
      -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,
      -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,
     523,   524,   525,   526,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,    -1,
      -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
      -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,
     593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,
     603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,
     613,   614,     5,    -1,     7,     8,     9,    10,    11,   622,
     623,    14,   625,   626,   627,    18,    -1,   630,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,   641,    -1,
      -1,    34,    -1,    -1,    -1,    38,   649,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,    -1,   195,   196,   197,   198,    -1,   200,    -1,   202,
      -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,
     213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,
     223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,
     243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,
     253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,
      -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,    -1,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
      -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,    -1,   442,
     443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,
     453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,   482,
      -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,
      -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,
     523,   524,   525,   526,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,    -1,
      -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
      -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,
     593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,
     603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,
     613,   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,
     623,    -1,   625,   626,   627,    -1,    -1,   630,    -1,    -1,
      -1,    -1,     5,   636,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,   649,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,
     193,    -1,   195,   196,   197,   198,    -1,   200,    -1,   202,
      -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,
     213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,
     223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,
     243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,
     253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,
      -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     283,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,    -1,   390,   391,   392,
      -1,    -1,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
      -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,   435,   436,   437,    -1,   439,   440,    -1,   442,
     443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,
     453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,   482,
      -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,
      -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,
     523,   524,   525,   526,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,    -1,
      -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,
     573,   574,   575,    -1,    -1,   578,   579,    -1,   581,   582,
      -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,
     593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,
     603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,
     613,   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,
     623,    -1,   625,   626,   627,    -1,    -1,   630,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,   648,   649,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,   649,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,   649,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,   649,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,   649,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,   120,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,   623,
      -1,   625,   626,   627,    -1,    -1,   630,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   648,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   622,   623,    -1,   625,   626,   627,
      -1,    -1,   630,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     648,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
     262,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,   554,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     622,   623,    -1,   625,   626,   627,    -1,    -1,   630,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   648,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
      -1,   387,   388,    -1,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,    -1,
      -1,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,    -1,    -1,   572,   573,   574,   575,
      -1,    -1,   578,   579,    -1,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,
     606,    -1,    -1,    -1,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,    -1,   630,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   648,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,    -1,    -1,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,    -1,   178,   179,
     180,    -1,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,   262,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,   387,   388,    -1,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,    -1,   405,   406,   407,    -1,   409,
      -1,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
      -1,    -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,    -1,   442,   443,   444,    -1,    -1,   447,    -1,   449,
      -1,   451,    -1,   453,    -1,   455,   456,   457,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,
     480,   481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,
     490,    -1,   492,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,
      -1,   511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,
      -1,   521,   522,   523,   524,   525,   526,    -1,    -1,   529,
     530,    -1,   532,   533,   534,   535,   536,   537,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,    -1,   549,
     550,   551,   552,    -1,   554,   555,   556,    -1,   558,   559,
     560,   561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,
      -1,    -1,   572,   573,   574,   575,    -1,    -1,   578,   579,
      -1,   581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,
      -1,   591,    -1,   593,    -1,   595,   596,    -1,    -1,    -1,
      -1,    -1,    -1,   603,    -1,    -1,   606,    -1,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   622,   623,    -1,   625,   626,   627,    -1,    -1,
     630,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   648,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,   623,
      -1,   625,   626,   627,    -1,    -1,   630,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   648,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   622,   623,    -1,   625,   626,   627,
      -1,    -1,   630,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
     648,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,    -1,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,
      -1,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,   247,    -1,    -1,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,   280,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,    -1,    -1,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,    -1,
      -1,    -1,    -1,    -1,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,    -1,    -1,
     442,    -1,   444,   445,    -1,   447,    -1,    -1,    -1,   451,
      -1,    -1,    -1,   455,   456,   457,   458,   459,    -1,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,   474,    -1,    -1,    -1,    -1,   479,   480,   481,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
      -1,   493,    -1,   495,    -1,   497,    -1,    -1,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,
     622,    -1,    -1,   625,    -1,   627,    -1,     5,   630,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,   643,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   622,   623,    -1,   625,   626,   627,
      -1,     5,   630,     7,     8,     9,    10,    11,   636,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,   623,
      -1,   625,   626,   627,    -1,     5,   630,     7,     8,     9,
      10,    11,   636,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,    -1,    -1,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,    -1,   178,   179,
     180,    -1,    -1,   183,    -1,    -1,    -1,    -1,   188,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,   206,   207,    -1,   209,
      -1,    -1,   212,   213,    -1,    -1,    -1,   217,   218,   219,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,    -1,   253,   254,    -1,    -1,   257,    -1,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,   387,   388,    -1,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,    -1,   405,   406,   407,    -1,   409,
      -1,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
      -1,    -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
     440,    -1,   442,   443,   444,    -1,    -1,   447,    -1,   449,
      -1,   451,    -1,   453,    -1,   455,   456,   457,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,   474,   475,    -1,    -1,    -1,   479,
     480,   481,   482,    -1,    -1,    -1,   486,    -1,    -1,    -1,
     490,    -1,   492,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,
      -1,   511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,
      -1,   521,   522,   523,   524,   525,   526,    -1,    -1,   529,
     530,    -1,   532,   533,   534,   535,   536,   537,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,    -1,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
     560,   561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,
      -1,    -1,   572,   573,   574,   575,    -1,    -1,   578,   579,
      -1,   581,   582,    -1,   584,   585,    -1,    -1,   588,    -1,
      -1,   591,    -1,   593,    -1,   595,   596,    -1,    -1,    -1,
      -1,    -1,    -1,   603,    -1,    -1,   606,    -1,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   622,   623,    -1,   625,   626,   627,    -1,     5,
     630,     7,     8,     9,    10,    11,   636,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,
      -1,    -1,   188,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
     206,   207,    -1,   209,    -1,    -1,   212,   213,    -1,    -1,
      -1,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,    -1,   253,   254,    -1,
      -1,   257,    -1,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
      -1,   387,   388,    -1,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,    -1,   405,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,   440,    -1,   442,   443,   444,    -1,
      -1,   447,    -1,   449,    -1,   451,    -1,   453,    -1,   455,
     456,   457,    -1,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,   474,   475,
      -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,   522,   523,   524,   525,
     526,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,    -1,    -1,   572,   573,   574,   575,
      -1,    -1,   578,   579,    -1,   581,   582,    -1,   584,   585,
      -1,    -1,   588,    -1,    -1,   591,    -1,   593,    -1,   595,
     596,    -1,    -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,
     606,    -1,    -1,    -1,   610,   611,   612,   613,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,   625,
     626,   627,    -1,     5,   630,     7,     8,     9,    10,    11,
     636,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,   181,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,   210,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
      -1,    -1,   504,   505,   506,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,   576,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,     5,    -1,     7,     8,     9,    10,    11,
     622,   623,    14,   625,   626,   627,    18,    -1,   630,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,   155,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
     262,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,   485,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,   554,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,     5,    -1,     7,     8,     9,    10,    11,
     622,   623,    14,   625,   626,   627,    18,    -1,   630,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
     262,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,   554,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,     5,    -1,     7,     8,     9,    10,    11,
     622,   623,    14,   625,   626,   627,    18,    -1,   630,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,   386,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,   576,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,     5,    -1,     7,     8,     9,    10,    11,
     622,   623,    14,   625,   626,   627,    18,    -1,   630,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
     262,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,   554,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,     5,    -1,     7,     8,     9,    10,    11,
     622,   623,    14,   625,   626,   627,    18,    -1,   630,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    99,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,    -1,   188,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,   206,   207,    -1,   209,    -1,    -1,
     212,   213,    -1,    -1,    -1,   217,   218,   219,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
      -1,   253,   254,    -1,    -1,   257,    -1,    -1,   260,   261,
     262,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,    -1,   405,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,   440,    -1,
     442,   443,   444,    -1,    -1,   447,    -1,   449,    -1,   451,
      -1,   453,    -1,   455,   456,   457,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,   474,   475,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,   554,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
     572,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,   584,   585,    -1,    -1,   588,    -1,    -1,   591,
      -1,   593,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     622,   623,    -1,   625,   626,   627,    -1,     5,   630,     7,
       8,     9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,   210,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,   262,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    19,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,   505,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,   190,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,     5,    -1,     7,
       8,     9,    10,    11,   622,   623,    14,   625,   626,   627,
      18,    -1,   630,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,    -1,
     188,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,   206,   207,
      -1,   209,    -1,    -1,   212,   213,    -1,    -1,    -1,   217,
     218,   219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,   257,
      -1,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,    -1,   405,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,   440,    -1,   442,   443,   444,    -1,    -1,   447,
      -1,   449,    -1,   451,    -1,   453,    -1,   455,   456,   457,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,   474,   475,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,   572,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,   584,   585,    -1,    -1,
     588,    -1,    -1,   591,    -1,   593,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   622,   623,    -1,   625,   626,   627,
      -1,     5,   630,     7,     8,     9,    10,    11,    12,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,   120,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
     554,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,   206,   207,    -1,   209,    -1,    -1,   212,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,   253,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
      -1,   405,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,   440,    -1,   442,   443,
     444,    -1,    -1,   447,    -1,   449,    -1,   451,    -1,   453,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,   572,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
     584,   585,    -1,    -1,   588,    -1,    -1,   591,    -1,   593,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,     5,    -1,     7,     8,     9,    10,    11,   622,   623,
      14,   625,   626,   627,    18,    -1,   630,    -1,    -1,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,    -1,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,   217,   218,   219,   220,   221,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,   247,    -1,    -1,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,    -1,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,    -1,    -1,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,    -1,    -1,    -1,
      -1,    -1,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,    -1,    -1,   442,    -1,
     444,   445,    -1,   447,    -1,    -1,    -1,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,    -1,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
     474,    -1,    -1,    -1,    -1,   479,   480,   481,    -1,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,
      -1,   495,    -1,   497,    -1,    -1,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,    -1,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,   617,    -1,    -1,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,     5,   630,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    -1,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,
      -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,    -1,    -1,    -1,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,    -1,   207,    -1,    -1,
      -1,    -1,    -1,   213,    -1,    -1,    -1,   217,   218,   219,
     220,   221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,   247,    -1,    -1,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
     280,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,    -1,    -1,   388,    -1,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,    -1,    -1,    -1,    -1,    -1,   406,   407,    -1,   409,
      -1,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
      -1,    -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
      -1,    -1,   442,    -1,   444,   445,    -1,   447,    -1,    -1,
      -1,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
      -1,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,   474,    -1,    -1,    -1,    -1,   479,
     480,   481,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,
     490,    -1,    -1,   493,    -1,   495,    -1,   497,    -1,    -1,
     500,   501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,
      -1,   511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,
      -1,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
     530,    -1,   532,   533,   534,   535,   536,   537,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,    -1,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
     560,   561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,
      -1,    -1,    -1,   573,   574,   575,    -1,    -1,   578,   579,
      -1,   581,   582,    -1,    -1,    -1,    -1,    -1,   588,    -1,
      -1,   591,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,
      -1,    -1,    -1,   603,    -1,    -1,   606,    -1,    -1,    -1,
     610,   611,   612,   613,   614,   615,    -1,   617,    -1,    -1,
      -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,     5,
     630,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,    -1,
      -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
      -1,   207,    -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,   280,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,    -1,
     356,    -1,    -1,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
      -1,    -1,   388,    -1,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,    -1,    -1,    -1,    -1,    -1,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,    -1,    -1,   442,    -1,   444,   445,
      -1,   447,    -1,    -1,    -1,   451,    -1,    -1,    -1,   455,
     456,   457,   458,   459,    -1,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,   474,    -1,
      -1,    -1,    -1,   479,   480,   481,    -1,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,    -1,   493,    -1,   495,
      -1,   497,    -1,    -1,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
      -1,    -1,   578,   579,    -1,   581,   582,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,
     606,    -1,    -1,    -1,   610,   611,   612,   613,   614,   615,
      -1,   617,    -1,    -1,    -1,    -1,   622,    -1,    -1,   625,
      -1,   627,    -1,     5,   630,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,    -1,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,
      -1,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,   247,    -1,    -1,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,   280,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,    -1,    -1,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,    -1,
      -1,    -1,    -1,    -1,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,    -1,    -1,
     442,    -1,   444,   445,    -1,   447,    -1,    -1,    -1,   451,
      -1,    -1,    -1,   455,   456,   457,   458,   459,    -1,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,   474,    -1,    -1,    -1,    -1,   479,   480,   481,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
      -1,   493,    -1,   495,    -1,   497,    -1,    -1,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,
     622,    -1,    -1,   625,    -1,   627,    -1,     5,   630,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
      -1,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,    -1,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,    -1,   207,
      -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,   217,
     218,   219,   220,   221,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,   247,
      -1,    -1,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,   280,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,    -1,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,    -1,    -1,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,    -1,    -1,    -1,    -1,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,    -1,    -1,   442,    -1,   444,   445,    -1,   447,
      -1,    -1,    -1,   451,    -1,    -1,    -1,   455,   456,   457,
     458,   459,    -1,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,   474,    -1,    -1,    -1,
      -1,   479,   480,   481,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,    -1,   495,    -1,   497,
      -1,    -1,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,    -1,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,    -1,    -1,    -1,    -1,
     588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,   617,
      -1,    -1,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,
      -1,     5,   630,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,    -1,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,    -1,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,   217,   218,   219,   220,   221,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,   247,    -1,    -1,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,    -1,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,    -1,    -1,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,    -1,    -1,    -1,
      -1,    -1,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,    -1,    -1,   442,    -1,
     444,   445,    -1,   447,    -1,    -1,    -1,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,    -1,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
     474,    -1,    -1,    -1,    -1,   479,   480,   481,    -1,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,
      -1,   495,    -1,   497,    -1,    -1,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,    -1,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,   617,    -1,    -1,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,     5,   630,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    -1,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,
      -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,    -1,    -1,    -1,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,   191,    -1,   193,    -1,   195,   196,   197,   198,    -1,
     200,    -1,   202,    -1,    -1,    -1,    -1,   207,    -1,    -1,
      -1,    -1,    -1,   213,    -1,    -1,    -1,   217,   218,   219,
     220,   221,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,   245,   246,   247,    -1,    -1,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
     260,   261,    -1,    -1,    -1,    -1,    -1,   267,   268,    -1,
     270,    -1,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
     280,    -1,    -1,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,    -1,    -1,   388,    -1,
     390,   391,   392,    -1,    -1,   395,   396,   397,   398,   399,
     400,    -1,    -1,    -1,    -1,    -1,   406,   407,    -1,   409,
      -1,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
      -1,    -1,   422,    -1,    -1,    -1,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,   435,   436,   437,    -1,   439,
      -1,    -1,   442,    -1,   444,   445,    -1,   447,    -1,    -1,
      -1,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
      -1,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,   474,    -1,    -1,    -1,    -1,   479,
     480,   481,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,
     490,    -1,    -1,   493,    -1,   495,    -1,   497,    -1,    -1,
     500,   501,    -1,    -1,    -1,    -1,    -1,   507,   508,   509,
      -1,   511,   512,    -1,   514,   515,    -1,    -1,   518,    -1,
      -1,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
     530,    -1,   532,   533,   534,   535,   536,   537,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,    -1,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
     560,   561,    -1,    -1,    -1,    -1,    -1,   567,   568,    -1,
      -1,    -1,    -1,   573,   574,   575,    -1,    -1,   578,   579,
      -1,   581,   582,    -1,    -1,    -1,    -1,    -1,   588,    -1,
      -1,   591,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,
      -1,    -1,    -1,   603,    -1,    -1,   606,    -1,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,   617,    -1,    -1,
      -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,     5,
     630,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,    -1,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,    -1,
      -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,   191,    -1,   193,    -1,   195,
     196,   197,   198,    -1,   200,    -1,   202,    -1,    -1,    -1,
      -1,   207,    -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,
      -1,   217,   218,   219,   220,   221,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,   242,   243,    -1,   245,
     246,   247,    -1,    -1,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,   260,   261,    -1,    -1,    -1,    -1,
      -1,   267,   268,    -1,   270,    -1,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,   280,    -1,    -1,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,    -1,
     356,    -1,    -1,    -1,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
      -1,    -1,   388,    -1,   390,   391,   392,    -1,    -1,   395,
     396,   397,   398,   399,   400,    -1,    -1,    -1,    -1,    -1,
     406,   407,    -1,   409,    -1,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,    -1,    -1,    -1,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,   437,    -1,   439,    -1,    -1,   442,    -1,   444,   445,
      -1,   447,    -1,    -1,    -1,   451,    -1,    -1,    -1,   455,
     456,   457,   458,   459,    -1,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,   474,    -1,
      -1,    -1,    -1,   479,   480,   481,    -1,    -1,    -1,    -1,
     486,    -1,    -1,    -1,   490,    -1,    -1,   493,    -1,   495,
      -1,   497,    -1,    -1,   500,   501,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,    -1,   514,   515,
      -1,    -1,   518,    -1,    -1,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
      -1,    -1,   578,   579,    -1,   581,   582,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,
     606,    -1,    -1,    -1,   610,   611,   612,   613,   614,    -1,
      -1,   617,    -1,    -1,    -1,    -1,   622,    -1,    -1,   625,
      -1,   627,    -1,     5,   630,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,    -1,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,   191,
      -1,   193,    -1,   195,   196,   197,   198,    -1,   200,    -1,
     202,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,
      -1,   213,    -1,    -1,    -1,   217,   218,   219,   220,   221,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
     242,   243,    -1,   245,   246,   247,    -1,    -1,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,   260,   261,
      -1,    -1,    -1,    -1,    -1,   267,   268,    -1,   270,    -1,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,   280,    -1,
      -1,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,    -1,    -1,   388,    -1,   390,   391,
     392,    -1,    -1,   395,   396,   397,   398,   399,   400,    -1,
      -1,    -1,    -1,    -1,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,    -1,    -1,    -1,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,   435,   436,   437,    -1,   439,    -1,    -1,
     442,    -1,   444,   445,    -1,   447,    -1,    -1,    -1,   451,
      -1,    -1,    -1,   455,   456,   457,   458,   459,    -1,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,   474,    -1,    -1,    -1,    -1,   479,   480,   481,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,   490,    -1,
      -1,   493,    -1,   495,    -1,   497,    -1,    -1,   500,   501,
      -1,    -1,    -1,    -1,    -1,   507,   508,   509,    -1,   511,
     512,    -1,   514,   515,    -1,    -1,   518,    -1,    -1,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
      -1,    -1,    -1,    -1,    -1,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,    -1,    -1,   578,   579,    -1,   581,
     582,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,    -1,    -1,    -1,    -1,    -1,
      -1,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,
     622,    -1,    -1,   625,    -1,   627,    -1,     5,   630,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
      -1,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,    -1,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,    -1,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,   191,    -1,   193,    -1,   195,   196,   197,
     198,    -1,   200,    -1,   202,    -1,    -1,    -1,    -1,   207,
      -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,   217,
     218,   219,   220,   221,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
     238,    -1,    -1,    -1,   242,   243,    -1,   245,   246,   247,
      -1,    -1,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,   260,   261,    -1,    -1,    -1,    -1,    -1,   267,
     268,    -1,   270,    -1,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,   280,    -1,    -1,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,    -1,   356,    -1,
      -1,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,    -1,    -1,
     388,    -1,   390,   391,   392,    -1,    -1,   395,   396,   397,
     398,   399,   400,    -1,    -1,    -1,    -1,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,   437,
      -1,   439,    -1,    -1,   442,    -1,   444,   445,    -1,   447,
      -1,    -1,    -1,   451,    -1,    -1,    -1,   455,   456,   457,
     458,   459,    -1,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,   474,    -1,    -1,    -1,
      -1,   479,   480,   481,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,   490,    -1,    -1,   493,    -1,   495,    -1,   497,
      -1,    -1,   500,   501,    -1,    -1,    -1,    -1,    -1,   507,
     508,   509,    -1,   511,   512,    -1,   514,   515,    -1,    -1,
     518,    -1,    -1,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,   567,
     568,    -1,    -1,    -1,    -1,   573,   574,   575,    -1,    -1,
     578,   579,    -1,   581,   582,    -1,    -1,    -1,    -1,    -1,
     588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,   606,    -1,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,   617,
      -1,    -1,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,
      -1,     5,   630,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,    -1,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,    -1,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,    -1,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,   191,    -1,   193,
      -1,   195,   196,   197,   198,    -1,   200,    -1,   202,    -1,
      -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,   217,   218,   219,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,   242,   243,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,    -1,    -1,   260,   261,    -1,    -1,
      -1,    -1,    -1,   267,   268,    -1,   270,    -1,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,    -1,   356,    -1,    -1,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,    -1,    -1,   388,    -1,   390,   391,   392,    -1,
      -1,   395,   396,   397,   398,   399,   400,    -1,    -1,    -1,
      -1,    -1,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,    -1,
      -1,    -1,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,   435,   436,   437,    -1,   439,    -1,    -1,   442,    -1,
     444,    -1,    -1,   447,    -1,    -1,    -1,   451,    -1,    -1,
      -1,   455,   456,   457,    -1,   459,    -1,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
     474,    -1,    -1,    -1,    -1,   479,   480,   481,    -1,    -1,
      -1,    -1,   486,    -1,    -1,    -1,   490,    -1,    -1,   493,
      -1,   495,    -1,   497,    -1,    -1,   500,   501,    -1,    -1,
      -1,    -1,    -1,   507,   508,   509,    -1,   511,   512,    -1,
     514,   515,    -1,    -1,   518,    -1,    -1,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,    -1,    -1,   573,
     574,   575,    -1,    -1,   578,   579,    -1,   581,   582,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,   606,    -1,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,    -1,   630
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    30,    34,    48,    49,    56,    60,    61,
      76,    94,   116,   125,   126,   127,   138,   139,   151,   165,
     183,   199,   201,   206,   209,   232,   234,   252,   269,   273,
     371,   389,   405,   416,   438,   441,   443,   446,   449,   450,
     460,   462,   470,   476,   484,   489,   491,   522,   529,   572,
     585,   589,   592,   597,   626,   641,   652,   655,   656,   657,
     658,   659,   661,   666,   668,   675,   708,   735,   742,   743,
     862,  1027,  1069,  1071,  1085,  1088,  1093,  1095,  1096,  1101,
    1104,  1109,  1116,  1128,  1129,  1301,  1303,  1318,  1321,  1346,
    1354,  1365,  1372,  1386,  1390,  1393,  1403,  1409,  1413,  1415,
    1416,  1468,  1496,  1502,  1504,  1511,  1514,  1541,  1547,  1548,
    1549,  1550,  1607,  1615,  1616,    11,   103,   122,   193,   222,
     274,   410,   482,   546,   595,  1065,  1572,  1573,  1574,  1577,
     270,   357,  1103,  1542,   554,  1459,   226,     5,     7,     8,
       9,    10,    11,    14,    18,    21,    23,    24,    25,    26,
      27,    28,    30,    34,    38,    41,    42,    43,    45,    47,
      48,    51,    54,    55,    57,    58,    60,    62,    63,    64,
      65,    66,    67,    69,    70,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    82,    83,    85,    86,    87,    88,
      89,    93,    96,    98,   101,   105,   106,   107,   110,   115,
     116,   121,   122,   124,   128,   130,   131,   132,   133,   134,
     138,   141,   142,   143,   147,   149,   150,   152,   153,   154,
     157,   158,   160,   161,   162,   163,   164,   165,   168,   169,
     170,   171,   172,   175,   176,   178,   179,   180,   183,   188,
     189,   191,   193,   195,   196,   197,   198,   200,   202,   206,
     207,   209,   212,   213,   217,   218,   219,   220,   223,   224,
     225,   228,   233,   234,   238,   242,   243,   245,   246,   250,
     253,   254,   257,   260,   261,   267,   268,   270,   272,   274,
     275,   283,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   303,
     304,   305,   307,   308,   309,   310,   312,   313,   318,   319,
     320,   321,   322,   323,   326,   327,   329,   331,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   344,   345,   348,
     349,   350,   351,   355,   356,   362,   364,   365,   366,   368,
     369,   370,   372,   383,   384,   385,   387,   388,   390,   391,
     392,   395,   396,   397,   398,   399,   400,   401,   405,   406,
     407,   409,   411,   412,   413,   414,   415,   417,   418,   419,
     422,   426,   427,   428,   429,   430,   433,   434,   435,   436,
     437,   439,   440,   442,   443,   444,   447,   449,   451,   453,
     455,   456,   457,   459,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   474,   475,   479,   480,   481,
     482,   486,   490,   492,   493,   494,   495,   497,   498,   499,
     500,   501,   507,   508,   509,   511,   512,   514,   515,   518,
     521,   522,   523,   524,   525,   526,   529,   530,   532,   533,
     534,   535,   536,   537,   540,   541,   542,   543,   545,   546,
     549,   550,   551,   552,   555,   556,   558,   559,   560,   561,
     567,   568,   572,   573,   574,   575,   578,   579,   581,   582,
     584,   585,   588,   591,   593,   595,   596,   603,   606,   610,
     611,   612,   613,   614,   622,   623,   625,   626,   627,   630,
     702,  1457,  1462,  1466,  1467,   303,   545,   548,  1498,  1498,
     622,  1543,   103,   192,   274,   482,   502,   546,   551,   587,
     595,   684,   685,   914,   915,   916,  1005,  1006,  1007,  1355,
    1302,   103,   162,   193,   226,   274,   410,   482,   546,   551,
     569,   595,   610,  1314,  1462,  1103,    98,   744,   701,   649,
    1454,  1456,  1462,   667,  1319,   397,    82,   418,  1414,   106,
     226,   627,  1421,  1498,  1103,   863,  1462,  1410,   470,   595,
    1498,  1103,  1322,  1404,   505,   732,   736,   737,  1462,   701,
    1543,  1462,  1132,  1134,  1135,  1469,  1373,   736,   494,   567,
     494,   548,  1367,   397,  1503,  1347,  1462,    30,    76,   149,
     405,   427,   462,   522,  1609,   476,   641,  1130,     0,   151,
     653,   405,   171,   188,   390,  1391,  1454,  1462,   155,  1039,
    1462,   155,   702,   203,   702,   262,  1459,  1462,  1464,   810,
     811,   814,   837,  1462,   701,   548,   162,  1033,  1572,  1498,
    1543,  1110,   709,   649,   565,  1086,  1097,    17,  1544,   221,
     917,   203,  1464,   812,   837,   701,   378,  1569,  1573,  1574,
    1575,  1576,  1577,   548,   915,   226,   226,   226,   222,   281,
     419,  1363,  1364,     7,    21,    27,    33,    35,    36,    37,
      39,    52,    53,    58,    59,    66,    69,    88,    91,    92,
      97,    99,   102,   103,   108,   109,   110,   115,   117,   120,
     166,   173,   174,   181,   188,   196,   198,   204,   210,   217,
     221,   232,   235,   259,   267,   278,   306,   311,   322,   326,
     328,   332,   333,   334,   335,   336,   343,   352,   353,   354,
     358,   359,   361,   366,   386,   392,   393,   394,   399,   400,
     402,   417,   445,   446,   459,   461,   467,   468,   474,   527,
     528,   534,   538,   539,   544,   554,   558,   559,   560,   561,
     570,   571,   572,   576,   580,   595,   599,   600,   601,   602,
     607,   609,   613,   614,   630,   634,   635,   640,   641,   644,
     645,   648,   649,   966,  1149,  1150,  1151,  1152,  1156,  1159,
    1160,  1161,  1162,  1163,  1164,  1178,  1185,  1187,  1199,  1440,
    1442,  1444,  1445,  1446,  1450,  1452,  1457,  1462,   221,  1313,
    1313,  1313,  1462,   203,  1313,  1313,   837,  1313,   701,  1313,
    1498,   662,  1394,   130,  1515,  1462,   370,    65,   423,   649,
    1464,   123,   211,   281,  1324,  1462,  1149,   236,  1417,  1497,
    1498,    46,   864,   190,    33,   303,  1378,  1411,  1462,   701,
    1105,  1498,   123,   281,  1325,  1353,   303,   418,   494,  1405,
    1406,   603,   733,   484,   738,  1512,   565,  1544,  1133,    12,
     135,   211,   510,   511,   512,   513,   514,   515,   516,   531,
    1139,  1140,  1141,  1568,    58,    59,   120,   200,   270,   339,
     392,   481,   567,   648,   968,  1462,  1470,  1482,  1486,  1488,
      34,    58,    69,    92,    94,   104,   153,   158,   161,   191,
     193,   200,   202,   225,   226,   249,   270,   303,   370,   398,
     409,   410,   413,   414,   434,   481,   494,   530,   548,   612,
     968,  1004,  1374,  1378,  1379,  1381,  1483,   738,   437,   518,
    1080,  1081,  1082,   423,   619,  1072,  1073,  1074,  1080,  1366,
    1462,  1498,  1353,    35,   210,   554,  1441,  1460,  1608,  1608,
    1608,  1608,  1608,  1134,  1130,   642,   647,  1462,   155,  1388,
    1387,   320,   552,   579,  1029,   593,    99,  1464,  1465,  1031,
     816,   838,  1462,  1030,   372,     6,    56,   139,   353,   422,
     424,   839,  1035,  1465,  1454,   702,   517,  1578,  1579,  1032,
    1094,  1111,  1112,  1113,  1114,  1454,   641,   710,  1462,   669,
    1308,  1309,  1454,  1308,    55,   355,   355,   438,  1545,   352,
     353,  1155,  1462,   815,   838,   186,     6,  1465,  1531,  1532,
     446,    10,   410,   569,   688,  1145,  1571,  1579,  1591,  1595,
    1596,  1602,   688,  1145,  1570,  1579,  1591,  1596,  1602,  1572,
    1577,   917,  1462,  1462,  1462,   190,  1356,  1360,  1361,  1462,
    1363,   641,   641,   641,  1159,   641,   641,   641,  1149,  1204,
     641,   641,   641,   641,   641,   641,   641,   641,   641,  1148,
    1148,   641,   955,   641,   641,   641,   554,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
    1149,   641,   641,   641,  1202,  1203,  1450,  1462,   641,   641,
     641,   641,   641,   641,   641,   641,   641,  1149,   955,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     955,   554,   641,   641,   641,   554,   641,   641,   641,    35,
     210,   554,   641,  1148,   955,   955,   641,   641,   641,   641,
     641,   641,  1159,  1159,  1159,  1149,  1563,  1564,  1462,  1188,
    1462,    16,    17,   375,   378,   628,  1153,  1154,   155,   156,
     194,   205,   244,   255,   282,   346,  1157,    31,   136,   239,
     263,   332,   432,   487,   488,   500,   632,   633,   634,   635,
     636,   637,   638,   639,  1155,  1159,    68,   377,   643,  1460,
     641,   649,   166,  1462,   702,  1462,   367,   838,   702,  1464,
     356,   611,   848,   849,  1315,  1316,  1317,  1379,   702,  1465,
    1530,  1307,  1313,   598,   663,    33,   128,   153,   157,   195,
     213,   275,   409,   418,   433,   451,   495,   526,  1395,  1400,
    1401,  1498,    81,   648,   745,   746,   747,   748,  1462,    12,
      13,    94,   125,   139,   162,   165,   178,   201,   226,   232,
     273,   411,   415,   431,   439,   447,   476,   489,   490,   540,
     569,   592,   594,  1516,  1518,  1520,  1521,    19,   155,  1256,
    1257,  1505,  1462,  1065,   499,    48,    80,   281,  1423,  1454,
    1499,  1500,  1102,   265,   268,   420,   865,   867,   648,   660,
    1459,   275,  1106,  1465,  1107,  1108,  1454,  1089,   236,  1310,
    1326,  1327,  1454,    48,  1407,   643,  1460,    54,    63,    73,
      85,    86,    87,   101,   321,   338,   472,   533,   550,   739,
     741,    12,   415,  1513,  1518,   470,  1546,  1545,   586,  1551,
    1552,   636,  1143,  1144,  1145,  1141,   484,   649,    33,   120,
     155,   485,   969,   970,  1337,  1464,   187,  1337,  1472,   648,
    1464,    33,   120,   972,   973,  1464,   649,  1473,  1471,  1337,
     161,   263,   616,  1385,   641,   103,   162,   193,   410,   548,
     569,   610,  1385,    12,   926,  1464,   264,  1276,  1278,   190,
     239,  1380,  1382,    67,   526,   187,   526,   545,    67,   526,
      12,    41,    89,    93,   243,   319,   385,   501,   542,  1368,
    1369,  1370,   161,   213,   526,   526,  1276,  1385,  1382,   275,
     152,    70,   412,   545,   568,   526,   606,  1070,   643,   369,
     624,    83,   643,  1309,  1065,   643,   368,  1611,   541,  1612,
     248,   455,  1610,   642,  1552,  1554,  1556,  1557,   151,   654,
    1464,  1128,  1318,  1321,  1346,  1354,  1389,  1392,  1441,  1462,
     120,   912,   913,   923,   924,   977,   106,  1148,   648,   703,
       6,   817,   703,   641,   105,   834,   834,   834,     4,   643,
     392,  1028,  1034,   475,   610,  1579,  1308,   239,   643,   389,
    1122,  1124,  1125,   711,   712,  1149,   223,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   304,   305,   435,   436,
     670,   671,   674,   171,   419,   643,  1087,    57,   171,   175,
     187,   318,   419,  1098,  1099,  1100,    55,   438,   166,   683,
     817,   106,   834,   219,   643,  1145,  1145,  1145,   162,   193,
     193,  1579,  1454,  1008,  1009,  1008,  1008,  1311,  1312,  1454,
    1455,  1462,   643,  1358,   649,  1362,  1149,  1149,    12,   135,
    1195,  1258,  1195,  1195,  1195,   615,  1206,  1149,  1149,  1199,
    1199,  1149,  1149,  1149,   135,  1195,  1258,   642,   361,   642,
     642,  1149,  1149,  1149,  1149,  1450,  1563,   111,   112,   113,
     114,   115,   214,   215,   216,   217,   322,   324,   325,   326,
     333,   417,   473,   474,   613,   629,   630,  1253,  1254,  1149,
    1199,   107,   110,   558,   561,  1255,   135,  1190,  1149,  1149,
    1149,  1149,  1253,  1149,  1199,  1203,     9,   643,   649,   135,
    1195,  1149,  1149,   135,  1195,  1149,  1149,  1199,  1199,  1199,
    1145,  1183,  1184,  1149,  1149,  1184,  1184,  1149,  1199,  1152,
    1149,  1149,  1149,  1149,  1149,  1149,   642,  1149,  1195,  1195,
    1149,  1149,   135,  1195,  1149,  1254,  1254,  1149,    44,   256,
     566,  1149,  1149,   642,  1451,  1452,  1462,  1195,  1195,  1149,
    1149,  1149,   642,   643,   642,   476,   641,  1560,  1561,  1149,
     648,  1189,  1464,   649,  1149,  1149,  1149,  1151,   174,   359,
     571,   588,  1155,    12,    18,  1151,  1158,  1152,  1152,   641,
    1159,  1152,  1152,  1152,  1152,   263,  1152,  1152,   235,  1152,
     235,  1152,  1152,  1152,  1152,  1152,    31,   239,   263,   432,
    1464,  1159,  1149,  1182,  1183,  1462,   649,  1454,  1315,   643,
    1317,   153,   643,  1308,  1304,   648,   664,   665,   275,   275,
     275,   275,    48,   275,   275,   643,  1396,   110,   558,   561,
     740,   750,  1187,  1444,  1450,  1464,   643,   155,   409,  1519,
     464,   464,   546,   551,   595,   610,   373,  1523,   545,   367,
    1525,    64,   494,  1522,   104,   610,  1524,   367,   643,  1462,
     179,   349,  1462,  1506,  1507,  1326,  1459,  1117,   270,  1422,
    1257,   643,  1308,    70,   641,   872,   873,   872,   873,   390,
     875,   207,   251,  1464,    29,   565,  1412,   643,   565,   643,
     565,  1308,  1327,  1323,   389,  1220,  1221,    12,  1408,  1406,
     643,   155,  1519,   367,   367,  1462,    12,   135,  1559,   643,
    1136,  1149,  1448,  1462,  1462,    68,   975,  1149,  1465,   366,
     392,   554,  1494,   245,   423,  1489,  1490,  1491,  1492,   200,
     270,   481,  1484,  1337,  1462,   567,  1474,  1485,  1488,   643,
    1476,  1487,   239,  1383,  1459,  1149,   636,   917,   702,   702,
     702,  1454,   702,  1454,   275,   337,   526,  1377,  1377,   278,
     361,   576,  1279,  1280,  1442,  1462,  1385,  1462,   702,  1385,
    1465,  1380,   702,  1385,   242,   543,   176,   187,  1371,   643,
    1383,  1380,  1454,  1382,  1380,  1380,  1385,  1385,   591,  1083,
    1082,   497,  1074,   476,   641,   645,  1207,  1208,  1209,  1210,
    1211,  1222,  1223,  1237,  1441,   395,  1613,   376,  1272,  1278,
    1558,   913,    68,   968,   131,  1464,    74,    88,   253,   330,
     355,   421,   517,   705,   707,   428,   581,   835,   836,   228,
     831,   832,   833,   840,   848,   849,   103,   212,   383,   392,
     401,   498,   595,   686,   687,  1459,    24,   310,   825,   826,
     827,   840,   841,   842,   848,   849,   818,   819,   825,  1465,
     169,     6,    11,    13,    15,    25,    26,    56,    60,    61,
      66,    74,    82,    91,   106,   124,   132,   133,   139,   147,
     153,   164,   185,   224,   226,   233,   250,   273,   309,   327,
     331,   371,   376,   384,   389,   392,   426,   440,   441,   442,
     443,   466,   523,   524,   525,   530,   546,   549,   572,   586,
     859,   919,   921,   923,   924,  1040,  1044,  1046,  1049,  1055,
    1056,  1057,  1062,  1063,  1268,   367,   696,  1036,   122,   238,
    1454,   120,  1115,  1462,  1113,  1454,   861,  1124,   226,   251,
    1002,  1126,   642,   643,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   643,  1309,
     593,  1099,   911,   912,    74,   350,   429,   582,   828,   829,
     830,   840,   844,   845,   846,   847,   848,   849,   623,   597,
     813,    46,   619,  1532,   193,   702,   702,   917,   702,  1462,
     676,   574,   598,  1016,   367,   367,   367,   643,  1359,  1220,
     649,  1362,  1361,   190,   636,  1462,   643,   642,  1195,   642,
    1196,   642,   642,   642,  1149,   145,   615,  1205,    19,   642,
     598,   642,   642,   642,   643,   598,   643,  1200,  1258,   642,
     636,   642,   643,   643,   642,   642,   642,   642,   190,   643,
     642,   643,  1186,   642,   643,   643,   643,   635,   643,   642,
     642,   641,  1450,  1462,  1195,   642,   642,   642,  1195,   642,
     643,   642,   642,   642,   642,  1149,   642,   643,   642,   642,
     642,   642,   643,   642,   239,   642,   643,   643,   642,   643,
     643,   642,   642,   642,   643,   190,   643,  1195,   642,   642,
     643,   643,   643,   642,   190,  1149,   190,  1149,   190,  1149,
     190,   642,   643,   642,   642,   642,   642,   643,    19,   261,
     643,   992,   642,  1199,  1227,  1228,  1229,   476,   641,  1131,
    1555,  1556,   586,  1565,   646,  1484,   485,  1462,   174,   359,
     571,   588,   641,    17,  1149,  1563,   160,  1263,  1152,  1149,
    1149,  1152,   641,  1159,  1152,   642,   641,   649,  1462,  1305,
    1317,  1337,  1338,  1465,    50,   454,  1066,  1308,  1464,   643,
    1401,  1308,  1402,   748,   751,   752,   747,   362,   468,   749,
     545,   641,  1533,  1465,  1533,  1533,  1533,   193,   410,   548,
    1517,  1521,   155,   179,   194,   205,   254,   255,   282,   349,
     407,  1508,  1510,   616,  1259,  1320,  1118,  1119,  1120,  1121,
    1454,   227,   281,   423,   624,  1501,  1500,   641,  1145,   117,
     181,   210,   278,   361,   576,  1283,  1286,  1287,   537,   876,
     866,    11,   868,  1149,  1459,  1465,  1465,  1108,  1454,   171,
     419,   596,  1090,  1091,  1092,   476,   484,   602,   603,   641,
     907,  1328,  1331,   641,   741,   740,   643,  1465,   193,   410,
    1517,  1553,  1144,   190,   236,  1137,  1138,  1271,  1272,  1296,
    1146,  1146,   649,   120,   974,   976,  1464,  1337,   641,   641,
     261,   369,   624,   643,   643,   649,   649,   649,  1488,  1149,
    1489,  1475,  1337,  1477,  1478,    12,    33,   120,   367,  1149,
    1495,  1459,   190,  1384,   642,  1462,   365,   643,  1385,   418,
    1276,  1370,  1384,  1385,  1380,  1454,  1385,  1385,   507,   508,
     509,   674,  1084,   595,  1075,  1076,  1236,  1462,    95,   229,
     248,   259,   342,   461,   531,  1219,   484,   643,  1454,  1236,
     643,   187,  1614,    46,  1276,  1338,  1338,   340,  1459,   517,
     517,   517,   517,   517,   475,  1459,  1459,  1338,   643,   833,
    1459,  1459,  1459,  1459,   117,   181,   210,   278,   361,   576,
    1282,  1459,  1459,   642,   643,  1338,  1338,   643,   827,   820,
     821,   840,   841,   842,   392,    71,    84,   389,   935,   938,
     939,  1000,  1002,  1006,  1007,  1064,  1338,  1064,   389,  1338,
    1338,  1064,  1338,   389,   389,  1338,  1338,   565,   131,  1338,
     249,   546,   186,   389,   408,  1002,  1064,   249,  1338,   389,
     546,   131,  1338,  1338,  1338,  1338,  1338,  1064,   389,    46,
    1338,   861,  1338,   389,   391,    19,   155,   565,  1068,   389,
     389,  1338,  1338,  1338,  1338,   134,   319,  1462,  1338,   389,
    1338,   919,   643,   858,   859,  1044,   641,   649,   934,   940,
    1453,  1462,    78,   471,   441,  1037,  1580,  1123,   641,  1149,
     641,  1282,  1458,  1459,  1282,  1282,  1458,  1458,   117,   181,
     278,   361,   576,  1284,  1458,  1282,  1282,  1458,  1458,  1458,
    1458,  1458,  1458,  1458,  1282,  1282,  1458,  1445,  1458,  1282,
     671,  1338,  1338,  1338,  1338,   643,   830,  1464,   274,   172,
     822,   823,   824,   840,   841,   842,   843,   846,   847,   848,
     849,   392,   554,  1464,  1462,  1603,     8,    29,   808,   702,
     641,   457,   263,   641,   851,   918,   920,   921,    45,   207,
     469,  1021,  1021,  1454,  1454,  1454,  1312,  1462,   598,  1357,
    1462,  1208,   649,  1362,   235,  1149,   642,   382,  1168,  1149,
     557,  1149,  1149,   149,    33,    59,   107,   110,   118,   344,
     492,   561,   590,  1197,   969,  1149,   969,  1197,   642,  1201,
    1168,   642,   235,   235,  1149,  1149,  1149,  1199,  1149,  1149,
    1149,  1149,  1149,  1152,   642,  1168,   642,  1168,  1149,  1146,
     190,  1165,  1184,   618,   618,  1149,  1149,  1149,  1149,  1149,
    1199,  1168,  1168,   235,  1149,  1149,  1149,   642,  1168,  1149,
    1149,  1149,  1149,   190,  1149,   190,  1149,   190,  1149,  1149,
    1168,  1168,  1149,    33,    59,   987,   988,   989,   990,   991,
    1283,  1282,   642,   642,  1566,  1567,  1568,  1228,  1131,   642,
    1559,  1464,  1149,  1563,  1151,   642,   643,   642,  1159,  1253,
    1253,    17,  1149,  1563,  1263,   222,   452,  1167,  1168,  1198,
    1199,  1462,  1306,   925,  1464,  1066,   665,  1397,   155,   643,
    1462,  1534,  1535,   565,   636,  1454,  1462,  1529,  1529,  1529,
    1509,  1260,  1277,  1278,  1328,   643,  1122,  1124,   554,  1461,
     624,   270,   869,   870,   871,  1462,   881,  1152,    46,   641,
     883,   873,   155,   641,   565,  1091,   908,  1329,   641,  1334,
    1339,  1334,   642,   907,  1330,  1447,  1448,  1451,  1462,  1332,
    1252,  1462,   155,   201,   190,  1529,  1529,  1529,  1129,   140,
    1208,  1297,   187,   273,  1142,  1296,  1277,  1138,    19,  1147,
    1459,  1462,   636,  1462,  1494,   554,   554,   423,   444,   479,
    1493,  1491,  1490,  1337,  1476,  1495,   643,  1480,  1482,  1486,
    1284,  1375,   158,   612,  1280,  1280,   361,  1376,  1259,  1380,
     155,   155,   643,   155,   392,  1077,  1224,  1231,  1236,  1207,
     248,   248,   379,  1238,   248,   259,   461,  1238,  1222,  1207,
    1349,  1350,  1451,  1209,  1220,  1233,  1234,  1282,   323,  1273,
     976,   970,   106,   106,   122,   238,   278,   361,   576,   850,
    1285,  1286,  1457,   833,   687,   850,   850,   827,   643,   821,
     169,  1024,  1453,  1103,    61,   186,   408,   587,   937,  1001,
    1024,  1002,  1003,  1003,   120,  1462,  1453,  1103,  1284,  1282,
    1453,  1282,    12,  1045,  1053,  1054,  1462,  1103,  1459,  1459,
     968,  1338,  1282,   251,  1053,   251,  1453,  1453,   925,  1054,
    1338,   179,   254,   355,   928,  1282,   120,  1462,  1284,  1284,
    1453,  1103,  1269,  1270,  1451,   120,  1282,   860,  1459,  1103,
     861,  1454,  1103,  1103,    77,    79,   120,   143,   180,   430,
     927,   120,  1282,   120,  1282,   120,  1282,  1282,  1045,   922,
       6,   139,  1057,   931,   932,   933,   934,   935,  1462,     8,
     179,  1067,   431,   936,   937,   994,   941,   649,   353,   406,
      23,   163,   690,   565,   132,   147,   692,   641,  1581,   641,
     408,  1249,  1250,  1251,  1462,   672,   673,  1282,  1459,  1283,
     850,   850,   830,   372,   203,  1338,   643,   824,   554,    19,
     457,   641,   125,   232,   592,   809,   689,  1597,   118,   237,
     425,   532,   930,  1454,   263,   852,   857,   858,   931,   857,
     643,   920,   677,   679,   681,   649,  1208,  1259,  1362,  1259,
    1149,   642,  1168,   641,  1149,   557,   641,   959,   960,   960,
     641,   954,   641,   952,   953,   959,   960,   237,   954,   237,
     642,   642,   642,   642,   642,  1168,  1199,  1168,  1149,  1149,
     642,   642,   643,   642,   376,  1192,   643,   643,   642,   643,
     642,   239,  1179,  1180,  1168,  1168,   642,  1147,   179,   254,
    1166,  1167,   203,   203,   642,   642,   642,   643,   642,   642,
    1149,   642,   187,   642,   642,   643,  1168,   642,   643,   643,
     642,  1149,   642,  1149,   642,  1149,   642,   642,   642,   641,
     982,   982,    20,   126,   459,   634,   984,   985,   986,   643,
     643,  1143,  1568,   642,  1562,   649,  1025,   642,  1199,  1151,
     642,   643,   642,   360,   360,  1168,   642,  1061,  1062,  1063,
     187,   619,  1398,    54,    63,    73,    85,    86,    87,   101,
     321,   338,   456,   472,   533,   550,   753,   752,   642,   643,
    1531,   649,   649,   565,   565,   565,   641,  1149,   367,  1344,
    1120,  1454,  1124,   222,  1127,  1418,   642,   643,  1146,   867,
     389,   884,   885,  1283,   869,  1465,  1139,  1335,  1336,  1451,
    1340,   643,   641,  1331,   642,   642,   643,   649,  1551,   642,
     643,   740,   373,  1531,   190,   190,   190,  1259,  1259,   141,
     380,  1292,  1293,  1298,   592,   239,  1459,  1462,   649,   642,
     642,    75,   578,   423,  1495,  1479,  1481,  1276,  1276,  1385,
    1459,  1459,   674,  1459,   155,   121,  1078,   586,   642,  1555,
    1232,   646,   248,  1222,  1238,  1238,   248,   367,   367,   598,
     643,  1348,  1337,  1257,  1139,  1149,  1274,  1449,   821,  1047,
     641,   251,   251,  1003,  1024,  1009,  1024,  1024,   139,   484,
    1045,  1058,  1042,   643,  1283,   970,  1459,  1453,  1066,   619,
    1459,  1059,  1045,   643,    20,   126,  1275,   864,  1045,  1050,
    1045,   641,   642,   643,  1462,  1454,    32,    33,    38,    40,
      42,    43,    59,   107,   110,   118,   137,   154,   180,   182,
     196,   197,   237,   267,   276,   277,   279,   315,   316,   317,
     334,   335,   336,   341,   344,   363,   364,   399,   400,   425,
     480,   484,   496,   555,   558,   561,   562,   563,   564,   604,
     605,   630,   942,   945,   946,   947,   948,   949,   950,   951,
    1462,   406,  1149,  1149,   367,   696,   702,   367,    74,   697,
    1462,  1582,    19,  1045,   642,   643,   642,   643,   641,  1462,
     850,   824,  1459,   930,  1604,   367,   367,   713,   714,   716,
    1462,   499,  1454,   907,   642,   222,   446,   854,  1424,   920,
     641,   641,   641,  1462,  1259,  1271,  1253,   389,  1169,  1149,
     117,   278,   361,   576,    21,    33,    47,   584,   968,   978,
     979,   980,   361,   361,  1253,  1253,  1149,    46,   478,  1191,
    1149,  1149,  1199,    42,   342,   642,   619,  1181,  1168,   641,
     641,  1149,  1253,  1149,  1149,  1149,  1149,   642,   642,   642,
    1283,   642,   992,   987,   985,   987,   988,  1282,  1230,  1560,
    1462,   642,  1199,  1063,  1062,  1399,   423,  1535,   619,  1538,
     636,   636,  1531,  1531,  1531,   120,  1149,  1342,  1343,   142,
    1127,   257,  1424,   871,   642,   207,   251,   886,   642,   643,
     642,  1143,   643,  1337,  1341,  1342,  1339,  1333,  1331,  1447,
    1462,   861,  1462,   190,  1531,  1531,  1531,  1277,   203,  1264,
    1461,  1461,   648,  1294,  1295,  1464,   486,   636,  1480,  1485,
    1459,   155,   396,  1079,  1559,  1257,  1210,  1207,  1222,   248,
     248,  1207,  1222,  1213,  1212,  1214,  1350,  1259,  1343,  1247,
    1248,  1143,   643,  1275,   390,   641,  1048,  1149,  1024,  1009,
     641,  1008,  1008,   120,   120,   940,  1098,  1054,   975,   548,
     942,  1041,  1270,  1051,  1053,  1043,  1402,   933,   641,   995,
     959,   959,   960,   954,   952,   404,   943,   952,   952,   980,
      59,   604,   946,   948,   980,   980,    59,   605,   605,   608,
     952,   944,   960,   954,   954,   980,   959,   960,    25,    68,
      72,    74,   120,   359,   367,   408,   480,   530,   587,   962,
     963,   964,   993,  1155,   608,   959,   980,    33,   959,   981,
     959,   959,   960,   641,   953,   961,   649,  1253,   494,  1459,
     138,  1038,   642,   643,  1583,  1584,   642,  1250,   673,   686,
     499,   230,   239,   381,   717,   718,   719,   720,  1145,   471,
     642,   643,   715,  1459,   642,   642,   918,    19,   910,  1022,
    1023,  1462,  1022,  1022,   264,  1281,   642,    46,   376,   420,
     465,  1170,  1174,  1175,   642,   642,   642,   642,    33,    21,
     584,   968,    33,   969,   642,   643,   642,   642,   642,  1193,
    1441,   642,   642,   643,   642,   329,   253,   418,   376,   376,
     642,   642,   642,   642,   642,   642,   983,   642,   643,   929,
    1138,  1277,  1555,   642,   170,   273,   201,   448,  1536,  1536,
    1536,   642,   643,  1345,   236,   641,   874,   868,   887,  1462,
     885,   909,  1336,  1343,   642,  1554,  1531,    46,   208,  1261,
    1299,  1464,   643,   329,  1459,   155,  1225,   367,  1216,  1222,
    1222,   367,  1218,  1149,  1149,   641,  1271,  1245,  1246,  1235,
    1449,  1283,   884,   642,   641,   641,  1022,   641,   641,   110,
     558,   561,   634,   635,  1443,  1444,  1067,  1454,   962,  1103,
    1052,  1090,   642,   996,  1462,   306,   997,   492,   590,   631,
     956,   957,   958,   641,   956,   956,   980,   608,   956,   641,
     980,   956,   974,   120,   143,   180,  1459,   966,   967,  1443,
     592,   120,   120,   134,   319,   251,   964,   251,   359,   980,
     981,   980,   981,   956,   361,   956,  1462,   691,   698,   699,
    1462,   476,   641,  1585,  1588,   642,  1459,   642,   643,   715,
    1592,   690,  1598,   716,   942,   965,   853,   857,   641,   907,
     642,   643,  1275,   641,   642,   642,  1280,  1199,    46,   642,
      31,    98,   235,   577,  1149,  1176,   969,   981,   361,  1194,
    1449,  1149,   329,   168,    46,    46,   642,  1282,  1142,  1142,
     373,    62,   246,   351,   519,   535,   625,  1527,  1528,   619,
    1537,  1537,  1537,  1343,   251,   548,  1145,   877,   641,   602,
     888,   929,  1265,  1262,  1271,   968,   971,  1295,  1459,  1560,
    1215,   598,  1217,   598,  1252,  1281,   185,   222,   597,  1240,
    1241,  1244,   929,  1275,   642,  1022,  1022,   642,  1022,  1022,
    1445,  1445,   861,  1060,   236,   642,   643,   191,   388,   493,
     367,   998,   958,  1026,  1441,  1026,   966,   603,   521,   693,
      52,    65,   177,   221,   247,   258,   370,   458,   700,   758,
     760,   761,   762,   764,   765,   766,   767,   768,   769,   771,
     779,   780,   783,   794,   797,   799,   800,  1457,  1463,  1467,
    1589,   641,  1587,  1588,   619,  1590,  1586,  1605,   719,  1462,
    1454,   695,   696,   457,   975,  1554,   854,   907,   855,    74,
     250,  1010,  1013,  1016,  1017,  1018,  1023,   361,   619,  1011,
    1015,  1017,  1020,  1012,  1014,  1017,  1019,  1171,  1449,  1176,
     467,  1149,   184,   403,  1177,  1177,   642,   643,  1275,   642,
    1171,  1171,   642,   554,   554,   554,    17,  1526,   201,   307,
     308,   312,   313,  1539,  1540,   592,  1454,   881,   536,   882,
     879,   880,  1462,   239,   260,    74,   106,   226,   309,   327,
     350,   546,   904,   905,   906,  1379,  1266,  1449,  1149,  1277,
     970,  1300,  1226,  1149,   641,  1149,   641,   642,  1002,  1002,
    1241,   642,   642,  1010,   642,   642,  1067,   641,  1462,   125,
     592,   642,   643,   642,  1149,   150,   694,   781,   784,  1462,
     190,   349,   772,   759,  1463,  1463,  1462,   763,   656,   280,
     445,   617,   803,    30,   801,   650,  1134,  1587,   642,    51,
      61,   270,  1551,   704,   965,   187,   692,  1599,   642,  1551,
    1459,  1338,   678,  1018,  1275,   642,   387,   680,  1020,   682,
    1019,   643,  1173,  1174,  1275,    17,  1253,  1449,   642,   642,
    1527,   373,  1282,  1282,  1282,  1282,  1540,  1351,  1352,  1451,
    1220,  1146,  1283,   642,   643,   890,   556,  1338,   131,   131,
    1338,  1338,  1338,  1338,   641,   899,   906,   153,   620,   621,
     643,  1267,  1275,   410,  1288,    70,  1425,  1555,  1252,  1252,
     187,  1239,  1239,   994,  1010,  1011,  1012,   884,    50,   355,
     454,   484,   999,   999,   980,  1441,   980,  1149,  1149,   615,
     786,   790,   190,  1462,   774,   775,  1149,   722,   757,   758,
     760,   762,   764,   766,   767,   768,   769,   771,   779,   794,
     797,   799,   722,   804,   802,   795,   798,   642,  1554,    61,
     373,    61,   129,   705,   706,  1155,  1606,  1145,   697,   965,
     856,  1282,  1061,  1457,  1061,  1061,  1449,   360,  1172,  1176,
    1177,  1275,  1168,  1168,   643,  1337,  1419,   642,   878,   880,
     641,   892,   894,   889,  1459,  1338,  1338,  1285,  1285,  1283,
    1464,   537,   900,   901,  1338,  1449,    14,   148,   159,   374,
     553,  1426,  1427,   266,  1428,   642,   642,   203,   248,   376,
    1243,  1242,   642,     5,   120,   359,   367,   367,   782,   791,
     145,   790,   793,   236,   149,  1149,   149,   757,   647,   591,
    1149,   723,   803,   801,   373,   373,   129,   757,  1593,   138,
    1600,  1554,  1275,   179,   254,  1352,  1343,   971,   882,   641,
     893,   894,   895,   314,   891,   894,  1459,  1459,   902,   642,
     643,   925,  1275,  1289,    46,    46,   148,    46,  1427,   520,
     553,  1429,  1430,    46,    46,   641,   641,   592,   125,   615,
     785,   787,  1149,   722,   149,   770,   221,   776,   280,   647,
     806,   805,   119,   721,   724,   796,  1463,   796,   144,   698,
     704,  1172,  1420,   642,   643,   314,   897,   898,  1152,   903,
    1464,   901,   641,  1441,  1441,    46,  1441,    46,    46,  1430,
    1249,  1251,   999,   999,   788,   787,   793,   792,    52,   773,
    1462,   557,  1149,   138,    90,   167,   728,   754,  1462,   149,
     757,   647,   467,  1601,   465,  1431,   894,   643,   896,   904,
     361,  1290,  1291,  1441,  1441,  1441,   642,   642,  1149,   149,
     557,   643,   722,   807,   722,   206,   643,   725,    81,   100,
     647,  1594,   757,   219,  1425,   898,   642,   642,   643,   789,
      52,   722,  1462,   777,   149,   149,   187,  1462,   965,   187,
     187,   757,    46,  1428,  1291,   557,   145,   146,   778,   445,
     617,   726,   120,   755,   731,   732,  1282,   727,  1441,   222,
    1432,   722,   722,   774,   504,   506,   729,   730,   731,   734,
    1155,  1462,   756,  1128,   361,   641,  1434,   643,   757,   189,
    1149,   266,   465,  1433,   642,   648,  1435,  1436,  1451,   484,
    1437,   730,  1464,   642,   643,  1438,  1439,  1451,  1436,   643,
    1337,  1439,  1145,  1343,  1146
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 2013 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 2025 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 2050 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 62:

/* Line 1455 of yacc.c  */
#line 2124 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 2139 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
            /*
              We don't know know at this time whether there's a password
              in prepare_src, so we err on the side of caution.  Setting
              the flag will force a rewrite which will obscure all of
              prepare_src in the "Query" log line.  We'll see the actual
              query (with just the passwords obscured, if any) immediately
              afterwards in the "Prepare" log lines anyway, and then again
              in the "Execute" log line if and when prepare_src is executed.
            */
            lex->contains_plaintext_password= true;
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 2159 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 2166 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 2176 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2183 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 2198 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2210 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2218 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2229 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            /*
              Clear LEX_MASTER_INFO struct. repl_ignore_server_ids is freed
              in THD::cleanup_after_query. So it is guaranteed to be
              uninitialized before here.
	      Its allocation is deferred till the option is parsed below.
            */
            lex->mi.set_unspecified();
            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2242 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 2252 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2256 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.bind_addr = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2260 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2264 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2269 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2273 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2277 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.retry_count= (yyvsp[(3) - (3)].ulong_num);
            Lex->mi.retry_count_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2282 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              Lex_input_stream *lip= YYLIP;
              const char *start= lip->get_tok_start();
              const char *msg= YYTHD->strmake(start, lip->get_ptr() - start);
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       msg, MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2295 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2300 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2304 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2308 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2312 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2316 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2320 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2325 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2329 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2334 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2365 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2370 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.auto_position= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE :
              LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2387 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2401 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2405 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max<ulonglong>(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2421 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2425 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max<ulong>(BIN_LOG_HEADER_SIZE,
                                               Lex->mi.relay_log_pos);
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2437 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_SHARED))
              MYSQL_YYABORT;
            /*
              Instruct open_table() to acquire SHARED lock to check the
              existance of table. If the table does not exist then
              it will be upgraded EXCLUSIVE MDL lock. If table exist
              then open_table() will return with an error or warning.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_FOR_CREATE;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2463 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type=
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE ?
                ha_default_temp_handlerton(thd) : ha_default_handlerton(thd);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2482 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2487 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2491 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2494 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2499 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2503 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2506 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2511 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2515 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2517 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2522 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2529 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2535 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2537 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2541 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2545 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2549 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2560 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2574 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2578 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2582 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2586 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2590 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2595 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2599 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2606 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2626 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2637 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2644 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2650 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2652 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2658 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2664 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2673 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2680 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2688 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2694 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2700 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2706 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2714 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2716 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2723 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2766 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2795 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2810 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2824 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2842 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2843 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2847 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2848 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2854 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2856 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2858 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2860 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2862 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2864 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2866 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2871 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2872 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2873 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2878 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2882 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2889 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), SP_TYPE_PROCEDURE);
          }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2897 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2913 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2917 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2935 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2955 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2996 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 3024 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 3025 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 3026 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 3027 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 3031 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 3036 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 3042 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 3046 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 3072 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 3083 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 3156 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 3172 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3212 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3246 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3255 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3318 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3319 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3325 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3327 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3332 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3355 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3370 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3391 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3392 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3397 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3401 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3414 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3420 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3426 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3435 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3450 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (!pctx)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_condition_value *cond= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if (!cond)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3476 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3481 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3483 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3488 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3496 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3505 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3524 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3526 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3544 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3550 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3552 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3554 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3556 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3558 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3560 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3562 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3564 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3566 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3568 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3570 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3572 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3577 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3593 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3608 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3610 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3615 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3621 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3630 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3636 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3645 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3653 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            /*
              NOTE: lex->sphead is NULL if we're parsing something like
              'GET DIAGNOSTICS v' outside a stored program. We should throw
              ER_SP_UNDECLARED_VAR in such cases.
            */

            if (!sp)
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            (yyval.item)=
              create_item_for_sp_var(
                thd, (yyvsp[(1) - (1)].lex_str), NULL,
                sp->m_parser_data.get_current_stmt_start_ptr(),
                lip->get_tok_start(),
                lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3682 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3691 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3693 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3702 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3707 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3713 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3722 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3730 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3732 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3734 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3736 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3738 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3740 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3742 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3744 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3746 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3748 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3750 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3752 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3754 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3759 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3779 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3802 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3804 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3806 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3827 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3829 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3837 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3847 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3894 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3904 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3950 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3961 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3973 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 4032 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 4082 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 4106 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 4127 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 4132 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 4162 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 4180 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 4200 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 4209 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 4245 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 4264 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 4287 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4298 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4342 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4349 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4356 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4373 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4382 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4423 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4431 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 4440 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 4476 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4484 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4502 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4520 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4539 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4540 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4545 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 4561 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4578 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4589 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4597 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4612 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4648 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4663 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4672 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4710 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4726 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4735 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4776 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4778 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4783 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4785 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4787 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4821 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4823 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 4833 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 4839 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 4862 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4960 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4968 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4976 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4984 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4996 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 5008 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 5013 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 5018 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 5026 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 5034 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 5042 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 5050 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 5058 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 5066 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 5074 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 5087 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 5100 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 5114 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 5119 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 5131 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 5133 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 5183 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 5186 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 5188 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 5203 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 5222 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 5225 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 5226 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 5230 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 5232 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 5233 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 5235 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 5236 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 5241 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 5277 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 5283 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 5301 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 5320 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 5332 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 5341 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 5348 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 5349 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 5351 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 5353 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 5355 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 5357 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 5361 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 5363 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 5368 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 5370 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 5386 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 5387 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 5391 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 5392 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 5397 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 5416 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 5426 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 5437 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 5445 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 5447 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5462 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5464 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5465 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5468 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5473 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5477 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5478 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5483 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5501 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 5516 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5518 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5533 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5549 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5570 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5571 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5576 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5595 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5600 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5609 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5631 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5646 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5648 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5663 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5668 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5689 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5694 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5723 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5734 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5735 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5740 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5751 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5753 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5776 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5777 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5782 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5795 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5815 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5829 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5854 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5855 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5860 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5892 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5897 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5901 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5902 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5906 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5907 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5912 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5914 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5920 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5922 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5924 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5926 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5928 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5930 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5939 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5954 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5958 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5968 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5969 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5973 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5974 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5978 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5979 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5983 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5984 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5988 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5989 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5993 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5994 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5998 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 6002 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 6003 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 6024 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 6029 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 6034 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 6039 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 6044 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 6049 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 6054 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 6059 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 6074 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 6080 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 6095 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 6100 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 6115 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 6121 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 6139 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 6144 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 6149 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 6154 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 6159 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 6164 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 6168 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 6192 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 6197 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 6202 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 6207 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 6209 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 6211 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 6213 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 6219 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 6227 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 6245 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 6262 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                thd->lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 6288 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);
            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 6305 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 6306 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 6307 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 6308 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 6309 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 6310 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 6314 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 6315 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 6316 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 6320 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 6325 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 6326 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 6327 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 6328 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 6334 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 6352 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 6359 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 6365 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 6371 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 6377 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 6382 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 6401 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 6416 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 6417 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 6421 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 6426 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 6435 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 6448 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 6449 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 6450 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 6452 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 6457 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 6461 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 6466 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 6471 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 6475 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 6480 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 6485 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 6491 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 6496 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 6502 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 6506 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 6511 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 6516 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 6534 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6536 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6538 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 6554 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6556 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6561 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6566 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6578 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6583 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6588 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6593 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 6595 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6597 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6599 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6601 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6603 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6605 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6607 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6609 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6611 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6613 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6615 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6617 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6619 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6627 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6628 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6630 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6634 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6635 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6636 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6637 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6638 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6642 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6646 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6647 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6651 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6652 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6656 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6657 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6658 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6659 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6660 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6664 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6665 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6666 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6667 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6668 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6673 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6678 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6680 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6685 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6687 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6689 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6694 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6703 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->dec= (char *) 0; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6704 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6708 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6709 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6711 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6718 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6719 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6723 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6724 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6728 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6729 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6730 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6734 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6735 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6736 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6737 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6740 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6741 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6745 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6746 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6750 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6751 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6755 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6760 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6761 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6762 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6763 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6764 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6766 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6772 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6778 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6784 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6789 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6791 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6804 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6810 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6816 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6822 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6827 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6832 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6841 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6862 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6871 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6875 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6876 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6881 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6888 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6892 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6893 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6897 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6898 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6903 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6911 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6915 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6916 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6921 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6928 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6929 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6933 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6934 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6938 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6939 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6944 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6946 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6950 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6957 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6966 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6971 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6978 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6981 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6982 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6984 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6989 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6996 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6997 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 7002 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 7010 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 7014 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 7015 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 7019 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 7022 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 7023 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 7024 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 7025 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 7030 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 7038 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 7044 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 7045 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 7050 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 7059 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 7060 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 7064 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 7065 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 7079 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 7086 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 7092 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 7099 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 7111 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 7113 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 7115 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 7117 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 7122 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 7128 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 7134 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 7141 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 7148 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 7156 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 7157 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 7158 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 7159 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 7160 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 7164 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 7168 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 7169 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 7173 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 7174 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 7178 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 7183 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 7184 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 7185 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 7189 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 7190 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 7194 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 7199 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 7211 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 7228 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 7233 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 7238 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 7258 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 7259 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 7264 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 7265 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 7280 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 7292 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 7293 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 7294 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 7298 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 7299 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 7304 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 7310 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 7323 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 7324 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 7328 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 7329 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 7333 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 7334 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 7342 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_sql_cmd);
            if (lex->ignore)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                  ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                  "IGNORE");
            }
          }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 7375 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 7387 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 7392 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 7401 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 7412 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 7423 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 7430 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 7441 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 7448 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 7459 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 7466 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 7478 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 7480 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 7500 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 7513 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 7518 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 7523 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 7528 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 7533 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 7540 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 7547 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 7552 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 7559 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 7560 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 7561 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 7562 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 7566 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 7568 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 7579 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7580 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 7584 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7585 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7591 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7599 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7621 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7626 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7633 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7647 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7659 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7672 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7685 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7692 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7705 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7732 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7739 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7747 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7759 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7765 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7770 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7777 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7792 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7796 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7800 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7807 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7808 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7813 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7833 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7842 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7846 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7851 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7856 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7862 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7866 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7875 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7887 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7891 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7900 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7909 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7918 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7927 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7933 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7939 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7948 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7957 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7985 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 8006 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 8016 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 8020 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 8037 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 8042 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 8053 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 8058 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 8068 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 8069 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 8073 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 8074 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 8078 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 8079 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 8080 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 8084 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 8086 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 8091 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 8098 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 8099 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 8100 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 8101 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 8106 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            /* Clean previous slave connection values */
            lex->slave_connection.reset();
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            lex->mi.set_unspecified();
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 8118 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              It is not possible to set user's information when
              one is trying to start the SQL Thread.
            */
            if ((Lex->slave_thd_opt & SLAVE_SQL) == SLAVE_SQL &&
                (Lex->slave_thd_opt & SLAVE_IO) != SLAVE_IO &&
                (Lex->slave_connection.user ||
                 Lex->slave_connection.password ||
                 Lex->slave_connection.plugin_auth ||
                 Lex->slave_connection.plugin_dir))
            {
              my_error(ER_SQLTHREAD_WITH_SECURE_SLAVE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 8135 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 8145 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 8161 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 8165 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 8172 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 8176 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 8183 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 8187 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 8191 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 8202 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 8206 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->slave_connection.user= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 8212 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 8216 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->slave_connection.password= (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 8222 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 8226 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_auth= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 8232 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 8236 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_dir= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 8243 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 8247 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 8254 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 8258 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 8265 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_SQL;
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 8269 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_IO;
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 8275 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 8277 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                lex->mi.gtid) ||
               ((lex->mi.relay_log_name || lex->mi.relay_log_pos) &&
                lex->mi.gtid) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos) ||
                  lex->mi.gtid ||
                  lex->mi.until_after_gaps) ||
                /* SQL_AFTER_MTS_GAPS is meaningless in combination */
                /* with any other coordinates related options       */
                ((lex->mi.log_file_name || lex->mi.pos || lex->mi.relay_log_name
                  || lex->mi.relay_log_pos || lex->mi.gtid)
                 && lex->mi.until_after_gaps))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 8304 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_BEFORE_GTIDS;
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 8309 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_AFTER_GTIDS;
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 8314 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->mi.until_after_gaps= true;
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 8321 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 8328 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 8332 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 8333 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 8334 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 8339 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 8349 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 8360 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 8361 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 8365 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 8366 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 8370 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 8371 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 8372 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 8377 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 8387 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 8399 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 8407 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 8422 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 8433 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 8434 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 8438 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 8439 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 8443 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 8444 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 8445 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 8446 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 8447 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 8448 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 8453 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 8463 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 8474 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 8475 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 8476 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 8481 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 8485 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 8487 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 8494 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 8499 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 8512 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 8525 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 8529 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 8548 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 8558 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 8567 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 8568 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 8573 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 8579 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 8594 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 8604 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 8614 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 8621 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 8632 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 8638 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 8639 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 8649 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 8663 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 8673 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8682 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8701 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8709 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8716 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8726 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8741 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8758 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8786 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->thd->infinidb_vtable.override_largeside_estimate=1;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8790 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8822 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8828 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8840 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8855 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8862 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8886 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8892 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8898 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8899 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8900 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8901 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8902 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8906 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8907 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8913 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8964 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8971 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 9014 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 9020 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 9026 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 9032 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 9038 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 9044 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 9050 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 9060 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 9066 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 9072 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 9078 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 9084 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 9094 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 9100 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 9110 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 9116 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 9124 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 9130 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 9140 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 9146 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 9155 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 9165 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 9171 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 9181 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 9187 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 9200 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 9206 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 9212 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 9218 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 9224 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 9230 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 9236 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 9242 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 9248 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 9254 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 9260 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 9266 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 9272 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 9278 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 9307 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 9308 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 9309 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 9310 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 9311 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 9312 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 9316 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 9317 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 9328 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 9344 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 9350 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 9354 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 9360 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 9366 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 9372 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 9378 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 9380 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 9387 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 9394 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 9400 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 9441 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 9450 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 9457 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 9465 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 9471 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 9478 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 9484 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 9498 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 9506 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 9521 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 9527 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 9533 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 9541 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 9547 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 9553 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 9559 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 9565 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 9580 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 9592 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 9598 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 9604 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 9610 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 9616 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 9622 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 9628 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 9634 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 9640 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 9646 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 9652 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 9658 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 9664 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 9670 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 9676 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 9682 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 9688 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 9696 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9717 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9724 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9730 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9737 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9745 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9752 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9758 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9764 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9770 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9775 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9781 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9788 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9794 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9800 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9806 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9812 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9818 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9836 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9842 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9848 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9855 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9862 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9877 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9883 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9889 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9895 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9901 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9908 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9914 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9920 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9926 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9932 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9938 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9945 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9958 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9964 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9970 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9976 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9982 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9990 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9996 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 10008 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 10014 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 10020 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 10028 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 10038 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 10044 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 10060 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_mbr_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 10066 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 10073 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 10080 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 10087 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 10094 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 10101 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 10105 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 10118 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_window_func *builder;
            Item *item= NULL;

            builder= find_native_window_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              ((Create_window_func*)builder)->respectNulls = 1;
              item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].item_list));
              if (!item)
                MYSQL_YYABORT;
              ((Item_func_window*)item)->window_ctx((yyvsp[(5) - (5)].Window_context));
              (yyval.item) = item;
            }
            else
            {
              LEX_STRING args[1];
              args[0] = (yyvsp[(1) - (5)].lex_str);
              IDB_set_error(YYTHD, logging::ERR_WF_FUNCTION_NOT_EXISTS, args, 1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 10143 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_window_func *builder = NULL;
            Item *item= NULL;

            builder= find_native_window_function_builder_nulls(thd, (yyvsp[(1) - (6)].lex_str));
            if (builder)
            {
              ((Create_window_func*)builder)->respectNulls = (yyvsp[(5) - (6)].num);
              item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].item_list));
              if (!item)
                MYSQL_YYABORT;
              ((Item_func_window*)item)->window_ctx((yyvsp[(6) - (6)].Window_context));
              (yyval.item) = item;
            }
            else
            {
              builder= find_native_window_function_builder(thd, (yyvsp[(1) - (6)].lex_str));
              if (builder)
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
              }
              else
              {
                LEX_STRING args[1];
                args[0] = (yyvsp[(1) - (6)].lex_str);
                IDB_set_error(YYTHD, logging::ERR_WF_FUNCTION_NOT_EXISTS, args, 1);
                MYSQL_YYABORT;
              }
              MYSQL_YYABORT;
            }
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 10179 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
              LEX_STRING funcname= { C_STRING_WITH_LEN("SUM") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_sum(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 10187 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
              // order by clause is not allowed for distinct
              if ((yyvsp[(6) - (6)].Window_context)->ordering)
              {
                IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
                MYSQL_YYABORT;
              }
              LEX_STRING funcname= { C_STRING_WITH_LEN("SUM_DISTINCT") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_sum(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 10201 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
              LEX_STRING funcname= { C_STRING_WITH_LEN("AVG") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_avg(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 10209 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
              // order by clause is not allowed for distinct
              if ((yyvsp[(6) - (6)].Window_context)->ordering)
              {
                IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
                MYSQL_YYABORT;
              }
              LEX_STRING funcname= { C_STRING_WITH_LEN("AVG_DISTINCT") };
              (yyval.item)= new (YYTHD->mem_root) Item_func_window_avg(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
              Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 10223 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT(*)") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, (yyvsp[(6) - (6)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 10231 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 10239 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item* item = NULL;
            LEX_STRING funcname= { C_STRING_WITH_LEN("COUNT_DISTINCT") };
            if ((yyvsp[(4) - (6)].item_list))
            {
              List_iterator_fast<Item> it(*(yyvsp[(4) - (6)].item_list));
              item = it++;
              if ((yyvsp[(4) - (6)].item_list)->elements != 1 || !item)
              {
                LEX_STRING args[1];
                args[0] = funcname;
                IDB_set_error(YYTHD, logging::ERR_WF_WRONG_ARGS, args, 1);
                MYSQL_YYABORT;
              }
            }

            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_int(funcname, item, (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 10267 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("MIN") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_hybrid(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 10275 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            LEX_STRING funcname= { C_STRING_WITH_LEN("MIN_DISTINCT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_hybrid(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 10289 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("MAX") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_hybrid(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 10297 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            // order by clause is not allowed for distinct
            if ((yyvsp[(6) - (6)].Window_context)->ordering)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_ORDER_BY_DISTINCT, NULL, 0);
              MYSQL_YYABORT;
            }
            LEX_STRING funcname= { C_STRING_WITH_LEN("MAX_DISTINCT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_hybrid(funcname, (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].Window_context), true);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 10311 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("VAR_POP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 10319 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("VAR_SAMP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 10327 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("STDDEV_POP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 10335 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("STDDEV_SAMP") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_stats(funcname, (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Select->in_sum_expr--; // not really aggregate
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 10344 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("NTH_VALUE") };
            Create_window_func *builder = & Create_window_func_nth_value::s_singleton;
            DBUG_ASSERT(builder);
            ((Create_window_func_nth_value*)builder)->fromFirst = (yyvsp[(5) - (7)].num);
            ((Create_window_func_nth_value*)builder)->respectNulls = (yyvsp[(6) - (7)].num);
            (yyval.item) = builder->create(YYTHD, funcname, (yyvsp[(3) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            ((Item_func_window*)(yyval.item))->window_ctx((yyvsp[(7) - (7)].Window_context));
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 10357 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("PERCENTILE_CONT") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_percentile(funcname, (yyvsp[(3) - (12)].item), (yyvsp[(10) - (12)].list), (yyvsp[(12) - (12)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 10365 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING funcname= { C_STRING_WITH_LEN("PERCENTILE_DISC") };
            (yyval.item)= new (YYTHD->mem_root) Item_func_window_percentile(funcname, (yyvsp[(3) - (12)].item), (yyvsp[(10) - (12)].list), (yyvsp[(12) - (12)].Window_context));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 10374 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 10375 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 10376 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 10379 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 10380 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 10383 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 10384 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 10388 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Select->parsing_place == IN_ON)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, idb_on_clause_err_str);
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_WHERE)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, idb_where_clause_err_str);
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_HAVING)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, idb_having_clause_err_str);
              MYSQL_YYABORT;
            }
            if (Select->parsing_place == IN_GROUP_BY)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_NOT_ALLOWED, idb_group_by_clause_err_str);
              MYSQL_YYABORT;
            }
            (yyval.Window_context) = new Window_context();
            (yyval.Window_context)->setPartitions((yyvsp[(3) - (5)].item_list));
            (yyval.Window_context)->setOrders((yyvsp[(4) - (5)].ordering));
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 10415 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item_list) = 0; }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 10416 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item_list) = (yyvsp[(3) - (3)].item_list); }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 10420 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ordering) = 0; }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 10422 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            IDB_set_error(YYTHD, logging::ERR_WF_WINDOW_WITHOUT_ORDER, NULL, 0);
            MYSQL_YYABORT;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 10427 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
            If RANGE is specified, order list shall contain a single <sort key> SK.
            The declared type of SK shall be numeric, date, or interval. The declared type of UVS shall be
            numeric if the declared type of SK is numeric -- reference ANSI-SQL 2003
            */
            if ((yyvsp[(3) - (4)].list) && (yyvsp[(3) - (4)].list)->elements > 1 && (yyvsp[(4) - (4)].frame) && (yyvsp[(4) - (4)].frame)->isRange &&
                (((yyvsp[(4) - (4)].frame)->start && (yyvsp[(4) - (4)].frame)->start->bound == PRECEDING) ||
                ((yyvsp[(4) - (4)].frame)->end && (yyvsp[(4) - (4)].frame)->end->bound == FOLLOWING)))
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_ORDER_KEY, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.ordering) = new Ordering();
            (yyval.ordering)->orders = (yyvsp[(3) - (4)].list);
            (yyval.ordering)->frame = (yyvsp[(4) - (4)].frame);
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 10448 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_to_list(YYTHD, *(yyvsp[(1) - (5)].list), (yyvsp[(3) - (5)].item),(bool) (yyvsp[(4) - (5)].num), (uint)(yyvsp[(5) - (5)].num)))
              MYSQL_YYABORT;
            (yyval.list) = (yyvsp[(1) - (5)].list);
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 10454 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.list) = new SQL_I_List<ORDER>();
            (yyval.list)->elements= 0;
            (yyval.list)->first= 0;
            (yyval.list)->next= &((yyval.list)->first);
            if ((yyval.list) == NULL)
              MYSQL_YYABORT;
            if (add_to_list(YYTHD, *(yyval.list), (yyvsp[(1) - (3)].item), (bool) (yyvsp[(2) - (3)].num), (uint) (yyvsp[(3) - (3)].num)))
              MYSQL_YYABORT;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 10467 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 2; }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 10468 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 10469 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 10473 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.frame)= 0; }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 10474 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.frame)= (yyvsp[(1) - (1)].frame); }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 10479 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (5)].boundary)->bound == UNBOUNDED_FOLLOWING || (yyvsp[(5) - (5)].boundary)->bound == UNBOUNDED_PRECEDING ||
                ((yyvsp[(3) - (5)].boundary)->bound == CURRENT_ROW && (yyvsp[(5) - (5)].boundary)->bound == PRECEDING) ||
                ((yyvsp[(3) - (5)].boundary)->bound == FOLLOWING && (yyvsp[(5) - (5)].boundary)->bound == PRECEDING) ||
                ((yyvsp[(3) - (5)].boundary)->bound == FOLLOWING && (yyvsp[(5) - (5)].boundary)->bound == CURRENT_ROW))
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_WINDOW, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.frame) = new Frame();
            (yyval.frame)->start = (yyvsp[(3) - (5)].boundary);
            (yyval.frame)->end = (yyvsp[(5) - (5)].boundary);
            (yyval.frame)->isRange = (yyvsp[(1) - (5)].num);
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 10494 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(2) - (2)].boundary)->bound == FOLLOWING || (yyvsp[(2) - (2)].boundary)->bound == UNBOUNDED_FOLLOWING)
            {
              IDB_set_error(YYTHD, logging::ERR_WF_INVALID_WINDOW, NULL, 0);
              MYSQL_YYABORT;
            }
            (yyval.frame) = new Frame();
            (yyval.frame)->start = (yyvsp[(2) - (2)].boundary);
            (yyval.frame)->isRange = (yyvsp[(1) - (2)].num);
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 10506 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 10507 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 10512 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = ((yyvsp[(2) - (2)].bound) == PRECEDING? UNBOUNDED_PRECEDING : UNBOUNDED_FOLLOWING);
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 10517 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = CURRENT_ROW;
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 10522 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = (yyvsp[(2) - (2)].bound);
            (yyval.boundary)->item = (yyvsp[(1) - (2)].item);
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 10528 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            // @todo interval range support
            (yyval.boundary) = new Boundary();
            (yyval.boundary)->bound = (yyvsp[(4) - (4)].bound);
            (yyval.boundary)->item = new (YYTHD->mem_root) Item_interval((yyvsp[(2) - (4)].item), (yyvsp[(3) - (4)].interval));
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 10537 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.bound)= PRECEDING; }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 10538 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.bound)= FOLLOWING; }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 10556 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (4)].lex_str).str, (yyvsp[(1) - (4)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            //$<udf>$= udf;
#endif
         // }
         // opt_udf_expr_list ')'
         // {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (4)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (4)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              //udf_func *udf= $<udf>3;

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(3) - (4)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 10629 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 10669 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 10671 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 10675 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 10676 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 10680 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 10681 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 10685 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 10686 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 10691 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 10698 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 10706 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 10732 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 10738 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 10744 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 10750 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 10756 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 10762 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 10771 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 10792 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 10798 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 10809 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 10815 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 10821 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 10827 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 10833 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 10839 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 10845 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 10851 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10857 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 10863 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10867 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10883 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10891 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 10898 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item=
              new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10909 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10917 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10932 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10933 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10938 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10943 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10949 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10966 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10968 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10973 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10982 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10990 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10992 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10994 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10996 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10998 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 11000 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 11002 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 11004 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 11006 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 11008 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 11010 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 11014 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 11015 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 11020 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 11027 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 11035 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 11044 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item_list)= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 11051 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 11052 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 11057 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 11064 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 11071 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 11072 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 11076 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 11077 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 11082 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 11090 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 11100 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 11102 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 11110 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 11121 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 11122 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 11128 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 11130 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 11150 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 11152 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 11155 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 11163 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 11170 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 11178 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 11186 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 11190 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 11192 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 11200 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 11208 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 11216 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 11220 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 11226 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 11236 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 11244 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 11253 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 11257 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 11264 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 11274 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 11275 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 11276 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 11284 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 11290 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 11304 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 11309 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 11320 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 11360 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 11433 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 11443 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 11448 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 11456 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 11468 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 11487 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 11495 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 11504 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 11510 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 11526 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 11543 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 11550 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 11555 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 11580 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 11581 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 11586 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 11589 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 11590 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 11591 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 11595 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 11596 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 11601 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 11606 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 11619 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 11623 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 11628 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 11629 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 11634 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 11636 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 11646 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 11657 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 11669 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 11670 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 11671 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 11672 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 11673 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 11674 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 11675 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 11676 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 11677 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 11678 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 11679 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 11680 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 11684 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 11685 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 11686 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 11687 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 11688 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 11689 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 11690 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 11691 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 11692 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 11696 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 11697 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 11698 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 11699 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 11709 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 11711 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 11724 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 11726 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 11730 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11742 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 11746 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11757 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11762 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 11780 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_GROUP_BY;
          }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 11788 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 11790 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11794 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 11796 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11816 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            if (lex->current_select->options & SELECT_DISTINCT)
            {
              // DISTINCT+ROLLUP does not work
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP", "DISTINCT");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 11856 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 11875 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 11910 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 11912 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 11916 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 11917 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 11918 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 11923 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 11929 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 11933 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 11934 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 11939 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11946 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 11953 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 11960 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 11970 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11997 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 12001 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 12007 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 12013 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 12022 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 12027 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 12036 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 12037 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 12038 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 12039 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 12040 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 12041 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 12045 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 12046 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 12047 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 12048 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 12049 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 12053 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 12054 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 12055 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 12056 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 12057 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 12061 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 12062 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 12063 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 12064 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 12069 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 12080 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(ME_FATALERROR));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 12113 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 12115 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 12119 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 12127 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 12139 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 12145 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 12150 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 12155 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 12174 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 12213 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 12225 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 12233 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 12236 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 12248 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 12259 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 12265 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 12276 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 12285 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 12286 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 12287 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 12302 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 12304 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 12311 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 12332 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 12353 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 12365 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 12369 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 12377 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 12379 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 12385 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 12392 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 12397 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 12402 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 12417 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 12428 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 12446 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 12456 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 12457 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 12461 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 12462 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 12485 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 12493 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 12498 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 12503 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 12510 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 12515 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 12520 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 12532 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 12534 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 12546 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 12550 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 12552 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 12567 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 12568 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 12573 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 12581 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 12582 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 12583 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 12585 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 12595 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 12596 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 12600 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 12601 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 12603 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 12604 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 12606 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 12607 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 12622 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 12631 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 12632 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 12636 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 12637 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 12642 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 12647 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 12655 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 12661 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 12666 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 12673 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 12675 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 12684 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 12692 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 12700 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 12718 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 12728 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 12741 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 12750 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 12751 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 12758 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 12773 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 12784 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 12786 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 12792 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 12797 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 12803 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 12816 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 12829 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 12844 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 12845 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 12849 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 12850 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 12854 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 12855 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12856 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 12861 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12872 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 12897 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 12901 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 12905 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 12909 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 12913 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 12917 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 12921 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 12925 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 12929 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 12936 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12940 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12949 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12957 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12964 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 12971 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 12979 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 12987 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 12995 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 13003 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 13011 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 13018 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 13020 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 13022 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 13031 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 13035 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 13039 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 13044 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 13049 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 13058 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 13065 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 13070 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 13072 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 13074 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 13076 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 13078 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 13086 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 13097 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 13105 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 13107 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 13115 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 13122 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 13129 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 13139 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 13146 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 13152 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 13161 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 13169 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 13173 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 13177 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 13184 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 13191 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 13197 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 13204 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 13211 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 13216 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 13221 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 13229 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 13231 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 13233 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 13247 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 13248 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 13252 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 13253 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 13262 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 13263 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 13267 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 13268 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 13274 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 13281 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 13291 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 13302 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 13306 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 13308 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 13326 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 13331 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_EXTENDED;
          }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 13337 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_PARTITIONS;
          }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 13343 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
            {
              if ((Lex->explain_format= new Explain_format_JSON) == NULL)
                MYSQL_YYABORT;
              Lex->describe|= DESCRIBE_EXTENDED | DESCRIBE_PARTITIONS;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
            {
              if ((Lex->explain_format= new Explain_format_traditional) == NULL)
                MYSQL_YYABORT;
            }
            else
            {
              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 13364 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 13365 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 13367 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 13381 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 13388 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 13393 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 13402 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 13403 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 13408 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 13410 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 13421 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 13429 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 13444 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 13449 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 13451 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 13453 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 13455 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 13457 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 13459 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 13461 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 13463 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 13465 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 13467 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 13469 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 13471 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 13473 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 13477 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 13478 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 13483 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 13488 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 13497 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 13498 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 13499 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 13500 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 13504 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 13505 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 13510 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 13516 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 13525 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 13529 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 13541 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 13550 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 13551 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 13552 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 13559 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 13570 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 13582 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 13592 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 13602 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 13606 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 13610 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 13611 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 13615 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 13616 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 13620 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 13622 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 13633 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 13637 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 13638 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 13639 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 13654 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 13659 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 13666 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 13671 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 13689 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 13694 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 13701 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 13703 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 13708 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 13715 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 13717 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 13721 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 13722 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 13723 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 13728 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 13730 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 13734 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 13736 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 13744 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 13745 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 13755 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint length= (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string));
            String *val= new (YYTHD->mem_root) String((yyvsp[(3) - (5)].simple_string),
                                                      length,
                                                      YYTHD->charset());
            if (val == NULL)
              MYSQL_YYABORT;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) ||
                lex->value_list.push_back((yyvsp[(4) - (5)].item)) ||
                lex->load_set_str_list.push_back(val))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), length, YYTHD->charset());
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 13775 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 13799 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13811 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13822 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13841 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13849 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13861 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13876 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13896 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13897 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13899 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13907 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13908 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13909 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13911 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13918 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13924 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13930 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13936 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13942 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13971 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 14002 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 14012 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 14022 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 14028 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 14037 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 14049 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 14055 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 14061 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 14076 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 14077 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 14082 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 14091 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 14106 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 14111 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 14161 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 14166 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 14183 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 14188 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_trg_table_fields.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 14268 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 14293 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 14323 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 14325 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 14341 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 14350 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 14355 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 14361 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 14367 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 14377 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 14383 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 14392 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 14401 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 14403 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              const CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 14433 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!strcont((yyvsp[(1) - (1)].lex_str).str, "\n"))
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              my_error(ER_WRONG_VALUE, MYF(0), "argument contains not-allowed LF", (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 14446 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 14462 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 14478 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 14494 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 14496 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 14506 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 14508 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 14518 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 14519 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 14520 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 14525 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 14552 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);
            trim_whitespace(system_charset_info, &(yyval.lex_user)->host);
          }
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 14585 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 14599 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 14600 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 14601 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 14602 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 14603 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 14604 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 14605 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 14606 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 14607 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 14608 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 14609 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 14610 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 14611 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 14612 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 14613 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 14614 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 14615 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 14616 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 14617 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 14618 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 14619 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 14620 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 14621 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 14622 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 14623 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 14624 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 14625 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 14626 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 14627 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 14628 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 14629 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 14630 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 14631 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 14632 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 14633 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 14634 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 14635 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 14636 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 14637 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 14638 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 14639 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 14640 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 14641 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 14642 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 14643 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 14644 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 14645 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 14646 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 14647 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 14648 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 14658 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 14659 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 14660 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 14661 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 14662 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 14663 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 14664 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 14665 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 14666 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 14667 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 14668 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 14669 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 14670 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 14671 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 14672 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 14673 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 14674 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 14675 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 14676 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 14677 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 14678 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 14679 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 14680 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 14681 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 14682 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 14683 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 14684 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 14685 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 14686 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 14687 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 14688 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 14689 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 14690 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 14691 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 14692 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 14693 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 14694 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 14695 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 14696 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 14697 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 14698 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 14699 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 14700 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 14701 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 14702 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 14707 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 14708 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 14709 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 14710 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 14711 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 14712 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 14713 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 14714 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 14715 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 14716 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 14717 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 14718 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 14719 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 14720 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 14721 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 14722 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 14723 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 14724 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 14725 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 14726 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 14727 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 14728 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 14729 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 14730 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 14731 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 14732 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 14733 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 14734 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 14735 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 14736 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 14737 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 14738 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 14739 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 14740 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 14741 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 14742 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 14743 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 14744 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 14745 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 14746 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 14747 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 14748 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 14749 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 14750 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 14751 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 14752 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 14753 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 14754 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 14755 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 14756 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 14757 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 14758 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 14759 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 14760 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 14761 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 14762 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 14763 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 14764 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 14765 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 14766 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 14767 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 14768 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 14769 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 14770 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 14771 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 14772 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 14773 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 14774 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 14775 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 14776 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 14777 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 14778 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 14779 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 14780 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 14781 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 14782 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 14783 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 14784 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 14785 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 14786 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 14787 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 14788 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 14789 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 14790 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14791 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14792 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14793 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14794 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14795 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14796 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14797 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14798 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14799 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14800 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14801 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14802 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14803 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14804 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14805 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14806 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14807 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14808 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14809 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14810 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14811 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14812 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14813 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14814 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14815 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14816 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14817 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14818 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14819 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14820 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14821 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14822 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14823 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14824 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14825 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14826 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14827 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14828 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14829 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14830 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14831 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14832 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14833 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14834 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14835 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14836 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14837 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14838 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14839 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14840 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14841 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14842 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14843 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14844 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14845 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14846 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14847 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14848 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14849 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14850 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14851 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14852 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14853 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14854 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14855 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14856 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14857 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14858 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14859 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14860 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14861 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14862 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14863 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14864 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14865 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14866 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14867 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14868 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14869 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14870 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14871 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14872 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14873 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14874 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14875 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14876 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14877 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14878 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14879 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14880 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14881 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14882 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14883 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14884 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14885 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14886 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14887 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14888 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14889 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14890 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14891 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14892 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14893 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14894 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14895 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14896 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14897 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14898 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14899 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14900 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14901 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14902 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14903 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14904 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14905 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14906 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14907 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14908 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14909 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14910 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14911 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14912 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14913 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14914 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14915 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14916 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14917 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14918 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14919 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14920 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14921 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14922 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14923 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14924 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14925 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14926 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14927 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14928 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14929 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14930 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14931 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14932 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14933 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14934 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14935 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14936 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14937 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14938 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14939 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14940 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14941 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14942 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14943 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14944 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14945 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14946 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14947 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14948 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14949 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14950 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14951 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14952 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14953 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14954 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14955 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14956 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14957 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14958 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14959 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14960 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14961 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14962 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14963 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14975 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14987 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14994 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 15000 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 15004 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 15009 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 15019 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 15025 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 15039 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 15043 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 15048 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 15052 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 15061 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 15069 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 15070 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 15071 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 15075 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 15076 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 15077 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 15078 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 15082 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 15083 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 15084 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 15085 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 15091 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 15116 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 15123 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
              /* We're not parsing SP and this is a system variable. */

              if (set_system_variable(thd, &(yyvsp[(1) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 15216 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item), false);
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 15227 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 15240 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 15256 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 15269 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 15291 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 15326 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            /*
              'is_change_password' should be set if the user is setting his
              own password. This is later used to determine if the password
              expiration flag should be reset.
              Either the user exactly matches the currently authroized user or
              the CURRENT_USER keyword was used.

              If CURRENT_USER was used for the <user> rule then
              user->user.str=0. See rule below:
              
              user:
                 [..]
              | CURRENT_USER optional_braces
                {
                 [..]
                  memset($$, 0, sizeof(LEX_USER));
                }
            */
            if (user->user.str ||
                match_authorized_user(&current_thd->main_security_ctx,
                                      user))
              lex->is_change_password= TRUE;
            else
              lex->is_change_password= FALSE;
          }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 15368 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 15396 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 15442 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 15463 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 15481 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 15498 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 15499 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 15503 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 15504 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 15505 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 15506 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 15510 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 15512 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 15530 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 15542 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 15543 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 15545 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 15551 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 15557 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 15568 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 15579 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 15594 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 15606 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 15607 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 15609 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 15613 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 15618 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 15629 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 15638 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 15654 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 15670 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 15688 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read((yyvsp[(5) - (7)].ha_read_mode),
                                  lex->ident.str, lex->insert_list,
                                  thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 15708 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 15709 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 15713 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 15714 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 15718 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 15719 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 15720 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 15721 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 15723 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 15730 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 15736 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 15737 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 15738 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 15739 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 15740 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 15746 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_REVOKE; }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 15747 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 15752 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 15757 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 15767 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 15777 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 15781 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 15789 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_GRANT; }
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 15790 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 15796 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 15802 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 15813 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 15823 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 15837 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->grant == GLOBAL_ACLS &&
                lex->sql_command == SQLCOM_REVOKE)
              lex->sql_command= SQLCOM_REVOKE_ALL;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 15844 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 15862 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 15863 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 15865 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 15866 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 15868 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 15869 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 15871 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 15872 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 15873 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 15874 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 15875 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 15876 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 15877 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 15878 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 15879 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 15880 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 15881 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 15882 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 15883 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 15884 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 15885 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 15886 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 15887 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 15888 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 15889 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 15890 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 15891 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 15892 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 15893 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 15894 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 15895 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 15896 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 15897 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 15898 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 15902 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 15903 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 15913 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 15923 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 15933 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 15946 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 15961 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 15974 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 15987 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 15999 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 16004 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 16012 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 16017 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 16025 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            check_password_policy(password);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 16043 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
            if (!strcmp((yyvsp[(5) - (5)].lex_str).str, ""))
            {
              String *password= new (YYTHD->mem_root) String ((const char *)"",
                                     YYTHD->variables.character_set_client);
              check_password_policy(password);
            }
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 16063 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 16075 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 16088 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 16096 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 16110 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 16139 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 16143 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 16147 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 16151 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 16157 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 16162 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 16163 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 16167 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 16168 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 16172 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 16174 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 16180 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 16186 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 16192 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 16201 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 16206 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 16210 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 16211 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 16216 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 16217 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 16218 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 16223 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 16224 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 16225 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 16229 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 16230 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 16235 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 16247 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 16257 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 16266 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 16275 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 16288 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 16294 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 16299 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 16309 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 16310 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 16311 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 16315 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 16316 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 16320 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 16336 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 16349 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 16350 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 16351 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 16356 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 16360 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 16369 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 16375 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 16384 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 16390 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 16411 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 16439 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 16441 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 16448 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 16449 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 16450 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 16452 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 16458 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 16463 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 16474 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 16476 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 16478 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 16511 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 16525 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 16538 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 16540 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 16542 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 16547 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 16552 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 16554 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 16556 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 16561 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 16563 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 16565 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 16570 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 16587 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 16593 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 16598 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 16605 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 16614 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 16631 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 16652 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2678:

/* Line 1455 of yacc.c  */
#line 16661 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 16665 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 16672 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 16674 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 16676 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 16678 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2684:

/* Line 1455 of yacc.c  */
#line 16695 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2685:

/* Line 1455 of yacc.c  */
#line 16701 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2686:

/* Line 1455 of yacc.c  */
#line 16706 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2687:

/* Line 1455 of yacc.c  */
#line 16736 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2688:

/* Line 1455 of yacc.c  */
#line 16771 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2689:

/* Line 1455 of yacc.c  */
#line 16789 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 16812 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 16844 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 16849 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 16857 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 16880 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 16888 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2696:

/* Line 1455 of yacc.c  */
#line 16946 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2697:

/* Line 1455 of yacc.c  */
#line 16966 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2698:

/* Line 1455 of yacc.c  */
#line 16979 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2699:

/* Line 1455 of yacc.c  */
#line 16989 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2700:

/* Line 1455 of yacc.c  */
#line 16997 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2701:

/* Line 1455 of yacc.c  */
#line 17011 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2702:

/* Line 1455 of yacc.c  */
#line 17015 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2703:

/* Line 1455 of yacc.c  */
#line 17019 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2704:

/* Line 1455 of yacc.c  */
#line 17023 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2705:

/* Line 1455 of yacc.c  */
#line 17027 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2706:

/* Line 1455 of yacc.c  */
#line 17031 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2707:

/* Line 1455 of yacc.c  */
#line 17038 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2708:

/* Line 1455 of yacc.c  */
#line 17045 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2709:

/* Line 1455 of yacc.c  */
#line 17052 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2710:

/* Line 1455 of yacc.c  */
#line 17061 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2711:

/* Line 1455 of yacc.c  */
#line 17062 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2712:

/* Line 1455 of yacc.c  */
#line 17066 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2713:

/* Line 1455 of yacc.c  */
#line 17067 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2714:

/* Line 1455 of yacc.c  */
#line 17068 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2715:

/* Line 1455 of yacc.c  */
#line 17072 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2716:

/* Line 1455 of yacc.c  */
#line 17073 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2717:

/* Line 1455 of yacc.c  */
#line 17078 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2718:

/* Line 1455 of yacc.c  */
#line 17080 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2720:

/* Line 1455 of yacc.c  */
#line 17085 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {}
    break;

  case 2721:

/* Line 1455 of yacc.c  */
#line 17086 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2722:

/* Line 1455 of yacc.c  */
#line 17091 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2723:

/* Line 1455 of yacc.c  */
#line 17101 "/home/rdempsey/github/mysql/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1455 of yacc.c  */
#line 43099 "/home/rdempsey/github/mysql-obj/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



